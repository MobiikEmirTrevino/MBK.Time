 
 
// <Template>
//   <SolutionTemplate>EF POCO 1</SolutionTemplate>
//   <Version>20141020.00</Version>
//   <Update>contextRequest en guardado de objetos relacionados integrados</Update>
// </Template>
#region using
using System;
using System.Collections.Generic;
using System.Text;
using SFSdotNet.Framework.BR;
using System.Linq.Dynamic;
using System.Collections;
using System.Linq;
using LinqKit;
using SFSdotNet.Framework.Entities;
using SFSdotNet.Framework.Linq;
using System.Linq.Expressions;
using System.Data;
using SFSdotNet.Framework;
using SFSdotNet.Framework.Data.Entity;
using SFSdotNet.Framework.My;
using System.Data.EntityClient;
using System.Data.Objects.DataClasses;
using System.Data.Objects;
using EFPocoAdapter;
using MBK.Time.BusinessObjects;
//using MBK.Time.BusinessObjects.EFPocoAdapter;
//using EFPocoAdapter;
using MBK.Time.BusinessObjects.PocoAdapters;
#endregion
namespace MBK.Time.BR
{
public class SinglentonContext
    {
        private static EFPocoContext context = null;
        public static EFPocoContext Instance {
            get {
               if (context == null)
                    context = new EFPocoContext();
                return context;
            }
        }
        /// <summary>
    /// Re-new the singlenton instance
    /// </summary>
    /// <returns></returns>
        public static EFPocoContext RenewInstance() {
            context = new EFPocoContext();
            return context;
        }
    /// <summary>
    /// Get a new instance
    /// </summary>
        public static EFPocoContext NewInstance {
            get {
                return new EFPocoContext();
            }
        }
    }
	
	
		public partial class accBanksBR{
	 	
           
		 #region Partial methods

           partial void OnUpdating(object sender, BusinessRulesEventArgs<accBank> e);

            partial void OnUpdated(object sender, BusinessRulesEventArgs<accBank> e);

            partial void OnCreating(object sender, BusinessRulesEventArgs<accBank> e);
            partial void OnCreated(object sender, BusinessRulesEventArgs<accBank> e);

            partial void OnDeleting(object sender, BusinessRulesEventArgs<accBank> e);
            partial void OnDeleted(object sender, BusinessRulesEventArgs<accBank> e);

            partial void OnGetting(object sender, BusinessRulesEventArgs<accBank> e);
            partial void OnTaken(object sender, BusinessRulesEventArgs<accBank> e);
            partial void OnCounting(object sender, BusinessRulesEventArgs<accBank> e);
 
 
            #endregion
			
		private static accBanksBR singlenton =null;
				public static accBanksBR NewInstance(){
					return  new accBanksBR();
					
				}
		public static accBanksBR Instance{
			get{
				if (singlenton == null)
					singlenton = new accBanksBR();
				return singlenton;
			}
		}
		private bool preventSecurityRestrictions = false;
		 public bool PreventAuditTrail { get; set;  }
		#region Fields
        EFPocoContext context = null;
        #endregion
        #region Constructor
        public accBanksBR()
        {
            context = new EFPocoContext();
        }
		 public accBanksBR(bool preventSecurity)
            {
                this.preventSecurityRestrictions = preventSecurity;
				context = new EFPocoContext();
            }
        #endregion
		
		#region Get

 		public IQueryable<accBank> Get()
        {
            //using (EFContext con = new EFContext())
            //{
				EFContext con = new EFContext();
                var query = con.accBanks.AsQueryable();
                con.ContextOptions.ProxyCreationEnabled = false;

                //query = ContextQueryBuilder<Nutrient>.ApplyContextQuery(query, contextRequest);

                return query;




            //}

        }
		
		public List<accBank> GetAll()
        {
            return this.GetBy(p => true);
        }
        public List<accBank> GetAll(string includes)
        {
            return this.GetBy(p => true, includes);
        }
        public accBank GetByKey(Guid guidBank)
        {
            return GetByKey(guidBank, true);
        }
        public accBank GetByKey(Guid guidBank, bool loadIncludes)
        {
            accBank item = null;
			var query = PredicateBuilder.True<accBank>();
                    
			string strWhere = @"GuidBank = Guid(""" + guidBank.ToString()+@""")";
            Expression<Func<accBank, bool>> predicate = null;
            if (!string.IsNullOrEmpty(strWhere))
                predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<accBank, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
			 ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();
            contextRequest.CustomQuery.FilterExpressionString = strWhere;

			//item = GetBy(predicate, loadIncludes, contextRequest).FirstOrDefault();
			item = GetBy(strWhere,loadIncludes,contextRequest).FirstOrDefault();
            return item;
        }
         public List<accBank> GetBy(string strWhere, bool loadRelations, ContextRequest contextRequest)
        {
            if (!loadRelations)
                return GetBy(strWhere, contextRequest);
            else
                return GetBy(strWhere, contextRequest, "");

        }
		  public List<accBank> GetBy(string strWhere, bool loadRelations)
        {
              if (!loadRelations)
                return GetBy(strWhere, new ContextRequest());
            else
                return GetBy(strWhere, new ContextRequest(), "");

        }
         public accBank GetByKey(Guid guidBank, params Expression<Func<accBank, object>>[] includes)
        {
            accBank item = null;
			string strWhere = @"GuidBank = Guid(""" + guidBank.ToString()+@""")";
          Expression<Func<accBank, bool>> predicate = null;
            if (!string.IsNullOrEmpty(strWhere))
                predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<accBank, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
        item = GetBy(predicate, includes).FirstOrDefault();
         ////   item = GetBy(strWhere,includes).FirstOrDefault();
			return item;

        }
        public accBank GetByKey(Guid guidBank, string includes)
        {
            accBank item = null;
			string strWhere = @"GuidBank = Guid(""" + guidBank.ToString()+@""")";
            
			
            item = GetBy(strWhere, includes).FirstOrDefault();
            return item;

        }
		 public accBank GetByKey(Guid guidBank, string usemode, string includes)
		{
			return GetByKey(guidBank, usemode, null, includes);

		 }
		 public accBank GetByKey(Guid guidBank, string usemode, ContextRequest context,  string includes)
        {
            accBank item = null;
			string strWhere = @"GuidBank = Guid(""" + guidBank.ToString()+@""")";
			if (context == null)
				context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
			context.CustomQuery.IsByKey = true;
            context.CustomQuery.FilterExpressionString = strWhere;
            context.UseMode = usemode;
            item = GetBy(strWhere,context , includes).FirstOrDefault();
            return item;

        }

        #region Dynamic Predicate
        public List<accBank> GetBy(Expression<Func<accBank, bool>> predicate, int? pageSize, int? page)
        {
            return this.GetBy(predicate, pageSize, page, null, null);
        }
        public List<accBank> GetBy(Expression<Func<accBank, bool>> predicate, ContextRequest contextRequest)
        {

            return GetBy(predicate, contextRequest,"");
        }
        
        public List<accBank> GetBy(Expression<Func<accBank, bool>> predicate, ContextRequest contextRequest, params Expression<Func<accBank, object>>[] includes)
        {
            StringBuilder sb = new StringBuilder();
           if (includes != null)
            {
                foreach (var path in includes)
                {

						if (sb.Length > 0) sb.Append(",");
						sb.Append(SFSdotNet.Framework.Linq.Utils.IncludeToString<accBank>(path));

               }
            }
            return GetBy(predicate, contextRequest, sb.ToString());
        }
        
        
        public List<accBank> GetBy(Expression<Func<accBank, bool>> predicate, string includes)
        {
			ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";

            return GetBy(predicate, context, includes);
        }

        public List<accBank> GetBy(Expression<Func<accBank, bool>> predicate, params Expression<Func<accBank, object>>[] includes)
        {
			if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }
			ContextRequest context = new ContextRequest();
			            context.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            context.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";
            return GetBy(predicate, context, includes);
        }

      
		public bool DisableCache { get; set; }
		 public List<accBank> GetBy(Expression<Func<accBank, bool>> predicate, ContextRequest contextRequest, string includes)
        {
            using (EFPocoContext con = new EFPocoContext())
            {
				if (DisableCache) 
                	con.CachingPolicy = EFCachingProvider.Caching.CachingPolicy.NoCaching;

				List<accBank> result = null;
                 e = null;
	
				OnGetting(con, e = new BusinessRulesEventArgs<accBank>() {  FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null) });

               // OnGetting(con,e = new BusinessRulesEventArgs<accBank>() { FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = contextRequest.CustomQuery.FilterExpressionString});
				   if (e != null) {
				    predicate = e.FilterExpression;
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				con.EnableChangeTrackingUsingProxies = false;
				con.WrappedContext.accBanks.MergeOption = MergeOption.NoTracking;
                con.WrappedContext.ContextOptions.ProxyCreationEnabled = false;
                if (predicate == null) predicate = PredicateBuilder.True<accBank>();
                
                var es = con.accBanks;

                IQueryable<accBank> query = es.AsQueryable();

                                if (!string.IsNullOrEmpty(includes))
                {
                    foreach (string include in includes.Split(char.Parse(",")))
                    {
						if (!string.IsNullOrEmpty(include))
                            query = query.Include(include);
                    }
                }
                    predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
					 	if (!preventSecurityRestrictions)
						{
							if (contextRequest != null )
		                    	if (contextRequest.User !=null )
		                        	if (contextRequest.Company != null)
		                        		predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				query =query.Where(predicate);
                query = ContextQueryBuilder<accBank>.ApplyContextQuery(query, contextRequest);

                result = query.ToList<accBank>();
				  
                if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e =  new BusinessRulesEventArgs<accBank>() { Items= result, IncludingComputedLinq = false, ContextRequest = contextRequest,  FilterExpression = predicate } :  e);
  
			

                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
            }
        }
		public void UpdateAgile(accBank item, params string[] fields)
         {
             List<accBank> list = new List<accBank>();
             list.Add(item);
             this.UpdateBulk(list, fields);
         }
		public void UpdateBulk(List<accBank>  items, params string[] fields)
         {
             SFSdotNet.Framework.My.ContextRequest req = new SFSdotNet.Framework.My.ContextRequest();
             req.CustomQuery = new SFSdotNet.Framework.My.CustomQuery();
             foreach (var field in fields)
             {
                 req.CustomQuery.SpecificProperties.Add(field);
             }
             UpdateBulk(items, req);

         }
        public void UpdateBulk(List<accBank> items, ContextRequest req)
        {
            using (EFContext con = new EFContext())
            {



                foreach (var item in items)
                {
                    var setT = con.CreateObjectSet<accBank>("accBanks");


                    var itemForAttach = new accBank();
			itemForAttach.GuidBank = item.GuidBank;
					
                    itemForAttach = SFSdotNet.Framework.Entities.ConvertEntity.SetProperties<accBank>(item, itemForAttach, null, req.CustomQuery.SpecificProperties.ToArray());
                    setT.Attach(itemForAttach);


                    foreach (var property in req.CustomQuery.SpecificProperties)
                    {
						
                        if (property != "GuidBank")
                            con.ObjectStateManager.GetObjectStateEntry(itemForAttach).SetModifiedProperty(property);

                    }

                }
                con.SaveChanges();


            }
        }
		/*public int Update(List<accBank> items, ContextRequest contextRequest)
            {
                int result = 0;
                using (EFContext con = new EFContext())
                {
                   
                

                    foreach (var item in items)
                    {
                        //secMessageToUser messageToUser = new secMessageToUser();
                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            item.GetType().GetProperty(prop).SetValue(item, item.GetType().GetProperty(prop).GetValue(item));
                        }
                        //messageToUser.GuidMessageToUser = (Guid)item.GetType().GetProperty("GuidMessageToUser").GetValue(item);

                        var setObject = con.CreateObjectSet<accBank>("accBanks");
                        //messageToUser.Readed = DateTime.UtcNow;
                        setObject.Attach(item);
                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            con.ObjectStateManager.GetObjectStateEntry(item).SetModifiedProperty(prop);
                        }
                       
                    }
                    result = con.SaveChanges();

                    


                }
                return result;
            }
           */
        public List<accBank> GetBy(string predicateString, ContextRequest contextRequest, string includes)
        {
            using (EFContext con = new EFContext())
            {
				if (DisableCache) 
                	con.CachingPolicy = EFCachingProvider.Caching.CachingPolicy.NoCaching;

				Filter filter = new Filter();
                if (predicateString.Contains("|"))
                {
                    string ft = GetSpecificFilter(predicateString);
                    if (!string.IsNullOrEmpty(ft))
                        filter.SetFilterPart("ft", ft);
                   
                    contextRequest.FreeText = predicateString.Split(char.Parse("|"))[1];
                    var q1 = predicateString.Split(char.Parse("|"))[0];
                    if (!string.IsNullOrEmpty(q1))
                    {
                        filter.ProcessText(q1);
                    }
                }
                else {
                    filter.ProcessText(predicateString);
                }

				List<accBank> result = null;
                 e = null;
					OnGetting(con, e = new BusinessRulesEventArgs<accBank>() { Filter = filter, ContextRequest = contextRequest /*, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null)*/ });

                  //OnGetting(con,e = new BusinessRulesEventArgs<accBank>() {  ContextRequest = contextRequest, FilterExpressionString = predicateString });
			   	if (e != null) {
				    //predicateString = e.GetQueryString();
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				//	 else {
                //      predicateString = predicateString.Replace("*extraFreeText*", "").Replace("()","");
                //  }
				//con.EnableChangeTrackingUsingProxies = false;
				con.accBanks.MergeOption = MergeOption.NoTracking;
                con.ContextOptions.ProxyCreationEnabled = false;
                //if (predicate == null) predicate = PredicateBuilder.True<accBank>();
                
                var es = con.accBanks;
				IQueryable<accBank> query = es.AsQueryable();
		
				// include relations FK
				if(string.IsNullOrEmpty(includes) ){
					includes ="";
				}
				StringBuilder sbQuerySystem = new StringBuilder();
                    //predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				

				//if (!string.IsNullOrEmpty(predicateString))
                //      sbQuerySystem.Append(" And ");
                //sbQuerySystem.Append(" (IsDeleted != true Or IsDeleted = null) ");
				 filter.SetFilterPart("de", "(IsDeleted != true OR IsDeleted = null)");


					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
	                    	if (contextRequest.User !=null )
	                        	if (contextRequest.Company != null ){
	                        		//if (sbQuerySystem.Length > 0)
	                        		//	    			sbQuerySystem.Append( " And ");	
									//sbQuerySystem.Append(@" (GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
									filter.SetFilterPart("co",@"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @"""))");
								}
						}	
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				//string predicateString = predicate.ToDynamicLinq<accBank>();
				//predicateString += sbQuerySystem.ToString();
				filter.CleanAndProcess("");

				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed(); //SFSdotNet.Framework.Linq.Utils.ExtractSpecificProperties("", ref predicateString );               
                string predicateWithManyRelations = filter.GetFilterChildren(); //SFSdotNet.Framework.Linq.Utils.CleanPartExpression(predicateString);

                //QueryUtils.BreakeQuery1(predicateString, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
                var _queryable = query.AsQueryable();
                if (!string.IsNullOrEmpty(predicateWithManyRelations))
                    _queryable = _queryable.Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams);
				if (contextRequest.CustomQuery.SpecificProperties.Count > 0)
                {

                    StringBuilder sbProps = new StringBuilder();
                    contextRequest.CustomQuery.SpecificProperties.Add("GuidBank");
                    
					foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                    {
						if(sbProps.Length > 0)
							sbProps.Append(",");
                        sbProps.Append(prop);
                    }
					    IQueryable  queryableSelective = null ;
					  
					  if (!string.IsNullOrEmpty(predicateWithManyRelations))
							queryableSelective = con.accBanks.AsQueryable().Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams).Select(string.Format("new({0})", sbProps.ToString()));
					else
						queryableSelective = con.accBanks.AsQueryable().Select(string.Format("new({0})", sbProps.ToString()));


                    //if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
					//	queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

                    QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
                    
					if (!string.IsNullOrEmpty(queryOps.OrderByAndSort))
                        queryableSelective = queryableSelective.OrderBy(queryOps.OrderByAndSort);
                    if (queryOps.Skip != null)
                    {
                        queryableSelective = queryableSelective.Skip(queryOps.Skip.Value);
                    }
                    if (queryOps.PageSize != null)
                    {
                        queryableSelective = queryableSelective.Take(queryOps.PageSize.Value);
                    }
                    //var results = queryableSelective.ToList();
                    result = new List<accBank>();
                    accBank itemDef = null;
                    foreach (var item in queryableSelective)
                    {
                        itemDef = new accBank();

                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            if (!prop.Contains("."))
                            {
                                itemDef.GetType().GetProperty(prop).SetValue(itemDef, item.GetType().GetProperty(prop).GetValue(item));
                            }
                            else {
                                throw new Exception("La seleccion de relaciones aún no esta soportada");
                            }

                        }

                        result.Add(itemDef);
                    }

                }
                else
                {
				var  queryable = _queryable.Select(                    
				p => 
                        new
                    {
					GuidBank = p.GuidBank
,Name = p.Name
,LegalName = p.LegalName
,Address = p.Address
,LegalCode = p.LegalCode
,emailInvoice = p.emailInvoice
,CreatedDate = p.CreatedDate
,UpdatedDate = p.UpdatedDate
,CreatedBy = p.CreatedBy
,UpdatedBy = p.UpdatedBy
,IsDeleted = p.IsDeleted
,GuidCompany = p.GuidCompany
,ImpDescColumn = p.ImpDescColumn
,ImpMoneyMovPlusColumn = p.ImpMoneyMovPlusColumn
,ImpAccountColumn = p.ImpAccountColumn
,ImpDateMovColumn = p.ImpDateMovColumn
,ImpRefMovColumn = p.ImpRefMovColumn
,ImpNumMovColumn = p.ImpNumMovColumn
,ImpMoneyMovLessColumn = p.ImpMoneyMovLessColumn
,ImpBalanceColumn = p.ImpBalanceColumn
,ImpBankOfficeColumn = p.ImpBankOfficeColumn
,ImpFullDescColumn = p.ImpFullDescColumn

,

	
                    }
                    
                    );
					
				
                 if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
                    queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

				QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
            	if (!string.IsNullOrEmpty(queryOps.OrderByAndSort))
					queryable = queryable.OrderBy(queryOps.OrderByAndSort);
               	if (queryOps.Skip != null)
                {
                    queryable = queryable.Skip(queryOps.Skip.Value);
                }
                if (queryOps.PageSize != null)
                {
                    queryable = queryable.Take (queryOps.PageSize.Value);
                }
                result = queryable.AsEnumerable().
                    Select(
                    p =>  new accBank()
                    {
					GuidBank = p.GuidBank
,Name = p.Name
,LegalName = p.LegalName
,Address = p.Address
,LegalCode = p.LegalCode
,emailInvoice = p.emailInvoice
,CreatedDate = p.CreatedDate
,UpdatedDate = p.UpdatedDate
,CreatedBy = p.CreatedBy
,UpdatedBy = p.UpdatedBy
,IsDeleted = p.IsDeleted
,GuidCompany = p.GuidCompany
,ImpDescColumn = p.ImpDescColumn
,ImpMoneyMovPlusColumn = p.ImpMoneyMovPlusColumn
,ImpAccountColumn = p.ImpAccountColumn
,ImpDateMovColumn = p.ImpDateMovColumn
,ImpRefMovColumn = p.ImpRefMovColumn
,ImpNumMovColumn = p.ImpNumMovColumn
,ImpMoneyMovLessColumn = p.ImpMoneyMovLessColumn
,ImpBalanceColumn = p.ImpBalanceColumn
,ImpBankOfficeColumn = p.ImpBankOfficeColumn
,ImpFullDescColumn = p.ImpFullDescColumn

                    }
                     ).ToList();
				}


			 if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e = new BusinessRulesEventArgs<accBank>() { Items= result, IncludingComputedLinq = true, ContextRequest = contextRequest, FilterExpressionString  = predicateString } :  e);
  
			
  
                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
            }
        }
		public List<accBank> GetBy(Expression<Func<accBank, bool>> predicate, bool loadRelations, ContextRequest contextRequest)
        {
			if(!loadRelations)
				return GetBy(predicate, contextRequest);
			else
				return GetBy(predicate, contextRequest, "accMoneyPlaces,accBankImports");

        }

        public List<accBank> GetBy(Expression<Func<accBank, bool>> predicate, int? pageSize, int? page, string orderBy, SFSdotNet.Framework.Data.SortDirection? sortDirection)
        {
            return GetBy(predicate, new ContextRequest() { CustomQuery = new CustomQuery() { Page = page, PageSize = pageSize, OrderBy = orderBy, SortDirection = sortDirection } });
        }
        public List<accBank> GetBy(Expression<Func<accBank, bool>> predicate)
        {

			if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }
			ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();

			contextRequest.CurrentContext = SFSdotNet.Framework.My.Context.CurrentContext;
			            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

            contextRequest.CustomQuery.FilterExpressionString = null;
            return this.GetBy(predicate, contextRequest, "");
        }
        #endregion
        #region Dynamic String
		private string GetSpecificFilter(string filter) {
            string result = "";
		    //string linqFilter = String.Empty;
            string freeTextFilter = String.Empty;
            if (filter.Contains("|"))
            {
               // linqFilter = filter.Split(char.Parse("|"))[0];
                freeTextFilter = filter.Split(char.Parse("|"))[1];
            }
            //else {
            //    freeTextFilter = filter;
            //}
            //else {
            //    linqFilter = filter;
            //}
			// linqFilter = SFSdotNet.Framework.Linq.Utils.ReplaceCustomDateFilters(linqFilter);
            //string specificFilter = linqFilter;
            if (!string.IsNullOrEmpty(freeTextFilter))
            {
                System.Text.StringBuilder sbCont = new System.Text.StringBuilder();
                /*if (specificFilter.Length > 0)
                {
                    sbCont.Append(" AND ");
                    sbCont.Append(" ({0})");
                }
                else
                {
                    sbCont.Append("{0}");
                }*/
                //var words = freeTextFilter.Split(char.Parse(" "));
				var word = freeTextFilter;
                System.Text.StringBuilder sbSpec = new System.Text.StringBuilder();
                 int nWords = 1;
				/*foreach (var word in words)
                {
					if (word.Length > 0){
                    if (sbSpec.Length > 0) sbSpec.Append(" AND ");
					if (words.Length > 1) sbSpec.Append("("); */
					
	
					
											
					sbSpec.Append(string.Format(@"Name.Contains(""{0}"")", word));

					
											sbSpec.Append(" OR ");
										
					sbSpec.Append(string.Format(@"LegalName.Contains(""{0}"")", word));

					
											sbSpec.Append(" OR ");
										
					sbSpec.Append(string.Format(@"Address.Contains(""{0}"")", word));

					
											sbSpec.Append(" OR ");
										
					sbSpec.Append(string.Format(@"LegalCode.Contains(""{0}"")", word));

					
											sbSpec.Append(" OR ");
										
					sbSpec.Append(string.Format(@"emailInvoice.Contains(""{0}"")", word));

					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
								 //sbSpec.Append("*extraFreeText*");

                    /*if (words.Length > 1) sbSpec.Append(")");
					
					nWords++;

					}

                }*/
                //specificFilter = string.Format("{0}{1}", specificFilter, string.Format(sbCont.ToString(), sbSpec.ToString()));
                                 result = sbSpec.ToString();  
            }
			//result = specificFilter;
			
			return result;

		}
	
			public List<accBank> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  params object[] extraParams)
        {
			return GetBy(filter, pageSize, page, orderBy, orderDir,  null, extraParams);
		}
           public List<accBank> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir, string usemode, params object[] extraParams)
            { 
                return GetBy(filter, pageSize, page, orderBy, orderDir, usemode, null, extraParams);
            }


		public List<accBank> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  string usemode, ContextRequest context, params object[] extraParams)

        {

            // string freetext = null;
            //if (filter.Contains("|"))
            //{
            //    int parts = filter.Split(char.Parse("|")).Count();
            //    if (parts > 1)
            //    {

            //        freetext = filter.Split(char.Parse("|"))[1];
            //    }
            //}
		
            //string specificFilter = "";
            //if (!string.IsNullOrEmpty(filter))
            //  specificFilter=  GetSpecificFilter(filter);
            if (string.IsNullOrEmpty(orderBy))
            {
			                orderBy = "UpdatedDate";
            }
			//orderDir = "desc";
			SFSdotNet.Framework.Data.SortDirection direction = SFSdotNet.Framework.Data.SortDirection.Ascending;
            if (!string.IsNullOrEmpty(orderDir))
            {
                if (orderDir == "desc")
                    direction = SFSdotNet.Framework.Data.SortDirection.Descending;
            }
            if (context == null)
                context = new ContextRequest();
			else
                context.CustomQuery = new CustomQuery();
             //context.FreeText = freetext;
             context.UseMode = usemode;
             context.CustomQuery =new SFSdotNet.Framework.My.CustomQuery()
 
                {
                    ExtraParams = extraParams,

                    OrderBy = orderBy,
                    SortDirection = direction,
                    Page = page,
                    PageSize = pageSize
               };
            

            if (!preventSecurityRestrictions) {
			 if (context.CurrentContext == null)
                {
					if (SFSdotNet.Framework.My.Context.CurrentContext != null &&  SFSdotNet.Framework.My.Context.CurrentContext.Company != null && SFSdotNet.Framework.My.Context.CurrentContext.User != null)
					{
						context.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
						context.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

					}
					else {
						throw new Exception("The security rule require a specific user and company");
					}
				}
            }
            return GetBy(filter, context);
  
        }


        public List<accBank> GetBy(string strWhere, ContextRequest contextRequest)
        {
        	#region old code
				
				 //Expression<Func<tvsReservationTransport, bool>> predicate = null;
				string strWhereClean = strWhere.Replace("*extraFreeText*", "").Replace("()", "");
                //if (!string.IsNullOrEmpty(strWhereClean)){

                //    object[] extraParams = null;
                //    //if (contextRequest != null )
                //    //    if (contextRequest.CustomQuery != null )
                //    //        extraParams = contextRequest.CustomQuery.ExtraParams;
                //    //predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<tvsReservationTransport, bool>(strWhereClean, extraParams != null? extraParams.Cast<Guid>(): null);				
                //}
				 if (contextRequest == null)
                {
                    contextRequest = new ContextRequest();
                    if (contextRequest.CustomQuery == null)
                        contextRequest.CustomQuery = new CustomQuery();
                }
                  if (!preventSecurityRestrictions) {
					if (contextRequest.User == null || contextRequest.Company == null)
                      {
                     if (SFSdotNet.Framework.My.Context.CurrentContext.Company != null && SFSdotNet.Framework.My.Context.CurrentContext.User != null)
                     {
                         contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                         contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

                     }
                     else {
                         throw new Exception("The security rule require a specific User and Company ");
                     }
					 }
                 }
            contextRequest.CustomQuery.FilterExpressionString = strWhere;
				//return GetBy(predicate, contextRequest);  

			#endregion				
				
                    return GetBy(strWhere, contextRequest, "");  


        }
       public List<accBank> GetBy(string strWhere)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
			
            return GetBy(strWhere, context, null);
        }

        public List<accBank> GetBy(string strWhere, string includes)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
            return GetBy(strWhere, context, includes);
        }

        #endregion
        #endregion
		
		  #region SaveOrUpdate
        private accBank Save(accBank entity, bool saveChanges, EFPocoContext con)
        {
				ObjectContext context = null;
            return Update(entity, saveChanges,null, out context);

			
        }
		 public  accBank Create( accBank entity, params Expression<Func< accBank, object>>[] paths)
         {
             return Create(entity, null, paths);

         }
 		 public accBank Create(accBank entity)
        {
				ObjectContext context = null;
				    if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: Create");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

				return this.Create(entity, true, contextRequest, out context);


        }
        public accBank Create(accBank entity, ContextRequest contextRequest)
         {
             ObjectContext context = null;
             return this.Create(entity, true, contextRequest,out context);

         }
         public accBank Create(accBank entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext context)
        {
                    return Create(entity, saveChanges , contextRequest , out context, null);
        }
         public accBank Create(accBank entity, ContextRequest contextRequest, params Expression<Func<accBank,object>>[] paths)
        {
            ObjectContext context = null;
            if(paths != null)
				return Create(entity, true,contextRequest, out context, paths);
			else 
				return Create(entity, true,contextRequest, out context);
        }
        public accBank Create(accBank entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext context, params Expression<Func<accBank,object>>[] pocopaths)
        {
			using (EFPocoContext con = new EFPocoContext())
			{
				accBank itemResult = null;
#region Autos


			entity.CreatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.CreatedBy = contextRequest.User.GuidUser;
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.UpdatedBy = contextRequest.User.GuidUser;
	
			if (contextRequest != null)
				if(contextRequest.User != null)
					if (contextRequest.Company != null)
						entity.GuidCompany = contextRequest.Company.GuidCompany;
	

#endregion
                e = null;
                OnCreating(this,e = new BusinessRulesEventArgs<accBank>() { ContextRequest = contextRequest, Item=entity, PathExpressions = pocopaths, SaveChanges =saveChanges });
				   if (e != null) {
						if (e.Cancel)
						{
							context = null;
							return e.Item;

						}
					}

                    if (entity.GuidBank == Guid.Empty)
                   {
                       entity.GuidBank = Guid.NewGuid();

                   }



				accBankAdapter adapter = con.GetAdapterObject<accBankAdapter>(entity);;
				List<Expression<Func<accBankAdapter, object>>> paths = new List<Expression<Func<accBankAdapter,object>>>();
                
			    if (pocopaths != null && pocopaths.Length > 0)
                {
					// Translate
                    foreach (var pocopath in pocopaths)
                    {
                        var param = Expression.Parameter(typeof(accBankAdapter), "p");
                        var member = MemberExpression.PropertyOrField(param, ((System.Linq.Expressions.MemberExpression)(((System.Linq.Expressions.LambdaExpression)(pocopath)).Body)).Member.Name);
                        Expression<Func<accBankAdapter, object>> path  = null;
                        switch(member.Member.Name){
                        
							case "accMoneyPlaces":
								path = p => p.accMoneyPlaces.First().WithoutUpdate();

								//path = p => member;
								//path = p => p.accMoneyPlaces.First().accReusableCatalogValue.WithoutUpdate();											
							break;
                        
							case "accBankImports":
								path = p => p.accBankImports.First().WithoutUpdate();

								//path = p => member;
								//path = p => p.accBankImports.First().accFile.WithoutUpdate();											
							break;
							
							default:
								path = p => member;
							break;
                        }

                        
                       paths.Add(path.Expand());
                    }
                }
                object aux = null;
					//paths = pathBuilder.ToArray();

#region Childs accMoneyPlaces 
				if (adapter.accMoneyPlaces != null)
                {
                    foreach (var item in adapter.accMoneyPlaces)
                    {
						
							if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accMoneyPlaces", item);
							if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)){ 
								//paths.Add(p => p.accMoneyPlaces.First().WithoutUpdate());
								
							if (item.accBank == null)
								item.accBank = adapter;

						if (item.accReusableCatalogValue != null){
							item.accReusableCatalogValue.EntityKey = con.WrappedContext.CreateEntityKey("accReusableCatalogValues", item.accReusableCatalogValue);
                            
             
						}								
								item.EntityKey = null;
							}

                    }
					if (adapter.accMoneyPlaces.Count > 0){
						paths.Add(p => p.accMoneyPlaces.First().WithoutUpdate());
						paths.Add(p => p.accMoneyPlaces.First().accReusableCatalogValue.WithoutUpdate());
					
					}
                }
#endregion 

#region Childs accBankImports 
				if (adapter.accBankImports != null)
                {
                    foreach (var item in adapter.accBankImports)
                    {
						
							if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accBankImports", item);
							if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)){ 
								//paths.Add(p => p.accBankImports.First().WithoutUpdate());
								
							if (item.accBank == null)
								item.accBank = adapter;

						if (item.accFile != null){
							item.accFile.EntityKey = con.WrappedContext.CreateEntityKey("accFiles", item.accFile);
                            
             
						}								
								item.EntityKey = null;
							}

                    }
					if (adapter.accBankImports.Count > 0){
						paths.Add(p => p.accBankImports.First().WithoutUpdate());
						paths.Add(p => p.accBankImports.First().accFile.WithoutUpdate());
					
					}
                }
#endregion 




                //con.WrappedContext.AttachObjectGraph<accBankAdapter>(adapter, p=>p.accMoneyPlaces, p=>p.accBankImports);
                con.WrappedContext.AttachObjectGraph<accBankAdapter>(adapter, paths.ToArray());
              	if (saveChanges){
                    con.WrappedContext.SaveChanges(SaveOptions.AcceptAllChangesAfterSave);
					 
				}
                else
                    con.WrappedContext.SaveChanges(SaveOptions.None);
                if (!saveChanges)
                    context = con.WrappedContext;
                else
                    context = null;
				itemResult = adapter.PocoEntity;
                if (e != null)
                {
                    e.Item = itemResult;
                }
                OnCreated(this, e == null ? e = new BusinessRulesEventArgs<accBank>() { ContextRequest = contextRequest, Item = itemResult, PathExpressions = pocopaths, SaveChanges = saveChanges } : e);



                if (e != null)
                {
                    itemResult = e.Item;
                }
                              return itemResult;
            }
        }
        BusinessRulesEventArgs<accBank> e = null;
        public void Create(List<accBank> entities)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            Create(entities, contextRequest, null);
        }
        public void Create(List<accBank> entities, ContextRequest contextRequest)
        
        {
			ObjectContext context = null;
            	foreach (accBank entity in entities)
				{
					this.Create(entity, true, contextRequest, out context);
				}
        }
         public accBank Update(accBank entity)
        {
            if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return Update(entity, contextRequest);
        }
        public accBank Update(accBank entity, ContextRequest requestContext)
        {
			  ObjectContext context = null;
            return Update(entity, true,requestContext, out context);
         }
		public  accBank Update(accBank entity, params Expression<Func<accBank, object>>[] pocopaths)
        {
			  ObjectContext context = null;
              return Update(entity, true, null, out context, pocopaths);
         }
        public accBank Update(accBank entity, ContextRequest requestContext, bool saveChanges, out ObjectContext outcontext)
        {
			return Update(entity, saveChanges,requestContext, out outcontext, null);
		}
         public accBank Update(accBank entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext outcontext, params Expression<Func<accBank,object>>[] pocopaths)
        {
		 if ((System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null) && contextRequest == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Update");
            }
            if (contextRequest == null)
            {
                contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            }

			using (EFPocoContext con = new EFPocoContext())
			{
				accBank  itemResult = null;

	
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
			if(contextRequest.User != null)
				entity.UpdatedBy = contextRequest.User.GuidUser;

	    var oldentity = GetBy(p => p.GuidBank == entity.GuidBank, contextRequest).FirstOrDefault();
		if (oldentity != null) {
		
            entity.CreatedDate = oldentity.CreatedDate;
            entity.CreatedBy = oldentity.CreatedBy;
	
            entity.GuidCompany = oldentity.GuidCompany;
	
			

		}

				e = null;
                OnUpdating(this,e = new BusinessRulesEventArgs<accBank>() { ContextRequest = contextRequest, Item=entity, PathExpressions = pocopaths, SaveChanges =saveChanges });
				   if (e != null) {
						if (e.Cancel)
						{
							outcontext = null;
							return e.Item;

						}
					}

                accBankAdapter adapter = con.GetAdapterObject<accBankAdapter>(entity);
                adapter.EntityKey = con.WrappedContext.CreateEntityKey("accBanks", adapter);
				    var es = con.accBanks;
				List<Expression<Func<accBankAdapter, object>>> paths = new List<Expression<Func<accBankAdapter,object>>>();
                /* if (pocopaths != null)
                    if (pocopaths.Length == 0)
                        pocopaths = null;*/

			    if (pocopaths != null && pocopaths.Length > 0)
                {
					// Translate
                    foreach (var pocopath in pocopaths)
                    {
                        var param = Expression.Parameter(typeof(accBankAdapter), "p");
                        var member = MemberExpression.PropertyOrField(param, ((System.Linq.Expressions.MemberExpression)(((System.Linq.Expressions.LambdaExpression)(pocopath)).Body)).Member.Name);
                        Expression<Func<accBankAdapter, object>> path  = null;
                        switch(member.Member.Name){
                        
							case "accMoneyPlaces":
								//path = p => member;
								path = p => p.accMoneyPlaces.First().WithoutUpdate();
				//				path = p => p.accMoneyPlaces.First().accReusableCatalogValue.WithoutUpdate();											
							break;
                        
							case "accBankImports":
								//path = p => member;
								path = p => p.accBankImports.First().WithoutUpdate();
				//				path = p => p.accBankImports.First().accFile.WithoutUpdate();											
							break;
							
							default:
								path = p => member;
							break;
                        }

                        paths.Add(path.Expand());
 					}
                }
                else {
                  paths = new List<Expression<Func<accBankAdapter, object>>>();

					//List<Expression<Func<accBankAdapter,object>>> pathBuilder = new List<Expression<Func<accBankAdapter,object>>>();
		
					//paths = pathBuilder.ToArray();		
			}
			object aux = null;
				if (adapter.accMoneyPlaces != null)
                {
                    foreach (var item in adapter.accMoneyPlaces)
                    {


                        if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accMoneyPlaces", item);
						if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)) item.EntityKey = null;
                        
                    }
					
                    if (adapter.accMoneyPlaces.Count > 0)
                    {
                        paths.Add(p => p.accMoneyPlaces.First().WithoutUpdate());

                    }

                }
				if (adapter.accBankImports != null)
                {
                    foreach (var item in adapter.accBankImports)
                    {


                        if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accBankImports", item);
						if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)) item.EntityKey = null;
                        
                    }
					
                    if (adapter.accBankImports.Count > 0)
                    {
                        paths.Add(p => p.accBankImports.First().WithoutUpdate());

                    }

                }



                //con.AttachObjectGraph<accBank>(adapter, p=>p.accMoneyPlaces, p=>p.accBankImports);
                con.WrappedContext.AttachObjectGraph<accBankAdapter>(adapter, paths.ToArray());
				if (saveChanges){
                	con.WrappedContext.SaveChanges();
					 
					}
                if(!saveChanges)
					outcontext = con.WrappedContext;
				else
					outcontext = null;
				itemResult = adapter.PocoEntity;
				OnUpdated(this, e = new BusinessRulesEventArgs<accBank>() { ContextRequest = contextRequest, Item=itemResult, PathExpressions = pocopaths, SaveChanges =saveChanges });

              	return itemResult;

			  }
        }
        public accBank Save(accBank entity)
        {
			return Save(entity, true, null);
        }
        public int Save(List<accBank> entities)
        {
			using (EFPocoContext con = new EFPocoContext())
			{
			
            int n = 0;
            foreach (accBank item in entities)
            {
                try
                {
                    this.Save(item, false, con);
                    n++;
                }catch (Exception ex){
                    SFSdotNet.Framework.My.EventLog.Exception(ex);
                }
            }
            con.SaveChanges();
            return n;
            }
        }
        #endregion
        #region Delete
        public void Delete(accBank entity)
        {
				this.Delete(entity, null);
			
        }
		 public void Delete(accBank entity, ContextRequest contextRequest)
        {
				ObjectContext context = null;
				this.Delete(entity, true, out context, contextRequest);
			
        }

        
        public void Delete(accBank entity, bool saveChanges, out  ObjectContext context, ContextRequest contextRequest, BusinessRulesEventArgs<accBank> e = null)
        {
			using (EFPocoContext _con = new EFPocoContext())
			{
				int result = 0;
				
               	BusinessRulesEventArgs<accBank> _e = null;
               List<accBank> _items = new List<accBank>();
                _items.Add(entity);
                if (e == null || e.PreventPartialPropagate == false)
                {
                    OnDeleting(this, _e = (e == null ? new BusinessRulesEventArgs<accBank>() { ContextRequest = contextRequest, Item = entity, Items = _items, SaveChanges = saveChanges } : e));
                }
                if (_e != null)
                {
                    if (_e.Cancel)
						{
							context = null;
							return;

						}
					}


				accBankAdapter adapter = _con.GetAdapterObject<accBankAdapter>(entity);
                adapter.EntityKey = _con.WrappedContext.CreateEntityKey("accBanks", adapter);
                
	            //adapter = _con.WrappedContext.AttachObjectGraph<accBankAdapter>(adapter);
				try{
					_con.WrappedContext.AttachTo("accBanks", adapter);
                }catch{
					
				}
									//IsDeleted
					bool logicDelete = true;
					if (adapter.IsDeleted != null)
					{
						if (adapter.IsDeleted.Value)
							logicDelete = false;
					}
					if (logicDelete)
					{
											entity = GetBy(p => p.GuidBank == entity.GuidBank, contextRequest).FirstOrDefault();
						entity.IsDeleted = true;
						Update(entity, contextRequest);
					}
					else {
						_con.WrappedContext.DeleteObject(adapter);
					}
								
				if (!saveChanges)
                    context = _con.WrappedContext;
                else
                    context = null;
				 SaveOptions saveOption = SaveOptions.None;
                if (saveChanges)
                    saveOption = SaveOptions.AcceptAllChangesAfterSave;

				result = _con.WrappedContext.SaveChanges(saveOption);
				if (saveChanges){
					
					}
			if (e == null || e.PreventPartialPropagate == false)
                {

                    if (_e == null)
                        _e = new BusinessRulesEventArgs<accBank>() { ContextRequest = contextRequest, Item = entity, Items = _items };

                    OnDeleted(this, _e);
                }

				//return null;
			}            
        }
        public void Delete(List<accBank> entities,  ContextRequest contextRequest = null )
        {
				ObjectContext context = null;
			 BusinessRulesEventArgs<accBank> _e = null;

                OnDeleting(this, _e = new BusinessRulesEventArgs<accBank>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities });
                if (_e != null)
                {
                    if (_e.Cancel)
                    {
                        context = null;
                        return;

                    }
                }
                bool allSucced = true;
                BusinessRulesEventArgs<accBank> eToChilds = new BusinessRulesEventArgs<accBank>();
                if (_e != null)
                {
                    eToChilds = _e;
                }
                else
                {
                    eToChilds = new BusinessRulesEventArgs<accBank>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                }
				foreach (accBank item in entities)
				{
					try
                    {
                        this.Delete(item, true, out context, contextRequest, e: eToChilds);
                    }
                    catch (Exception ex)
                    {
                        SFSdotNet.Framework.My.EventLog.Error(ex);
                        allSucced = false;
                    }
				}
				if (_e == null)
                    _e = new BusinessRulesEventArgs<accBank>() { ContextRequest = contextRequest, CountResult = entities.Count, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                OnDeleted(this, _e);

			
        }
        #endregion
 
        #region GetCount
		 public int GetCount(Expression<Func<accBank, bool>> predicate)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

			return GetCount(predicate, contextRequest);
		}
        public int GetCount(Expression<Func<accBank, bool>> predicate, ContextRequest contextRequest)
        {


		
			using (EFPocoContext con = new EFPocoContext())
			{


				if (predicate == null) predicate = PredicateBuilder.True<accBank>();
           		predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted == null);
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    		if (contextRequest.User !=null )
                        		if (contextRequest.Company != null )
                        			predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				
				return con.accBanks.Count(predicate);
			}

        }
		  public int GetCount(string predicate,  ContextRequest contextRequest)
         {
             return GetCount(predicate, null, contextRequest);
         }

         public int GetCount(string predicate)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return GetCount(predicate, contextRequest);
        }
		 public int GetCount(string predicate, string usemode){
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
				return GetCount( predicate,  usemode,  contextRequest);
		 }
        public int GetCount(string predicate, string usemode, ContextRequest contextRequest){
			  string freetext = null;
            Filter filter = new Filter();

              if (predicate.Contains("|"))
              {
                 
                  filter.SetFilterPart("ft", GetSpecificFilter(predicate));
                 
                  filter.ProcessText(predicate.Split(char.Parse("|"))[0]);
                  freetext = predicate.Split(char.Parse("|"))[1];
              }
              else {
                  filter.ProcessText(predicate);
              }
           
			e = null;
			contextRequest.FreeText = freetext;
			contextRequest.UseMode = usemode;
            OnCounting(this, e = new BusinessRulesEventArgs<accBank>() {  Filter =filter, ContextRequest = contextRequest });
            if (e != null)
            {
                if (e.Cancel)
                {
                    context = null;
                    return e.CountResult;

                }

            

            }
			 predicate = filter.GetFilterComplete();
			StringBuilder sbQuerySystem = new StringBuilder();
		
					
                    filter.SetFilterPart("de","(IsDeleted != true OR IsDeleted == null)");
			
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    	if (contextRequest.User !=null )
                        	if (contextRequest.Company != null ){
                        		

								filter.SetFilterPart("co", @"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
						
						
							}
							
							}
							if (preventSecurityRestrictions) preventSecurityRestrictions= false;
			using (EFContext con = new EFContext())
			{
				   
                 filter.CleanAndProcess("");
				//string predicateWithFKAndComputed = SFSdotNet.Framework.Linq.Utils.ExtractSpecificProperties("", ref predicate );               
				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed();
               string predicateWithManyRelations = filter.GetFilterChildren();
			   ///QueryUtils.BreakeQuery1(predicate, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
			   predicate = filter.GetFilterComplete();
               if (!string.IsNullOrEmpty(predicate))
               {
				
					
                    return con.accBanks.Count(System.Linq.Dynamic.DynamicExpression.ParseLambda<accBank, bool>(predicate));
					
                }else
                    return con.accBanks.Count();

			}

		}
         public int GetCount()
        {
            return GetCount(p => true);
        }
        #endregion
        
         public accBank Update(accBank entity, string paths)
        {
            return Update(entity, paths.Split(char.Parse(",")));
            
        }

        public accBank Update(accBank entity, string[] paths)
        {
            // Translate
            List<Expression<Func<accBank, object>>> pathList = new List<Expression<Func<accBank, object>>>();
            for (int i = 0; i <= paths.Length -1; i++)
            {
                var param = Expression.Parameter(typeof(accBank), "p");
                var member = MemberExpression.PropertyOrField(param, paths[i]);

                Expression<Func<accBank, object>> path = p => member;
                pathList.Add(path.Expand());
            }
			ObjectContext context = null;
			 return Update(entity, true,null, out context,  pathList.ToArray());
           //return Update(entity, pathList.ToArray());
        }

        public void Update(List<accBank> entities, string paths)
        {
            foreach (var entity in entities )
            {
                Update(entity, paths);
            }
        }
		public accBank Create(accBank entity, ContextRequest contextRequest, string paths)
        {
          

            if (string.IsNullOrEmpty(paths))
                return Create(entity, contextRequest);

            return Create(entity, contextRequest, paths.Split(char.Parse(",")));
        }
        public accBank Create(accBank entity, string paths)
        {
			 if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return Create(entity, contextRequest, paths);

        }

        public  void Create(List<accBank> entities, ContextRequest requestContext, string paths)
        {
            foreach (var entity in entities)
            {
                Create(entity,requestContext, paths);
            }
        }

        public void Create(List<accBank> entities, string[] paths)
        {
            foreach (var entity in entities)
            {
                Create(entity, null, paths);
            }
        }
        
        public accBank  Create(accBank entity, ContextRequest contextRequest, string[] paths)
        {
            List<Expression<Func<accBank, object>>> pathList = new List<Expression<Func<accBank, object>>>();
            for (int i = 0; i < paths.Length - 1; i++)
            {
                var param = Expression.Parameter(typeof(accBank), "p");
                var member = MemberExpression.PropertyOrField(param, paths[i]);

                Expression<Func<accBank, object>> path = p => member;
                pathList.Add(path.Expand());
            }
            return Create(entity, contextRequest, pathList.ToArray());
        }
        public void Delete(List<accBank.CompositeKey> entityKeys)
        {

            List<accBank> items = new List<accBank>();
            foreach (var itemKey in entityKeys)
            {
                items.Add(GetByKey(itemKey.GuidBank));
            }

            Delete(items);

        }
		
		
	}
		public partial class accCustomersBR{
	 	
           
		 #region Partial methods

           partial void OnUpdating(object sender, BusinessRulesEventArgs<accCustomer> e);

            partial void OnUpdated(object sender, BusinessRulesEventArgs<accCustomer> e);

            partial void OnCreating(object sender, BusinessRulesEventArgs<accCustomer> e);
            partial void OnCreated(object sender, BusinessRulesEventArgs<accCustomer> e);

            partial void OnDeleting(object sender, BusinessRulesEventArgs<accCustomer> e);
            partial void OnDeleted(object sender, BusinessRulesEventArgs<accCustomer> e);

            partial void OnGetting(object sender, BusinessRulesEventArgs<accCustomer> e);
            partial void OnTaken(object sender, BusinessRulesEventArgs<accCustomer> e);
            partial void OnCounting(object sender, BusinessRulesEventArgs<accCustomer> e);
 
 
            #endregion
			
		private static accCustomersBR singlenton =null;
				public static accCustomersBR NewInstance(){
					return  new accCustomersBR();
					
				}
		public static accCustomersBR Instance{
			get{
				if (singlenton == null)
					singlenton = new accCustomersBR();
				return singlenton;
			}
		}
		private bool preventSecurityRestrictions = false;
		 public bool PreventAuditTrail { get; set;  }
		#region Fields
        EFPocoContext context = null;
        #endregion
        #region Constructor
        public accCustomersBR()
        {
            context = new EFPocoContext();
        }
		 public accCustomersBR(bool preventSecurity)
            {
                this.preventSecurityRestrictions = preventSecurity;
				context = new EFPocoContext();
            }
        #endregion
		
		#region Get

 		public IQueryable<accCustomer> Get()
        {
            //using (EFContext con = new EFContext())
            //{
				EFContext con = new EFContext();
                var query = con.accCustomers.AsQueryable();
                con.ContextOptions.ProxyCreationEnabled = false;

                //query = ContextQueryBuilder<Nutrient>.ApplyContextQuery(query, contextRequest);

                return query;




            //}

        }
		
		public List<accCustomer> GetAll()
        {
            return this.GetBy(p => true);
        }
        public List<accCustomer> GetAll(string includes)
        {
            return this.GetBy(p => true, includes);
        }
        public accCustomer GetByKey(Guid guidCustomer)
        {
            return GetByKey(guidCustomer, true);
        }
        public accCustomer GetByKey(Guid guidCustomer, bool loadIncludes)
        {
            accCustomer item = null;
			var query = PredicateBuilder.True<accCustomer>();
                    
			string strWhere = @"GuidCustomer = Guid(""" + guidCustomer.ToString()+@""")";
            Expression<Func<accCustomer, bool>> predicate = null;
            if (!string.IsNullOrEmpty(strWhere))
                predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<accCustomer, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
			 ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();
            contextRequest.CustomQuery.FilterExpressionString = strWhere;

			//item = GetBy(predicate, loadIncludes, contextRequest).FirstOrDefault();
			item = GetBy(strWhere,loadIncludes,contextRequest).FirstOrDefault();
            return item;
        }
         public List<accCustomer> GetBy(string strWhere, bool loadRelations, ContextRequest contextRequest)
        {
            if (!loadRelations)
                return GetBy(strWhere, contextRequest);
            else
                return GetBy(strWhere, contextRequest, "");

        }
		  public List<accCustomer> GetBy(string strWhere, bool loadRelations)
        {
              if (!loadRelations)
                return GetBy(strWhere, new ContextRequest());
            else
                return GetBy(strWhere, new ContextRequest(), "");

        }
         public accCustomer GetByKey(Guid guidCustomer, params Expression<Func<accCustomer, object>>[] includes)
        {
            accCustomer item = null;
			string strWhere = @"GuidCustomer = Guid(""" + guidCustomer.ToString()+@""")";
          Expression<Func<accCustomer, bool>> predicate = null;
            if (!string.IsNullOrEmpty(strWhere))
                predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<accCustomer, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
        item = GetBy(predicate, includes).FirstOrDefault();
         ////   item = GetBy(strWhere,includes).FirstOrDefault();
			return item;

        }
        public accCustomer GetByKey(Guid guidCustomer, string includes)
        {
            accCustomer item = null;
			string strWhere = @"GuidCustomer = Guid(""" + guidCustomer.ToString()+@""")";
            
			
            item = GetBy(strWhere, includes).FirstOrDefault();
            return item;

        }
		 public accCustomer GetByKey(Guid guidCustomer, string usemode, string includes)
		{
			return GetByKey(guidCustomer, usemode, null, includes);

		 }
		 public accCustomer GetByKey(Guid guidCustomer, string usemode, ContextRequest context,  string includes)
        {
            accCustomer item = null;
			string strWhere = @"GuidCustomer = Guid(""" + guidCustomer.ToString()+@""")";
			if (context == null)
				context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
			context.CustomQuery.IsByKey = true;
            context.CustomQuery.FilterExpressionString = strWhere;
            context.UseMode = usemode;
            item = GetBy(strWhere,context , includes).FirstOrDefault();
            return item;

        }

        #region Dynamic Predicate
        public List<accCustomer> GetBy(Expression<Func<accCustomer, bool>> predicate, int? pageSize, int? page)
        {
            return this.GetBy(predicate, pageSize, page, null, null);
        }
        public List<accCustomer> GetBy(Expression<Func<accCustomer, bool>> predicate, ContextRequest contextRequest)
        {

            return GetBy(predicate, contextRequest,"");
        }
        
        public List<accCustomer> GetBy(Expression<Func<accCustomer, bool>> predicate, ContextRequest contextRequest, params Expression<Func<accCustomer, object>>[] includes)
        {
            StringBuilder sb = new StringBuilder();
           if (includes != null)
            {
                foreach (var path in includes)
                {

						if (sb.Length > 0) sb.Append(",");
						sb.Append(SFSdotNet.Framework.Linq.Utils.IncludeToString<accCustomer>(path));

               }
            }
            return GetBy(predicate, contextRequest, sb.ToString());
        }
        
        
        public List<accCustomer> GetBy(Expression<Func<accCustomer, bool>> predicate, string includes)
        {
			ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";

            return GetBy(predicate, context, includes);
        }

        public List<accCustomer> GetBy(Expression<Func<accCustomer, bool>> predicate, params Expression<Func<accCustomer, object>>[] includes)
        {
			if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }
			ContextRequest context = new ContextRequest();
			            context.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            context.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";
            return GetBy(predicate, context, includes);
        }

      
		public bool DisableCache { get; set; }
		 public List<accCustomer> GetBy(Expression<Func<accCustomer, bool>> predicate, ContextRequest contextRequest, string includes)
        {
            using (EFPocoContext con = new EFPocoContext())
            {
				if (DisableCache) 
                	con.CachingPolicy = EFCachingProvider.Caching.CachingPolicy.NoCaching;

				List<accCustomer> result = null;
                 e = null;
	
				OnGetting(con, e = new BusinessRulesEventArgs<accCustomer>() {  FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null) });

               // OnGetting(con,e = new BusinessRulesEventArgs<accCustomer>() { FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = contextRequest.CustomQuery.FilterExpressionString});
				   if (e != null) {
				    predicate = e.FilterExpression;
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				con.EnableChangeTrackingUsingProxies = false;
				con.WrappedContext.accCustomers.MergeOption = MergeOption.NoTracking;
                con.WrappedContext.ContextOptions.ProxyCreationEnabled = false;
                if (predicate == null) predicate = PredicateBuilder.True<accCustomer>();
                
                var es = con.accCustomers;

                IQueryable<accCustomer> query = es.AsQueryable();

                                if (!string.IsNullOrEmpty(includes))
                {
                    foreach (string include in includes.Split(char.Parse(",")))
                    {
						if (!string.IsNullOrEmpty(include))
                            query = query.Include(include);
                    }
                }
                    predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
					 	if (!preventSecurityRestrictions)
						{
							if (contextRequest != null )
		                    	if (contextRequest.User !=null )
		                        	if (contextRequest.Company != null)
		                        		predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				query =query.Where(predicate);
                query = ContextQueryBuilder<accCustomer>.ApplyContextQuery(query, contextRequest);

                result = query.ToList<accCustomer>();
				  
                if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e =  new BusinessRulesEventArgs<accCustomer>() { Items= result, IncludingComputedLinq = false, ContextRequest = contextRequest,  FilterExpression = predicate } :  e);
  
			

                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
            }
        }
		public void UpdateAgile(accCustomer item, params string[] fields)
         {
             List<accCustomer> list = new List<accCustomer>();
             list.Add(item);
             this.UpdateBulk(list, fields);
         }
		public void UpdateBulk(List<accCustomer>  items, params string[] fields)
         {
             SFSdotNet.Framework.My.ContextRequest req = new SFSdotNet.Framework.My.ContextRequest();
             req.CustomQuery = new SFSdotNet.Framework.My.CustomQuery();
             foreach (var field in fields)
             {
                 req.CustomQuery.SpecificProperties.Add(field);
             }
             UpdateBulk(items, req);

         }
        public void UpdateBulk(List<accCustomer> items, ContextRequest req)
        {
            using (EFContext con = new EFContext())
            {



                foreach (var item in items)
                {
                    var setT = con.CreateObjectSet<accCustomer>("accCustomers");


                    var itemForAttach = new accCustomer();
			itemForAttach.GuidCustomer = item.GuidCustomer;
					
                    itemForAttach = SFSdotNet.Framework.Entities.ConvertEntity.SetProperties<accCustomer>(item, itemForAttach, null, req.CustomQuery.SpecificProperties.ToArray());
                    setT.Attach(itemForAttach);


                    foreach (var property in req.CustomQuery.SpecificProperties)
                    {
						
                        if (property != "GuidCustomer")
                            con.ObjectStateManager.GetObjectStateEntry(itemForAttach).SetModifiedProperty(property);

                    }

                }
                con.SaveChanges();


            }
        }
		/*public int Update(List<accCustomer> items, ContextRequest contextRequest)
            {
                int result = 0;
                using (EFContext con = new EFContext())
                {
                   
                

                    foreach (var item in items)
                    {
                        //secMessageToUser messageToUser = new secMessageToUser();
                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            item.GetType().GetProperty(prop).SetValue(item, item.GetType().GetProperty(prop).GetValue(item));
                        }
                        //messageToUser.GuidMessageToUser = (Guid)item.GetType().GetProperty("GuidMessageToUser").GetValue(item);

                        var setObject = con.CreateObjectSet<accCustomer>("accCustomers");
                        //messageToUser.Readed = DateTime.UtcNow;
                        setObject.Attach(item);
                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            con.ObjectStateManager.GetObjectStateEntry(item).SetModifiedProperty(prop);
                        }
                       
                    }
                    result = con.SaveChanges();

                    


                }
                return result;
            }
           */
        public List<accCustomer> GetBy(string predicateString, ContextRequest contextRequest, string includes)
        {
            using (EFContext con = new EFContext())
            {
				if (DisableCache) 
                	con.CachingPolicy = EFCachingProvider.Caching.CachingPolicy.NoCaching;

				Filter filter = new Filter();
                if (predicateString.Contains("|"))
                {
                    string ft = GetSpecificFilter(predicateString);
                    if (!string.IsNullOrEmpty(ft))
                        filter.SetFilterPart("ft", ft);
                   
                    contextRequest.FreeText = predicateString.Split(char.Parse("|"))[1];
                    var q1 = predicateString.Split(char.Parse("|"))[0];
                    if (!string.IsNullOrEmpty(q1))
                    {
                        filter.ProcessText(q1);
                    }
                }
                else {
                    filter.ProcessText(predicateString);
                }

				List<accCustomer> result = null;
                 e = null;
					OnGetting(con, e = new BusinessRulesEventArgs<accCustomer>() { Filter = filter, ContextRequest = contextRequest /*, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null)*/ });

                  //OnGetting(con,e = new BusinessRulesEventArgs<accCustomer>() {  ContextRequest = contextRequest, FilterExpressionString = predicateString });
			   	if (e != null) {
				    //predicateString = e.GetQueryString();
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				//	 else {
                //      predicateString = predicateString.Replace("*extraFreeText*", "").Replace("()","");
                //  }
				//con.EnableChangeTrackingUsingProxies = false;
				con.accCustomers.MergeOption = MergeOption.NoTracking;
                con.ContextOptions.ProxyCreationEnabled = false;
                //if (predicate == null) predicate = PredicateBuilder.True<accCustomer>();
                
                var es = con.accCustomers;
				IQueryable<accCustomer> query = es.AsQueryable();
		
				// include relations FK
				if(string.IsNullOrEmpty(includes) ){
					includes ="";
				}
				StringBuilder sbQuerySystem = new StringBuilder();
                    //predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				

				//if (!string.IsNullOrEmpty(predicateString))
                //      sbQuerySystem.Append(" And ");
                //sbQuerySystem.Append(" (IsDeleted != true Or IsDeleted = null) ");
				 filter.SetFilterPart("de", "(IsDeleted != true OR IsDeleted = null)");


					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
	                    	if (contextRequest.User !=null )
	                        	if (contextRequest.Company != null ){
	                        		//if (sbQuerySystem.Length > 0)
	                        		//	    			sbQuerySystem.Append( " And ");	
									//sbQuerySystem.Append(@" (GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
									filter.SetFilterPart("co",@"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @"""))");
								}
						}	
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				//string predicateString = predicate.ToDynamicLinq<accCustomer>();
				//predicateString += sbQuerySystem.ToString();
				filter.CleanAndProcess("");

				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed(); //SFSdotNet.Framework.Linq.Utils.ExtractSpecificProperties("", ref predicateString );               
                string predicateWithManyRelations = filter.GetFilterChildren(); //SFSdotNet.Framework.Linq.Utils.CleanPartExpression(predicateString);

                //QueryUtils.BreakeQuery1(predicateString, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
                var _queryable = query.AsQueryable();
                if (!string.IsNullOrEmpty(predicateWithManyRelations))
                    _queryable = _queryable.Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams);
				if (contextRequest.CustomQuery.SpecificProperties.Count > 0)
                {

                    StringBuilder sbProps = new StringBuilder();
                    contextRequest.CustomQuery.SpecificProperties.Add("GuidCustomer");
                    
					foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                    {
						if(sbProps.Length > 0)
							sbProps.Append(",");
                        sbProps.Append(prop);
                    }
					    IQueryable  queryableSelective = null ;
					  
					  if (!string.IsNullOrEmpty(predicateWithManyRelations))
							queryableSelective = con.accCustomers.AsQueryable().Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams).Select(string.Format("new({0})", sbProps.ToString()));
					else
						queryableSelective = con.accCustomers.AsQueryable().Select(string.Format("new({0})", sbProps.ToString()));


                    //if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
					//	queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

                    QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
                    
					if (!string.IsNullOrEmpty(queryOps.OrderByAndSort))
                        queryableSelective = queryableSelective.OrderBy(queryOps.OrderByAndSort);
                    if (queryOps.Skip != null)
                    {
                        queryableSelective = queryableSelective.Skip(queryOps.Skip.Value);
                    }
                    if (queryOps.PageSize != null)
                    {
                        queryableSelective = queryableSelective.Take(queryOps.PageSize.Value);
                    }
                    //var results = queryableSelective.ToList();
                    result = new List<accCustomer>();
                    accCustomer itemDef = null;
                    foreach (var item in queryableSelective)
                    {
                        itemDef = new accCustomer();

                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            if (!prop.Contains("."))
                            {
                                itemDef.GetType().GetProperty(prop).SetValue(itemDef, item.GetType().GetProperty(prop).GetValue(item));
                            }
                            else {
                                throw new Exception("La seleccion de relaciones aún no esta soportada");
                            }

                        }

                        result.Add(itemDef);
                    }

                }
                else
                {
				var  queryable = _queryable.Select(                    
				p => 
                        new
                    {
					GuidCustomer = p.GuidCustomer
,Name = p.Name
,LegalName = p.LegalName
,Address = p.Address
,LegalCode = p.LegalCode
,emailInvoice = p.emailInvoice
,CreatedDate = p.CreatedDate
,UpdatedDate = p.UpdatedDate
,CreatedBy = p.CreatedBy
,UpdatedBy = p.UpdatedBy
,IsDeleted = p.IsDeleted
,GuidCompany = p.GuidCompany

,

	
                    }
                    
                    );
					
				
                 if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
                    queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

				QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
            	if (!string.IsNullOrEmpty(queryOps.OrderByAndSort))
					queryable = queryable.OrderBy(queryOps.OrderByAndSort);
               	if (queryOps.Skip != null)
                {
                    queryable = queryable.Skip(queryOps.Skip.Value);
                }
                if (queryOps.PageSize != null)
                {
                    queryable = queryable.Take (queryOps.PageSize.Value);
                }
                result = queryable.AsEnumerable().
                    Select(
                    p =>  new accCustomer()
                    {
					GuidCustomer = p.GuidCustomer
,Name = p.Name
,LegalName = p.LegalName
,Address = p.Address
,LegalCode = p.LegalCode
,emailInvoice = p.emailInvoice
,CreatedDate = p.CreatedDate
,UpdatedDate = p.UpdatedDate
,CreatedBy = p.CreatedBy
,UpdatedBy = p.UpdatedBy
,IsDeleted = p.IsDeleted
,GuidCompany = p.GuidCompany

                    }
                     ).ToList();
				}


			 if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e = new BusinessRulesEventArgs<accCustomer>() { Items= result, IncludingComputedLinq = true, ContextRequest = contextRequest, FilterExpressionString  = predicateString } :  e);
  
			
  
                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
            }
        }
		public List<accCustomer> GetBy(Expression<Func<accCustomer, bool>> predicate, bool loadRelations, ContextRequest contextRequest)
        {
			if(!loadRelations)
				return GetBy(predicate, contextRequest);
			else
				return GetBy(predicate, contextRequest, "accInvoices");

        }

        public List<accCustomer> GetBy(Expression<Func<accCustomer, bool>> predicate, int? pageSize, int? page, string orderBy, SFSdotNet.Framework.Data.SortDirection? sortDirection)
        {
            return GetBy(predicate, new ContextRequest() { CustomQuery = new CustomQuery() { Page = page, PageSize = pageSize, OrderBy = orderBy, SortDirection = sortDirection } });
        }
        public List<accCustomer> GetBy(Expression<Func<accCustomer, bool>> predicate)
        {

			if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }
			ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();

			contextRequest.CurrentContext = SFSdotNet.Framework.My.Context.CurrentContext;
			            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

            contextRequest.CustomQuery.FilterExpressionString = null;
            return this.GetBy(predicate, contextRequest, "");
        }
        #endregion
        #region Dynamic String
		private string GetSpecificFilter(string filter) {
            string result = "";
		    //string linqFilter = String.Empty;
            string freeTextFilter = String.Empty;
            if (filter.Contains("|"))
            {
               // linqFilter = filter.Split(char.Parse("|"))[0];
                freeTextFilter = filter.Split(char.Parse("|"))[1];
            }
            //else {
            //    freeTextFilter = filter;
            //}
            //else {
            //    linqFilter = filter;
            //}
			// linqFilter = SFSdotNet.Framework.Linq.Utils.ReplaceCustomDateFilters(linqFilter);
            //string specificFilter = linqFilter;
            if (!string.IsNullOrEmpty(freeTextFilter))
            {
                System.Text.StringBuilder sbCont = new System.Text.StringBuilder();
                /*if (specificFilter.Length > 0)
                {
                    sbCont.Append(" AND ");
                    sbCont.Append(" ({0})");
                }
                else
                {
                    sbCont.Append("{0}");
                }*/
                //var words = freeTextFilter.Split(char.Parse(" "));
				var word = freeTextFilter;
                System.Text.StringBuilder sbSpec = new System.Text.StringBuilder();
                 int nWords = 1;
				/*foreach (var word in words)
                {
					if (word.Length > 0){
                    if (sbSpec.Length > 0) sbSpec.Append(" AND ");
					if (words.Length > 1) sbSpec.Append("("); */
					
	
					
											
					sbSpec.Append(string.Format(@"Name.Contains(""{0}"")", word));

					
											sbSpec.Append(" OR ");
										
					sbSpec.Append(string.Format(@"LegalName.Contains(""{0}"")", word));

					
											sbSpec.Append(" OR ");
										
					sbSpec.Append(string.Format(@"Address.Contains(""{0}"")", word));

					
											sbSpec.Append(" OR ");
										
					sbSpec.Append(string.Format(@"LegalCode.Contains(""{0}"")", word));

					
											sbSpec.Append(" OR ");
										
					sbSpec.Append(string.Format(@"emailInvoice.Contains(""{0}"")", word));

					
	
					
	
					
	
					
	
					
	
					
	
					
								 //sbSpec.Append("*extraFreeText*");

                    /*if (words.Length > 1) sbSpec.Append(")");
					
					nWords++;

					}

                }*/
                //specificFilter = string.Format("{0}{1}", specificFilter, string.Format(sbCont.ToString(), sbSpec.ToString()));
                                 result = sbSpec.ToString();  
            }
			//result = specificFilter;
			
			return result;

		}
	
			public List<accCustomer> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  params object[] extraParams)
        {
			return GetBy(filter, pageSize, page, orderBy, orderDir,  null, extraParams);
		}
           public List<accCustomer> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir, string usemode, params object[] extraParams)
            { 
                return GetBy(filter, pageSize, page, orderBy, orderDir, usemode, null, extraParams);
            }


		public List<accCustomer> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  string usemode, ContextRequest context, params object[] extraParams)

        {

            // string freetext = null;
            //if (filter.Contains("|"))
            //{
            //    int parts = filter.Split(char.Parse("|")).Count();
            //    if (parts > 1)
            //    {

            //        freetext = filter.Split(char.Parse("|"))[1];
            //    }
            //}
		
            //string specificFilter = "";
            //if (!string.IsNullOrEmpty(filter))
            //  specificFilter=  GetSpecificFilter(filter);
            if (string.IsNullOrEmpty(orderBy))
            {
			                orderBy = "UpdatedDate";
            }
			//orderDir = "desc";
			SFSdotNet.Framework.Data.SortDirection direction = SFSdotNet.Framework.Data.SortDirection.Ascending;
            if (!string.IsNullOrEmpty(orderDir))
            {
                if (orderDir == "desc")
                    direction = SFSdotNet.Framework.Data.SortDirection.Descending;
            }
            if (context == null)
                context = new ContextRequest();
			else
                context.CustomQuery = new CustomQuery();
             //context.FreeText = freetext;
             context.UseMode = usemode;
             context.CustomQuery =new SFSdotNet.Framework.My.CustomQuery()
 
                {
                    ExtraParams = extraParams,

                    OrderBy = orderBy,
                    SortDirection = direction,
                    Page = page,
                    PageSize = pageSize
               };
            

            if (!preventSecurityRestrictions) {
			 if (context.CurrentContext == null)
                {
					if (SFSdotNet.Framework.My.Context.CurrentContext != null &&  SFSdotNet.Framework.My.Context.CurrentContext.Company != null && SFSdotNet.Framework.My.Context.CurrentContext.User != null)
					{
						context.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
						context.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

					}
					else {
						throw new Exception("The security rule require a specific user and company");
					}
				}
            }
            return GetBy(filter, context);
  
        }


        public List<accCustomer> GetBy(string strWhere, ContextRequest contextRequest)
        {
        	#region old code
				
				 //Expression<Func<tvsReservationTransport, bool>> predicate = null;
				string strWhereClean = strWhere.Replace("*extraFreeText*", "").Replace("()", "");
                //if (!string.IsNullOrEmpty(strWhereClean)){

                //    object[] extraParams = null;
                //    //if (contextRequest != null )
                //    //    if (contextRequest.CustomQuery != null )
                //    //        extraParams = contextRequest.CustomQuery.ExtraParams;
                //    //predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<tvsReservationTransport, bool>(strWhereClean, extraParams != null? extraParams.Cast<Guid>(): null);				
                //}
				 if (contextRequest == null)
                {
                    contextRequest = new ContextRequest();
                    if (contextRequest.CustomQuery == null)
                        contextRequest.CustomQuery = new CustomQuery();
                }
                  if (!preventSecurityRestrictions) {
					if (contextRequest.User == null || contextRequest.Company == null)
                      {
                     if (SFSdotNet.Framework.My.Context.CurrentContext.Company != null && SFSdotNet.Framework.My.Context.CurrentContext.User != null)
                     {
                         contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                         contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

                     }
                     else {
                         throw new Exception("The security rule require a specific User and Company ");
                     }
					 }
                 }
            contextRequest.CustomQuery.FilterExpressionString = strWhere;
				//return GetBy(predicate, contextRequest);  

			#endregion				
				
                    return GetBy(strWhere, contextRequest, "");  


        }
       public List<accCustomer> GetBy(string strWhere)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
			
            return GetBy(strWhere, context, null);
        }

        public List<accCustomer> GetBy(string strWhere, string includes)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
            return GetBy(strWhere, context, includes);
        }

        #endregion
        #endregion
		
		  #region SaveOrUpdate
        private accCustomer Save(accCustomer entity, bool saveChanges, EFPocoContext con)
        {
				ObjectContext context = null;
            return Update(entity, saveChanges,null, out context);

			
        }
		 public  accCustomer Create( accCustomer entity, params Expression<Func< accCustomer, object>>[] paths)
         {
             return Create(entity, null, paths);

         }
 		 public accCustomer Create(accCustomer entity)
        {
				ObjectContext context = null;
				    if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: Create");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

				return this.Create(entity, true, contextRequest, out context);


        }
        public accCustomer Create(accCustomer entity, ContextRequest contextRequest)
         {
             ObjectContext context = null;
             return this.Create(entity, true, contextRequest,out context);

         }
         public accCustomer Create(accCustomer entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext context)
        {
                    return Create(entity, saveChanges , contextRequest , out context, null);
        }
         public accCustomer Create(accCustomer entity, ContextRequest contextRequest, params Expression<Func<accCustomer,object>>[] paths)
        {
            ObjectContext context = null;
            if(paths != null)
				return Create(entity, true,contextRequest, out context, paths);
			else 
				return Create(entity, true,contextRequest, out context);
        }
        public accCustomer Create(accCustomer entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext context, params Expression<Func<accCustomer,object>>[] pocopaths)
        {
			using (EFPocoContext con = new EFPocoContext())
			{
				accCustomer itemResult = null;
#region Autos


			entity.CreatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.CreatedBy = contextRequest.User.GuidUser;
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.UpdatedBy = contextRequest.User.GuidUser;
	
			if (contextRequest != null)
				if(contextRequest.User != null)
					if (contextRequest.Company != null)
						entity.GuidCompany = contextRequest.Company.GuidCompany;
	

#endregion
                e = null;
                OnCreating(this,e = new BusinessRulesEventArgs<accCustomer>() { ContextRequest = contextRequest, Item=entity, PathExpressions = pocopaths, SaveChanges =saveChanges });
				   if (e != null) {
						if (e.Cancel)
						{
							context = null;
							return e.Item;

						}
					}

                    if (entity.GuidCustomer == Guid.Empty)
                   {
                       entity.GuidCustomer = Guid.NewGuid();

                   }



				accCustomerAdapter adapter = con.GetAdapterObject<accCustomerAdapter>(entity);;
				List<Expression<Func<accCustomerAdapter, object>>> paths = new List<Expression<Func<accCustomerAdapter,object>>>();
                
			    if (pocopaths != null && pocopaths.Length > 0)
                {
					// Translate
                    foreach (var pocopath in pocopaths)
                    {
                        var param = Expression.Parameter(typeof(accCustomerAdapter), "p");
                        var member = MemberExpression.PropertyOrField(param, ((System.Linq.Expressions.MemberExpression)(((System.Linq.Expressions.LambdaExpression)(pocopath)).Body)).Member.Name);
                        Expression<Func<accCustomerAdapter, object>> path  = null;
                        switch(member.Member.Name){
                        
							case "accInvoices":
								path = p => p.accInvoices.First().WithoutUpdate();

								//path = p => member;
							break;
							
							default:
								path = p => member;
							break;
                        }

                        
                       paths.Add(path.Expand());
                    }
                }
                object aux = null;
					//paths = pathBuilder.ToArray();

#region Childs accInvoices 
				if (adapter.accInvoices != null)
                {
                    foreach (var item in adapter.accInvoices)
                    {
						
							if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accInvoices", item);
							if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)){ 
								//paths.Add(p => p.accInvoices.First().WithoutUpdate());
								
							if (item.accCustomer == null)
								item.accCustomer = adapter;

								item.EntityKey = null;
							}

                    }
					if (adapter.accInvoices.Count > 0){
						paths.Add(p => p.accInvoices.First().WithoutUpdate());
											
					}
                }
#endregion 




                //con.WrappedContext.AttachObjectGraph<accCustomerAdapter>(adapter, p=>p.accInvoices);
                con.WrappedContext.AttachObjectGraph<accCustomerAdapter>(adapter, paths.ToArray());
              	if (saveChanges){
                    con.WrappedContext.SaveChanges(SaveOptions.AcceptAllChangesAfterSave);
					 
				}
                else
                    con.WrappedContext.SaveChanges(SaveOptions.None);
                if (!saveChanges)
                    context = con.WrappedContext;
                else
                    context = null;
				itemResult = adapter.PocoEntity;
                if (e != null)
                {
                    e.Item = itemResult;
                }
                OnCreated(this, e == null ? e = new BusinessRulesEventArgs<accCustomer>() { ContextRequest = contextRequest, Item = itemResult, PathExpressions = pocopaths, SaveChanges = saveChanges } : e);



                if (e != null)
                {
                    itemResult = e.Item;
                }
                              return itemResult;
            }
        }
        BusinessRulesEventArgs<accCustomer> e = null;
        public void Create(List<accCustomer> entities)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            Create(entities, contextRequest, null);
        }
        public void Create(List<accCustomer> entities, ContextRequest contextRequest)
        
        {
			ObjectContext context = null;
            	foreach (accCustomer entity in entities)
				{
					this.Create(entity, true, contextRequest, out context);
				}
        }
         public accCustomer Update(accCustomer entity)
        {
            if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return Update(entity, contextRequest);
        }
        public accCustomer Update(accCustomer entity, ContextRequest requestContext)
        {
			  ObjectContext context = null;
            return Update(entity, true,requestContext, out context);
         }
		public  accCustomer Update(accCustomer entity, params Expression<Func<accCustomer, object>>[] pocopaths)
        {
			  ObjectContext context = null;
              return Update(entity, true, null, out context, pocopaths);
         }
        public accCustomer Update(accCustomer entity, ContextRequest requestContext, bool saveChanges, out ObjectContext outcontext)
        {
			return Update(entity, saveChanges,requestContext, out outcontext, null);
		}
         public accCustomer Update(accCustomer entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext outcontext, params Expression<Func<accCustomer,object>>[] pocopaths)
        {
		 if ((System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null) && contextRequest == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Update");
            }
            if (contextRequest == null)
            {
                contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            }

			using (EFPocoContext con = new EFPocoContext())
			{
				accCustomer  itemResult = null;

	
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
			if(contextRequest.User != null)
				entity.UpdatedBy = contextRequest.User.GuidUser;

	    var oldentity = GetBy(p => p.GuidCustomer == entity.GuidCustomer, contextRequest).FirstOrDefault();
		if (oldentity != null) {
		
            entity.CreatedDate = oldentity.CreatedDate;
            entity.CreatedBy = oldentity.CreatedBy;
	
            entity.GuidCompany = oldentity.GuidCompany;
	
			

		}

				e = null;
                OnUpdating(this,e = new BusinessRulesEventArgs<accCustomer>() { ContextRequest = contextRequest, Item=entity, PathExpressions = pocopaths, SaveChanges =saveChanges });
				   if (e != null) {
						if (e.Cancel)
						{
							outcontext = null;
							return e.Item;

						}
					}

                accCustomerAdapter adapter = con.GetAdapterObject<accCustomerAdapter>(entity);
                adapter.EntityKey = con.WrappedContext.CreateEntityKey("accCustomers", adapter);
				    var es = con.accCustomers;
				List<Expression<Func<accCustomerAdapter, object>>> paths = new List<Expression<Func<accCustomerAdapter,object>>>();
                /* if (pocopaths != null)
                    if (pocopaths.Length == 0)
                        pocopaths = null;*/

			    if (pocopaths != null && pocopaths.Length > 0)
                {
					// Translate
                    foreach (var pocopath in pocopaths)
                    {
                        var param = Expression.Parameter(typeof(accCustomerAdapter), "p");
                        var member = MemberExpression.PropertyOrField(param, ((System.Linq.Expressions.MemberExpression)(((System.Linq.Expressions.LambdaExpression)(pocopath)).Body)).Member.Name);
                        Expression<Func<accCustomerAdapter, object>> path  = null;
                        switch(member.Member.Name){
                        
							case "accInvoices":
								//path = p => member;
								path = p => p.accInvoices.First().WithoutUpdate();
							break;
							
							default:
								path = p => member;
							break;
                        }

                        paths.Add(path.Expand());
 					}
                }
                else {
                  paths = new List<Expression<Func<accCustomerAdapter, object>>>();

					//List<Expression<Func<accCustomerAdapter,object>>> pathBuilder = new List<Expression<Func<accCustomerAdapter,object>>>();
		
					//paths = pathBuilder.ToArray();		
			}
			object aux = null;
				if (adapter.accInvoices != null)
                {
                    foreach (var item in adapter.accInvoices)
                    {


                        if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accInvoices", item);
						if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)) item.EntityKey = null;
                        
                    }
					
                    if (adapter.accInvoices.Count > 0)
                    {
                        paths.Add(p => p.accInvoices.First().WithoutUpdate());

                    }

                }



                //con.AttachObjectGraph<accCustomer>(adapter, p=>p.accInvoices);
                con.WrappedContext.AttachObjectGraph<accCustomerAdapter>(adapter, paths.ToArray());
				if (saveChanges){
                	con.WrappedContext.SaveChanges();
					 
					}
                if(!saveChanges)
					outcontext = con.WrappedContext;
				else
					outcontext = null;
				itemResult = adapter.PocoEntity;
				OnUpdated(this, e = new BusinessRulesEventArgs<accCustomer>() { ContextRequest = contextRequest, Item=itemResult, PathExpressions = pocopaths, SaveChanges =saveChanges });

              	return itemResult;

			  }
        }
        public accCustomer Save(accCustomer entity)
        {
			return Save(entity, true, null);
        }
        public int Save(List<accCustomer> entities)
        {
			using (EFPocoContext con = new EFPocoContext())
			{
			
            int n = 0;
            foreach (accCustomer item in entities)
            {
                try
                {
                    this.Save(item, false, con);
                    n++;
                }catch (Exception ex){
                    SFSdotNet.Framework.My.EventLog.Exception(ex);
                }
            }
            con.SaveChanges();
            return n;
            }
        }
        #endregion
        #region Delete
        public void Delete(accCustomer entity)
        {
				this.Delete(entity, null);
			
        }
		 public void Delete(accCustomer entity, ContextRequest contextRequest)
        {
				ObjectContext context = null;
				this.Delete(entity, true, out context, contextRequest);
			
        }

        
        public void Delete(accCustomer entity, bool saveChanges, out  ObjectContext context, ContextRequest contextRequest, BusinessRulesEventArgs<accCustomer> e = null)
        {
			using (EFPocoContext _con = new EFPocoContext())
			{
				int result = 0;
				
               	BusinessRulesEventArgs<accCustomer> _e = null;
               List<accCustomer> _items = new List<accCustomer>();
                _items.Add(entity);
                if (e == null || e.PreventPartialPropagate == false)
                {
                    OnDeleting(this, _e = (e == null ? new BusinessRulesEventArgs<accCustomer>() { ContextRequest = contextRequest, Item = entity, Items = _items, SaveChanges = saveChanges } : e));
                }
                if (_e != null)
                {
                    if (_e.Cancel)
						{
							context = null;
							return;

						}
					}


				accCustomerAdapter adapter = _con.GetAdapterObject<accCustomerAdapter>(entity);
                adapter.EntityKey = _con.WrappedContext.CreateEntityKey("accCustomers", adapter);
                
	            //adapter = _con.WrappedContext.AttachObjectGraph<accCustomerAdapter>(adapter);
				try{
					_con.WrappedContext.AttachTo("accCustomers", adapter);
                }catch{
					
				}
									//IsDeleted
					bool logicDelete = true;
					if (adapter.IsDeleted != null)
					{
						if (adapter.IsDeleted.Value)
							logicDelete = false;
					}
					if (logicDelete)
					{
											entity = GetBy(p => p.GuidCustomer == entity.GuidCustomer, contextRequest).FirstOrDefault();
						entity.IsDeleted = true;
						Update(entity, contextRequest);
					}
					else {
						_con.WrappedContext.DeleteObject(adapter);
					}
								
				if (!saveChanges)
                    context = _con.WrappedContext;
                else
                    context = null;
				 SaveOptions saveOption = SaveOptions.None;
                if (saveChanges)
                    saveOption = SaveOptions.AcceptAllChangesAfterSave;

				result = _con.WrappedContext.SaveChanges(saveOption);
				if (saveChanges){
					
					}
			if (e == null || e.PreventPartialPropagate == false)
                {

                    if (_e == null)
                        _e = new BusinessRulesEventArgs<accCustomer>() { ContextRequest = contextRequest, Item = entity, Items = _items };

                    OnDeleted(this, _e);
                }

				//return null;
			}            
        }
        public void Delete(List<accCustomer> entities,  ContextRequest contextRequest = null )
        {
				ObjectContext context = null;
			 BusinessRulesEventArgs<accCustomer> _e = null;

                OnDeleting(this, _e = new BusinessRulesEventArgs<accCustomer>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities });
                if (_e != null)
                {
                    if (_e.Cancel)
                    {
                        context = null;
                        return;

                    }
                }
                bool allSucced = true;
                BusinessRulesEventArgs<accCustomer> eToChilds = new BusinessRulesEventArgs<accCustomer>();
                if (_e != null)
                {
                    eToChilds = _e;
                }
                else
                {
                    eToChilds = new BusinessRulesEventArgs<accCustomer>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                }
				foreach (accCustomer item in entities)
				{
					try
                    {
                        this.Delete(item, true, out context, contextRequest, e: eToChilds);
                    }
                    catch (Exception ex)
                    {
                        SFSdotNet.Framework.My.EventLog.Error(ex);
                        allSucced = false;
                    }
				}
				if (_e == null)
                    _e = new BusinessRulesEventArgs<accCustomer>() { ContextRequest = contextRequest, CountResult = entities.Count, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                OnDeleted(this, _e);

			
        }
        #endregion
 
        #region GetCount
		 public int GetCount(Expression<Func<accCustomer, bool>> predicate)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

			return GetCount(predicate, contextRequest);
		}
        public int GetCount(Expression<Func<accCustomer, bool>> predicate, ContextRequest contextRequest)
        {


		
			using (EFPocoContext con = new EFPocoContext())
			{


				if (predicate == null) predicate = PredicateBuilder.True<accCustomer>();
           		predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted == null);
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    		if (contextRequest.User !=null )
                        		if (contextRequest.Company != null )
                        			predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				
				return con.accCustomers.Count(predicate);
			}

        }
		  public int GetCount(string predicate,  ContextRequest contextRequest)
         {
             return GetCount(predicate, null, contextRequest);
         }

         public int GetCount(string predicate)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return GetCount(predicate, contextRequest);
        }
		 public int GetCount(string predicate, string usemode){
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
				return GetCount( predicate,  usemode,  contextRequest);
		 }
        public int GetCount(string predicate, string usemode, ContextRequest contextRequest){
			  string freetext = null;
            Filter filter = new Filter();

              if (predicate.Contains("|"))
              {
                 
                  filter.SetFilterPart("ft", GetSpecificFilter(predicate));
                 
                  filter.ProcessText(predicate.Split(char.Parse("|"))[0]);
                  freetext = predicate.Split(char.Parse("|"))[1];
              }
              else {
                  filter.ProcessText(predicate);
              }
           
			e = null;
			contextRequest.FreeText = freetext;
			contextRequest.UseMode = usemode;
            OnCounting(this, e = new BusinessRulesEventArgs<accCustomer>() {  Filter =filter, ContextRequest = contextRequest });
            if (e != null)
            {
                if (e.Cancel)
                {
                    context = null;
                    return e.CountResult;

                }

            

            }
			 predicate = filter.GetFilterComplete();
			StringBuilder sbQuerySystem = new StringBuilder();
		
					
                    filter.SetFilterPart("de","(IsDeleted != true OR IsDeleted == null)");
			
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    	if (contextRequest.User !=null )
                        	if (contextRequest.Company != null ){
                        		

								filter.SetFilterPart("co", @"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
						
						
							}
							
							}
							if (preventSecurityRestrictions) preventSecurityRestrictions= false;
			using (EFContext con = new EFContext())
			{
				   
                 filter.CleanAndProcess("");
				//string predicateWithFKAndComputed = SFSdotNet.Framework.Linq.Utils.ExtractSpecificProperties("", ref predicate );               
				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed();
               string predicateWithManyRelations = filter.GetFilterChildren();
			   ///QueryUtils.BreakeQuery1(predicate, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
			   predicate = filter.GetFilterComplete();
               if (!string.IsNullOrEmpty(predicate))
               {
				
					
                    return con.accCustomers.Count(System.Linq.Dynamic.DynamicExpression.ParseLambda<accCustomer, bool>(predicate));
					
                }else
                    return con.accCustomers.Count();

			}

		}
         public int GetCount()
        {
            return GetCount(p => true);
        }
        #endregion
        
         public accCustomer Update(accCustomer entity, string paths)
        {
            return Update(entity, paths.Split(char.Parse(",")));
            
        }

        public accCustomer Update(accCustomer entity, string[] paths)
        {
            // Translate
            List<Expression<Func<accCustomer, object>>> pathList = new List<Expression<Func<accCustomer, object>>>();
            for (int i = 0; i <= paths.Length -1; i++)
            {
                var param = Expression.Parameter(typeof(accCustomer), "p");
                var member = MemberExpression.PropertyOrField(param, paths[i]);

                Expression<Func<accCustomer, object>> path = p => member;
                pathList.Add(path.Expand());
            }
			ObjectContext context = null;
			 return Update(entity, true,null, out context,  pathList.ToArray());
           //return Update(entity, pathList.ToArray());
        }

        public void Update(List<accCustomer> entities, string paths)
        {
            foreach (var entity in entities )
            {
                Update(entity, paths);
            }
        }
		public accCustomer Create(accCustomer entity, ContextRequest contextRequest, string paths)
        {
          

            if (string.IsNullOrEmpty(paths))
                return Create(entity, contextRequest);

            return Create(entity, contextRequest, paths.Split(char.Parse(",")));
        }
        public accCustomer Create(accCustomer entity, string paths)
        {
			 if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return Create(entity, contextRequest, paths);

        }

        public  void Create(List<accCustomer> entities, ContextRequest requestContext, string paths)
        {
            foreach (var entity in entities)
            {
                Create(entity,requestContext, paths);
            }
        }

        public void Create(List<accCustomer> entities, string[] paths)
        {
            foreach (var entity in entities)
            {
                Create(entity, null, paths);
            }
        }
        
        public accCustomer  Create(accCustomer entity, ContextRequest contextRequest, string[] paths)
        {
            List<Expression<Func<accCustomer, object>>> pathList = new List<Expression<Func<accCustomer, object>>>();
            for (int i = 0; i < paths.Length - 1; i++)
            {
                var param = Expression.Parameter(typeof(accCustomer), "p");
                var member = MemberExpression.PropertyOrField(param, paths[i]);

                Expression<Func<accCustomer, object>> path = p => member;
                pathList.Add(path.Expand());
            }
            return Create(entity, contextRequest, pathList.ToArray());
        }
        public void Delete(List<accCustomer.CompositeKey> entityKeys)
        {

            List<accCustomer> items = new List<accCustomer>();
            foreach (var itemKey in entityKeys)
            {
                items.Add(GetByKey(itemKey.GuidCustomer));
            }

            Delete(items);

        }
		
		
	}
		public partial class accFilesBR{
	 	
           
		 #region Partial methods

           partial void OnUpdating(object sender, BusinessRulesEventArgs<accFile> e);

            partial void OnUpdated(object sender, BusinessRulesEventArgs<accFile> e);

            partial void OnCreating(object sender, BusinessRulesEventArgs<accFile> e);
            partial void OnCreated(object sender, BusinessRulesEventArgs<accFile> e);

            partial void OnDeleting(object sender, BusinessRulesEventArgs<accFile> e);
            partial void OnDeleted(object sender, BusinessRulesEventArgs<accFile> e);

            partial void OnGetting(object sender, BusinessRulesEventArgs<accFile> e);
            partial void OnTaken(object sender, BusinessRulesEventArgs<accFile> e);
            partial void OnCounting(object sender, BusinessRulesEventArgs<accFile> e);
 
 
            #endregion
			
		private static accFilesBR singlenton =null;
				public static accFilesBR NewInstance(){
					return  new accFilesBR();
					
				}
		public static accFilesBR Instance{
			get{
				if (singlenton == null)
					singlenton = new accFilesBR();
				return singlenton;
			}
		}
		private bool preventSecurityRestrictions = false;
		 public bool PreventAuditTrail { get; set;  }
		#region Fields
        EFPocoContext context = null;
        #endregion
        #region Constructor
        public accFilesBR()
        {
            context = new EFPocoContext();
        }
		 public accFilesBR(bool preventSecurity)
            {
                this.preventSecurityRestrictions = preventSecurity;
				context = new EFPocoContext();
            }
        #endregion
		
		#region Get

 		public IQueryable<accFile> Get()
        {
            //using (EFContext con = new EFContext())
            //{
				EFContext con = new EFContext();
                var query = con.accFiles.AsQueryable();
                con.ContextOptions.ProxyCreationEnabled = false;

                //query = ContextQueryBuilder<Nutrient>.ApplyContextQuery(query, contextRequest);

                return query;




            //}

        }
		
		public List<accFile> GetAll()
        {
            return this.GetBy(p => true);
        }
        public List<accFile> GetAll(string includes)
        {
            return this.GetBy(p => true, includes);
        }
        public accFile GetByKey(Guid guidFile)
        {
            return GetByKey(guidFile, true);
        }
        public accFile GetByKey(Guid guidFile, bool loadIncludes)
        {
            accFile item = null;
			var query = PredicateBuilder.True<accFile>();
                    
			string strWhere = @"GuidFile = Guid(""" + guidFile.ToString()+@""")";
            Expression<Func<accFile, bool>> predicate = null;
            if (!string.IsNullOrEmpty(strWhere))
                predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<accFile, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
			 ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();
            contextRequest.CustomQuery.FilterExpressionString = strWhere;

			//item = GetBy(predicate, loadIncludes, contextRequest).FirstOrDefault();
			item = GetBy(strWhere,loadIncludes,contextRequest).FirstOrDefault();
            return item;
        }
         public List<accFile> GetBy(string strWhere, bool loadRelations, ContextRequest contextRequest)
        {
            if (!loadRelations)
                return GetBy(strWhere, contextRequest);
            else
                return GetBy(strWhere, contextRequest, "");

        }
		  public List<accFile> GetBy(string strWhere, bool loadRelations)
        {
              if (!loadRelations)
                return GetBy(strWhere, new ContextRequest());
            else
                return GetBy(strWhere, new ContextRequest(), "");

        }
         public accFile GetByKey(Guid guidFile, params Expression<Func<accFile, object>>[] includes)
        {
            accFile item = null;
			string strWhere = @"GuidFile = Guid(""" + guidFile.ToString()+@""")";
          Expression<Func<accFile, bool>> predicate = null;
            if (!string.IsNullOrEmpty(strWhere))
                predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<accFile, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
        item = GetBy(predicate, includes).FirstOrDefault();
         ////   item = GetBy(strWhere,includes).FirstOrDefault();
			return item;

        }
        public accFile GetByKey(Guid guidFile, string includes)
        {
            accFile item = null;
			string strWhere = @"GuidFile = Guid(""" + guidFile.ToString()+@""")";
            
			
            item = GetBy(strWhere, includes).FirstOrDefault();
            return item;

        }
		 public accFile GetByKey(Guid guidFile, string usemode, string includes)
		{
			return GetByKey(guidFile, usemode, null, includes);

		 }
		 public accFile GetByKey(Guid guidFile, string usemode, ContextRequest context,  string includes)
        {
            accFile item = null;
			string strWhere = @"GuidFile = Guid(""" + guidFile.ToString()+@""")";
			if (context == null)
				context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
			context.CustomQuery.IsByKey = true;
            context.CustomQuery.FilterExpressionString = strWhere;
            context.UseMode = usemode;
            item = GetBy(strWhere,context , includes).FirstOrDefault();
            return item;

        }

        #region Dynamic Predicate
        public List<accFile> GetBy(Expression<Func<accFile, bool>> predicate, int? pageSize, int? page)
        {
            return this.GetBy(predicate, pageSize, page, null, null);
        }
        public List<accFile> GetBy(Expression<Func<accFile, bool>> predicate, ContextRequest contextRequest)
        {

            return GetBy(predicate, contextRequest,"");
        }
        
        public List<accFile> GetBy(Expression<Func<accFile, bool>> predicate, ContextRequest contextRequest, params Expression<Func<accFile, object>>[] includes)
        {
            StringBuilder sb = new StringBuilder();
           if (includes != null)
            {
                foreach (var path in includes)
                {

						if (sb.Length > 0) sb.Append(",");
						sb.Append(SFSdotNet.Framework.Linq.Utils.IncludeToString<accFile>(path));

               }
            }
            return GetBy(predicate, contextRequest, sb.ToString());
        }
        
        
        public List<accFile> GetBy(Expression<Func<accFile, bool>> predicate, string includes)
        {
			ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";

            return GetBy(predicate, context, includes);
        }

        public List<accFile> GetBy(Expression<Func<accFile, bool>> predicate, params Expression<Func<accFile, object>>[] includes)
        {
			if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }
			ContextRequest context = new ContextRequest();
			            context.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            context.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";
            return GetBy(predicate, context, includes);
        }

      
		public bool DisableCache { get; set; }
		 public List<accFile> GetBy(Expression<Func<accFile, bool>> predicate, ContextRequest contextRequest, string includes)
        {
            using (EFPocoContext con = new EFPocoContext())
            {
				if (DisableCache) 
                	con.CachingPolicy = EFCachingProvider.Caching.CachingPolicy.NoCaching;

				List<accFile> result = null;
                 e = null;
	
				OnGetting(con, e = new BusinessRulesEventArgs<accFile>() {  FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null) });

               // OnGetting(con,e = new BusinessRulesEventArgs<accFile>() { FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = contextRequest.CustomQuery.FilterExpressionString});
				   if (e != null) {
				    predicate = e.FilterExpression;
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				con.EnableChangeTrackingUsingProxies = false;
				con.WrappedContext.accFiles.MergeOption = MergeOption.NoTracking;
                con.WrappedContext.ContextOptions.ProxyCreationEnabled = false;
                if (predicate == null) predicate = PredicateBuilder.True<accFile>();
                
                var es = con.accFiles;

                IQueryable<accFile> query = es.AsQueryable();

                                if (!string.IsNullOrEmpty(includes))
                {
                    foreach (string include in includes.Split(char.Parse(",")))
                    {
						if (!string.IsNullOrEmpty(include))
                            query = query.Include(include);
                    }
                }
                    predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
					 	if (!preventSecurityRestrictions)
						{
							if (contextRequest != null )
		                    	if (contextRequest.User !=null )
		                        	if (contextRequest.Company != null)
		                        		predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				query =query.Where(predicate);
                query = ContextQueryBuilder<accFile>.ApplyContextQuery(query, contextRequest);

                result = query.ToList<accFile>();
				  
                if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e =  new BusinessRulesEventArgs<accFile>() { Items= result, IncludingComputedLinq = false, ContextRequest = contextRequest,  FilterExpression = predicate } :  e);
  
			

                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
            }
        }
		public void UpdateAgile(accFile item, params string[] fields)
         {
             List<accFile> list = new List<accFile>();
             list.Add(item);
             this.UpdateBulk(list, fields);
         }
		public void UpdateBulk(List<accFile>  items, params string[] fields)
         {
             SFSdotNet.Framework.My.ContextRequest req = new SFSdotNet.Framework.My.ContextRequest();
             req.CustomQuery = new SFSdotNet.Framework.My.CustomQuery();
             foreach (var field in fields)
             {
                 req.CustomQuery.SpecificProperties.Add(field);
             }
             UpdateBulk(items, req);

         }
        public void UpdateBulk(List<accFile> items, ContextRequest req)
        {
            using (EFContext con = new EFContext())
            {



                foreach (var item in items)
                {
                    var setT = con.CreateObjectSet<accFile>("accFiles");


                    var itemForAttach = new accFile();
			itemForAttach.GuidFile = item.GuidFile;
					
                    itemForAttach = SFSdotNet.Framework.Entities.ConvertEntity.SetProperties<accFile>(item, itemForAttach, null, req.CustomQuery.SpecificProperties.ToArray());
                    setT.Attach(itemForAttach);


                    foreach (var property in req.CustomQuery.SpecificProperties)
                    {
						
                        if (property != "GuidFile")
                            con.ObjectStateManager.GetObjectStateEntry(itemForAttach).SetModifiedProperty(property);

                    }

                }
                con.SaveChanges();


            }
        }
		/*public int Update(List<accFile> items, ContextRequest contextRequest)
            {
                int result = 0;
                using (EFContext con = new EFContext())
                {
                   
                

                    foreach (var item in items)
                    {
                        //secMessageToUser messageToUser = new secMessageToUser();
                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            item.GetType().GetProperty(prop).SetValue(item, item.GetType().GetProperty(prop).GetValue(item));
                        }
                        //messageToUser.GuidMessageToUser = (Guid)item.GetType().GetProperty("GuidMessageToUser").GetValue(item);

                        var setObject = con.CreateObjectSet<accFile>("accFiles");
                        //messageToUser.Readed = DateTime.UtcNow;
                        setObject.Attach(item);
                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            con.ObjectStateManager.GetObjectStateEntry(item).SetModifiedProperty(prop);
                        }
                       
                    }
                    result = con.SaveChanges();

                    


                }
                return result;
            }
           */
        public List<accFile> GetBy(string predicateString, ContextRequest contextRequest, string includes)
        {
            using (EFContext con = new EFContext())
            {
				if (DisableCache) 
                	con.CachingPolicy = EFCachingProvider.Caching.CachingPolicy.NoCaching;

				Filter filter = new Filter();
                if (predicateString.Contains("|"))
                {
                    string ft = GetSpecificFilter(predicateString);
                    if (!string.IsNullOrEmpty(ft))
                        filter.SetFilterPart("ft", ft);
                   
                    contextRequest.FreeText = predicateString.Split(char.Parse("|"))[1];
                    var q1 = predicateString.Split(char.Parse("|"))[0];
                    if (!string.IsNullOrEmpty(q1))
                    {
                        filter.ProcessText(q1);
                    }
                }
                else {
                    filter.ProcessText(predicateString);
                }

				List<accFile> result = null;
                 e = null;
					OnGetting(con, e = new BusinessRulesEventArgs<accFile>() { Filter = filter, ContextRequest = contextRequest /*, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null)*/ });

                  //OnGetting(con,e = new BusinessRulesEventArgs<accFile>() {  ContextRequest = contextRequest, FilterExpressionString = predicateString });
			   	if (e != null) {
				    //predicateString = e.GetQueryString();
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				//	 else {
                //      predicateString = predicateString.Replace("*extraFreeText*", "").Replace("()","");
                //  }
				//con.EnableChangeTrackingUsingProxies = false;
				con.accFiles.MergeOption = MergeOption.NoTracking;
                con.ContextOptions.ProxyCreationEnabled = false;
                //if (predicate == null) predicate = PredicateBuilder.True<accFile>();
                
                var es = con.accFiles;
				IQueryable<accFile> query = es.AsQueryable();
		
				// include relations FK
				if(string.IsNullOrEmpty(includes) ){
					includes ="";
				}
				bool includeFileData = includes.Split(char.Parse(",")).Contains("FileData");

				StringBuilder sbQuerySystem = new StringBuilder();
                    //predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				

				//if (!string.IsNullOrEmpty(predicateString))
                //      sbQuerySystem.Append(" And ");
                //sbQuerySystem.Append(" (IsDeleted != true Or IsDeleted = null) ");
				 filter.SetFilterPart("de", "(IsDeleted != true OR IsDeleted = null)");


					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
	                    	if (contextRequest.User !=null )
	                        	if (contextRequest.Company != null ){
	                        		//if (sbQuerySystem.Length > 0)
	                        		//	    			sbQuerySystem.Append( " And ");	
									//sbQuerySystem.Append(@" (GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
									filter.SetFilterPart("co",@"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @"""))");
								}
						}	
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				//string predicateString = predicate.ToDynamicLinq<accFile>();
				//predicateString += sbQuerySystem.ToString();
				filter.CleanAndProcess("");

				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed(); //SFSdotNet.Framework.Linq.Utils.ExtractSpecificProperties("", ref predicateString );               
                string predicateWithManyRelations = filter.GetFilterChildren(); //SFSdotNet.Framework.Linq.Utils.CleanPartExpression(predicateString);

                //QueryUtils.BreakeQuery1(predicateString, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
                var _queryable = query.AsQueryable();
                if (!string.IsNullOrEmpty(predicateWithManyRelations))
                    _queryable = _queryable.Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams);
				if (contextRequest.CustomQuery.SpecificProperties.Count > 0)
                {

                    StringBuilder sbProps = new StringBuilder();
                    contextRequest.CustomQuery.SpecificProperties.Add("GuidFile");
                    
					foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                    {
						if(sbProps.Length > 0)
							sbProps.Append(",");
                        sbProps.Append(prop);
                    }
					    IQueryable  queryableSelective = null ;
					  
					  if (!string.IsNullOrEmpty(predicateWithManyRelations))
							queryableSelective = con.accFiles.AsQueryable().Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams).Select(string.Format("new({0})", sbProps.ToString()));
					else
						queryableSelective = con.accFiles.AsQueryable().Select(string.Format("new({0})", sbProps.ToString()));


                    //if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
					//	queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

                    QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
                    
					if (!string.IsNullOrEmpty(queryOps.OrderByAndSort))
                        queryableSelective = queryableSelective.OrderBy(queryOps.OrderByAndSort);
                    if (queryOps.Skip != null)
                    {
                        queryableSelective = queryableSelective.Skip(queryOps.Skip.Value);
                    }
                    if (queryOps.PageSize != null)
                    {
                        queryableSelective = queryableSelective.Take(queryOps.PageSize.Value);
                    }
                    //var results = queryableSelective.ToList();
                    result = new List<accFile>();
                    accFile itemDef = null;
                    foreach (var item in queryableSelective)
                    {
                        itemDef = new accFile();

                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            if (!prop.Contains("."))
                            {
                                itemDef.GetType().GetProperty(prop).SetValue(itemDef, item.GetType().GetProperty(prop).GetValue(item));
                            }
                            else {
                                throw new Exception("La seleccion de relaciones aún no esta soportada");
                            }

                        }

                        result.Add(itemDef);
                    }

                }
                else
                {
				var  queryable = _queryable.Select(                    
				p => 
                        new
                    {
					GuidFile = p.GuidFile
,FileSize = p.FileSize
,FileType = p.FileType
,FileName = p.FileName
,CreatedDate = p.CreatedDate
,UpdatedDate = p.UpdatedDate
,CreatedBy = p.CreatedBy
,UpdatedBy = p.UpdatedBy
,IsDeleted = p.IsDeleted
,GuidCompany = p.GuidCompany
,Tags = p.Tags

,FileData = includeFileData ? p.FileData:null


	
                    }
                    
                    );
					
				
                 if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
                    queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

				QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
            	if (!string.IsNullOrEmpty(queryOps.OrderByAndSort))
					queryable = queryable.OrderBy(queryOps.OrderByAndSort);
               	if (queryOps.Skip != null)
                {
                    queryable = queryable.Skip(queryOps.Skip.Value);
                }
                if (queryOps.PageSize != null)
                {
                    queryable = queryable.Take (queryOps.PageSize.Value);
                }
                result = queryable.AsEnumerable().
                    Select(
                    p =>  new accFile()
                    {
					GuidFile = p.GuidFile
,FileSize = p.FileSize
,FileType = p.FileType
,FileName = p.FileName
,FileData = p.FileData
,CreatedDate = p.CreatedDate
,UpdatedDate = p.UpdatedDate
,CreatedBy = p.CreatedBy
,UpdatedBy = p.UpdatedBy
,IsDeleted = p.IsDeleted
,GuidCompany = p.GuidCompany
,Tags = p.Tags

                    }
                     ).ToList();
				}


			 if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e = new BusinessRulesEventArgs<accFile>() { Items= result, IncludingComputedLinq = true, ContextRequest = contextRequest, FilterExpressionString  = predicateString } :  e);
  
			
  
                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
            }
        }
		public List<accFile> GetBy(Expression<Func<accFile, bool>> predicate, bool loadRelations, ContextRequest contextRequest)
        {
			if(!loadRelations)
				return GetBy(predicate, contextRequest);
			else
				return GetBy(predicate, contextRequest, "accInvoiceTemplates,accServiceProducts,accInvoices,accBankImports,accIncomeExpensFiles");

        }

        public List<accFile> GetBy(Expression<Func<accFile, bool>> predicate, int? pageSize, int? page, string orderBy, SFSdotNet.Framework.Data.SortDirection? sortDirection)
        {
            return GetBy(predicate, new ContextRequest() { CustomQuery = new CustomQuery() { Page = page, PageSize = pageSize, OrderBy = orderBy, SortDirection = sortDirection } });
        }
        public List<accFile> GetBy(Expression<Func<accFile, bool>> predicate)
        {

			if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }
			ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();

			contextRequest.CurrentContext = SFSdotNet.Framework.My.Context.CurrentContext;
			            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

            contextRequest.CustomQuery.FilterExpressionString = null;
            return this.GetBy(predicate, contextRequest, "");
        }
        #endregion
        #region Dynamic String
		private string GetSpecificFilter(string filter) {
            string result = "";
		    //string linqFilter = String.Empty;
            string freeTextFilter = String.Empty;
            if (filter.Contains("|"))
            {
               // linqFilter = filter.Split(char.Parse("|"))[0];
                freeTextFilter = filter.Split(char.Parse("|"))[1];
            }
            //else {
            //    freeTextFilter = filter;
            //}
            //else {
            //    linqFilter = filter;
            //}
			// linqFilter = SFSdotNet.Framework.Linq.Utils.ReplaceCustomDateFilters(linqFilter);
            //string specificFilter = linqFilter;
            if (!string.IsNullOrEmpty(freeTextFilter))
            {
                System.Text.StringBuilder sbCont = new System.Text.StringBuilder();
                /*if (specificFilter.Length > 0)
                {
                    sbCont.Append(" AND ");
                    sbCont.Append(" ({0})");
                }
                else
                {
                    sbCont.Append("{0}");
                }*/
                //var words = freeTextFilter.Split(char.Parse(" "));
				var word = freeTextFilter;
                System.Text.StringBuilder sbSpec = new System.Text.StringBuilder();
                 int nWords = 1;
				/*foreach (var word in words)
                {
					if (word.Length > 0){
                    if (sbSpec.Length > 0) sbSpec.Append(" AND ");
					if (words.Length > 1) sbSpec.Append("("); */
					
	
					
	
					
											
					sbSpec.Append(string.Format(@"FileType.Contains(""{0}"")", word));

					
											sbSpec.Append(" OR ");
										
					sbSpec.Append(string.Format(@"FileName.Contains(""{0}"")", word));

					
	
					
	
					
	
					
	
					
	
					
	
					
											sbSpec.Append(" OR ");
										
					sbSpec.Append(string.Format(@"Tags.Contains(""{0}"")", word));

					
								 //sbSpec.Append("*extraFreeText*");

                    /*if (words.Length > 1) sbSpec.Append(")");
					
					nWords++;

					}

                }*/
                //specificFilter = string.Format("{0}{1}", specificFilter, string.Format(sbCont.ToString(), sbSpec.ToString()));
                                 result = sbSpec.ToString();  
            }
			//result = specificFilter;
			
			return result;

		}
	
			public List<accFile> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  params object[] extraParams)
        {
			return GetBy(filter, pageSize, page, orderBy, orderDir,  null, extraParams);
		}
           public List<accFile> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir, string usemode, params object[] extraParams)
            { 
                return GetBy(filter, pageSize, page, orderBy, orderDir, usemode, null, extraParams);
            }


		public List<accFile> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  string usemode, ContextRequest context, params object[] extraParams)

        {

            // string freetext = null;
            //if (filter.Contains("|"))
            //{
            //    int parts = filter.Split(char.Parse("|")).Count();
            //    if (parts > 1)
            //    {

            //        freetext = filter.Split(char.Parse("|"))[1];
            //    }
            //}
		
            //string specificFilter = "";
            //if (!string.IsNullOrEmpty(filter))
            //  specificFilter=  GetSpecificFilter(filter);
            if (string.IsNullOrEmpty(orderBy))
            {
			                orderBy = "UpdatedDate";
            }
			//orderDir = "desc";
			SFSdotNet.Framework.Data.SortDirection direction = SFSdotNet.Framework.Data.SortDirection.Ascending;
            if (!string.IsNullOrEmpty(orderDir))
            {
                if (orderDir == "desc")
                    direction = SFSdotNet.Framework.Data.SortDirection.Descending;
            }
            if (context == null)
                context = new ContextRequest();
			else
                context.CustomQuery = new CustomQuery();
             //context.FreeText = freetext;
             context.UseMode = usemode;
             context.CustomQuery =new SFSdotNet.Framework.My.CustomQuery()
 
                {
                    ExtraParams = extraParams,

                    OrderBy = orderBy,
                    SortDirection = direction,
                    Page = page,
                    PageSize = pageSize
               };
            

            if (!preventSecurityRestrictions) {
			 if (context.CurrentContext == null)
                {
					if (SFSdotNet.Framework.My.Context.CurrentContext != null &&  SFSdotNet.Framework.My.Context.CurrentContext.Company != null && SFSdotNet.Framework.My.Context.CurrentContext.User != null)
					{
						context.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
						context.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

					}
					else {
						throw new Exception("The security rule require a specific user and company");
					}
				}
            }
            return GetBy(filter, context);
  
        }


        public List<accFile> GetBy(string strWhere, ContextRequest contextRequest)
        {
        	#region old code
				
				 //Expression<Func<tvsReservationTransport, bool>> predicate = null;
				string strWhereClean = strWhere.Replace("*extraFreeText*", "").Replace("()", "");
                //if (!string.IsNullOrEmpty(strWhereClean)){

                //    object[] extraParams = null;
                //    //if (contextRequest != null )
                //    //    if (contextRequest.CustomQuery != null )
                //    //        extraParams = contextRequest.CustomQuery.ExtraParams;
                //    //predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<tvsReservationTransport, bool>(strWhereClean, extraParams != null? extraParams.Cast<Guid>(): null);				
                //}
				 if (contextRequest == null)
                {
                    contextRequest = new ContextRequest();
                    if (contextRequest.CustomQuery == null)
                        contextRequest.CustomQuery = new CustomQuery();
                }
                  if (!preventSecurityRestrictions) {
					if (contextRequest.User == null || contextRequest.Company == null)
                      {
                     if (SFSdotNet.Framework.My.Context.CurrentContext.Company != null && SFSdotNet.Framework.My.Context.CurrentContext.User != null)
                     {
                         contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                         contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

                     }
                     else {
                         throw new Exception("The security rule require a specific User and Company ");
                     }
					 }
                 }
            contextRequest.CustomQuery.FilterExpressionString = strWhere;
				//return GetBy(predicate, contextRequest);  

			#endregion				
				
                    return GetBy(strWhere, contextRequest, "");  


        }
       public List<accFile> GetBy(string strWhere)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
			
            return GetBy(strWhere, context, null);
        }

        public List<accFile> GetBy(string strWhere, string includes)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
            return GetBy(strWhere, context, includes);
        }

        #endregion
        #endregion
		
		  #region SaveOrUpdate
        private accFile Save(accFile entity, bool saveChanges, EFPocoContext con)
        {
				ObjectContext context = null;
            return Update(entity, saveChanges,null, out context);

			
        }
		 public  accFile Create( accFile entity, params Expression<Func< accFile, object>>[] paths)
         {
             return Create(entity, null, paths);

         }
 		 public accFile Create(accFile entity)
        {
				ObjectContext context = null;
				    if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: Create");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

				return this.Create(entity, true, contextRequest, out context);


        }
        public accFile Create(accFile entity, ContextRequest contextRequest)
         {
             ObjectContext context = null;
             return this.Create(entity, true, contextRequest,out context);

         }
         public accFile Create(accFile entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext context)
        {
                    return Create(entity, saveChanges , contextRequest , out context, null);
        }
         public accFile Create(accFile entity, ContextRequest contextRequest, params Expression<Func<accFile,object>>[] paths)
        {
            ObjectContext context = null;
            if(paths != null)
				return Create(entity, true,contextRequest, out context, paths);
			else 
				return Create(entity, true,contextRequest, out context);
        }
        public accFile Create(accFile entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext context, params Expression<Func<accFile,object>>[] pocopaths)
        {
			using (EFPocoContext con = new EFPocoContext())
			{
				accFile itemResult = null;
#region Autos


			entity.CreatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.CreatedBy = contextRequest.User.GuidUser;
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.UpdatedBy = contextRequest.User.GuidUser;
	
			if (contextRequest != null)
				if(contextRequest.User != null)
					if (contextRequest.Company != null)
						entity.GuidCompany = contextRequest.Company.GuidCompany;
	

#endregion
                e = null;
                OnCreating(this,e = new BusinessRulesEventArgs<accFile>() { ContextRequest = contextRequest, Item=entity, PathExpressions = pocopaths, SaveChanges =saveChanges });
				   if (e != null) {
						if (e.Cancel)
						{
							context = null;
							return e.Item;

						}
					}

                    if (entity.GuidFile == Guid.Empty)
                   {
                       entity.GuidFile = Guid.NewGuid();

                   }



				accFileAdapter adapter = con.GetAdapterObject<accFileAdapter>(entity);;
				List<Expression<Func<accFileAdapter, object>>> paths = new List<Expression<Func<accFileAdapter,object>>>();
                
			    if (pocopaths != null && pocopaths.Length > 0)
                {
					// Translate
                    foreach (var pocopath in pocopaths)
                    {
                        var param = Expression.Parameter(typeof(accFileAdapter), "p");
                        var member = MemberExpression.PropertyOrField(param, ((System.Linq.Expressions.MemberExpression)(((System.Linq.Expressions.LambdaExpression)(pocopath)).Body)).Member.Name);
                        Expression<Func<accFileAdapter, object>> path  = null;
                        switch(member.Member.Name){
                        
							case "accInvoiceTemplates":
								path = p => p.accInvoiceTemplates.First().WithoutUpdate();

								//path = p => member;
							break;
                        
							case "accServiceProducts":
								path = p => p.accServiceProducts.First().WithoutUpdate();

								//path = p => member;
								//path = p => p.accServiceProducts.First().accServiceProductCategory.WithoutUpdate();											
							break;
                        
							case "accInvoices":
								path = p => p.accInvoices.First().WithoutUpdate();

								//path = p => member;
								//path = p => p.accInvoices.First().accCustomer.WithoutUpdate();											
							break;
                        
							case "accBankImports":
								path = p => p.accBankImports.First().WithoutUpdate();

								//path = p => member;
								//path = p => p.accBankImports.First().accBank.WithoutUpdate();											
							break;
                        
							case "accIncomeExpensFiles":
								path = p => p.accIncomeExpensFiles.First().WithoutUpdate();

								//path = p => member;
								//path = p => p.accIncomeExpensFiles.First().accIncomeExpens.WithoutUpdate();											
							break;
							
							default:
								path = p => member;
							break;
                        }

                        
                       paths.Add(path.Expand());
                    }
                }
                object aux = null;
					//paths = pathBuilder.ToArray();

#region Childs accInvoiceTemplates 
				if (adapter.accInvoiceTemplates != null)
                {
                    foreach (var item in adapter.accInvoiceTemplates)
                    {
						
							if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accInvoiceTemplates", item);
							if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)){ 
								//paths.Add(p => p.accInvoiceTemplates.First().WithoutUpdate());
								
							if (item.accFile == null)
								item.accFile = adapter;

								item.EntityKey = null;
							}

                    }
					if (adapter.accInvoiceTemplates.Count > 0){
						paths.Add(p => p.accInvoiceTemplates.First().WithoutUpdate());
											
					}
                }
#endregion 

#region Childs accServiceProducts 
				if (adapter.accServiceProducts != null)
                {
                    foreach (var item in adapter.accServiceProducts)
                    {
						
							if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accServiceProducts", item);
							if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)){ 
								//paths.Add(p => p.accServiceProducts.First().WithoutUpdate());
								
							if (item.accFile == null)
								item.accFile = adapter;

						if (item.accServiceProductCategory != null){
							item.accServiceProductCategory.EntityKey = con.WrappedContext.CreateEntityKey("accServiceProductCategories", item.accServiceProductCategory);
                            
             
						}								
								item.EntityKey = null;
							}

                    }
					if (adapter.accServiceProducts.Count > 0){
						paths.Add(p => p.accServiceProducts.First().WithoutUpdate());
						paths.Add(p => p.accServiceProducts.First().accServiceProductCategory.WithoutUpdate());
					
					}
                }
#endregion 

#region Childs accInvoices 
				if (adapter.accInvoices != null)
                {
                    foreach (var item in adapter.accInvoices)
                    {
						
							if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accInvoices", item);
							if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)){ 
								//paths.Add(p => p.accInvoices.First().WithoutUpdate());
								
						if (item.accCustomer != null){
							item.accCustomer.EntityKey = con.WrappedContext.CreateEntityKey("accCustomers", item.accCustomer);
                            
             
						}								
								item.EntityKey = null;
							}

                    }
					if (adapter.accInvoices.Count > 0){
						paths.Add(p => p.accInvoices.First().WithoutUpdate());
						paths.Add(p => p.accInvoices.First().accCustomer.WithoutUpdate());
					
					}
                }
#endregion 

#region Childs accBankImports 
				if (adapter.accBankImports != null)
                {
                    foreach (var item in adapter.accBankImports)
                    {
						
							if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accBankImports", item);
							if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)){ 
								//paths.Add(p => p.accBankImports.First().WithoutUpdate());
								
						if (item.accBank != null){
							item.accBank.EntityKey = con.WrappedContext.CreateEntityKey("accBanks", item.accBank);
                            
             
						}								
							if (item.accFile == null)
								item.accFile = adapter;

								item.EntityKey = null;
							}

                    }
					if (adapter.accBankImports.Count > 0){
						paths.Add(p => p.accBankImports.First().WithoutUpdate());
						paths.Add(p => p.accBankImports.First().accBank.WithoutUpdate());
					
					}
                }
#endregion 

#region Childs accIncomeExpensFiles 
				if (adapter.accIncomeExpensFiles != null)
                {
                    foreach (var item in adapter.accIncomeExpensFiles)
                    {
						
							if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accIncomeExpensFiles", item);
							if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)){ 
								//paths.Add(p => p.accIncomeExpensFiles.First().WithoutUpdate());
								
							if (item.accFile == null)
								item.accFile = adapter;

						if (item.accIncomeExpens != null){
							item.accIncomeExpens.EntityKey = con.WrappedContext.CreateEntityKey("accIncomeExpenses", item.accIncomeExpens);
                            
             
						}								
								item.EntityKey = null;
							}

                    }
					if (adapter.accIncomeExpensFiles.Count > 0){
						paths.Add(p => p.accIncomeExpensFiles.First().WithoutUpdate());
						paths.Add(p => p.accIncomeExpensFiles.First().accIncomeExpens.WithoutUpdate());
					
					}
                }
#endregion 




                //con.WrappedContext.AttachObjectGraph<accFileAdapter>(adapter, p=>p.accInvoiceTemplates, p=>p.accServiceProducts, p=>p.accInvoices, p=>p.accBankImports, p=>p.accIncomeExpensFiles);
                con.WrappedContext.AttachObjectGraph<accFileAdapter>(adapter, paths.ToArray());
              	if (saveChanges){
                    con.WrappedContext.SaveChanges(SaveOptions.AcceptAllChangesAfterSave);
					 
				}
                else
                    con.WrappedContext.SaveChanges(SaveOptions.None);
                if (!saveChanges)
                    context = con.WrappedContext;
                else
                    context = null;
				itemResult = adapter.PocoEntity;
                if (e != null)
                {
                    e.Item = itemResult;
                }
                OnCreated(this, e == null ? e = new BusinessRulesEventArgs<accFile>() { ContextRequest = contextRequest, Item = itemResult, PathExpressions = pocopaths, SaveChanges = saveChanges } : e);



                if (e != null)
                {
                    itemResult = e.Item;
                }
                              return itemResult;
            }
        }
        BusinessRulesEventArgs<accFile> e = null;
        public void Create(List<accFile> entities)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            Create(entities, contextRequest, null);
        }
        public void Create(List<accFile> entities, ContextRequest contextRequest)
        
        {
			ObjectContext context = null;
            	foreach (accFile entity in entities)
				{
					this.Create(entity, true, contextRequest, out context);
				}
        }
         public accFile Update(accFile entity)
        {
            if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return Update(entity, contextRequest);
        }
        public accFile Update(accFile entity, ContextRequest requestContext)
        {
			  ObjectContext context = null;
            return Update(entity, true,requestContext, out context);
         }
		public  accFile Update(accFile entity, params Expression<Func<accFile, object>>[] pocopaths)
        {
			  ObjectContext context = null;
              return Update(entity, true, null, out context, pocopaths);
         }
        public accFile Update(accFile entity, ContextRequest requestContext, bool saveChanges, out ObjectContext outcontext)
        {
			return Update(entity, saveChanges,requestContext, out outcontext, null);
		}
         public accFile Update(accFile entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext outcontext, params Expression<Func<accFile,object>>[] pocopaths)
        {
		 if ((System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null) && contextRequest == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Update");
            }
            if (contextRequest == null)
            {
                contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            }

			using (EFPocoContext con = new EFPocoContext())
			{
				accFile  itemResult = null;

	
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
			if(contextRequest.User != null)
				entity.UpdatedBy = contextRequest.User.GuidUser;

	    var oldentity = GetBy(p => p.GuidFile == entity.GuidFile, contextRequest).FirstOrDefault();
		if (oldentity != null) {
		
            entity.CreatedDate = oldentity.CreatedDate;
            entity.CreatedBy = oldentity.CreatedBy;
	
            entity.GuidCompany = oldentity.GuidCompany;
	
			

		}

				e = null;
                OnUpdating(this,e = new BusinessRulesEventArgs<accFile>() { ContextRequest = contextRequest, Item=entity, PathExpressions = pocopaths, SaveChanges =saveChanges });
				   if (e != null) {
						if (e.Cancel)
						{
							outcontext = null;
							return e.Item;

						}
					}

                accFileAdapter adapter = con.GetAdapterObject<accFileAdapter>(entity);
                adapter.EntityKey = con.WrappedContext.CreateEntityKey("accFiles", adapter);
				    var es = con.accFiles;
				List<Expression<Func<accFileAdapter, object>>> paths = new List<Expression<Func<accFileAdapter,object>>>();
                /* if (pocopaths != null)
                    if (pocopaths.Length == 0)
                        pocopaths = null;*/

			    if (pocopaths != null && pocopaths.Length > 0)
                {
					// Translate
                    foreach (var pocopath in pocopaths)
                    {
                        var param = Expression.Parameter(typeof(accFileAdapter), "p");
                        var member = MemberExpression.PropertyOrField(param, ((System.Linq.Expressions.MemberExpression)(((System.Linq.Expressions.LambdaExpression)(pocopath)).Body)).Member.Name);
                        Expression<Func<accFileAdapter, object>> path  = null;
                        switch(member.Member.Name){
                        
							case "accInvoiceTemplates":
								//path = p => member;
								path = p => p.accInvoiceTemplates.First().WithoutUpdate();
							break;
                        
							case "accServiceProducts":
								//path = p => member;
								path = p => p.accServiceProducts.First().WithoutUpdate();
				//				path = p => p.accServiceProducts.First().accServiceProductCategory.WithoutUpdate();											
							break;
                        
							case "accInvoices":
								//path = p => member;
								path = p => p.accInvoices.First().WithoutUpdate();
				//				path = p => p.accInvoices.First().accCustomer.WithoutUpdate();											
							break;
                        
							case "accBankImports":
								//path = p => member;
								path = p => p.accBankImports.First().WithoutUpdate();
				//				path = p => p.accBankImports.First().accBank.WithoutUpdate();											
							break;
                        
							case "accIncomeExpensFiles":
								//path = p => member;
								path = p => p.accIncomeExpensFiles.First().WithoutUpdate();
				//				path = p => p.accIncomeExpensFiles.First().accIncomeExpens.WithoutUpdate();											
							break;
							
							default:
								path = p => member;
							break;
                        }

                        paths.Add(path.Expand());
 					}
                }
                else {
                  paths = new List<Expression<Func<accFileAdapter, object>>>();

					//List<Expression<Func<accFileAdapter,object>>> pathBuilder = new List<Expression<Func<accFileAdapter,object>>>();
		
					//paths = pathBuilder.ToArray();		
			}
			object aux = null;
				if (adapter.accInvoiceTemplates != null)
                {
                    foreach (var item in adapter.accInvoiceTemplates)
                    {


                        if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accInvoiceTemplates", item);
						if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)) item.EntityKey = null;
                        
                    }
					
                    if (adapter.accInvoiceTemplates.Count > 0)
                    {
                        paths.Add(p => p.accInvoiceTemplates.First().WithoutUpdate());

                    }

                }
				if (adapter.accServiceProducts != null)
                {
                    foreach (var item in adapter.accServiceProducts)
                    {


                        if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accServiceProducts", item);
						if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)) item.EntityKey = null;
                        
                    }
					
                    if (adapter.accServiceProducts.Count > 0)
                    {
                        paths.Add(p => p.accServiceProducts.First().WithoutUpdate());

                    }

                }
				if (adapter.accInvoices != null)
                {
                    foreach (var item in adapter.accInvoices)
                    {


                        if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accInvoices", item);
						if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)) item.EntityKey = null;
                        
                    }
					
                    if (adapter.accInvoices.Count > 0)
                    {
                        paths.Add(p => p.accInvoices.First().WithoutUpdate());

                    }

                }
				if (adapter.accBankImports != null)
                {
                    foreach (var item in adapter.accBankImports)
                    {


                        if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accBankImports", item);
						if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)) item.EntityKey = null;
                        
                    }
					
                    if (adapter.accBankImports.Count > 0)
                    {
                        paths.Add(p => p.accBankImports.First().WithoutUpdate());

                    }

                }
				if (adapter.accIncomeExpensFiles != null)
                {
                    foreach (var item in adapter.accIncomeExpensFiles)
                    {


                        if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accIncomeExpensFiles", item);
						if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)) item.EntityKey = null;
                        
                    }
					
                    if (adapter.accIncomeExpensFiles.Count > 0)
                    {
                        paths.Add(p => p.accIncomeExpensFiles.First().WithoutUpdate());

                    }

                }



                //con.AttachObjectGraph<accFile>(adapter, p=>p.accInvoiceTemplates, p=>p.accServiceProducts, p=>p.accInvoices, p=>p.accBankImports, p=>p.accIncomeExpensFiles);
                con.WrappedContext.AttachObjectGraph<accFileAdapter>(adapter, paths.ToArray());
				if (saveChanges){
                	con.WrappedContext.SaveChanges();
					 
					}
                if(!saveChanges)
					outcontext = con.WrappedContext;
				else
					outcontext = null;
				itemResult = adapter.PocoEntity;
				OnUpdated(this, e = new BusinessRulesEventArgs<accFile>() { ContextRequest = contextRequest, Item=itemResult, PathExpressions = pocopaths, SaveChanges =saveChanges });

              	return itemResult;

			  }
        }
        public accFile Save(accFile entity)
        {
			return Save(entity, true, null);
        }
        public int Save(List<accFile> entities)
        {
			using (EFPocoContext con = new EFPocoContext())
			{
			
            int n = 0;
            foreach (accFile item in entities)
            {
                try
                {
                    this.Save(item, false, con);
                    n++;
                }catch (Exception ex){
                    SFSdotNet.Framework.My.EventLog.Exception(ex);
                }
            }
            con.SaveChanges();
            return n;
            }
        }
        #endregion
        #region Delete
        public void Delete(accFile entity)
        {
				this.Delete(entity, null);
			
        }
		 public void Delete(accFile entity, ContextRequest contextRequest)
        {
				ObjectContext context = null;
				this.Delete(entity, true, out context, contextRequest);
			
        }

        
        public void Delete(accFile entity, bool saveChanges, out  ObjectContext context, ContextRequest contextRequest, BusinessRulesEventArgs<accFile> e = null)
        {
			using (EFPocoContext _con = new EFPocoContext())
			{
				int result = 0;
				
               	BusinessRulesEventArgs<accFile> _e = null;
               List<accFile> _items = new List<accFile>();
                _items.Add(entity);
                if (e == null || e.PreventPartialPropagate == false)
                {
                    OnDeleting(this, _e = (e == null ? new BusinessRulesEventArgs<accFile>() { ContextRequest = contextRequest, Item = entity, Items = _items, SaveChanges = saveChanges } : e));
                }
                if (_e != null)
                {
                    if (_e.Cancel)
						{
							context = null;
							return;

						}
					}


				accFileAdapter adapter = _con.GetAdapterObject<accFileAdapter>(entity);
                adapter.EntityKey = _con.WrappedContext.CreateEntityKey("accFiles", adapter);
                
	            //adapter = _con.WrappedContext.AttachObjectGraph<accFileAdapter>(adapter);
				try{
					_con.WrappedContext.AttachTo("accFiles", adapter);
                }catch{
					
				}
									//IsDeleted
					bool logicDelete = true;
					if (adapter.IsDeleted != null)
					{
						if (adapter.IsDeleted.Value)
							logicDelete = false;
					}
					if (logicDelete)
					{
											entity = GetBy(p => p.GuidFile == entity.GuidFile, contextRequest).FirstOrDefault();
						entity.IsDeleted = true;
						Update(entity, contextRequest);
					}
					else {
						_con.WrappedContext.DeleteObject(adapter);
					}
								
				if (!saveChanges)
                    context = _con.WrappedContext;
                else
                    context = null;
				 SaveOptions saveOption = SaveOptions.None;
                if (saveChanges)
                    saveOption = SaveOptions.AcceptAllChangesAfterSave;

				result = _con.WrappedContext.SaveChanges(saveOption);
				if (saveChanges){
					
					}
			if (e == null || e.PreventPartialPropagate == false)
                {

                    if (_e == null)
                        _e = new BusinessRulesEventArgs<accFile>() { ContextRequest = contextRequest, Item = entity, Items = _items };

                    OnDeleted(this, _e);
                }

				//return null;
			}            
        }
        public void Delete(List<accFile> entities,  ContextRequest contextRequest = null )
        {
				ObjectContext context = null;
			 BusinessRulesEventArgs<accFile> _e = null;

                OnDeleting(this, _e = new BusinessRulesEventArgs<accFile>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities });
                if (_e != null)
                {
                    if (_e.Cancel)
                    {
                        context = null;
                        return;

                    }
                }
                bool allSucced = true;
                BusinessRulesEventArgs<accFile> eToChilds = new BusinessRulesEventArgs<accFile>();
                if (_e != null)
                {
                    eToChilds = _e;
                }
                else
                {
                    eToChilds = new BusinessRulesEventArgs<accFile>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                }
				foreach (accFile item in entities)
				{
					try
                    {
                        this.Delete(item, true, out context, contextRequest, e: eToChilds);
                    }
                    catch (Exception ex)
                    {
                        SFSdotNet.Framework.My.EventLog.Error(ex);
                        allSucced = false;
                    }
				}
				if (_e == null)
                    _e = new BusinessRulesEventArgs<accFile>() { ContextRequest = contextRequest, CountResult = entities.Count, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                OnDeleted(this, _e);

			
        }
        #endregion
 
        #region GetCount
		 public int GetCount(Expression<Func<accFile, bool>> predicate)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

			return GetCount(predicate, contextRequest);
		}
        public int GetCount(Expression<Func<accFile, bool>> predicate, ContextRequest contextRequest)
        {


		
			using (EFPocoContext con = new EFPocoContext())
			{


				if (predicate == null) predicate = PredicateBuilder.True<accFile>();
           		predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted == null);
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    		if (contextRequest.User !=null )
                        		if (contextRequest.Company != null )
                        			predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				
				return con.accFiles.Count(predicate);
			}

        }
		  public int GetCount(string predicate,  ContextRequest contextRequest)
         {
             return GetCount(predicate, null, contextRequest);
         }

         public int GetCount(string predicate)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return GetCount(predicate, contextRequest);
        }
		 public int GetCount(string predicate, string usemode){
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
				return GetCount( predicate,  usemode,  contextRequest);
		 }
        public int GetCount(string predicate, string usemode, ContextRequest contextRequest){
			  string freetext = null;
            Filter filter = new Filter();

              if (predicate.Contains("|"))
              {
                 
                  filter.SetFilterPart("ft", GetSpecificFilter(predicate));
                 
                  filter.ProcessText(predicate.Split(char.Parse("|"))[0]);
                  freetext = predicate.Split(char.Parse("|"))[1];
              }
              else {
                  filter.ProcessText(predicate);
              }
           
			e = null;
			contextRequest.FreeText = freetext;
			contextRequest.UseMode = usemode;
            OnCounting(this, e = new BusinessRulesEventArgs<accFile>() {  Filter =filter, ContextRequest = contextRequest });
            if (e != null)
            {
                if (e.Cancel)
                {
                    context = null;
                    return e.CountResult;

                }

            

            }
			 predicate = filter.GetFilterComplete();
			StringBuilder sbQuerySystem = new StringBuilder();
		
					
                    filter.SetFilterPart("de","(IsDeleted != true OR IsDeleted == null)");
			
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    	if (contextRequest.User !=null )
                        	if (contextRequest.Company != null ){
                        		

								filter.SetFilterPart("co", @"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
						
						
							}
							
							}
							if (preventSecurityRestrictions) preventSecurityRestrictions= false;
			using (EFContext con = new EFContext())
			{
				   
                 filter.CleanAndProcess("");
				//string predicateWithFKAndComputed = SFSdotNet.Framework.Linq.Utils.ExtractSpecificProperties("", ref predicate );               
				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed();
               string predicateWithManyRelations = filter.GetFilterChildren();
			   ///QueryUtils.BreakeQuery1(predicate, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
			   predicate = filter.GetFilterComplete();
               if (!string.IsNullOrEmpty(predicate))
               {
				
					
                    return con.accFiles.Count(System.Linq.Dynamic.DynamicExpression.ParseLambda<accFile, bool>(predicate));
					
                }else
                    return con.accFiles.Count();

			}

		}
         public int GetCount()
        {
            return GetCount(p => true);
        }
        #endregion
        
         public accFile Update(accFile entity, string paths)
        {
            return Update(entity, paths.Split(char.Parse(",")));
            
        }

        public accFile Update(accFile entity, string[] paths)
        {
            // Translate
            List<Expression<Func<accFile, object>>> pathList = new List<Expression<Func<accFile, object>>>();
            for (int i = 0; i <= paths.Length -1; i++)
            {
                var param = Expression.Parameter(typeof(accFile), "p");
                var member = MemberExpression.PropertyOrField(param, paths[i]);

                Expression<Func<accFile, object>> path = p => member;
                pathList.Add(path.Expand());
            }
			ObjectContext context = null;
			 return Update(entity, true,null, out context,  pathList.ToArray());
           //return Update(entity, pathList.ToArray());
        }

        public void Update(List<accFile> entities, string paths)
        {
            foreach (var entity in entities )
            {
                Update(entity, paths);
            }
        }
		public accFile Create(accFile entity, ContextRequest contextRequest, string paths)
        {
          

            if (string.IsNullOrEmpty(paths))
                return Create(entity, contextRequest);

            return Create(entity, contextRequest, paths.Split(char.Parse(",")));
        }
        public accFile Create(accFile entity, string paths)
        {
			 if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return Create(entity, contextRequest, paths);

        }

        public  void Create(List<accFile> entities, ContextRequest requestContext, string paths)
        {
            foreach (var entity in entities)
            {
                Create(entity,requestContext, paths);
            }
        }

        public void Create(List<accFile> entities, string[] paths)
        {
            foreach (var entity in entities)
            {
                Create(entity, null, paths);
            }
        }
        
        public accFile  Create(accFile entity, ContextRequest contextRequest, string[] paths)
        {
            List<Expression<Func<accFile, object>>> pathList = new List<Expression<Func<accFile, object>>>();
            for (int i = 0; i < paths.Length - 1; i++)
            {
                var param = Expression.Parameter(typeof(accFile), "p");
                var member = MemberExpression.PropertyOrField(param, paths[i]);

                Expression<Func<accFile, object>> path = p => member;
                pathList.Add(path.Expand());
            }
            return Create(entity, contextRequest, pathList.ToArray());
        }
        public void Delete(List<accFile.CompositeKey> entityKeys)
        {

            List<accFile> items = new List<accFile>();
            foreach (var itemKey in entityKeys)
            {
                items.Add(GetByKey(itemKey.GuidFile));
            }

            Delete(items);

        }
		
	
		partial void OnRelationAdded(accFile item, accInvoice itemRel);
		partial void OnRelationsAdded(accInvoice itemRel, SFSdotNet.Framework.BR.BusinessRulesEventArgs<accFile> e);

		public void AddRelation(accFile item, accInvoice itemRel)
        {
            using (EFContext  con = new EFContext())
            {
                
                con.ContextOptions.LazyLoadingEnabled = false;
                con.ContextOptions.ProxyCreationEnabled = false; 
                con.accFiles.First(p => p.GuidFile == item.GuidFile).accInvoices.Add(con.accInvoices.First(x=>x.GuidInvoice == itemRel.GuidInvoice));
                con.SaveChanges();
            }
			OnRelationAdded(item,  itemRel);
        }
		public void AddRelations(List<accFile> items, accInvoice itemRel)
        {
            SFSdotNet.Framework.BR.BusinessRulesEventArgs<accFile> e = new BusinessRulesEventArgs<accFile>();
            e.Items = items;
            AddRelations(itemRel, e);
        }
        public void AddRelations(accInvoice itemRel, SFSdotNet.Framework.BR.BusinessRulesEventArgs<accFile> e)
        {
            using (EFContext con = new EFContext())
            {
                foreach (var item in e.Items)
                {
                    con.ContextOptions.LazyLoadingEnabled = false;
                    con.ContextOptions.ProxyCreationEnabled = false;
                    con.accFiles.First(p => p.GuidFile == item.GuidFile).accInvoices.Add(con.accInvoices.First(x => x.GuidInvoice == itemRel.GuidInvoice));

                }
                con.SaveChanges();
            }
            OnRelationsAdded(itemRel, e);
        }

		partial void OnRelationRemoved(accFile item, accInvoice itemRel);
		partial void OnRelationsRemoved(accInvoice itemRel, SFSdotNet.Framework.BR.BusinessRulesEventArgs<accFile> e);

        public void RemoveRelation(accFile item, accInvoice itemRel)
        {
            using (EFContext con = new EFContext())
            {
                item = con.accFiles.Include("accInvoices").FirstOrDefault(p => p.GuidFile == item.GuidFile);
                if (item != null) {
                    if (item.accInvoices.FirstOrDefault(x =>x.GuidInvoice == itemRel.GuidInvoice) != null ) {
                        item.accInvoices.Remove(item.accInvoices.FirstOrDefault(x => x.GuidInvoice == itemRel.GuidInvoice));
                    }
                }
                con.SaveChanges();
            }
			OnRelationRemoved(item,  itemRel);

        }
		public void RemoveRelations(List<accFile> objs, accInvoice itemRel)
        {
            using (EFContext con = new EFContext())
            {
                foreach (var item in objs)
                {
                    var _item = con.accFiles.Include("accInvoices").FirstOrDefault(p => p.GuidFile == item.GuidFile);
                    if (_item != null)
                    {
                        if (_item.accInvoices.FirstOrDefault(x => x.GuidInvoice == itemRel.GuidInvoice) != null)
                        {
                            _item.accInvoices.Remove(_item.accInvoices.FirstOrDefault(x => x.GuidInvoice == itemRel.GuidInvoice));
                        }
                    }
					
                }
                con.SaveChanges();
            }

            OnRelationsRemoved(itemRel, new SFSdotNet.Framework.BR.BusinessRulesEventArgs<accFile>() { Items = objs });

        }
		
	}
		public partial class accInvoicesBR{
	 	
           
		 #region Partial methods

           partial void OnUpdating(object sender, BusinessRulesEventArgs<accInvoice> e);

            partial void OnUpdated(object sender, BusinessRulesEventArgs<accInvoice> e);

            partial void OnCreating(object sender, BusinessRulesEventArgs<accInvoice> e);
            partial void OnCreated(object sender, BusinessRulesEventArgs<accInvoice> e);

            partial void OnDeleting(object sender, BusinessRulesEventArgs<accInvoice> e);
            partial void OnDeleted(object sender, BusinessRulesEventArgs<accInvoice> e);

            partial void OnGetting(object sender, BusinessRulesEventArgs<accInvoice> e);
            partial void OnTaken(object sender, BusinessRulesEventArgs<accInvoice> e);
            partial void OnCounting(object sender, BusinessRulesEventArgs<accInvoice> e);
 
 
            #endregion
			
		private static accInvoicesBR singlenton =null;
				public static accInvoicesBR NewInstance(){
					return  new accInvoicesBR();
					
				}
		public static accInvoicesBR Instance{
			get{
				if (singlenton == null)
					singlenton = new accInvoicesBR();
				return singlenton;
			}
		}
		private bool preventSecurityRestrictions = false;
		 public bool PreventAuditTrail { get; set;  }
		#region Fields
        EFPocoContext context = null;
        #endregion
        #region Constructor
        public accInvoicesBR()
        {
            context = new EFPocoContext();
        }
		 public accInvoicesBR(bool preventSecurity)
            {
                this.preventSecurityRestrictions = preventSecurity;
				context = new EFPocoContext();
            }
        #endregion
		
		#region Get

 		public IQueryable<accInvoice> Get()
        {
            //using (EFContext con = new EFContext())
            //{
				EFContext con = new EFContext();
                var query = con.accInvoices.AsQueryable();
                con.ContextOptions.ProxyCreationEnabled = false;

                //query = ContextQueryBuilder<Nutrient>.ApplyContextQuery(query, contextRequest);

                return query;




            //}

        }
		
		public List<accInvoice> GetAll()
        {
            return this.GetBy(p => true);
        }
        public List<accInvoice> GetAll(string includes)
        {
            return this.GetBy(p => true, includes);
        }
        public accInvoice GetByKey(Guid guidInvoice)
        {
            return GetByKey(guidInvoice, true);
        }
        public accInvoice GetByKey(Guid guidInvoice, bool loadIncludes)
        {
            accInvoice item = null;
			var query = PredicateBuilder.True<accInvoice>();
                    
			string strWhere = @"GuidInvoice = Guid(""" + guidInvoice.ToString()+@""")";
            Expression<Func<accInvoice, bool>> predicate = null;
            if (!string.IsNullOrEmpty(strWhere))
                predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<accInvoice, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
			 ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();
            contextRequest.CustomQuery.FilterExpressionString = strWhere;

			//item = GetBy(predicate, loadIncludes, contextRequest).FirstOrDefault();
			item = GetBy(strWhere,loadIncludes,contextRequest).FirstOrDefault();
            return item;
        }
         public List<accInvoice> GetBy(string strWhere, bool loadRelations, ContextRequest contextRequest)
        {
            if (!loadRelations)
                return GetBy(strWhere, contextRequest);
            else
                return GetBy(strWhere, contextRequest, "");

        }
		  public List<accInvoice> GetBy(string strWhere, bool loadRelations)
        {
              if (!loadRelations)
                return GetBy(strWhere, new ContextRequest());
            else
                return GetBy(strWhere, new ContextRequest(), "");

        }
         public accInvoice GetByKey(Guid guidInvoice, params Expression<Func<accInvoice, object>>[] includes)
        {
            accInvoice item = null;
			string strWhere = @"GuidInvoice = Guid(""" + guidInvoice.ToString()+@""")";
          Expression<Func<accInvoice, bool>> predicate = null;
            if (!string.IsNullOrEmpty(strWhere))
                predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<accInvoice, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
        item = GetBy(predicate, includes).FirstOrDefault();
         ////   item = GetBy(strWhere,includes).FirstOrDefault();
			return item;

        }
        public accInvoice GetByKey(Guid guidInvoice, string includes)
        {
            accInvoice item = null;
			string strWhere = @"GuidInvoice = Guid(""" + guidInvoice.ToString()+@""")";
            
			
            item = GetBy(strWhere, includes).FirstOrDefault();
            return item;

        }
		 public accInvoice GetByKey(Guid guidInvoice, string usemode, string includes)
		{
			return GetByKey(guidInvoice, usemode, null, includes);

		 }
		 public accInvoice GetByKey(Guid guidInvoice, string usemode, ContextRequest context,  string includes)
        {
            accInvoice item = null;
			string strWhere = @"GuidInvoice = Guid(""" + guidInvoice.ToString()+@""")";
			if (context == null)
				context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
			context.CustomQuery.IsByKey = true;
            context.CustomQuery.FilterExpressionString = strWhere;
            context.UseMode = usemode;
            item = GetBy(strWhere,context , includes).FirstOrDefault();
            return item;

        }

        #region Dynamic Predicate
        public List<accInvoice> GetBy(Expression<Func<accInvoice, bool>> predicate, int? pageSize, int? page)
        {
            return this.GetBy(predicate, pageSize, page, null, null);
        }
        public List<accInvoice> GetBy(Expression<Func<accInvoice, bool>> predicate, ContextRequest contextRequest)
        {

            return GetBy(predicate, contextRequest,"");
        }
        
        public List<accInvoice> GetBy(Expression<Func<accInvoice, bool>> predicate, ContextRequest contextRequest, params Expression<Func<accInvoice, object>>[] includes)
        {
            StringBuilder sb = new StringBuilder();
           if (includes != null)
            {
                foreach (var path in includes)
                {

						if (sb.Length > 0) sb.Append(",");
						sb.Append(SFSdotNet.Framework.Linq.Utils.IncludeToString<accInvoice>(path));

               }
            }
            return GetBy(predicate, contextRequest, sb.ToString());
        }
        
        
        public List<accInvoice> GetBy(Expression<Func<accInvoice, bool>> predicate, string includes)
        {
			ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";

            return GetBy(predicate, context, includes);
        }

        public List<accInvoice> GetBy(Expression<Func<accInvoice, bool>> predicate, params Expression<Func<accInvoice, object>>[] includes)
        {
			if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }
			ContextRequest context = new ContextRequest();
			            context.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            context.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";
            return GetBy(predicate, context, includes);
        }

      
		public bool DisableCache { get; set; }
		 public List<accInvoice> GetBy(Expression<Func<accInvoice, bool>> predicate, ContextRequest contextRequest, string includes)
        {
            using (EFPocoContext con = new EFPocoContext())
            {
				if (DisableCache) 
                	con.CachingPolicy = EFCachingProvider.Caching.CachingPolicy.NoCaching;

				List<accInvoice> result = null;
                 e = null;
	
				OnGetting(con, e = new BusinessRulesEventArgs<accInvoice>() {  FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null) });

               // OnGetting(con,e = new BusinessRulesEventArgs<accInvoice>() { FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = contextRequest.CustomQuery.FilterExpressionString});
				   if (e != null) {
				    predicate = e.FilterExpression;
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				con.EnableChangeTrackingUsingProxies = false;
				con.WrappedContext.accInvoices.MergeOption = MergeOption.NoTracking;
                con.WrappedContext.ContextOptions.ProxyCreationEnabled = false;
                if (predicate == null) predicate = PredicateBuilder.True<accInvoice>();
 				string fkIncludes = "accCustomer";
                if(contextRequest!=null){
					if (contextRequest.CustomQuery != null)
					{
						if (contextRequest.CustomQuery.IncludeForeignKeyPaths != null) {
							if (contextRequest.CustomQuery.IncludeForeignKeyPaths.Value == false)
								fkIncludes = "";
						}
					}
				}
				if (!string.IsNullOrEmpty(includes))
					includes = includes + "," + fkIncludes;
				else
					includes = fkIncludes;
                
                var es = con.accInvoices;

                IQueryable<accInvoice> query = es.AsQueryable();

                                if (!string.IsNullOrEmpty(includes))
                {
                    foreach (string include in includes.Split(char.Parse(",")))
                    {
						if (!string.IsNullOrEmpty(include))
                            query = query.Include(include);
                    }
                }
                    predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
					 	if (!preventSecurityRestrictions)
						{
							if (contextRequest != null )
		                    	if (contextRequest.User !=null )
		                        	if (contextRequest.Company != null)
		                        		predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				query =query.Where(predicate);
                query = ContextQueryBuilder<accInvoice>.ApplyContextQuery(query, contextRequest);

                result = query.ToList<accInvoice>();
				  
                if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e =  new BusinessRulesEventArgs<accInvoice>() { Items= result, IncludingComputedLinq = false, ContextRequest = contextRequest,  FilterExpression = predicate } :  e);
  
			

                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
            }
        }
		public void UpdateAgile(accInvoice item, params string[] fields)
         {
             List<accInvoice> list = new List<accInvoice>();
             list.Add(item);
             this.UpdateBulk(list, fields);
         }
		public void UpdateBulk(List<accInvoice>  items, params string[] fields)
         {
             SFSdotNet.Framework.My.ContextRequest req = new SFSdotNet.Framework.My.ContextRequest();
             req.CustomQuery = new SFSdotNet.Framework.My.CustomQuery();
             foreach (var field in fields)
             {
                 req.CustomQuery.SpecificProperties.Add(field);
             }
             UpdateBulk(items, req);

         }
        public void UpdateBulk(List<accInvoice> items, ContextRequest req)
        {
            using (EFContext con = new EFContext())
            {



                foreach (var item in items)
                {
                    var setT = con.CreateObjectSet<accInvoice>("accInvoices");


                    var itemForAttach = new accInvoice();
			itemForAttach.GuidInvoice = item.GuidInvoice;
					
                    itemForAttach = SFSdotNet.Framework.Entities.ConvertEntity.SetProperties<accInvoice>(item, itemForAttach, null, req.CustomQuery.SpecificProperties.ToArray());
                    setT.Attach(itemForAttach);


                    foreach (var property in req.CustomQuery.SpecificProperties)
                    {
						
                        if (property != "GuidInvoice")
                            con.ObjectStateManager.GetObjectStateEntry(itemForAttach).SetModifiedProperty(property);

                    }

                }
                con.SaveChanges();


            }
        }
		/*public int Update(List<accInvoice> items, ContextRequest contextRequest)
            {
                int result = 0;
                using (EFContext con = new EFContext())
                {
                   
                

                    foreach (var item in items)
                    {
                        //secMessageToUser messageToUser = new secMessageToUser();
                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            item.GetType().GetProperty(prop).SetValue(item, item.GetType().GetProperty(prop).GetValue(item));
                        }
                        //messageToUser.GuidMessageToUser = (Guid)item.GetType().GetProperty("GuidMessageToUser").GetValue(item);

                        var setObject = con.CreateObjectSet<accInvoice>("accInvoices");
                        //messageToUser.Readed = DateTime.UtcNow;
                        setObject.Attach(item);
                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            con.ObjectStateManager.GetObjectStateEntry(item).SetModifiedProperty(prop);
                        }
                       
                    }
                    result = con.SaveChanges();

                    


                }
                return result;
            }
           */
        public List<accInvoice> GetBy(string predicateString, ContextRequest contextRequest, string includes)
        {
            using (EFContext con = new EFContext())
            {
				if (DisableCache) 
                	con.CachingPolicy = EFCachingProvider.Caching.CachingPolicy.NoCaching;

				Filter filter = new Filter();
                if (predicateString.Contains("|"))
                {
                    string ft = GetSpecificFilter(predicateString);
                    if (!string.IsNullOrEmpty(ft))
                        filter.SetFilterPart("ft", ft);
                   
                    contextRequest.FreeText = predicateString.Split(char.Parse("|"))[1];
                    var q1 = predicateString.Split(char.Parse("|"))[0];
                    if (!string.IsNullOrEmpty(q1))
                    {
                        filter.ProcessText(q1);
                    }
                }
                else {
                    filter.ProcessText(predicateString);
                }

				List<accInvoice> result = null;
                 e = null;
					OnGetting(con, e = new BusinessRulesEventArgs<accInvoice>() { Filter = filter, ContextRequest = contextRequest /*, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null)*/ });

                  //OnGetting(con,e = new BusinessRulesEventArgs<accInvoice>() {  ContextRequest = contextRequest, FilterExpressionString = predicateString });
			   	if (e != null) {
				    //predicateString = e.GetQueryString();
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				//	 else {
                //      predicateString = predicateString.Replace("*extraFreeText*", "").Replace("()","");
                //  }
				//con.EnableChangeTrackingUsingProxies = false;
				con.accInvoices.MergeOption = MergeOption.NoTracking;
                con.ContextOptions.ProxyCreationEnabled = false;
                //if (predicate == null) predicate = PredicateBuilder.True<accInvoice>();
 				string fkIncludes = "accCustomer";
                if(contextRequest!=null){
					if (contextRequest.CustomQuery != null)
					{
						if (contextRequest.CustomQuery.IncludeForeignKeyPaths != null) {
							if (contextRequest.CustomQuery.IncludeForeignKeyPaths.Value == false)
								fkIncludes = "";
						}
					}
				}else{
                    contextRequest = new ContextRequest();
                    contextRequest.CustomQuery = new CustomQuery();

                }
				if (!string.IsNullOrEmpty(includes))
					includes = includes + "," + fkIncludes;
				else
					includes = fkIncludes;
                
                var es = con.accInvoices;
				IQueryable<accInvoice> query = es.AsQueryable();
		
				// include relations FK
				if(string.IsNullOrEmpty(includes) ){
					includes ="";
				}
				bool includeaccCustomer = includes.Split(char.Parse(",")).Contains("accCustomer");

				StringBuilder sbQuerySystem = new StringBuilder();
                    //predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				

				//if (!string.IsNullOrEmpty(predicateString))
                //      sbQuerySystem.Append(" And ");
                //sbQuerySystem.Append(" (IsDeleted != true Or IsDeleted = null) ");
				 filter.SetFilterPart("de", "(IsDeleted != true OR IsDeleted = null)");


					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
	                    	if (contextRequest.User !=null )
	                        	if (contextRequest.Company != null ){
	                        		//if (sbQuerySystem.Length > 0)
	                        		//	    			sbQuerySystem.Append( " And ");	
									//sbQuerySystem.Append(@" (GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
									filter.SetFilterPart("co",@"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @"""))");
								}
						}	
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				//string predicateString = predicate.ToDynamicLinq<accInvoice>();
				//predicateString += sbQuerySystem.ToString();
				filter.CleanAndProcess("");

				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed(); //SFSdotNet.Framework.Linq.Utils.ExtractSpecificProperties("", ref predicateString );               
                string predicateWithManyRelations = filter.GetFilterChildren(); //SFSdotNet.Framework.Linq.Utils.CleanPartExpression(predicateString);

                //QueryUtils.BreakeQuery1(predicateString, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
                var _queryable = query.AsQueryable();
                if (!string.IsNullOrEmpty(predicateWithManyRelations))
                    _queryable = _queryable.Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams);
				if (contextRequest.CustomQuery.SpecificProperties.Count > 0)
                {

                    StringBuilder sbProps = new StringBuilder();
                    contextRequest.CustomQuery.SpecificProperties.Add("GuidInvoice");
                    
					foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                    {
						if(sbProps.Length > 0)
							sbProps.Append(",");
                        sbProps.Append(prop);
                    }
					    IQueryable  queryableSelective = null ;
					  
					  if (!string.IsNullOrEmpty(predicateWithManyRelations))
							queryableSelective = con.accInvoices.AsQueryable().Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams).Select(string.Format("new({0})", sbProps.ToString()));
					else
						queryableSelective = con.accInvoices.AsQueryable().Select(string.Format("new({0})", sbProps.ToString()));


                    //if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
					//	queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

                    QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
                    
					if (!string.IsNullOrEmpty(queryOps.OrderByAndSort))
                        queryableSelective = queryableSelective.OrderBy(queryOps.OrderByAndSort);
                    if (queryOps.Skip != null)
                    {
                        queryableSelective = queryableSelective.Skip(queryOps.Skip.Value);
                    }
                    if (queryOps.PageSize != null)
                    {
                        queryableSelective = queryableSelective.Take(queryOps.PageSize.Value);
                    }
                    //var results = queryableSelective.ToList();
                    result = new List<accInvoice>();
                    accInvoice itemDef = null;
                    foreach (var item in queryableSelective)
                    {
                        itemDef = new accInvoice();

                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            if (!prop.Contains("."))
                            {
                                itemDef.GetType().GetProperty(prop).SetValue(itemDef, item.GetType().GetProperty(prop).GetValue(item));
                            }
                            else {
                                throw new Exception("La seleccion de relaciones aún no esta soportada");
                            }

                        }

                        result.Add(itemDef);
                    }

                }
                else
                {
				var  queryable = _queryable.Select(                    
				p => 
                        new
                    {
					GuidInvoice = p.GuidInvoice
,Number = p.Number
,Canceled = p.Canceled
,DateApply = p.DateApply
,CreatedDate = p.CreatedDate
,UpdatedDate = p.UpdatedDate
,CreatedBy = p.CreatedBy
,UpdatedBy = p.UpdatedBy
,IsDeleted = p.IsDeleted
,GuidCompany = p.GuidCompany

,accCustomer = includeaccCustomer ? p.accCustomer:null


	
                    }
                    
                    );
					
				
                 if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
                    queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

				QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
            	if (!string.IsNullOrEmpty(queryOps.OrderByAndSort))
					queryable = queryable.OrderBy(queryOps.OrderByAndSort);
               	if (queryOps.Skip != null)
                {
                    queryable = queryable.Skip(queryOps.Skip.Value);
                }
                if (queryOps.PageSize != null)
                {
                    queryable = queryable.Take (queryOps.PageSize.Value);
                }
                result = queryable.AsEnumerable().
                    Select(
                    p =>  new accInvoice()
                    {
					GuidInvoice = p.GuidInvoice
,Number = p.Number
,Canceled = p.Canceled
,DateApply = p.DateApply
,CreatedDate = p.CreatedDate
,UpdatedDate = p.UpdatedDate
,CreatedBy = p.CreatedBy
,UpdatedBy = p.UpdatedBy
,IsDeleted = p.IsDeleted
,GuidCompany = p.GuidCompany
,accCustomer = p.accCustomer

                    }
                     ).ToList();
				}


			 if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e = new BusinessRulesEventArgs<accInvoice>() { Items= result, IncludingComputedLinq = true, ContextRequest = contextRequest, FilterExpressionString  = predicateString } :  e);
  
			
  
                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
            }
        }
		public List<accInvoice> GetBy(Expression<Func<accInvoice, bool>> predicate, bool loadRelations, ContextRequest contextRequest)
        {
			if(!loadRelations)
				return GetBy(predicate, contextRequest);
			else
				return GetBy(predicate, contextRequest, "accInvoiceServProducts,accFiles,accIncomeExpenses");

        }

        public List<accInvoice> GetBy(Expression<Func<accInvoice, bool>> predicate, int? pageSize, int? page, string orderBy, SFSdotNet.Framework.Data.SortDirection? sortDirection)
        {
            return GetBy(predicate, new ContextRequest() { CustomQuery = new CustomQuery() { Page = page, PageSize = pageSize, OrderBy = orderBy, SortDirection = sortDirection } });
        }
        public List<accInvoice> GetBy(Expression<Func<accInvoice, bool>> predicate)
        {

			if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }
			ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();

			contextRequest.CurrentContext = SFSdotNet.Framework.My.Context.CurrentContext;
			            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

            contextRequest.CustomQuery.FilterExpressionString = null;
            return this.GetBy(predicate, contextRequest, "");
        }
        #endregion
        #region Dynamic String
		private string GetSpecificFilter(string filter) {
            string result = "";
		    //string linqFilter = String.Empty;
            string freeTextFilter = String.Empty;
            if (filter.Contains("|"))
            {
               // linqFilter = filter.Split(char.Parse("|"))[0];
                freeTextFilter = filter.Split(char.Parse("|"))[1];
            }
            //else {
            //    freeTextFilter = filter;
            //}
            //else {
            //    linqFilter = filter;
            //}
			// linqFilter = SFSdotNet.Framework.Linq.Utils.ReplaceCustomDateFilters(linqFilter);
            //string specificFilter = linqFilter;
            if (!string.IsNullOrEmpty(freeTextFilter))
            {
                System.Text.StringBuilder sbCont = new System.Text.StringBuilder();
                /*if (specificFilter.Length > 0)
                {
                    sbCont.Append(" AND ");
                    sbCont.Append(" ({0})");
                }
                else
                {
                    sbCont.Append("{0}");
                }*/
                //var words = freeTextFilter.Split(char.Parse(" "));
				var word = freeTextFilter;
                System.Text.StringBuilder sbSpec = new System.Text.StringBuilder();
                 int nWords = 1;
				/*foreach (var word in words)
                {
					if (word.Length > 0){
                    if (sbSpec.Length > 0) sbSpec.Append(" AND ");
					if (words.Length > 1) sbSpec.Append("("); */
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
								
					//if (sbSpec.Length > 2)
					//	sbSpec.Append(" OR "); // test
					sbSpec.Append(string.Format(@"accCustomer.Name.Contains(""{0}"")", word));
								 //sbSpec.Append("*extraFreeText*");

                    /*if (words.Length > 1) sbSpec.Append(")");
					
					nWords++;

					}

                }*/
                //specificFilter = string.Format("{0}{1}", specificFilter, string.Format(sbCont.ToString(), sbSpec.ToString()));
                                 result = sbSpec.ToString();  
            }
			//result = specificFilter;
			
			return result;

		}
	
			public List<accInvoice> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  params object[] extraParams)
        {
			return GetBy(filter, pageSize, page, orderBy, orderDir,  null, extraParams);
		}
           public List<accInvoice> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir, string usemode, params object[] extraParams)
            { 
                return GetBy(filter, pageSize, page, orderBy, orderDir, usemode, null, extraParams);
            }


		public List<accInvoice> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  string usemode, ContextRequest context, params object[] extraParams)

        {

            // string freetext = null;
            //if (filter.Contains("|"))
            //{
            //    int parts = filter.Split(char.Parse("|")).Count();
            //    if (parts > 1)
            //    {

            //        freetext = filter.Split(char.Parse("|"))[1];
            //    }
            //}
		
            //string specificFilter = "";
            //if (!string.IsNullOrEmpty(filter))
            //  specificFilter=  GetSpecificFilter(filter);
            if (string.IsNullOrEmpty(orderBy))
            {
			                orderBy = "UpdatedDate";
            }
			//orderDir = "desc";
			SFSdotNet.Framework.Data.SortDirection direction = SFSdotNet.Framework.Data.SortDirection.Ascending;
            if (!string.IsNullOrEmpty(orderDir))
            {
                if (orderDir == "desc")
                    direction = SFSdotNet.Framework.Data.SortDirection.Descending;
            }
            if (context == null)
                context = new ContextRequest();
			else
                context.CustomQuery = new CustomQuery();
             //context.FreeText = freetext;
             context.UseMode = usemode;
             context.CustomQuery =new SFSdotNet.Framework.My.CustomQuery()
 
                {
                    ExtraParams = extraParams,

                    OrderBy = orderBy,
                    SortDirection = direction,
                    Page = page,
                    PageSize = pageSize
               };
            

            if (!preventSecurityRestrictions) {
			 if (context.CurrentContext == null)
                {
					if (SFSdotNet.Framework.My.Context.CurrentContext != null &&  SFSdotNet.Framework.My.Context.CurrentContext.Company != null && SFSdotNet.Framework.My.Context.CurrentContext.User != null)
					{
						context.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
						context.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

					}
					else {
						throw new Exception("The security rule require a specific user and company");
					}
				}
            }
            return GetBy(filter, context);
  
        }


        public List<accInvoice> GetBy(string strWhere, ContextRequest contextRequest)
        {
        	#region old code
				
				 //Expression<Func<tvsReservationTransport, bool>> predicate = null;
				string strWhereClean = strWhere.Replace("*extraFreeText*", "").Replace("()", "");
                //if (!string.IsNullOrEmpty(strWhereClean)){

                //    object[] extraParams = null;
                //    //if (contextRequest != null )
                //    //    if (contextRequest.CustomQuery != null )
                //    //        extraParams = contextRequest.CustomQuery.ExtraParams;
                //    //predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<tvsReservationTransport, bool>(strWhereClean, extraParams != null? extraParams.Cast<Guid>(): null);				
                //}
				 if (contextRequest == null)
                {
                    contextRequest = new ContextRequest();
                    if (contextRequest.CustomQuery == null)
                        contextRequest.CustomQuery = new CustomQuery();
                }
                  if (!preventSecurityRestrictions) {
					if (contextRequest.User == null || contextRequest.Company == null)
                      {
                     if (SFSdotNet.Framework.My.Context.CurrentContext.Company != null && SFSdotNet.Framework.My.Context.CurrentContext.User != null)
                     {
                         contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                         contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

                     }
                     else {
                         throw new Exception("The security rule require a specific User and Company ");
                     }
					 }
                 }
            contextRequest.CustomQuery.FilterExpressionString = strWhere;
				//return GetBy(predicate, contextRequest);  

			#endregion				
				
                    return GetBy(strWhere, contextRequest, "");  


        }
       public List<accInvoice> GetBy(string strWhere)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
			
            return GetBy(strWhere, context, null);
        }

        public List<accInvoice> GetBy(string strWhere, string includes)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
            return GetBy(strWhere, context, includes);
        }

        #endregion
        #endregion
		
		  #region SaveOrUpdate
        private accInvoice Save(accInvoice entity, bool saveChanges, EFPocoContext con)
        {
				ObjectContext context = null;
            return Update(entity, saveChanges,null, out context);

			
        }
		 public  accInvoice Create( accInvoice entity, params Expression<Func< accInvoice, object>>[] paths)
         {
             return Create(entity, null, paths);

         }
 		 public accInvoice Create(accInvoice entity)
        {
				ObjectContext context = null;
				    if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: Create");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

				return this.Create(entity, true, contextRequest, out context);


        }
        public accInvoice Create(accInvoice entity, ContextRequest contextRequest)
         {
             ObjectContext context = null;
             return this.Create(entity, true, contextRequest,out context);

         }
         public accInvoice Create(accInvoice entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext context)
        {
                    return Create(entity, saveChanges , contextRequest , out context, null);
        }
         public accInvoice Create(accInvoice entity, ContextRequest contextRequest, params Expression<Func<accInvoice,object>>[] paths)
        {
            ObjectContext context = null;
            if(paths != null)
				return Create(entity, true,contextRequest, out context, paths);
			else 
				return Create(entity, true,contextRequest, out context);
        }
        public accInvoice Create(accInvoice entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext context, params Expression<Func<accInvoice,object>>[] pocopaths)
        {
			using (EFPocoContext con = new EFPocoContext())
			{
				accInvoice itemResult = null;
#region Autos


			entity.CreatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.CreatedBy = contextRequest.User.GuidUser;
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.UpdatedBy = contextRequest.User.GuidUser;
	
			if (contextRequest != null)
				if(contextRequest.User != null)
					if (contextRequest.Company != null)
						entity.GuidCompany = contextRequest.Company.GuidCompany;
	

#endregion
                e = null;
                OnCreating(this,e = new BusinessRulesEventArgs<accInvoice>() { ContextRequest = contextRequest, Item=entity, PathExpressions = pocopaths, SaveChanges =saveChanges });
				   if (e != null) {
						if (e.Cancel)
						{
							context = null;
							return e.Item;

						}
					}

                    if (entity.GuidInvoice == Guid.Empty)
                   {
                       entity.GuidInvoice = Guid.NewGuid();

                   }



				accInvoiceAdapter adapter = con.GetAdapterObject<accInvoiceAdapter>(entity);;
				List<Expression<Func<accInvoiceAdapter, object>>> paths = new List<Expression<Func<accInvoiceAdapter,object>>>();
                
			    if (pocopaths != null && pocopaths.Length > 0)
                {
					// Translate
                    foreach (var pocopath in pocopaths)
                    {
                        var param = Expression.Parameter(typeof(accInvoiceAdapter), "p");
                        var member = MemberExpression.PropertyOrField(param, ((System.Linq.Expressions.MemberExpression)(((System.Linq.Expressions.LambdaExpression)(pocopath)).Body)).Member.Name);
                        Expression<Func<accInvoiceAdapter, object>> path  = null;
                        switch(member.Member.Name){
                        
							case "accInvoiceServProducts":
								path = p => p.accInvoiceServProducts.First().WithoutUpdate();

								//path = p => member;
								//path = p => p.accInvoiceServProducts.First().accServiceProduct.WithoutUpdate();											
							break;
                        
							case "accFiles":
								path = p => p.accFiles.First().WithoutUpdate();

								//path = p => member;
							break;
                        
							case "accIncomeExpenses":
								path = p => p.accIncomeExpenses.First().WithoutUpdate();

								//path = p => member;
								//path = p => p.accIncomeExpenses.First().accMoneyInOutConcept.WithoutUpdate();											
								//path = p => p.accIncomeExpenses.First().accMoneyPlace.WithoutUpdate();											
								//path = p => p.accIncomeExpenses.First().accProvider.WithoutUpdate();											
								//path = p => p.accIncomeExpenses.First().accReusableCatalogValue.WithoutUpdate();											
								//path = p => p.accIncomeExpenses.First().accReusableStatusAuthorization.WithoutUpdate();											
								//path = p => p.accIncomeExpenses.First().accCompanyArea.WithoutUpdate();											
								//path = p => p.accIncomeExpenses.First().accParent.WithoutUpdate();											
								//path = p => p.accIncomeExpenses.First().accReusable_PaymentType.WithoutUpdate();											
							break;
							
							default:
								path = p => member;
							break;
                        }

                        
                       paths.Add(path.Expand());
                    }
                }
                object aux = null;
					paths.Add(p => p.accCustomer.WithoutUpdate());

					//paths = pathBuilder.ToArray();

				if (adapter.accCustomer != null ){
					if(adapter.accCustomer.EntityKey == null) adapter.accCustomer.EntityKey = con.WrappedContext.CreateEntityKey("accCustomers", adapter.accCustomer);
				}
#region Childs accInvoiceServProducts 
				if (adapter.accInvoiceServProducts != null)
                {
                    foreach (var item in adapter.accInvoiceServProducts)
                    {
						
							if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accInvoiceServProducts", item);
							if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)){ 
								//paths.Add(p => p.accInvoiceServProducts.First().WithoutUpdate());
								
							if (item.accInvoice == null)
								item.accInvoice = adapter;

						if (item.accServiceProduct != null){
							item.accServiceProduct.EntityKey = con.WrappedContext.CreateEntityKey("accServiceProducts", item.accServiceProduct);
                            
             
						}								
								item.EntityKey = null;
							}

                    }
					if (adapter.accInvoiceServProducts.Count > 0){
						paths.Add(p => p.accInvoiceServProducts.First().WithoutUpdate());
						paths.Add(p => p.accInvoiceServProducts.First().accServiceProduct.WithoutUpdate());
					
					}
                }
#endregion 

#region Childs accFiles 
				if (adapter.accFiles != null)
                {
                    foreach (var item in adapter.accFiles)
                    {
						
							if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accFiles", item);
							if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)){ 
								//paths.Add(p => p.accFiles.First().WithoutUpdate());
								
								item.EntityKey = null;
							}

                    }
					if (adapter.accFiles.Count > 0){
						paths.Add(p => p.accFiles.First().WithoutUpdate());
											
					}
                }
#endregion 

#region Childs accIncomeExpenses 
				if (adapter.accIncomeExpenses != null)
                {
                    foreach (var item in adapter.accIncomeExpenses)
                    {
						
							if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accIncomeExpenses", item);
							if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)){ 
								//paths.Add(p => p.accIncomeExpenses.First().WithoutUpdate());
								
						if (item.accMoneyInOutConcept != null){
							item.accMoneyInOutConcept.EntityKey = con.WrappedContext.CreateEntityKey("accMoneyInOutConcepts", item.accMoneyInOutConcept);
                            
             
						}								
						if (item.accMoneyPlace != null){
							item.accMoneyPlace.EntityKey = con.WrappedContext.CreateEntityKey("accMoneyPlaces", item.accMoneyPlace);
                            
             
						}								
						if (item.accProvider != null){
							item.accProvider.EntityKey = con.WrappedContext.CreateEntityKey("accProviders", item.accProvider);
                            
             
						}								
						if (item.accReusableCatalogValue != null){
							item.accReusableCatalogValue.EntityKey = con.WrappedContext.CreateEntityKey("accReusableCatalogValues", item.accReusableCatalogValue);
                            
             
						}								
						if (item.accReusableStatusAuthorization != null){
							item.accReusableStatusAuthorization.EntityKey = con.WrappedContext.CreateEntityKey("accReusableCatalogValues", item.accReusableStatusAuthorization);
                            
             
						}								
						if (item.accCompanyArea != null){
							item.accCompanyArea.EntityKey = con.WrappedContext.CreateEntityKey("accCompanyAreas", item.accCompanyArea);
                            
             
						}								
						if (item.accParent != null){
							item.accParent.EntityKey = con.WrappedContext.CreateEntityKey("accIncomeExpenses", item.accParent);
                            
             
						}								
						if (item.accReusable_PaymentType != null){
							item.accReusable_PaymentType.EntityKey = con.WrappedContext.CreateEntityKey("accReusableCatalogValues", item.accReusable_PaymentType);
                            
             
						}								
								item.EntityKey = null;
							}

                    }
					if (adapter.accIncomeExpenses.Count > 0){
						paths.Add(p => p.accIncomeExpenses.First().WithoutUpdate());
						paths.Add(p => p.accIncomeExpenses.First().accMoneyInOutConcept.WithoutUpdate());
paths.Add(p => p.accIncomeExpenses.First().accMoneyPlace.WithoutUpdate());
paths.Add(p => p.accIncomeExpenses.First().accProvider.WithoutUpdate());
paths.Add(p => p.accIncomeExpenses.First().accReusableCatalogValue.WithoutUpdate());
paths.Add(p => p.accIncomeExpenses.First().accReusableStatusAuthorization.WithoutUpdate());
paths.Add(p => p.accIncomeExpenses.First().accCompanyArea.WithoutUpdate());
paths.Add(p => p.accIncomeExpenses.First().accParent.WithoutUpdate());
paths.Add(p => p.accIncomeExpenses.First().accReusable_PaymentType.WithoutUpdate());
					
					}
                }
#endregion 




                //con.WrappedContext.AttachObjectGraph<accInvoiceAdapter>(adapter, p=>p.accCustomer, p=>p.accInvoiceServProducts, p=>p.accFiles, p=>p.accIncomeExpenses);
                con.WrappedContext.AttachObjectGraph<accInvoiceAdapter>(adapter, paths.ToArray());
              	if (saveChanges){
                    con.WrappedContext.SaveChanges(SaveOptions.AcceptAllChangesAfterSave);
					 
				}
                else
                    con.WrappedContext.SaveChanges(SaveOptions.None);
                if (!saveChanges)
                    context = con.WrappedContext;
                else
                    context = null;
				itemResult = adapter.PocoEntity;
                if (e != null)
                {
                    e.Item = itemResult;
                }
                OnCreated(this, e == null ? e = new BusinessRulesEventArgs<accInvoice>() { ContextRequest = contextRequest, Item = itemResult, PathExpressions = pocopaths, SaveChanges = saveChanges } : e);



                if (e != null)
                {
                    itemResult = e.Item;
                }
                              return itemResult;
            }
        }
        BusinessRulesEventArgs<accInvoice> e = null;
        public void Create(List<accInvoice> entities)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            Create(entities, contextRequest, null);
        }
        public void Create(List<accInvoice> entities, ContextRequest contextRequest)
        
        {
			ObjectContext context = null;
            	foreach (accInvoice entity in entities)
				{
					this.Create(entity, true, contextRequest, out context);
				}
        }
         public accInvoice Update(accInvoice entity)
        {
            if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return Update(entity, contextRequest);
        }
        public accInvoice Update(accInvoice entity, ContextRequest requestContext)
        {
			  ObjectContext context = null;
            return Update(entity, true,requestContext, out context);
         }
		public  accInvoice Update(accInvoice entity, params Expression<Func<accInvoice, object>>[] pocopaths)
        {
			  ObjectContext context = null;
              return Update(entity, true, null, out context, pocopaths);
         }
        public accInvoice Update(accInvoice entity, ContextRequest requestContext, bool saveChanges, out ObjectContext outcontext)
        {
			return Update(entity, saveChanges,requestContext, out outcontext, null);
		}
         public accInvoice Update(accInvoice entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext outcontext, params Expression<Func<accInvoice,object>>[] pocopaths)
        {
		 if ((System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null) && contextRequest == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Update");
            }
            if (contextRequest == null)
            {
                contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            }

			using (EFPocoContext con = new EFPocoContext())
			{
				accInvoice  itemResult = null;

	
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
			if(contextRequest.User != null)
				entity.UpdatedBy = contextRequest.User.GuidUser;

	    var oldentity = GetBy(p => p.GuidInvoice == entity.GuidInvoice, contextRequest).FirstOrDefault();
		if (oldentity != null) {
		
            entity.CreatedDate = oldentity.CreatedDate;
            entity.CreatedBy = oldentity.CreatedBy;
	
            entity.GuidCompany = oldentity.GuidCompany;
	
			

		}

				e = null;
                OnUpdating(this,e = new BusinessRulesEventArgs<accInvoice>() { ContextRequest = contextRequest, Item=entity, PathExpressions = pocopaths, SaveChanges =saveChanges });
				   if (e != null) {
						if (e.Cancel)
						{
							outcontext = null;
							return e.Item;

						}
					}

                accInvoiceAdapter adapter = con.GetAdapterObject<accInvoiceAdapter>(entity);
                adapter.EntityKey = con.WrappedContext.CreateEntityKey("accInvoices", adapter);
				    var es = con.accInvoices;
				List<Expression<Func<accInvoiceAdapter, object>>> paths = new List<Expression<Func<accInvoiceAdapter,object>>>();
                /* if (pocopaths != null)
                    if (pocopaths.Length == 0)
                        pocopaths = null;*/

			    if (pocopaths != null && pocopaths.Length > 0)
                {
					// Translate
                    foreach (var pocopath in pocopaths)
                    {
                        var param = Expression.Parameter(typeof(accInvoiceAdapter), "p");
                        var member = MemberExpression.PropertyOrField(param, ((System.Linq.Expressions.MemberExpression)(((System.Linq.Expressions.LambdaExpression)(pocopath)).Body)).Member.Name);
                        Expression<Func<accInvoiceAdapter, object>> path  = null;
                        switch(member.Member.Name){
                        
							case "accInvoiceServProducts":
								//path = p => member;
								path = p => p.accInvoiceServProducts.First().WithoutUpdate();
				//				path = p => p.accInvoiceServProducts.First().accServiceProduct.WithoutUpdate();											
							break;
                        
							case "accFiles":
								//path = p => member;
								path = p => p.accFiles.First().WithoutUpdate();
							break;
                        
							case "accIncomeExpenses":
								//path = p => member;
								path = p => p.accIncomeExpenses.First().WithoutUpdate();
				//				path = p => p.accIncomeExpenses.First().accMoneyInOutConcept.WithoutUpdate();											
				//				path = p => p.accIncomeExpenses.First().accMoneyPlace.WithoutUpdate();											
				//				path = p => p.accIncomeExpenses.First().accProvider.WithoutUpdate();											
				//				path = p => p.accIncomeExpenses.First().accReusableCatalogValue.WithoutUpdate();											
				//				path = p => p.accIncomeExpenses.First().accReusableStatusAuthorization.WithoutUpdate();											
				//				path = p => p.accIncomeExpenses.First().accCompanyArea.WithoutUpdate();											
				//				path = p => p.accIncomeExpenses.First().accParent.WithoutUpdate();											
				//				path = p => p.accIncomeExpenses.First().accReusable_PaymentType.WithoutUpdate();											
							break;
							
							default:
								path = p => member;
							break;
                        }

                        paths.Add(path.Expand());
 					}
                }
                else {
                  paths = new List<Expression<Func<accInvoiceAdapter, object>>>();

					//List<Expression<Func<accInvoiceAdapter,object>>> pathBuilder = new List<Expression<Func<accInvoiceAdapter,object>>>();
					paths.Add(p => p.accCustomer.WithoutUpdate());

		
					//paths = pathBuilder.ToArray();		
			}
			object aux = null;
				if (adapter.accCustomer != null ){
					if(adapter.accCustomer.EntityKey == null) adapter.accCustomer.EntityKey = con.WrappedContext.CreateEntityKey("accCustomers", adapter.accCustomer);
				}

                
				if (adapter.accInvoiceServProducts != null)
                {
                    foreach (var item in adapter.accInvoiceServProducts)
                    {


                        if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accInvoiceServProducts", item);
						if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)) item.EntityKey = null;
                        
                    }
					
                    if (adapter.accInvoiceServProducts.Count > 0)
                    {
                        paths.Add(p => p.accInvoiceServProducts.First().WithoutUpdate());

                    }

                }
				if (adapter.accFiles != null)
                {
                    foreach (var item in adapter.accFiles)
                    {


                        if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accFiles", item);
						if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)) item.EntityKey = null;
                        
                    }
					
                    if (adapter.accFiles.Count > 0)
                    {
                        paths.Add(p => p.accFiles.First().WithoutUpdate());

                    }

                }
				if (adapter.accIncomeExpenses != null)
                {
                    foreach (var item in adapter.accIncomeExpenses)
                    {


                        if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accIncomeExpenses", item);
						if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)) item.EntityKey = null;
                        
                    }
					
                    if (adapter.accIncomeExpenses.Count > 0)
                    {
                        paths.Add(p => p.accIncomeExpenses.First().WithoutUpdate());

                    }

                }



                //con.AttachObjectGraph<accInvoice>(adapter, p=>p.accCustomer, p=>p.accInvoiceServProducts, p=>p.accFiles, p=>p.accIncomeExpenses);
                con.WrappedContext.AttachObjectGraph<accInvoiceAdapter>(adapter, paths.ToArray());
				if (saveChanges){
                	con.WrappedContext.SaveChanges();
					 
					}
                if(!saveChanges)
					outcontext = con.WrappedContext;
				else
					outcontext = null;
				itemResult = adapter.PocoEntity;
				OnUpdated(this, e = new BusinessRulesEventArgs<accInvoice>() { ContextRequest = contextRequest, Item=itemResult, PathExpressions = pocopaths, SaveChanges =saveChanges });

              	return itemResult;

			  }
        }
        public accInvoice Save(accInvoice entity)
        {
			return Save(entity, true, null);
        }
        public int Save(List<accInvoice> entities)
        {
			using (EFPocoContext con = new EFPocoContext())
			{
			
            int n = 0;
            foreach (accInvoice item in entities)
            {
                try
                {
                    this.Save(item, false, con);
                    n++;
                }catch (Exception ex){
                    SFSdotNet.Framework.My.EventLog.Exception(ex);
                }
            }
            con.SaveChanges();
            return n;
            }
        }
        #endregion
        #region Delete
        public void Delete(accInvoice entity)
        {
				this.Delete(entity, null);
			
        }
		 public void Delete(accInvoice entity, ContextRequest contextRequest)
        {
				ObjectContext context = null;
				this.Delete(entity, true, out context, contextRequest);
			
        }

        
        public void Delete(accInvoice entity, bool saveChanges, out  ObjectContext context, ContextRequest contextRequest, BusinessRulesEventArgs<accInvoice> e = null)
        {
			using (EFPocoContext _con = new EFPocoContext())
			{
				int result = 0;
				
               	BusinessRulesEventArgs<accInvoice> _e = null;
               List<accInvoice> _items = new List<accInvoice>();
                _items.Add(entity);
                if (e == null || e.PreventPartialPropagate == false)
                {
                    OnDeleting(this, _e = (e == null ? new BusinessRulesEventArgs<accInvoice>() { ContextRequest = contextRequest, Item = entity, Items = _items, SaveChanges = saveChanges } : e));
                }
                if (_e != null)
                {
                    if (_e.Cancel)
						{
							context = null;
							return;

						}
					}


				accInvoiceAdapter adapter = _con.GetAdapterObject<accInvoiceAdapter>(entity);
                adapter.EntityKey = _con.WrappedContext.CreateEntityKey("accInvoices", adapter);
                
	            //adapter = _con.WrappedContext.AttachObjectGraph<accInvoiceAdapter>(adapter);
				try{
					_con.WrappedContext.AttachTo("accInvoices", adapter);
                }catch{
					
				}
									//IsDeleted
					bool logicDelete = true;
					if (adapter.IsDeleted != null)
					{
						if (adapter.IsDeleted.Value)
							logicDelete = false;
					}
					if (logicDelete)
					{
											entity = GetBy(p => p.GuidInvoice == entity.GuidInvoice, contextRequest).FirstOrDefault();
						entity.IsDeleted = true;
						Update(entity, contextRequest);
					}
					else {
						_con.WrappedContext.DeleteObject(adapter);
					}
								
				if (!saveChanges)
                    context = _con.WrappedContext;
                else
                    context = null;
				 SaveOptions saveOption = SaveOptions.None;
                if (saveChanges)
                    saveOption = SaveOptions.AcceptAllChangesAfterSave;

				result = _con.WrappedContext.SaveChanges(saveOption);
				if (saveChanges){
					
					}
			if (e == null || e.PreventPartialPropagate == false)
                {

                    if (_e == null)
                        _e = new BusinessRulesEventArgs<accInvoice>() { ContextRequest = contextRequest, Item = entity, Items = _items };

                    OnDeleted(this, _e);
                }

				//return null;
			}            
        }
        public void Delete(List<accInvoice> entities,  ContextRequest contextRequest = null )
        {
				ObjectContext context = null;
			 BusinessRulesEventArgs<accInvoice> _e = null;

                OnDeleting(this, _e = new BusinessRulesEventArgs<accInvoice>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities });
                if (_e != null)
                {
                    if (_e.Cancel)
                    {
                        context = null;
                        return;

                    }
                }
                bool allSucced = true;
                BusinessRulesEventArgs<accInvoice> eToChilds = new BusinessRulesEventArgs<accInvoice>();
                if (_e != null)
                {
                    eToChilds = _e;
                }
                else
                {
                    eToChilds = new BusinessRulesEventArgs<accInvoice>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                }
				foreach (accInvoice item in entities)
				{
					try
                    {
                        this.Delete(item, true, out context, contextRequest, e: eToChilds);
                    }
                    catch (Exception ex)
                    {
                        SFSdotNet.Framework.My.EventLog.Error(ex);
                        allSucced = false;
                    }
				}
				if (_e == null)
                    _e = new BusinessRulesEventArgs<accInvoice>() { ContextRequest = contextRequest, CountResult = entities.Count, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                OnDeleted(this, _e);

			
        }
        #endregion
 
        #region GetCount
		 public int GetCount(Expression<Func<accInvoice, bool>> predicate)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

			return GetCount(predicate, contextRequest);
		}
        public int GetCount(Expression<Func<accInvoice, bool>> predicate, ContextRequest contextRequest)
        {


		
			using (EFPocoContext con = new EFPocoContext())
			{


				if (predicate == null) predicate = PredicateBuilder.True<accInvoice>();
           		predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted == null);
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    		if (contextRequest.User !=null )
                        		if (contextRequest.Company != null )
                        			predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				
				return con.accInvoices.Count(predicate);
			}

        }
		  public int GetCount(string predicate,  ContextRequest contextRequest)
         {
             return GetCount(predicate, null, contextRequest);
         }

         public int GetCount(string predicate)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return GetCount(predicate, contextRequest);
        }
		 public int GetCount(string predicate, string usemode){
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
				return GetCount( predicate,  usemode,  contextRequest);
		 }
        public int GetCount(string predicate, string usemode, ContextRequest contextRequest){
			  string freetext = null;
            Filter filter = new Filter();

              if (predicate.Contains("|"))
              {
                 
                  filter.SetFilterPart("ft", GetSpecificFilter(predicate));
                 
                  filter.ProcessText(predicate.Split(char.Parse("|"))[0]);
                  freetext = predicate.Split(char.Parse("|"))[1];
              }
              else {
                  filter.ProcessText(predicate);
              }
           
			e = null;
			contextRequest.FreeText = freetext;
			contextRequest.UseMode = usemode;
            OnCounting(this, e = new BusinessRulesEventArgs<accInvoice>() {  Filter =filter, ContextRequest = contextRequest });
            if (e != null)
            {
                if (e.Cancel)
                {
                    context = null;
                    return e.CountResult;

                }

            

            }
			 predicate = filter.GetFilterComplete();
			StringBuilder sbQuerySystem = new StringBuilder();
		
					
                    filter.SetFilterPart("de","(IsDeleted != true OR IsDeleted == null)");
			
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    	if (contextRequest.User !=null )
                        	if (contextRequest.Company != null ){
                        		

								filter.SetFilterPart("co", @"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
						
						
							}
							
							}
							if (preventSecurityRestrictions) preventSecurityRestrictions= false;
			using (EFContext con = new EFContext())
			{
				   
                 filter.CleanAndProcess("");
				//string predicateWithFKAndComputed = SFSdotNet.Framework.Linq.Utils.ExtractSpecificProperties("", ref predicate );               
				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed();
               string predicateWithManyRelations = filter.GetFilterChildren();
			   ///QueryUtils.BreakeQuery1(predicate, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
			   predicate = filter.GetFilterComplete();
               if (!string.IsNullOrEmpty(predicate))
               {
				
					
                    return con.accInvoices.Count(System.Linq.Dynamic.DynamicExpression.ParseLambda<accInvoice, bool>(predicate));
					
                }else
                    return con.accInvoices.Count();

			}

		}
         public int GetCount()
        {
            return GetCount(p => true);
        }
        #endregion
        
         public accInvoice Update(accInvoice entity, string paths)
        {
            return Update(entity, paths.Split(char.Parse(",")));
            
        }

        public accInvoice Update(accInvoice entity, string[] paths)
        {
            // Translate
            List<Expression<Func<accInvoice, object>>> pathList = new List<Expression<Func<accInvoice, object>>>();
            for (int i = 0; i <= paths.Length -1; i++)
            {
                var param = Expression.Parameter(typeof(accInvoice), "p");
                var member = MemberExpression.PropertyOrField(param, paths[i]);

                Expression<Func<accInvoice, object>> path = p => member;
                pathList.Add(path.Expand());
            }
			ObjectContext context = null;
			 return Update(entity, true,null, out context,  pathList.ToArray());
           //return Update(entity, pathList.ToArray());
        }

        public void Update(List<accInvoice> entities, string paths)
        {
            foreach (var entity in entities )
            {
                Update(entity, paths);
            }
        }
		public accInvoice Create(accInvoice entity, ContextRequest contextRequest, string paths)
        {
          

            if (string.IsNullOrEmpty(paths))
                return Create(entity, contextRequest);

            return Create(entity, contextRequest, paths.Split(char.Parse(",")));
        }
        public accInvoice Create(accInvoice entity, string paths)
        {
			 if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return Create(entity, contextRequest, paths);

        }

        public  void Create(List<accInvoice> entities, ContextRequest requestContext, string paths)
        {
            foreach (var entity in entities)
            {
                Create(entity,requestContext, paths);
            }
        }

        public void Create(List<accInvoice> entities, string[] paths)
        {
            foreach (var entity in entities)
            {
                Create(entity, null, paths);
            }
        }
        
        public accInvoice  Create(accInvoice entity, ContextRequest contextRequest, string[] paths)
        {
            List<Expression<Func<accInvoice, object>>> pathList = new List<Expression<Func<accInvoice, object>>>();
            for (int i = 0; i < paths.Length - 1; i++)
            {
                var param = Expression.Parameter(typeof(accInvoice), "p");
                var member = MemberExpression.PropertyOrField(param, paths[i]);

                Expression<Func<accInvoice, object>> path = p => member;
                pathList.Add(path.Expand());
            }
            return Create(entity, contextRequest, pathList.ToArray());
        }
        public void Delete(List<accInvoice.CompositeKey> entityKeys)
        {

            List<accInvoice> items = new List<accInvoice>();
            foreach (var itemKey in entityKeys)
            {
                items.Add(GetByKey(itemKey.GuidInvoice));
            }

            Delete(items);

        }
		
	
		partial void OnRelationAdded(accInvoice item, accFile itemRel);
		partial void OnRelationsAdded(accFile itemRel, SFSdotNet.Framework.BR.BusinessRulesEventArgs<accInvoice> e);

		public void AddRelation(accInvoice item, accFile itemRel)
        {
            using (EFContext  con = new EFContext())
            {
                
                con.ContextOptions.LazyLoadingEnabled = false;
                con.ContextOptions.ProxyCreationEnabled = false; 
                con.accInvoices.First(p => p.GuidInvoice == item.GuidInvoice).accFiles.Add(con.accFiles.First(x=>x.GuidFile == itemRel.GuidFile));
                con.SaveChanges();
            }
			OnRelationAdded(item,  itemRel);
        }
		public void AddRelations(List<accInvoice> items, accFile itemRel)
        {
            SFSdotNet.Framework.BR.BusinessRulesEventArgs<accInvoice> e = new BusinessRulesEventArgs<accInvoice>();
            e.Items = items;
            AddRelations(itemRel, e);
        }
        public void AddRelations(accFile itemRel, SFSdotNet.Framework.BR.BusinessRulesEventArgs<accInvoice> e)
        {
            using (EFContext con = new EFContext())
            {
                foreach (var item in e.Items)
                {
                    con.ContextOptions.LazyLoadingEnabled = false;
                    con.ContextOptions.ProxyCreationEnabled = false;
                    con.accInvoices.First(p => p.GuidInvoice == item.GuidInvoice).accFiles.Add(con.accFiles.First(x => x.GuidFile == itemRel.GuidFile));

                }
                con.SaveChanges();
            }
            OnRelationsAdded(itemRel, e);
        }

		partial void OnRelationRemoved(accInvoice item, accFile itemRel);
		partial void OnRelationsRemoved(accFile itemRel, SFSdotNet.Framework.BR.BusinessRulesEventArgs<accInvoice> e);

        public void RemoveRelation(accInvoice item, accFile itemRel)
        {
            using (EFContext con = new EFContext())
            {
                item = con.accInvoices.Include("accFiles").FirstOrDefault(p => p.GuidInvoice == item.GuidInvoice);
                if (item != null) {
                    if (item.accFiles.FirstOrDefault(x =>x.GuidFile == itemRel.GuidFile) != null ) {
                        item.accFiles.Remove(item.accFiles.FirstOrDefault(x => x.GuidFile == itemRel.GuidFile));
                    }
                }
                con.SaveChanges();
            }
			OnRelationRemoved(item,  itemRel);

        }
		public void RemoveRelations(List<accInvoice> objs, accFile itemRel)
        {
            using (EFContext con = new EFContext())
            {
                foreach (var item in objs)
                {
                    var _item = con.accInvoices.Include("accFiles").FirstOrDefault(p => p.GuidInvoice == item.GuidInvoice);
                    if (_item != null)
                    {
                        if (_item.accFiles.FirstOrDefault(x => x.GuidFile == itemRel.GuidFile) != null)
                        {
                            _item.accFiles.Remove(_item.accFiles.FirstOrDefault(x => x.GuidFile == itemRel.GuidFile));
                        }
                    }
					
                }
                con.SaveChanges();
            }

            OnRelationsRemoved(itemRel, new SFSdotNet.Framework.BR.BusinessRulesEventArgs<accInvoice>() { Items = objs });

        }
	
		partial void OnRelationAdded(accInvoice item, accIncomeExpens itemRel);
		partial void OnRelationsAdded(accIncomeExpens itemRel, SFSdotNet.Framework.BR.BusinessRulesEventArgs<accInvoice> e);

		public void AddRelation(accInvoice item, accIncomeExpens itemRel)
        {
            using (EFContext  con = new EFContext())
            {
                
                con.ContextOptions.LazyLoadingEnabled = false;
                con.ContextOptions.ProxyCreationEnabled = false; 
                con.accInvoices.First(p => p.GuidInvoice == item.GuidInvoice).accIncomeExpenses.Add(con.accIncomeExpenses.First(x=>x.GuidIncomecExpense == itemRel.GuidIncomecExpense));
                con.SaveChanges();
            }
			OnRelationAdded(item,  itemRel);
        }
		public void AddRelations(List<accInvoice> items, accIncomeExpens itemRel)
        {
            SFSdotNet.Framework.BR.BusinessRulesEventArgs<accInvoice> e = new BusinessRulesEventArgs<accInvoice>();
            e.Items = items;
            AddRelations(itemRel, e);
        }
        public void AddRelations(accIncomeExpens itemRel, SFSdotNet.Framework.BR.BusinessRulesEventArgs<accInvoice> e)
        {
            using (EFContext con = new EFContext())
            {
                foreach (var item in e.Items)
                {
                    con.ContextOptions.LazyLoadingEnabled = false;
                    con.ContextOptions.ProxyCreationEnabled = false;
                    con.accInvoices.First(p => p.GuidInvoice == item.GuidInvoice).accIncomeExpenses.Add(con.accIncomeExpenses.First(x => x.GuidIncomecExpense == itemRel.GuidIncomecExpense));

                }
                con.SaveChanges();
            }
            OnRelationsAdded(itemRel, e);
        }

		partial void OnRelationRemoved(accInvoice item, accIncomeExpens itemRel);
		partial void OnRelationsRemoved(accIncomeExpens itemRel, SFSdotNet.Framework.BR.BusinessRulesEventArgs<accInvoice> e);

        public void RemoveRelation(accInvoice item, accIncomeExpens itemRel)
        {
            using (EFContext con = new EFContext())
            {
                item = con.accInvoices.Include("accIncomeExpenses").FirstOrDefault(p => p.GuidInvoice == item.GuidInvoice);
                if (item != null) {
                    if (item.accIncomeExpenses.FirstOrDefault(x =>x.GuidIncomecExpense == itemRel.GuidIncomecExpense) != null ) {
                        item.accIncomeExpenses.Remove(item.accIncomeExpenses.FirstOrDefault(x => x.GuidIncomecExpense == itemRel.GuidIncomecExpense));
                    }
                }
                con.SaveChanges();
            }
			OnRelationRemoved(item,  itemRel);

        }
		public void RemoveRelations(List<accInvoice> objs, accIncomeExpens itemRel)
        {
            using (EFContext con = new EFContext())
            {
                foreach (var item in objs)
                {
                    var _item = con.accInvoices.Include("accIncomeExpenses").FirstOrDefault(p => p.GuidInvoice == item.GuidInvoice);
                    if (_item != null)
                    {
                        if (_item.accIncomeExpenses.FirstOrDefault(x => x.GuidIncomecExpense == itemRel.GuidIncomecExpense) != null)
                        {
                            _item.accIncomeExpenses.Remove(_item.accIncomeExpenses.FirstOrDefault(x => x.GuidIncomecExpense == itemRel.GuidIncomecExpense));
                        }
                    }
					
                }
                con.SaveChanges();
            }

            OnRelationsRemoved(itemRel, new SFSdotNet.Framework.BR.BusinessRulesEventArgs<accInvoice>() { Items = objs });

        }
		
	}
		public partial class accInvoiceServProductsBR{
	 	
           
		 #region Partial methods

           partial void OnUpdating(object sender, BusinessRulesEventArgs<accInvoiceServProduct> e);

            partial void OnUpdated(object sender, BusinessRulesEventArgs<accInvoiceServProduct> e);

            partial void OnCreating(object sender, BusinessRulesEventArgs<accInvoiceServProduct> e);
            partial void OnCreated(object sender, BusinessRulesEventArgs<accInvoiceServProduct> e);

            partial void OnDeleting(object sender, BusinessRulesEventArgs<accInvoiceServProduct> e);
            partial void OnDeleted(object sender, BusinessRulesEventArgs<accInvoiceServProduct> e);

            partial void OnGetting(object sender, BusinessRulesEventArgs<accInvoiceServProduct> e);
            partial void OnTaken(object sender, BusinessRulesEventArgs<accInvoiceServProduct> e);
            partial void OnCounting(object sender, BusinessRulesEventArgs<accInvoiceServProduct> e);
 
 
            #endregion
			
		private static accInvoiceServProductsBR singlenton =null;
				public static accInvoiceServProductsBR NewInstance(){
					return  new accInvoiceServProductsBR();
					
				}
		public static accInvoiceServProductsBR Instance{
			get{
				if (singlenton == null)
					singlenton = new accInvoiceServProductsBR();
				return singlenton;
			}
		}
		private bool preventSecurityRestrictions = false;
		 public bool PreventAuditTrail { get; set;  }
		#region Fields
        EFPocoContext context = null;
        #endregion
        #region Constructor
        public accInvoiceServProductsBR()
        {
            context = new EFPocoContext();
        }
		 public accInvoiceServProductsBR(bool preventSecurity)
            {
                this.preventSecurityRestrictions = preventSecurity;
				context = new EFPocoContext();
            }
        #endregion
		
		#region Get

 		public IQueryable<accInvoiceServProduct> Get()
        {
            //using (EFContext con = new EFContext())
            //{
				EFContext con = new EFContext();
                var query = con.accInvoiceServProducts.AsQueryable();
                con.ContextOptions.ProxyCreationEnabled = false;

                //query = ContextQueryBuilder<Nutrient>.ApplyContextQuery(query, contextRequest);

                return query;




            //}

        }
		
		public List<accInvoiceServProduct> GetAll()
        {
            return this.GetBy(p => true);
        }
        public List<accInvoiceServProduct> GetAll(string includes)
        {
            return this.GetBy(p => true, includes);
        }
        public accInvoiceServProduct GetByKey(Guid guidInvoiceServProduct)
        {
            return GetByKey(guidInvoiceServProduct, true);
        }
        public accInvoiceServProduct GetByKey(Guid guidInvoiceServProduct, bool loadIncludes)
        {
            accInvoiceServProduct item = null;
			var query = PredicateBuilder.True<accInvoiceServProduct>();
                    
			string strWhere = @"GuidInvoiceServProduct = Guid(""" + guidInvoiceServProduct.ToString()+@""")";
            Expression<Func<accInvoiceServProduct, bool>> predicate = null;
            if (!string.IsNullOrEmpty(strWhere))
                predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<accInvoiceServProduct, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
			 ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();
            contextRequest.CustomQuery.FilterExpressionString = strWhere;

			//item = GetBy(predicate, loadIncludes, contextRequest).FirstOrDefault();
			item = GetBy(strWhere,loadIncludes,contextRequest).FirstOrDefault();
            return item;
        }
         public List<accInvoiceServProduct> GetBy(string strWhere, bool loadRelations, ContextRequest contextRequest)
        {
            if (!loadRelations)
                return GetBy(strWhere, contextRequest);
            else
                return GetBy(strWhere, contextRequest, "");

        }
		  public List<accInvoiceServProduct> GetBy(string strWhere, bool loadRelations)
        {
              if (!loadRelations)
                return GetBy(strWhere, new ContextRequest());
            else
                return GetBy(strWhere, new ContextRequest(), "");

        }
         public accInvoiceServProduct GetByKey(Guid guidInvoiceServProduct, params Expression<Func<accInvoiceServProduct, object>>[] includes)
        {
            accInvoiceServProduct item = null;
			string strWhere = @"GuidInvoiceServProduct = Guid(""" + guidInvoiceServProduct.ToString()+@""")";
          Expression<Func<accInvoiceServProduct, bool>> predicate = null;
            if (!string.IsNullOrEmpty(strWhere))
                predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<accInvoiceServProduct, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
        item = GetBy(predicate, includes).FirstOrDefault();
         ////   item = GetBy(strWhere,includes).FirstOrDefault();
			return item;

        }
        public accInvoiceServProduct GetByKey(Guid guidInvoiceServProduct, string includes)
        {
            accInvoiceServProduct item = null;
			string strWhere = @"GuidInvoiceServProduct = Guid(""" + guidInvoiceServProduct.ToString()+@""")";
            
			
            item = GetBy(strWhere, includes).FirstOrDefault();
            return item;

        }
		 public accInvoiceServProduct GetByKey(Guid guidInvoiceServProduct, string usemode, string includes)
		{
			return GetByKey(guidInvoiceServProduct, usemode, null, includes);

		 }
		 public accInvoiceServProduct GetByKey(Guid guidInvoiceServProduct, string usemode, ContextRequest context,  string includes)
        {
            accInvoiceServProduct item = null;
			string strWhere = @"GuidInvoiceServProduct = Guid(""" + guidInvoiceServProduct.ToString()+@""")";
			if (context == null)
				context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
			context.CustomQuery.IsByKey = true;
            context.CustomQuery.FilterExpressionString = strWhere;
            context.UseMode = usemode;
            item = GetBy(strWhere,context , includes).FirstOrDefault();
            return item;

        }

        #region Dynamic Predicate
        public List<accInvoiceServProduct> GetBy(Expression<Func<accInvoiceServProduct, bool>> predicate, int? pageSize, int? page)
        {
            return this.GetBy(predicate, pageSize, page, null, null);
        }
        public List<accInvoiceServProduct> GetBy(Expression<Func<accInvoiceServProduct, bool>> predicate, ContextRequest contextRequest)
        {

            return GetBy(predicate, contextRequest,"");
        }
        
        public List<accInvoiceServProduct> GetBy(Expression<Func<accInvoiceServProduct, bool>> predicate, ContextRequest contextRequest, params Expression<Func<accInvoiceServProduct, object>>[] includes)
        {
            StringBuilder sb = new StringBuilder();
           if (includes != null)
            {
                foreach (var path in includes)
                {

						if (sb.Length > 0) sb.Append(",");
						sb.Append(SFSdotNet.Framework.Linq.Utils.IncludeToString<accInvoiceServProduct>(path));

               }
            }
            return GetBy(predicate, contextRequest, sb.ToString());
        }
        
        
        public List<accInvoiceServProduct> GetBy(Expression<Func<accInvoiceServProduct, bool>> predicate, string includes)
        {
			ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";

            return GetBy(predicate, context, includes);
        }

        public List<accInvoiceServProduct> GetBy(Expression<Func<accInvoiceServProduct, bool>> predicate, params Expression<Func<accInvoiceServProduct, object>>[] includes)
        {
			if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }
			ContextRequest context = new ContextRequest();
			            context.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            context.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";
            return GetBy(predicate, context, includes);
        }

      
		public bool DisableCache { get; set; }
		 public List<accInvoiceServProduct> GetBy(Expression<Func<accInvoiceServProduct, bool>> predicate, ContextRequest contextRequest, string includes)
        {
            using (EFPocoContext con = new EFPocoContext())
            {
				if (DisableCache) 
                	con.CachingPolicy = EFCachingProvider.Caching.CachingPolicy.NoCaching;

				List<accInvoiceServProduct> result = null;
                 e = null;
	
				OnGetting(con, e = new BusinessRulesEventArgs<accInvoiceServProduct>() {  FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null) });

               // OnGetting(con,e = new BusinessRulesEventArgs<accInvoiceServProduct>() { FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = contextRequest.CustomQuery.FilterExpressionString});
				   if (e != null) {
				    predicate = e.FilterExpression;
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				con.EnableChangeTrackingUsingProxies = false;
				con.WrappedContext.accInvoiceServProducts.MergeOption = MergeOption.NoTracking;
                con.WrappedContext.ContextOptions.ProxyCreationEnabled = false;
                if (predicate == null) predicate = PredicateBuilder.True<accInvoiceServProduct>();
 				string fkIncludes = "accInvoice,accServiceProduct";
                if(contextRequest!=null){
					if (contextRequest.CustomQuery != null)
					{
						if (contextRequest.CustomQuery.IncludeForeignKeyPaths != null) {
							if (contextRequest.CustomQuery.IncludeForeignKeyPaths.Value == false)
								fkIncludes = "";
						}
					}
				}
				if (!string.IsNullOrEmpty(includes))
					includes = includes + "," + fkIncludes;
				else
					includes = fkIncludes;
                
                var es = con.accInvoiceServProducts;

                IQueryable<accInvoiceServProduct> query = es.AsQueryable();

                                if (!string.IsNullOrEmpty(includes))
                {
                    foreach (string include in includes.Split(char.Parse(",")))
                    {
						if (!string.IsNullOrEmpty(include))
                            query = query.Include(include);
                    }
                }
                    predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
					 	if (!preventSecurityRestrictions)
						{
							if (contextRequest != null )
		                    	if (contextRequest.User !=null )
		                        	if (contextRequest.Company != null)
		                        		predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				query =query.Where(predicate);
                query = ContextQueryBuilder<accInvoiceServProduct>.ApplyContextQuery(query, contextRequest);

                result = query.ToList<accInvoiceServProduct>();
				  
                if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e =  new BusinessRulesEventArgs<accInvoiceServProduct>() { Items= result, IncludingComputedLinq = false, ContextRequest = contextRequest,  FilterExpression = predicate } :  e);
  
			

                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
            }
        }
		public void UpdateAgile(accInvoiceServProduct item, params string[] fields)
         {
             List<accInvoiceServProduct> list = new List<accInvoiceServProduct>();
             list.Add(item);
             this.UpdateBulk(list, fields);
         }
		public void UpdateBulk(List<accInvoiceServProduct>  items, params string[] fields)
         {
             SFSdotNet.Framework.My.ContextRequest req = new SFSdotNet.Framework.My.ContextRequest();
             req.CustomQuery = new SFSdotNet.Framework.My.CustomQuery();
             foreach (var field in fields)
             {
                 req.CustomQuery.SpecificProperties.Add(field);
             }
             UpdateBulk(items, req);

         }
        public void UpdateBulk(List<accInvoiceServProduct> items, ContextRequest req)
        {
            using (EFContext con = new EFContext())
            {



                foreach (var item in items)
                {
                    var setT = con.CreateObjectSet<accInvoiceServProduct>("accInvoiceServProducts");


                    var itemForAttach = new accInvoiceServProduct();
			itemForAttach.GuidInvoiceServProduct = item.GuidInvoiceServProduct;
					
                    itemForAttach = SFSdotNet.Framework.Entities.ConvertEntity.SetProperties<accInvoiceServProduct>(item, itemForAttach, null, req.CustomQuery.SpecificProperties.ToArray());
                    setT.Attach(itemForAttach);


                    foreach (var property in req.CustomQuery.SpecificProperties)
                    {
						
                        if (property != "GuidInvoiceServProduct")
                            con.ObjectStateManager.GetObjectStateEntry(itemForAttach).SetModifiedProperty(property);

                    }

                }
                con.SaveChanges();


            }
        }
		/*public int Update(List<accInvoiceServProduct> items, ContextRequest contextRequest)
            {
                int result = 0;
                using (EFContext con = new EFContext())
                {
                   
                

                    foreach (var item in items)
                    {
                        //secMessageToUser messageToUser = new secMessageToUser();
                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            item.GetType().GetProperty(prop).SetValue(item, item.GetType().GetProperty(prop).GetValue(item));
                        }
                        //messageToUser.GuidMessageToUser = (Guid)item.GetType().GetProperty("GuidMessageToUser").GetValue(item);

                        var setObject = con.CreateObjectSet<accInvoiceServProduct>("accInvoiceServProducts");
                        //messageToUser.Readed = DateTime.UtcNow;
                        setObject.Attach(item);
                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            con.ObjectStateManager.GetObjectStateEntry(item).SetModifiedProperty(prop);
                        }
                       
                    }
                    result = con.SaveChanges();

                    


                }
                return result;
            }
           */
        public List<accInvoiceServProduct> GetBy(string predicateString, ContextRequest contextRequest, string includes)
        {
            using (EFContext con = new EFContext())
            {
				if (DisableCache) 
                	con.CachingPolicy = EFCachingProvider.Caching.CachingPolicy.NoCaching;

				Filter filter = new Filter();
                if (predicateString.Contains("|"))
                {
                    string ft = GetSpecificFilter(predicateString);
                    if (!string.IsNullOrEmpty(ft))
                        filter.SetFilterPart("ft", ft);
                   
                    contextRequest.FreeText = predicateString.Split(char.Parse("|"))[1];
                    var q1 = predicateString.Split(char.Parse("|"))[0];
                    if (!string.IsNullOrEmpty(q1))
                    {
                        filter.ProcessText(q1);
                    }
                }
                else {
                    filter.ProcessText(predicateString);
                }

				List<accInvoiceServProduct> result = null;
                 e = null;
					OnGetting(con, e = new BusinessRulesEventArgs<accInvoiceServProduct>() { Filter = filter, ContextRequest = contextRequest /*, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null)*/ });

                  //OnGetting(con,e = new BusinessRulesEventArgs<accInvoiceServProduct>() {  ContextRequest = contextRequest, FilterExpressionString = predicateString });
			   	if (e != null) {
				    //predicateString = e.GetQueryString();
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				//	 else {
                //      predicateString = predicateString.Replace("*extraFreeText*", "").Replace("()","");
                //  }
				//con.EnableChangeTrackingUsingProxies = false;
				con.accInvoiceServProducts.MergeOption = MergeOption.NoTracking;
                con.ContextOptions.ProxyCreationEnabled = false;
                //if (predicate == null) predicate = PredicateBuilder.True<accInvoiceServProduct>();
 				string fkIncludes = "accInvoice,accServiceProduct";
                if(contextRequest!=null){
					if (contextRequest.CustomQuery != null)
					{
						if (contextRequest.CustomQuery.IncludeForeignKeyPaths != null) {
							if (contextRequest.CustomQuery.IncludeForeignKeyPaths.Value == false)
								fkIncludes = "";
						}
					}
				}else{
                    contextRequest = new ContextRequest();
                    contextRequest.CustomQuery = new CustomQuery();

                }
				if (!string.IsNullOrEmpty(includes))
					includes = includes + "," + fkIncludes;
				else
					includes = fkIncludes;
                
                var es = con.accInvoiceServProducts;
				IQueryable<accInvoiceServProduct> query = es.AsQueryable();
		
				// include relations FK
				if(string.IsNullOrEmpty(includes) ){
					includes ="";
				}
				bool includeaccInvoice = includes.Split(char.Parse(",")).Contains("accInvoice");

				bool includeaccServiceProduct = includes.Split(char.Parse(",")).Contains("accServiceProduct");

				StringBuilder sbQuerySystem = new StringBuilder();
                    //predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				

				//if (!string.IsNullOrEmpty(predicateString))
                //      sbQuerySystem.Append(" And ");
                //sbQuerySystem.Append(" (IsDeleted != true Or IsDeleted = null) ");
				 filter.SetFilterPart("de", "(IsDeleted != true OR IsDeleted = null)");


					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
	                    	if (contextRequest.User !=null )
	                        	if (contextRequest.Company != null ){
	                        		//if (sbQuerySystem.Length > 0)
	                        		//	    			sbQuerySystem.Append( " And ");	
									//sbQuerySystem.Append(@" (GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
									filter.SetFilterPart("co",@"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @"""))");
								}
						}	
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				//string predicateString = predicate.ToDynamicLinq<accInvoiceServProduct>();
				//predicateString += sbQuerySystem.ToString();
				filter.CleanAndProcess("");

				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed(); //SFSdotNet.Framework.Linq.Utils.ExtractSpecificProperties("", ref predicateString );               
                string predicateWithManyRelations = filter.GetFilterChildren(); //SFSdotNet.Framework.Linq.Utils.CleanPartExpression(predicateString);

                //QueryUtils.BreakeQuery1(predicateString, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
                var _queryable = query.AsQueryable();
                if (!string.IsNullOrEmpty(predicateWithManyRelations))
                    _queryable = _queryable.Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams);
				if (contextRequest.CustomQuery.SpecificProperties.Count > 0)
                {

                    StringBuilder sbProps = new StringBuilder();
                    contextRequest.CustomQuery.SpecificProperties.Add("GuidInvoiceServProduct");
                    
					foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                    {
						if(sbProps.Length > 0)
							sbProps.Append(",");
                        sbProps.Append(prop);
                    }
					    IQueryable  queryableSelective = null ;
					  
					  if (!string.IsNullOrEmpty(predicateWithManyRelations))
							queryableSelective = con.accInvoiceServProducts.AsQueryable().Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams).Select(string.Format("new({0})", sbProps.ToString()));
					else
						queryableSelective = con.accInvoiceServProducts.AsQueryable().Select(string.Format("new({0})", sbProps.ToString()));


                    //if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
					//	queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

                    QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
                    
					if (!string.IsNullOrEmpty(queryOps.OrderByAndSort))
                        queryableSelective = queryableSelective.OrderBy(queryOps.OrderByAndSort);
                    if (queryOps.Skip != null)
                    {
                        queryableSelective = queryableSelective.Skip(queryOps.Skip.Value);
                    }
                    if (queryOps.PageSize != null)
                    {
                        queryableSelective = queryableSelective.Take(queryOps.PageSize.Value);
                    }
                    //var results = queryableSelective.ToList();
                    result = new List<accInvoiceServProduct>();
                    accInvoiceServProduct itemDef = null;
                    foreach (var item in queryableSelective)
                    {
                        itemDef = new accInvoiceServProduct();

                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            if (!prop.Contains("."))
                            {
                                itemDef.GetType().GetProperty(prop).SetValue(itemDef, item.GetType().GetProperty(prop).GetValue(item));
                            }
                            else {
                                throw new Exception("La seleccion de relaciones aún no esta soportada");
                            }

                        }

                        result.Add(itemDef);
                    }

                }
                else
                {
				var  queryable = _queryable.Select(                    
				p => 
                        new
                    {
					GuidInvoiceServProduct = p.GuidInvoiceServProduct
,Qty = p.Qty
,DiscountPercent = p.DiscountPercent
,DiscountValue = p.DiscountValue
,NormalPrice = p.NormalPrice
,CreatedDate = p.CreatedDate
,UpdatedDate = p.UpdatedDate
,CreatedBy = p.CreatedBy
,UpdatedBy = p.UpdatedBy
,IsDeleted = p.IsDeleted
,GuidCompany = p.GuidCompany

,accInvoice = includeaccInvoice ? p.accInvoice:null
,accServiceProduct = includeaccServiceProduct ? p.accServiceProduct:null


	
                    }
                    
                    );
					
				
                 if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
                    queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

				QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
            	if (!string.IsNullOrEmpty(queryOps.OrderByAndSort))
					queryable = queryable.OrderBy(queryOps.OrderByAndSort);
               	if (queryOps.Skip != null)
                {
                    queryable = queryable.Skip(queryOps.Skip.Value);
                }
                if (queryOps.PageSize != null)
                {
                    queryable = queryable.Take (queryOps.PageSize.Value);
                }
                result = queryable.AsEnumerable().
                    Select(
                    p =>  new accInvoiceServProduct()
                    {
					GuidInvoiceServProduct = p.GuidInvoiceServProduct
,Qty = p.Qty
,DiscountPercent = p.DiscountPercent
,DiscountValue = p.DiscountValue
,NormalPrice = p.NormalPrice
,CreatedDate = p.CreatedDate
,UpdatedDate = p.UpdatedDate
,CreatedBy = p.CreatedBy
,UpdatedBy = p.UpdatedBy
,IsDeleted = p.IsDeleted
,GuidCompany = p.GuidCompany
,accInvoice = p.accInvoice
,accServiceProduct = p.accServiceProduct

                    }
                     ).ToList();
				}


			 if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e = new BusinessRulesEventArgs<accInvoiceServProduct>() { Items= result, IncludingComputedLinq = true, ContextRequest = contextRequest, FilterExpressionString  = predicateString } :  e);
  
			
  
                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
            }
        }
		public List<accInvoiceServProduct> GetBy(Expression<Func<accInvoiceServProduct, bool>> predicate, bool loadRelations, ContextRequest contextRequest)
        {
			if(!loadRelations)
				return GetBy(predicate, contextRequest);
			else
				return GetBy(predicate, contextRequest, "");

        }

        public List<accInvoiceServProduct> GetBy(Expression<Func<accInvoiceServProduct, bool>> predicate, int? pageSize, int? page, string orderBy, SFSdotNet.Framework.Data.SortDirection? sortDirection)
        {
            return GetBy(predicate, new ContextRequest() { CustomQuery = new CustomQuery() { Page = page, PageSize = pageSize, OrderBy = orderBy, SortDirection = sortDirection } });
        }
        public List<accInvoiceServProduct> GetBy(Expression<Func<accInvoiceServProduct, bool>> predicate)
        {

			if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }
			ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();

			contextRequest.CurrentContext = SFSdotNet.Framework.My.Context.CurrentContext;
			            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

            contextRequest.CustomQuery.FilterExpressionString = null;
            return this.GetBy(predicate, contextRequest, "");
        }
        #endregion
        #region Dynamic String
		private string GetSpecificFilter(string filter) {
            string result = "";
		    //string linqFilter = String.Empty;
            string freeTextFilter = String.Empty;
            if (filter.Contains("|"))
            {
               // linqFilter = filter.Split(char.Parse("|"))[0];
                freeTextFilter = filter.Split(char.Parse("|"))[1];
            }
            //else {
            //    freeTextFilter = filter;
            //}
            //else {
            //    linqFilter = filter;
            //}
			// linqFilter = SFSdotNet.Framework.Linq.Utils.ReplaceCustomDateFilters(linqFilter);
            //string specificFilter = linqFilter;
            if (!string.IsNullOrEmpty(freeTextFilter))
            {
                System.Text.StringBuilder sbCont = new System.Text.StringBuilder();
                /*if (specificFilter.Length > 0)
                {
                    sbCont.Append(" AND ");
                    sbCont.Append(" ({0})");
                }
                else
                {
                    sbCont.Append("{0}");
                }*/
                //var words = freeTextFilter.Split(char.Parse(" "));
				var word = freeTextFilter;
                System.Text.StringBuilder sbSpec = new System.Text.StringBuilder();
                 int nWords = 1;
				/*foreach (var word in words)
                {
					if (word.Length > 0){
                    if (sbSpec.Length > 0) sbSpec.Append(" AND ");
					if (words.Length > 1) sbSpec.Append("("); */
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
								
					//if (sbSpec.Length > 2)
					//	sbSpec.Append(" OR "); // test
					sbSpec.Append(string.Format(@"accServiceProduct.Title.Contains(""{0}"")", word));
								 //sbSpec.Append("*extraFreeText*");

                    /*if (words.Length > 1) sbSpec.Append(")");
					
					nWords++;

					}

                }*/
                //specificFilter = string.Format("{0}{1}", specificFilter, string.Format(sbCont.ToString(), sbSpec.ToString()));
                                 result = sbSpec.ToString();  
            }
			//result = specificFilter;
			
			return result;

		}
	
			public List<accInvoiceServProduct> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  params object[] extraParams)
        {
			return GetBy(filter, pageSize, page, orderBy, orderDir,  null, extraParams);
		}
           public List<accInvoiceServProduct> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir, string usemode, params object[] extraParams)
            { 
                return GetBy(filter, pageSize, page, orderBy, orderDir, usemode, null, extraParams);
            }


		public List<accInvoiceServProduct> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  string usemode, ContextRequest context, params object[] extraParams)

        {

            // string freetext = null;
            //if (filter.Contains("|"))
            //{
            //    int parts = filter.Split(char.Parse("|")).Count();
            //    if (parts > 1)
            //    {

            //        freetext = filter.Split(char.Parse("|"))[1];
            //    }
            //}
		
            //string specificFilter = "";
            //if (!string.IsNullOrEmpty(filter))
            //  specificFilter=  GetSpecificFilter(filter);
            if (string.IsNullOrEmpty(orderBy))
            {
			                orderBy = "UpdatedDate";
            }
			//orderDir = "desc";
			SFSdotNet.Framework.Data.SortDirection direction = SFSdotNet.Framework.Data.SortDirection.Ascending;
            if (!string.IsNullOrEmpty(orderDir))
            {
                if (orderDir == "desc")
                    direction = SFSdotNet.Framework.Data.SortDirection.Descending;
            }
            if (context == null)
                context = new ContextRequest();
			else
                context.CustomQuery = new CustomQuery();
             //context.FreeText = freetext;
             context.UseMode = usemode;
             context.CustomQuery =new SFSdotNet.Framework.My.CustomQuery()
 
                {
                    ExtraParams = extraParams,

                    OrderBy = orderBy,
                    SortDirection = direction,
                    Page = page,
                    PageSize = pageSize
               };
            

            if (!preventSecurityRestrictions) {
			 if (context.CurrentContext == null)
                {
					if (SFSdotNet.Framework.My.Context.CurrentContext != null &&  SFSdotNet.Framework.My.Context.CurrentContext.Company != null && SFSdotNet.Framework.My.Context.CurrentContext.User != null)
					{
						context.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
						context.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

					}
					else {
						throw new Exception("The security rule require a specific user and company");
					}
				}
            }
            return GetBy(filter, context);
  
        }


        public List<accInvoiceServProduct> GetBy(string strWhere, ContextRequest contextRequest)
        {
        	#region old code
				
				 //Expression<Func<tvsReservationTransport, bool>> predicate = null;
				string strWhereClean = strWhere.Replace("*extraFreeText*", "").Replace("()", "");
                //if (!string.IsNullOrEmpty(strWhereClean)){

                //    object[] extraParams = null;
                //    //if (contextRequest != null )
                //    //    if (contextRequest.CustomQuery != null )
                //    //        extraParams = contextRequest.CustomQuery.ExtraParams;
                //    //predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<tvsReservationTransport, bool>(strWhereClean, extraParams != null? extraParams.Cast<Guid>(): null);				
                //}
				 if (contextRequest == null)
                {
                    contextRequest = new ContextRequest();
                    if (contextRequest.CustomQuery == null)
                        contextRequest.CustomQuery = new CustomQuery();
                }
                  if (!preventSecurityRestrictions) {
					if (contextRequest.User == null || contextRequest.Company == null)
                      {
                     if (SFSdotNet.Framework.My.Context.CurrentContext.Company != null && SFSdotNet.Framework.My.Context.CurrentContext.User != null)
                     {
                         contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                         contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

                     }
                     else {
                         throw new Exception("The security rule require a specific User and Company ");
                     }
					 }
                 }
            contextRequest.CustomQuery.FilterExpressionString = strWhere;
				//return GetBy(predicate, contextRequest);  

			#endregion				
				
                    return GetBy(strWhere, contextRequest, "");  


        }
       public List<accInvoiceServProduct> GetBy(string strWhere)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
			
            return GetBy(strWhere, context, null);
        }

        public List<accInvoiceServProduct> GetBy(string strWhere, string includes)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
            return GetBy(strWhere, context, includes);
        }

        #endregion
        #endregion
		
		  #region SaveOrUpdate
        private accInvoiceServProduct Save(accInvoiceServProduct entity, bool saveChanges, EFPocoContext con)
        {
				ObjectContext context = null;
            return Update(entity, saveChanges,null, out context);

			
        }
		 public  accInvoiceServProduct Create( accInvoiceServProduct entity, params Expression<Func< accInvoiceServProduct, object>>[] paths)
         {
             return Create(entity, null, paths);

         }
 		 public accInvoiceServProduct Create(accInvoiceServProduct entity)
        {
				ObjectContext context = null;
				    if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: Create");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

				return this.Create(entity, true, contextRequest, out context);


        }
        public accInvoiceServProduct Create(accInvoiceServProduct entity, ContextRequest contextRequest)
         {
             ObjectContext context = null;
             return this.Create(entity, true, contextRequest,out context);

         }
         public accInvoiceServProduct Create(accInvoiceServProduct entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext context)
        {
                    return Create(entity, saveChanges , contextRequest , out context, null);
        }
         public accInvoiceServProduct Create(accInvoiceServProduct entity, ContextRequest contextRequest, params Expression<Func<accInvoiceServProduct,object>>[] paths)
        {
            ObjectContext context = null;
            if(paths != null)
				return Create(entity, true,contextRequest, out context, paths);
			else 
				return Create(entity, true,contextRequest, out context);
        }
        public accInvoiceServProduct Create(accInvoiceServProduct entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext context, params Expression<Func<accInvoiceServProduct,object>>[] pocopaths)
        {
			using (EFPocoContext con = new EFPocoContext())
			{
				accInvoiceServProduct itemResult = null;
#region Autos


			entity.CreatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.CreatedBy = contextRequest.User.GuidUser;
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.UpdatedBy = contextRequest.User.GuidUser;
	
			if (contextRequest != null)
				if(contextRequest.User != null)
					if (contextRequest.Company != null)
						entity.GuidCompany = contextRequest.Company.GuidCompany;
	

#endregion
                e = null;
                OnCreating(this,e = new BusinessRulesEventArgs<accInvoiceServProduct>() { ContextRequest = contextRequest, Item=entity, PathExpressions = pocopaths, SaveChanges =saveChanges });
				   if (e != null) {
						if (e.Cancel)
						{
							context = null;
							return e.Item;

						}
					}

                    if (entity.GuidInvoiceServProduct == Guid.Empty)
                   {
                       entity.GuidInvoiceServProduct = Guid.NewGuid();

                   }



				accInvoiceServProductAdapter adapter = con.GetAdapterObject<accInvoiceServProductAdapter>(entity);;
				List<Expression<Func<accInvoiceServProductAdapter, object>>> paths = new List<Expression<Func<accInvoiceServProductAdapter,object>>>();
                
			    if (pocopaths != null && pocopaths.Length > 0)
                {
					// Translate
                    foreach (var pocopath in pocopaths)
                    {
                        var param = Expression.Parameter(typeof(accInvoiceServProductAdapter), "p");
                        var member = MemberExpression.PropertyOrField(param, ((System.Linq.Expressions.MemberExpression)(((System.Linq.Expressions.LambdaExpression)(pocopath)).Body)).Member.Name);
                        Expression<Func<accInvoiceServProductAdapter, object>> path  = null;
                        switch(member.Member.Name){
							
							default:
								path = p => member;
							break;
                        }

                        
                       paths.Add(path.Expand());
                    }
                }
                object aux = null;
					paths.Add(p => p.accInvoice.WithoutUpdate());

					paths.Add(p => p.accServiceProduct.WithoutUpdate());

					//paths = pathBuilder.ToArray();

				if (adapter.accInvoice != null ){
					if(adapter.accInvoice.EntityKey == null) adapter.accInvoice.EntityKey = con.WrappedContext.CreateEntityKey("accInvoices", adapter.accInvoice);
				}
				if (adapter.accServiceProduct != null ){
					if(adapter.accServiceProduct.EntityKey == null) adapter.accServiceProduct.EntityKey = con.WrappedContext.CreateEntityKey("accServiceProducts", adapter.accServiceProduct);
				}



                //con.WrappedContext.AttachObjectGraph<accInvoiceServProductAdapter>(adapter, p=>p.accInvoice, p=>p.accServiceProduct);
                con.WrappedContext.AttachObjectGraph<accInvoiceServProductAdapter>(adapter, paths.ToArray());
              	if (saveChanges){
                    con.WrappedContext.SaveChanges(SaveOptions.AcceptAllChangesAfterSave);
					 
				}
                else
                    con.WrappedContext.SaveChanges(SaveOptions.None);
                if (!saveChanges)
                    context = con.WrappedContext;
                else
                    context = null;
				itemResult = adapter.PocoEntity;
                if (e != null)
                {
                    e.Item = itemResult;
                }
                OnCreated(this, e == null ? e = new BusinessRulesEventArgs<accInvoiceServProduct>() { ContextRequest = contextRequest, Item = itemResult, PathExpressions = pocopaths, SaveChanges = saveChanges } : e);



                if (e != null)
                {
                    itemResult = e.Item;
                }
                              return itemResult;
            }
        }
        BusinessRulesEventArgs<accInvoiceServProduct> e = null;
        public void Create(List<accInvoiceServProduct> entities)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            Create(entities, contextRequest, null);
        }
        public void Create(List<accInvoiceServProduct> entities, ContextRequest contextRequest)
        
        {
			ObjectContext context = null;
            	foreach (accInvoiceServProduct entity in entities)
				{
					this.Create(entity, true, contextRequest, out context);
				}
        }
         public accInvoiceServProduct Update(accInvoiceServProduct entity)
        {
            if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return Update(entity, contextRequest);
        }
        public accInvoiceServProduct Update(accInvoiceServProduct entity, ContextRequest requestContext)
        {
			  ObjectContext context = null;
            return Update(entity, true,requestContext, out context);
         }
		public  accInvoiceServProduct Update(accInvoiceServProduct entity, params Expression<Func<accInvoiceServProduct, object>>[] pocopaths)
        {
			  ObjectContext context = null;
              return Update(entity, true, null, out context, pocopaths);
         }
        public accInvoiceServProduct Update(accInvoiceServProduct entity, ContextRequest requestContext, bool saveChanges, out ObjectContext outcontext)
        {
			return Update(entity, saveChanges,requestContext, out outcontext, null);
		}
         public accInvoiceServProduct Update(accInvoiceServProduct entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext outcontext, params Expression<Func<accInvoiceServProduct,object>>[] pocopaths)
        {
		 if ((System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null) && contextRequest == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Update");
            }
            if (contextRequest == null)
            {
                contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            }

			using (EFPocoContext con = new EFPocoContext())
			{
				accInvoiceServProduct  itemResult = null;

	
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
			if(contextRequest.User != null)
				entity.UpdatedBy = contextRequest.User.GuidUser;

	    var oldentity = GetBy(p => p.GuidInvoiceServProduct == entity.GuidInvoiceServProduct, contextRequest).FirstOrDefault();
		if (oldentity != null) {
		
            entity.CreatedDate = oldentity.CreatedDate;
            entity.CreatedBy = oldentity.CreatedBy;
	
            entity.GuidCompany = oldentity.GuidCompany;
	
			

		}

				e = null;
                OnUpdating(this,e = new BusinessRulesEventArgs<accInvoiceServProduct>() { ContextRequest = contextRequest, Item=entity, PathExpressions = pocopaths, SaveChanges =saveChanges });
				   if (e != null) {
						if (e.Cancel)
						{
							outcontext = null;
							return e.Item;

						}
					}

                accInvoiceServProductAdapter adapter = con.GetAdapterObject<accInvoiceServProductAdapter>(entity);
                adapter.EntityKey = con.WrappedContext.CreateEntityKey("accInvoiceServProducts", adapter);
				    var es = con.accInvoiceServProducts;
				List<Expression<Func<accInvoiceServProductAdapter, object>>> paths = new List<Expression<Func<accInvoiceServProductAdapter,object>>>();
                /* if (pocopaths != null)
                    if (pocopaths.Length == 0)
                        pocopaths = null;*/

			    if (pocopaths != null && pocopaths.Length > 0)
                {
					// Translate
                    foreach (var pocopath in pocopaths)
                    {
                        var param = Expression.Parameter(typeof(accInvoiceServProductAdapter), "p");
                        var member = MemberExpression.PropertyOrField(param, ((System.Linq.Expressions.MemberExpression)(((System.Linq.Expressions.LambdaExpression)(pocopath)).Body)).Member.Name);
                        Expression<Func<accInvoiceServProductAdapter, object>> path  = null;
                        switch(member.Member.Name){
							
							default:
								path = p => member;
							break;
                        }

                        paths.Add(path.Expand());
 					}
                }
                else {
                  paths = new List<Expression<Func<accInvoiceServProductAdapter, object>>>();

					//List<Expression<Func<accInvoiceServProductAdapter,object>>> pathBuilder = new List<Expression<Func<accInvoiceServProductAdapter,object>>>();
					paths.Add(p => p.accInvoice.WithoutUpdate());

					paths.Add(p => p.accServiceProduct.WithoutUpdate());

		
					//paths = pathBuilder.ToArray();		
			}
			object aux = null;
				if (adapter.accInvoice != null ){
					if(adapter.accInvoice.EntityKey == null) adapter.accInvoice.EntityKey = con.WrappedContext.CreateEntityKey("accInvoices", adapter.accInvoice);
				}

                
				if (adapter.accServiceProduct != null ){
					if(adapter.accServiceProduct.EntityKey == null) adapter.accServiceProduct.EntityKey = con.WrappedContext.CreateEntityKey("accServiceProducts", adapter.accServiceProduct);
				}

                



                //con.AttachObjectGraph<accInvoiceServProduct>(adapter, p=>p.accInvoice, p=>p.accServiceProduct);
                con.WrappedContext.AttachObjectGraph<accInvoiceServProductAdapter>(adapter, paths.ToArray());
				if (saveChanges){
                	con.WrappedContext.SaveChanges();
					 
					}
                if(!saveChanges)
					outcontext = con.WrappedContext;
				else
					outcontext = null;
				itemResult = adapter.PocoEntity;
				OnUpdated(this, e = new BusinessRulesEventArgs<accInvoiceServProduct>() { ContextRequest = contextRequest, Item=itemResult, PathExpressions = pocopaths, SaveChanges =saveChanges });

              	return itemResult;

			  }
        }
        public accInvoiceServProduct Save(accInvoiceServProduct entity)
        {
			return Save(entity, true, null);
        }
        public int Save(List<accInvoiceServProduct> entities)
        {
			using (EFPocoContext con = new EFPocoContext())
			{
			
            int n = 0;
            foreach (accInvoiceServProduct item in entities)
            {
                try
                {
                    this.Save(item, false, con);
                    n++;
                }catch (Exception ex){
                    SFSdotNet.Framework.My.EventLog.Exception(ex);
                }
            }
            con.SaveChanges();
            return n;
            }
        }
        #endregion
        #region Delete
        public void Delete(accInvoiceServProduct entity)
        {
				this.Delete(entity, null);
			
        }
		 public void Delete(accInvoiceServProduct entity, ContextRequest contextRequest)
        {
				ObjectContext context = null;
				this.Delete(entity, true, out context, contextRequest);
			
        }

        
        public void Delete(accInvoiceServProduct entity, bool saveChanges, out  ObjectContext context, ContextRequest contextRequest, BusinessRulesEventArgs<accInvoiceServProduct> e = null)
        {
			using (EFPocoContext _con = new EFPocoContext())
			{
				int result = 0;
				
               	BusinessRulesEventArgs<accInvoiceServProduct> _e = null;
               List<accInvoiceServProduct> _items = new List<accInvoiceServProduct>();
                _items.Add(entity);
                if (e == null || e.PreventPartialPropagate == false)
                {
                    OnDeleting(this, _e = (e == null ? new BusinessRulesEventArgs<accInvoiceServProduct>() { ContextRequest = contextRequest, Item = entity, Items = _items, SaveChanges = saveChanges } : e));
                }
                if (_e != null)
                {
                    if (_e.Cancel)
						{
							context = null;
							return;

						}
					}


				accInvoiceServProductAdapter adapter = _con.GetAdapterObject<accInvoiceServProductAdapter>(entity);
                adapter.EntityKey = _con.WrappedContext.CreateEntityKey("accInvoiceServProducts", adapter);
                
	            //adapter = _con.WrappedContext.AttachObjectGraph<accInvoiceServProductAdapter>(adapter);
				try{
					_con.WrappedContext.AttachTo("accInvoiceServProducts", adapter);
                }catch{
					
				}
									//IsDeleted
					bool logicDelete = true;
					if (adapter.IsDeleted != null)
					{
						if (adapter.IsDeleted.Value)
							logicDelete = false;
					}
					if (logicDelete)
					{
											entity = GetBy(p => p.GuidInvoiceServProduct == entity.GuidInvoiceServProduct, contextRequest).FirstOrDefault();
						entity.IsDeleted = true;
						Update(entity, contextRequest);
					}
					else {
						_con.WrappedContext.DeleteObject(adapter);
					}
								
				if (!saveChanges)
                    context = _con.WrappedContext;
                else
                    context = null;
				 SaveOptions saveOption = SaveOptions.None;
                if (saveChanges)
                    saveOption = SaveOptions.AcceptAllChangesAfterSave;

				result = _con.WrappedContext.SaveChanges(saveOption);
				if (saveChanges){
					
					}
			if (e == null || e.PreventPartialPropagate == false)
                {

                    if (_e == null)
                        _e = new BusinessRulesEventArgs<accInvoiceServProduct>() { ContextRequest = contextRequest, Item = entity, Items = _items };

                    OnDeleted(this, _e);
                }

				//return null;
			}            
        }
        public void Delete(List<accInvoiceServProduct> entities,  ContextRequest contextRequest = null )
        {
				ObjectContext context = null;
			 BusinessRulesEventArgs<accInvoiceServProduct> _e = null;

                OnDeleting(this, _e = new BusinessRulesEventArgs<accInvoiceServProduct>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities });
                if (_e != null)
                {
                    if (_e.Cancel)
                    {
                        context = null;
                        return;

                    }
                }
                bool allSucced = true;
                BusinessRulesEventArgs<accInvoiceServProduct> eToChilds = new BusinessRulesEventArgs<accInvoiceServProduct>();
                if (_e != null)
                {
                    eToChilds = _e;
                }
                else
                {
                    eToChilds = new BusinessRulesEventArgs<accInvoiceServProduct>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                }
				foreach (accInvoiceServProduct item in entities)
				{
					try
                    {
                        this.Delete(item, true, out context, contextRequest, e: eToChilds);
                    }
                    catch (Exception ex)
                    {
                        SFSdotNet.Framework.My.EventLog.Error(ex);
                        allSucced = false;
                    }
				}
				if (_e == null)
                    _e = new BusinessRulesEventArgs<accInvoiceServProduct>() { ContextRequest = contextRequest, CountResult = entities.Count, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                OnDeleted(this, _e);

			
        }
        #endregion
 
        #region GetCount
		 public int GetCount(Expression<Func<accInvoiceServProduct, bool>> predicate)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

			return GetCount(predicate, contextRequest);
		}
        public int GetCount(Expression<Func<accInvoiceServProduct, bool>> predicate, ContextRequest contextRequest)
        {


		
			using (EFPocoContext con = new EFPocoContext())
			{


				if (predicate == null) predicate = PredicateBuilder.True<accInvoiceServProduct>();
           		predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted == null);
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    		if (contextRequest.User !=null )
                        		if (contextRequest.Company != null )
                        			predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				
				return con.accInvoiceServProducts.Count(predicate);
			}

        }
		  public int GetCount(string predicate,  ContextRequest contextRequest)
         {
             return GetCount(predicate, null, contextRequest);
         }

         public int GetCount(string predicate)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return GetCount(predicate, contextRequest);
        }
		 public int GetCount(string predicate, string usemode){
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
				return GetCount( predicate,  usemode,  contextRequest);
		 }
        public int GetCount(string predicate, string usemode, ContextRequest contextRequest){
			  string freetext = null;
            Filter filter = new Filter();

              if (predicate.Contains("|"))
              {
                 
                  filter.SetFilterPart("ft", GetSpecificFilter(predicate));
                 
                  filter.ProcessText(predicate.Split(char.Parse("|"))[0]);
                  freetext = predicate.Split(char.Parse("|"))[1];
              }
              else {
                  filter.ProcessText(predicate);
              }
           
			e = null;
			contextRequest.FreeText = freetext;
			contextRequest.UseMode = usemode;
            OnCounting(this, e = new BusinessRulesEventArgs<accInvoiceServProduct>() {  Filter =filter, ContextRequest = contextRequest });
            if (e != null)
            {
                if (e.Cancel)
                {
                    context = null;
                    return e.CountResult;

                }

            

            }
			 predicate = filter.GetFilterComplete();
			StringBuilder sbQuerySystem = new StringBuilder();
		
					
                    filter.SetFilterPart("de","(IsDeleted != true OR IsDeleted == null)");
			
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    	if (contextRequest.User !=null )
                        	if (contextRequest.Company != null ){
                        		

								filter.SetFilterPart("co", @"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
						
						
							}
							
							}
							if (preventSecurityRestrictions) preventSecurityRestrictions= false;
			using (EFContext con = new EFContext())
			{
				   
                 filter.CleanAndProcess("");
				//string predicateWithFKAndComputed = SFSdotNet.Framework.Linq.Utils.ExtractSpecificProperties("", ref predicate );               
				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed();
               string predicateWithManyRelations = filter.GetFilterChildren();
			   ///QueryUtils.BreakeQuery1(predicate, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
			   predicate = filter.GetFilterComplete();
               if (!string.IsNullOrEmpty(predicate))
               {
				
					
                    return con.accInvoiceServProducts.Count(System.Linq.Dynamic.DynamicExpression.ParseLambda<accInvoiceServProduct, bool>(predicate));
					
                }else
                    return con.accInvoiceServProducts.Count();

			}

		}
         public int GetCount()
        {
            return GetCount(p => true);
        }
        #endregion
        
         public accInvoiceServProduct Update(accInvoiceServProduct entity, string paths)
        {
            return Update(entity, paths.Split(char.Parse(",")));
            
        }

        public accInvoiceServProduct Update(accInvoiceServProduct entity, string[] paths)
        {
            // Translate
            List<Expression<Func<accInvoiceServProduct, object>>> pathList = new List<Expression<Func<accInvoiceServProduct, object>>>();
            for (int i = 0; i <= paths.Length -1; i++)
            {
                var param = Expression.Parameter(typeof(accInvoiceServProduct), "p");
                var member = MemberExpression.PropertyOrField(param, paths[i]);

                Expression<Func<accInvoiceServProduct, object>> path = p => member;
                pathList.Add(path.Expand());
            }
			ObjectContext context = null;
			 return Update(entity, true,null, out context,  pathList.ToArray());
           //return Update(entity, pathList.ToArray());
        }

        public void Update(List<accInvoiceServProduct> entities, string paths)
        {
            foreach (var entity in entities )
            {
                Update(entity, paths);
            }
        }
		public accInvoiceServProduct Create(accInvoiceServProduct entity, ContextRequest contextRequest, string paths)
        {
          

            if (string.IsNullOrEmpty(paths))
                return Create(entity, contextRequest);

            return Create(entity, contextRequest, paths.Split(char.Parse(",")));
        }
        public accInvoiceServProduct Create(accInvoiceServProduct entity, string paths)
        {
			 if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return Create(entity, contextRequest, paths);

        }

        public  void Create(List<accInvoiceServProduct> entities, ContextRequest requestContext, string paths)
        {
            foreach (var entity in entities)
            {
                Create(entity,requestContext, paths);
            }
        }

        public void Create(List<accInvoiceServProduct> entities, string[] paths)
        {
            foreach (var entity in entities)
            {
                Create(entity, null, paths);
            }
        }
        
        public accInvoiceServProduct  Create(accInvoiceServProduct entity, ContextRequest contextRequest, string[] paths)
        {
            List<Expression<Func<accInvoiceServProduct, object>>> pathList = new List<Expression<Func<accInvoiceServProduct, object>>>();
            for (int i = 0; i < paths.Length - 1; i++)
            {
                var param = Expression.Parameter(typeof(accInvoiceServProduct), "p");
                var member = MemberExpression.PropertyOrField(param, paths[i]);

                Expression<Func<accInvoiceServProduct, object>> path = p => member;
                pathList.Add(path.Expand());
            }
            return Create(entity, contextRequest, pathList.ToArray());
        }
        public void Delete(List<accInvoiceServProduct.CompositeKey> entityKeys)
        {

            List<accInvoiceServProduct> items = new List<accInvoiceServProduct>();
            foreach (var itemKey in entityKeys)
            {
                items.Add(GetByKey(itemKey.GuidInvoiceServProduct));
            }

            Delete(items);

        }
		
		
	}
		public partial class accInvoiceTemplatesBR{
	 	
           
		 #region Partial methods

           partial void OnUpdating(object sender, BusinessRulesEventArgs<accInvoiceTemplate> e);

            partial void OnUpdated(object sender, BusinessRulesEventArgs<accInvoiceTemplate> e);

            partial void OnCreating(object sender, BusinessRulesEventArgs<accInvoiceTemplate> e);
            partial void OnCreated(object sender, BusinessRulesEventArgs<accInvoiceTemplate> e);

            partial void OnDeleting(object sender, BusinessRulesEventArgs<accInvoiceTemplate> e);
            partial void OnDeleted(object sender, BusinessRulesEventArgs<accInvoiceTemplate> e);

            partial void OnGetting(object sender, BusinessRulesEventArgs<accInvoiceTemplate> e);
            partial void OnTaken(object sender, BusinessRulesEventArgs<accInvoiceTemplate> e);
            partial void OnCounting(object sender, BusinessRulesEventArgs<accInvoiceTemplate> e);
 
 
            #endregion
			
		private static accInvoiceTemplatesBR singlenton =null;
				public static accInvoiceTemplatesBR NewInstance(){
					return  new accInvoiceTemplatesBR();
					
				}
		public static accInvoiceTemplatesBR Instance{
			get{
				if (singlenton == null)
					singlenton = new accInvoiceTemplatesBR();
				return singlenton;
			}
		}
		private bool preventSecurityRestrictions = false;
		 public bool PreventAuditTrail { get; set;  }
		#region Fields
        EFPocoContext context = null;
        #endregion
        #region Constructor
        public accInvoiceTemplatesBR()
        {
            context = new EFPocoContext();
        }
		 public accInvoiceTemplatesBR(bool preventSecurity)
            {
                this.preventSecurityRestrictions = preventSecurity;
				context = new EFPocoContext();
            }
        #endregion
		
		#region Get

 		public IQueryable<accInvoiceTemplate> Get()
        {
            //using (EFContext con = new EFContext())
            //{
				EFContext con = new EFContext();
                var query = con.accInvoiceTemplates.AsQueryable();
                con.ContextOptions.ProxyCreationEnabled = false;

                //query = ContextQueryBuilder<Nutrient>.ApplyContextQuery(query, contextRequest);

                return query;




            //}

        }
		
		public List<accInvoiceTemplate> GetAll()
        {
            return this.GetBy(p => true);
        }
        public List<accInvoiceTemplate> GetAll(string includes)
        {
            return this.GetBy(p => true, includes);
        }
        public accInvoiceTemplate GetByKey(Guid guidInvoiceTemplate)
        {
            return GetByKey(guidInvoiceTemplate, true);
        }
        public accInvoiceTemplate GetByKey(Guid guidInvoiceTemplate, bool loadIncludes)
        {
            accInvoiceTemplate item = null;
			var query = PredicateBuilder.True<accInvoiceTemplate>();
                    
			string strWhere = @"GuidInvoiceTemplate = Guid(""" + guidInvoiceTemplate.ToString()+@""")";
            Expression<Func<accInvoiceTemplate, bool>> predicate = null;
            if (!string.IsNullOrEmpty(strWhere))
                predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<accInvoiceTemplate, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
			 ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();
            contextRequest.CustomQuery.FilterExpressionString = strWhere;

			//item = GetBy(predicate, loadIncludes, contextRequest).FirstOrDefault();
			item = GetBy(strWhere,loadIncludes,contextRequest).FirstOrDefault();
            return item;
        }
         public List<accInvoiceTemplate> GetBy(string strWhere, bool loadRelations, ContextRequest contextRequest)
        {
            if (!loadRelations)
                return GetBy(strWhere, contextRequest);
            else
                return GetBy(strWhere, contextRequest, "");

        }
		  public List<accInvoiceTemplate> GetBy(string strWhere, bool loadRelations)
        {
              if (!loadRelations)
                return GetBy(strWhere, new ContextRequest());
            else
                return GetBy(strWhere, new ContextRequest(), "");

        }
         public accInvoiceTemplate GetByKey(Guid guidInvoiceTemplate, params Expression<Func<accInvoiceTemplate, object>>[] includes)
        {
            accInvoiceTemplate item = null;
			string strWhere = @"GuidInvoiceTemplate = Guid(""" + guidInvoiceTemplate.ToString()+@""")";
          Expression<Func<accInvoiceTemplate, bool>> predicate = null;
            if (!string.IsNullOrEmpty(strWhere))
                predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<accInvoiceTemplate, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
        item = GetBy(predicate, includes).FirstOrDefault();
         ////   item = GetBy(strWhere,includes).FirstOrDefault();
			return item;

        }
        public accInvoiceTemplate GetByKey(Guid guidInvoiceTemplate, string includes)
        {
            accInvoiceTemplate item = null;
			string strWhere = @"GuidInvoiceTemplate = Guid(""" + guidInvoiceTemplate.ToString()+@""")";
            
			
            item = GetBy(strWhere, includes).FirstOrDefault();
            return item;

        }
		 public accInvoiceTemplate GetByKey(Guid guidInvoiceTemplate, string usemode, string includes)
		{
			return GetByKey(guidInvoiceTemplate, usemode, null, includes);

		 }
		 public accInvoiceTemplate GetByKey(Guid guidInvoiceTemplate, string usemode, ContextRequest context,  string includes)
        {
            accInvoiceTemplate item = null;
			string strWhere = @"GuidInvoiceTemplate = Guid(""" + guidInvoiceTemplate.ToString()+@""")";
			if (context == null)
				context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
			context.CustomQuery.IsByKey = true;
            context.CustomQuery.FilterExpressionString = strWhere;
            context.UseMode = usemode;
            item = GetBy(strWhere,context , includes).FirstOrDefault();
            return item;

        }

        #region Dynamic Predicate
        public List<accInvoiceTemplate> GetBy(Expression<Func<accInvoiceTemplate, bool>> predicate, int? pageSize, int? page)
        {
            return this.GetBy(predicate, pageSize, page, null, null);
        }
        public List<accInvoiceTemplate> GetBy(Expression<Func<accInvoiceTemplate, bool>> predicate, ContextRequest contextRequest)
        {

            return GetBy(predicate, contextRequest,"");
        }
        
        public List<accInvoiceTemplate> GetBy(Expression<Func<accInvoiceTemplate, bool>> predicate, ContextRequest contextRequest, params Expression<Func<accInvoiceTemplate, object>>[] includes)
        {
            StringBuilder sb = new StringBuilder();
           if (includes != null)
            {
                foreach (var path in includes)
                {

						if (sb.Length > 0) sb.Append(",");
						sb.Append(SFSdotNet.Framework.Linq.Utils.IncludeToString<accInvoiceTemplate>(path));

               }
            }
            return GetBy(predicate, contextRequest, sb.ToString());
        }
        
        
        public List<accInvoiceTemplate> GetBy(Expression<Func<accInvoiceTemplate, bool>> predicate, string includes)
        {
			ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";

            return GetBy(predicate, context, includes);
        }

        public List<accInvoiceTemplate> GetBy(Expression<Func<accInvoiceTemplate, bool>> predicate, params Expression<Func<accInvoiceTemplate, object>>[] includes)
        {
			if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }
			ContextRequest context = new ContextRequest();
			            context.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            context.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";
            return GetBy(predicate, context, includes);
        }

      
		public bool DisableCache { get; set; }
		 public List<accInvoiceTemplate> GetBy(Expression<Func<accInvoiceTemplate, bool>> predicate, ContextRequest contextRequest, string includes)
        {
            using (EFPocoContext con = new EFPocoContext())
            {
				if (DisableCache) 
                	con.CachingPolicy = EFCachingProvider.Caching.CachingPolicy.NoCaching;

				List<accInvoiceTemplate> result = null;
                 e = null;
	
				OnGetting(con, e = new BusinessRulesEventArgs<accInvoiceTemplate>() {  FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null) });

               // OnGetting(con,e = new BusinessRulesEventArgs<accInvoiceTemplate>() { FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = contextRequest.CustomQuery.FilterExpressionString});
				   if (e != null) {
				    predicate = e.FilterExpression;
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				con.EnableChangeTrackingUsingProxies = false;
				con.WrappedContext.accInvoiceTemplates.MergeOption = MergeOption.NoTracking;
                con.WrappedContext.ContextOptions.ProxyCreationEnabled = false;
                if (predicate == null) predicate = PredicateBuilder.True<accInvoiceTemplate>();
 				string fkIncludes = "accFile";
                if(contextRequest!=null){
					if (contextRequest.CustomQuery != null)
					{
						if (contextRequest.CustomQuery.IncludeForeignKeyPaths != null) {
							if (contextRequest.CustomQuery.IncludeForeignKeyPaths.Value == false)
								fkIncludes = "";
						}
					}
				}
				if (!string.IsNullOrEmpty(includes))
					includes = includes + "," + fkIncludes;
				else
					includes = fkIncludes;
                
                var es = con.accInvoiceTemplates;

                IQueryable<accInvoiceTemplate> query = es.AsQueryable();

                                if (!string.IsNullOrEmpty(includes))
                {
                    foreach (string include in includes.Split(char.Parse(",")))
                    {
						if (!string.IsNullOrEmpty(include))
                            query = query.Include(include);
                    }
                }
                    predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
					 	if (!preventSecurityRestrictions)
						{
							if (contextRequest != null )
		                    	if (contextRequest.User !=null )
		                        	if (contextRequest.Company != null)
		                        		predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				query =query.Where(predicate);
                query = ContextQueryBuilder<accInvoiceTemplate>.ApplyContextQuery(query, contextRequest);

                result = query.ToList<accInvoiceTemplate>();
				  
                if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e =  new BusinessRulesEventArgs<accInvoiceTemplate>() { Items= result, IncludingComputedLinq = false, ContextRequest = contextRequest,  FilterExpression = predicate } :  e);
  
			

                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
            }
        }
		public void UpdateAgile(accInvoiceTemplate item, params string[] fields)
         {
             List<accInvoiceTemplate> list = new List<accInvoiceTemplate>();
             list.Add(item);
             this.UpdateBulk(list, fields);
         }
		public void UpdateBulk(List<accInvoiceTemplate>  items, params string[] fields)
         {
             SFSdotNet.Framework.My.ContextRequest req = new SFSdotNet.Framework.My.ContextRequest();
             req.CustomQuery = new SFSdotNet.Framework.My.CustomQuery();
             foreach (var field in fields)
             {
                 req.CustomQuery.SpecificProperties.Add(field);
             }
             UpdateBulk(items, req);

         }
        public void UpdateBulk(List<accInvoiceTemplate> items, ContextRequest req)
        {
            using (EFContext con = new EFContext())
            {



                foreach (var item in items)
                {
                    var setT = con.CreateObjectSet<accInvoiceTemplate>("accInvoiceTemplates");


                    var itemForAttach = new accInvoiceTemplate();
			itemForAttach.GuidInvoiceTemplate = item.GuidInvoiceTemplate;
					
                    itemForAttach = SFSdotNet.Framework.Entities.ConvertEntity.SetProperties<accInvoiceTemplate>(item, itemForAttach, null, req.CustomQuery.SpecificProperties.ToArray());
                    setT.Attach(itemForAttach);


                    foreach (var property in req.CustomQuery.SpecificProperties)
                    {
						
                        if (property != "GuidInvoiceTemplate")
                            con.ObjectStateManager.GetObjectStateEntry(itemForAttach).SetModifiedProperty(property);

                    }

                }
                con.SaveChanges();


            }
        }
		/*public int Update(List<accInvoiceTemplate> items, ContextRequest contextRequest)
            {
                int result = 0;
                using (EFContext con = new EFContext())
                {
                   
                

                    foreach (var item in items)
                    {
                        //secMessageToUser messageToUser = new secMessageToUser();
                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            item.GetType().GetProperty(prop).SetValue(item, item.GetType().GetProperty(prop).GetValue(item));
                        }
                        //messageToUser.GuidMessageToUser = (Guid)item.GetType().GetProperty("GuidMessageToUser").GetValue(item);

                        var setObject = con.CreateObjectSet<accInvoiceTemplate>("accInvoiceTemplates");
                        //messageToUser.Readed = DateTime.UtcNow;
                        setObject.Attach(item);
                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            con.ObjectStateManager.GetObjectStateEntry(item).SetModifiedProperty(prop);
                        }
                       
                    }
                    result = con.SaveChanges();

                    


                }
                return result;
            }
           */
        public List<accInvoiceTemplate> GetBy(string predicateString, ContextRequest contextRequest, string includes)
        {
            using (EFContext con = new EFContext())
            {
				if (DisableCache) 
                	con.CachingPolicy = EFCachingProvider.Caching.CachingPolicy.NoCaching;

				Filter filter = new Filter();
                if (predicateString.Contains("|"))
                {
                    string ft = GetSpecificFilter(predicateString);
                    if (!string.IsNullOrEmpty(ft))
                        filter.SetFilterPart("ft", ft);
                   
                    contextRequest.FreeText = predicateString.Split(char.Parse("|"))[1];
                    var q1 = predicateString.Split(char.Parse("|"))[0];
                    if (!string.IsNullOrEmpty(q1))
                    {
                        filter.ProcessText(q1);
                    }
                }
                else {
                    filter.ProcessText(predicateString);
                }

				List<accInvoiceTemplate> result = null;
                 e = null;
					OnGetting(con, e = new BusinessRulesEventArgs<accInvoiceTemplate>() { Filter = filter, ContextRequest = contextRequest /*, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null)*/ });

                  //OnGetting(con,e = new BusinessRulesEventArgs<accInvoiceTemplate>() {  ContextRequest = contextRequest, FilterExpressionString = predicateString });
			   	if (e != null) {
				    //predicateString = e.GetQueryString();
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				//	 else {
                //      predicateString = predicateString.Replace("*extraFreeText*", "").Replace("()","");
                //  }
				//con.EnableChangeTrackingUsingProxies = false;
				con.accInvoiceTemplates.MergeOption = MergeOption.NoTracking;
                con.ContextOptions.ProxyCreationEnabled = false;
                //if (predicate == null) predicate = PredicateBuilder.True<accInvoiceTemplate>();
 				string fkIncludes = "accFile";
                if(contextRequest!=null){
					if (contextRequest.CustomQuery != null)
					{
						if (contextRequest.CustomQuery.IncludeForeignKeyPaths != null) {
							if (contextRequest.CustomQuery.IncludeForeignKeyPaths.Value == false)
								fkIncludes = "";
						}
					}
				}else{
                    contextRequest = new ContextRequest();
                    contextRequest.CustomQuery = new CustomQuery();

                }
				if (!string.IsNullOrEmpty(includes))
					includes = includes + "," + fkIncludes;
				else
					includes = fkIncludes;
                
                var es = con.accInvoiceTemplates;
				IQueryable<accInvoiceTemplate> query = es.AsQueryable();
		
				// include relations FK
				if(string.IsNullOrEmpty(includes) ){
					includes ="";
				}
				bool includeaccFile = includes.Split(char.Parse(",")).Contains("accFile");

				StringBuilder sbQuerySystem = new StringBuilder();
                    //predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				

				//if (!string.IsNullOrEmpty(predicateString))
                //      sbQuerySystem.Append(" And ");
                //sbQuerySystem.Append(" (IsDeleted != true Or IsDeleted = null) ");
				 filter.SetFilterPart("de", "(IsDeleted != true OR IsDeleted = null)");


					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
	                    	if (contextRequest.User !=null )
	                        	if (contextRequest.Company != null ){
	                        		//if (sbQuerySystem.Length > 0)
	                        		//	    			sbQuerySystem.Append( " And ");	
									//sbQuerySystem.Append(@" (GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
									filter.SetFilterPart("co",@"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @"""))");
								}
						}	
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				//string predicateString = predicate.ToDynamicLinq<accInvoiceTemplate>();
				//predicateString += sbQuerySystem.ToString();
				filter.CleanAndProcess("");

				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed(); //SFSdotNet.Framework.Linq.Utils.ExtractSpecificProperties("", ref predicateString );               
                string predicateWithManyRelations = filter.GetFilterChildren(); //SFSdotNet.Framework.Linq.Utils.CleanPartExpression(predicateString);

                //QueryUtils.BreakeQuery1(predicateString, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
                var _queryable = query.AsQueryable();
                if (!string.IsNullOrEmpty(predicateWithManyRelations))
                    _queryable = _queryable.Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams);
				if (contextRequest.CustomQuery.SpecificProperties.Count > 0)
                {

                    StringBuilder sbProps = new StringBuilder();
                    contextRequest.CustomQuery.SpecificProperties.Add("GuidInvoiceTemplate");
                    
					foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                    {
						if(sbProps.Length > 0)
							sbProps.Append(",");
                        sbProps.Append(prop);
                    }
					    IQueryable  queryableSelective = null ;
					  
					  if (!string.IsNullOrEmpty(predicateWithManyRelations))
							queryableSelective = con.accInvoiceTemplates.AsQueryable().Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams).Select(string.Format("new({0})", sbProps.ToString()));
					else
						queryableSelective = con.accInvoiceTemplates.AsQueryable().Select(string.Format("new({0})", sbProps.ToString()));


                    //if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
					//	queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

                    QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
                    
					if (!string.IsNullOrEmpty(queryOps.OrderByAndSort))
                        queryableSelective = queryableSelective.OrderBy(queryOps.OrderByAndSort);
                    if (queryOps.Skip != null)
                    {
                        queryableSelective = queryableSelective.Skip(queryOps.Skip.Value);
                    }
                    if (queryOps.PageSize != null)
                    {
                        queryableSelective = queryableSelective.Take(queryOps.PageSize.Value);
                    }
                    //var results = queryableSelective.ToList();
                    result = new List<accInvoiceTemplate>();
                    accInvoiceTemplate itemDef = null;
                    foreach (var item in queryableSelective)
                    {
                        itemDef = new accInvoiceTemplate();

                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            if (!prop.Contains("."))
                            {
                                itemDef.GetType().GetProperty(prop).SetValue(itemDef, item.GetType().GetProperty(prop).GetValue(item));
                            }
                            else {
                                throw new Exception("La seleccion de relaciones aún no esta soportada");
                            }

                        }

                        result.Add(itemDef);
                    }

                }
                else
                {
				var  queryable = _queryable.Select(                    
				p => 
                        new
                    {
					GuidInvoiceTemplate = p.GuidInvoiceTemplate
,Title = p.Title
,CreatedDate = p.CreatedDate
,UpdatedDate = p.UpdatedDate
,CreatedBy = p.CreatedBy
,UpdatedBy = p.UpdatedBy
,IsDeleted = p.IsDeleted
,GuidCompany = p.GuidCompany

,accFile = includeaccFile ? p.accFile:null


	
                    }
                    
                    );
					
				
                 if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
                    queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

				QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
            	if (!string.IsNullOrEmpty(queryOps.OrderByAndSort))
					queryable = queryable.OrderBy(queryOps.OrderByAndSort);
               	if (queryOps.Skip != null)
                {
                    queryable = queryable.Skip(queryOps.Skip.Value);
                }
                if (queryOps.PageSize != null)
                {
                    queryable = queryable.Take (queryOps.PageSize.Value);
                }
                result = queryable.AsEnumerable().
                    Select(
                    p =>  new accInvoiceTemplate()
                    {
					GuidInvoiceTemplate = p.GuidInvoiceTemplate
,Title = p.Title
,CreatedDate = p.CreatedDate
,UpdatedDate = p.UpdatedDate
,CreatedBy = p.CreatedBy
,UpdatedBy = p.UpdatedBy
,IsDeleted = p.IsDeleted
,GuidCompany = p.GuidCompany
,accFile = p.accFile

                    }
                     ).ToList();
				}


			 if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e = new BusinessRulesEventArgs<accInvoiceTemplate>() { Items= result, IncludingComputedLinq = true, ContextRequest = contextRequest, FilterExpressionString  = predicateString } :  e);
  
			
  
                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
            }
        }
		public List<accInvoiceTemplate> GetBy(Expression<Func<accInvoiceTemplate, bool>> predicate, bool loadRelations, ContextRequest contextRequest)
        {
			if(!loadRelations)
				return GetBy(predicate, contextRequest);
			else
				return GetBy(predicate, contextRequest, "");

        }

        public List<accInvoiceTemplate> GetBy(Expression<Func<accInvoiceTemplate, bool>> predicate, int? pageSize, int? page, string orderBy, SFSdotNet.Framework.Data.SortDirection? sortDirection)
        {
            return GetBy(predicate, new ContextRequest() { CustomQuery = new CustomQuery() { Page = page, PageSize = pageSize, OrderBy = orderBy, SortDirection = sortDirection } });
        }
        public List<accInvoiceTemplate> GetBy(Expression<Func<accInvoiceTemplate, bool>> predicate)
        {

			if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }
			ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();

			contextRequest.CurrentContext = SFSdotNet.Framework.My.Context.CurrentContext;
			            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

            contextRequest.CustomQuery.FilterExpressionString = null;
            return this.GetBy(predicate, contextRequest, "");
        }
        #endregion
        #region Dynamic String
		private string GetSpecificFilter(string filter) {
            string result = "";
		    //string linqFilter = String.Empty;
            string freeTextFilter = String.Empty;
            if (filter.Contains("|"))
            {
               // linqFilter = filter.Split(char.Parse("|"))[0];
                freeTextFilter = filter.Split(char.Parse("|"))[1];
            }
            //else {
            //    freeTextFilter = filter;
            //}
            //else {
            //    linqFilter = filter;
            //}
			// linqFilter = SFSdotNet.Framework.Linq.Utils.ReplaceCustomDateFilters(linqFilter);
            //string specificFilter = linqFilter;
            if (!string.IsNullOrEmpty(freeTextFilter))
            {
                System.Text.StringBuilder sbCont = new System.Text.StringBuilder();
                /*if (specificFilter.Length > 0)
                {
                    sbCont.Append(" AND ");
                    sbCont.Append(" ({0})");
                }
                else
                {
                    sbCont.Append("{0}");
                }*/
                //var words = freeTextFilter.Split(char.Parse(" "));
				var word = freeTextFilter;
                System.Text.StringBuilder sbSpec = new System.Text.StringBuilder();
                 int nWords = 1;
				/*foreach (var word in words)
                {
					if (word.Length > 0){
                    if (sbSpec.Length > 0) sbSpec.Append(" AND ");
					if (words.Length > 1) sbSpec.Append("("); */
					
	
					
											
					sbSpec.Append(string.Format(@"Title.Contains(""{0}"")", word));

					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
								sbSpec.Append(" OR ");
					
					//if (sbSpec.Length > 2)
					//	sbSpec.Append(" OR "); // test
					sbSpec.Append(string.Format(@"accFile.FileType.Contains(""{0}"")", word));
								 //sbSpec.Append("*extraFreeText*");

                    /*if (words.Length > 1) sbSpec.Append(")");
					
					nWords++;

					}

                }*/
                //specificFilter = string.Format("{0}{1}", specificFilter, string.Format(sbCont.ToString(), sbSpec.ToString()));
                                 result = sbSpec.ToString();  
            }
			//result = specificFilter;
			
			return result;

		}
	
			public List<accInvoiceTemplate> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  params object[] extraParams)
        {
			return GetBy(filter, pageSize, page, orderBy, orderDir,  null, extraParams);
		}
           public List<accInvoiceTemplate> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir, string usemode, params object[] extraParams)
            { 
                return GetBy(filter, pageSize, page, orderBy, orderDir, usemode, null, extraParams);
            }


		public List<accInvoiceTemplate> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  string usemode, ContextRequest context, params object[] extraParams)

        {

            // string freetext = null;
            //if (filter.Contains("|"))
            //{
            //    int parts = filter.Split(char.Parse("|")).Count();
            //    if (parts > 1)
            //    {

            //        freetext = filter.Split(char.Parse("|"))[1];
            //    }
            //}
		
            //string specificFilter = "";
            //if (!string.IsNullOrEmpty(filter))
            //  specificFilter=  GetSpecificFilter(filter);
            if (string.IsNullOrEmpty(orderBy))
            {
			                orderBy = "UpdatedDate";
            }
			//orderDir = "desc";
			SFSdotNet.Framework.Data.SortDirection direction = SFSdotNet.Framework.Data.SortDirection.Ascending;
            if (!string.IsNullOrEmpty(orderDir))
            {
                if (orderDir == "desc")
                    direction = SFSdotNet.Framework.Data.SortDirection.Descending;
            }
            if (context == null)
                context = new ContextRequest();
			else
                context.CustomQuery = new CustomQuery();
             //context.FreeText = freetext;
             context.UseMode = usemode;
             context.CustomQuery =new SFSdotNet.Framework.My.CustomQuery()
 
                {
                    ExtraParams = extraParams,

                    OrderBy = orderBy,
                    SortDirection = direction,
                    Page = page,
                    PageSize = pageSize
               };
            

            if (!preventSecurityRestrictions) {
			 if (context.CurrentContext == null)
                {
					if (SFSdotNet.Framework.My.Context.CurrentContext != null &&  SFSdotNet.Framework.My.Context.CurrentContext.Company != null && SFSdotNet.Framework.My.Context.CurrentContext.User != null)
					{
						context.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
						context.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

					}
					else {
						throw new Exception("The security rule require a specific user and company");
					}
				}
            }
            return GetBy(filter, context);
  
        }


        public List<accInvoiceTemplate> GetBy(string strWhere, ContextRequest contextRequest)
        {
        	#region old code
				
				 //Expression<Func<tvsReservationTransport, bool>> predicate = null;
				string strWhereClean = strWhere.Replace("*extraFreeText*", "").Replace("()", "");
                //if (!string.IsNullOrEmpty(strWhereClean)){

                //    object[] extraParams = null;
                //    //if (contextRequest != null )
                //    //    if (contextRequest.CustomQuery != null )
                //    //        extraParams = contextRequest.CustomQuery.ExtraParams;
                //    //predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<tvsReservationTransport, bool>(strWhereClean, extraParams != null? extraParams.Cast<Guid>(): null);				
                //}
				 if (contextRequest == null)
                {
                    contextRequest = new ContextRequest();
                    if (contextRequest.CustomQuery == null)
                        contextRequest.CustomQuery = new CustomQuery();
                }
                  if (!preventSecurityRestrictions) {
					if (contextRequest.User == null || contextRequest.Company == null)
                      {
                     if (SFSdotNet.Framework.My.Context.CurrentContext.Company != null && SFSdotNet.Framework.My.Context.CurrentContext.User != null)
                     {
                         contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                         contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

                     }
                     else {
                         throw new Exception("The security rule require a specific User and Company ");
                     }
					 }
                 }
            contextRequest.CustomQuery.FilterExpressionString = strWhere;
				//return GetBy(predicate, contextRequest);  

			#endregion				
				
                    return GetBy(strWhere, contextRequest, "");  


        }
       public List<accInvoiceTemplate> GetBy(string strWhere)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
			
            return GetBy(strWhere, context, null);
        }

        public List<accInvoiceTemplate> GetBy(string strWhere, string includes)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
            return GetBy(strWhere, context, includes);
        }

        #endregion
        #endregion
		
		  #region SaveOrUpdate
        private accInvoiceTemplate Save(accInvoiceTemplate entity, bool saveChanges, EFPocoContext con)
        {
				ObjectContext context = null;
            return Update(entity, saveChanges,null, out context);

			
        }
		 public  accInvoiceTemplate Create( accInvoiceTemplate entity, params Expression<Func< accInvoiceTemplate, object>>[] paths)
         {
             return Create(entity, null, paths);

         }
 		 public accInvoiceTemplate Create(accInvoiceTemplate entity)
        {
				ObjectContext context = null;
				    if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: Create");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

				return this.Create(entity, true, contextRequest, out context);


        }
        public accInvoiceTemplate Create(accInvoiceTemplate entity, ContextRequest contextRequest)
         {
             ObjectContext context = null;
             return this.Create(entity, true, contextRequest,out context);

         }
         public accInvoiceTemplate Create(accInvoiceTemplate entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext context)
        {
                    return Create(entity, saveChanges , contextRequest , out context, null);
        }
         public accInvoiceTemplate Create(accInvoiceTemplate entity, ContextRequest contextRequest, params Expression<Func<accInvoiceTemplate,object>>[] paths)
        {
            ObjectContext context = null;
            if(paths != null)
				return Create(entity, true,contextRequest, out context, paths);
			else 
				return Create(entity, true,contextRequest, out context);
        }
        public accInvoiceTemplate Create(accInvoiceTemplate entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext context, params Expression<Func<accInvoiceTemplate,object>>[] pocopaths)
        {
			using (EFPocoContext con = new EFPocoContext())
			{
				accInvoiceTemplate itemResult = null;
#region Autos


			entity.CreatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.CreatedBy = contextRequest.User.GuidUser;
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.UpdatedBy = contextRequest.User.GuidUser;
	
			if (contextRequest != null)
				if(contextRequest.User != null)
					if (contextRequest.Company != null)
						entity.GuidCompany = contextRequest.Company.GuidCompany;
	

#endregion
                e = null;
                OnCreating(this,e = new BusinessRulesEventArgs<accInvoiceTemplate>() { ContextRequest = contextRequest, Item=entity, PathExpressions = pocopaths, SaveChanges =saveChanges });
				   if (e != null) {
						if (e.Cancel)
						{
							context = null;
							return e.Item;

						}
					}

                    if (entity.GuidInvoiceTemplate == Guid.Empty)
                   {
                       entity.GuidInvoiceTemplate = Guid.NewGuid();

                   }



				accInvoiceTemplateAdapter adapter = con.GetAdapterObject<accInvoiceTemplateAdapter>(entity);;
				List<Expression<Func<accInvoiceTemplateAdapter, object>>> paths = new List<Expression<Func<accInvoiceTemplateAdapter,object>>>();
                
			    if (pocopaths != null && pocopaths.Length > 0)
                {
					// Translate
                    foreach (var pocopath in pocopaths)
                    {
                        var param = Expression.Parameter(typeof(accInvoiceTemplateAdapter), "p");
                        var member = MemberExpression.PropertyOrField(param, ((System.Linq.Expressions.MemberExpression)(((System.Linq.Expressions.LambdaExpression)(pocopath)).Body)).Member.Name);
                        Expression<Func<accInvoiceTemplateAdapter, object>> path  = null;
                        switch(member.Member.Name){
							
							default:
								path = p => member;
							break;
                        }

                        
                       paths.Add(path.Expand());
                    }
                }
                object aux = null;
					paths.Add(p => p.accFile.WithoutUpdate());

					//paths = pathBuilder.ToArray();

				if (adapter.accFile != null ){
					if(adapter.accFile.EntityKey == null) adapter.accFile.EntityKey = con.WrappedContext.CreateEntityKey("accFiles", adapter.accFile);
				}



                //con.WrappedContext.AttachObjectGraph<accInvoiceTemplateAdapter>(adapter, p=>p.accFile);
                con.WrappedContext.AttachObjectGraph<accInvoiceTemplateAdapter>(adapter, paths.ToArray());
              	if (saveChanges){
                    con.WrappedContext.SaveChanges(SaveOptions.AcceptAllChangesAfterSave);
					 
				}
                else
                    con.WrappedContext.SaveChanges(SaveOptions.None);
                if (!saveChanges)
                    context = con.WrappedContext;
                else
                    context = null;
				itemResult = adapter.PocoEntity;
                if (e != null)
                {
                    e.Item = itemResult;
                }
                OnCreated(this, e == null ? e = new BusinessRulesEventArgs<accInvoiceTemplate>() { ContextRequest = contextRequest, Item = itemResult, PathExpressions = pocopaths, SaveChanges = saveChanges } : e);



                if (e != null)
                {
                    itemResult = e.Item;
                }
                              return itemResult;
            }
        }
        BusinessRulesEventArgs<accInvoiceTemplate> e = null;
        public void Create(List<accInvoiceTemplate> entities)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            Create(entities, contextRequest, null);
        }
        public void Create(List<accInvoiceTemplate> entities, ContextRequest contextRequest)
        
        {
			ObjectContext context = null;
            	foreach (accInvoiceTemplate entity in entities)
				{
					this.Create(entity, true, contextRequest, out context);
				}
        }
         public accInvoiceTemplate Update(accInvoiceTemplate entity)
        {
            if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return Update(entity, contextRequest);
        }
        public accInvoiceTemplate Update(accInvoiceTemplate entity, ContextRequest requestContext)
        {
			  ObjectContext context = null;
            return Update(entity, true,requestContext, out context);
         }
		public  accInvoiceTemplate Update(accInvoiceTemplate entity, params Expression<Func<accInvoiceTemplate, object>>[] pocopaths)
        {
			  ObjectContext context = null;
              return Update(entity, true, null, out context, pocopaths);
         }
        public accInvoiceTemplate Update(accInvoiceTemplate entity, ContextRequest requestContext, bool saveChanges, out ObjectContext outcontext)
        {
			return Update(entity, saveChanges,requestContext, out outcontext, null);
		}
         public accInvoiceTemplate Update(accInvoiceTemplate entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext outcontext, params Expression<Func<accInvoiceTemplate,object>>[] pocopaths)
        {
		 if ((System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null) && contextRequest == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Update");
            }
            if (contextRequest == null)
            {
                contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            }

			using (EFPocoContext con = new EFPocoContext())
			{
				accInvoiceTemplate  itemResult = null;

	
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
			if(contextRequest.User != null)
				entity.UpdatedBy = contextRequest.User.GuidUser;

	    var oldentity = GetBy(p => p.GuidInvoiceTemplate == entity.GuidInvoiceTemplate, contextRequest).FirstOrDefault();
		if (oldentity != null) {
		
            entity.CreatedDate = oldentity.CreatedDate;
            entity.CreatedBy = oldentity.CreatedBy;
	
            entity.GuidCompany = oldentity.GuidCompany;
	
			

		}

				e = null;
                OnUpdating(this,e = new BusinessRulesEventArgs<accInvoiceTemplate>() { ContextRequest = contextRequest, Item=entity, PathExpressions = pocopaths, SaveChanges =saveChanges });
				   if (e != null) {
						if (e.Cancel)
						{
							outcontext = null;
							return e.Item;

						}
					}

                accInvoiceTemplateAdapter adapter = con.GetAdapterObject<accInvoiceTemplateAdapter>(entity);
                adapter.EntityKey = con.WrappedContext.CreateEntityKey("accInvoiceTemplates", adapter);
				    var es = con.accInvoiceTemplates;
				List<Expression<Func<accInvoiceTemplateAdapter, object>>> paths = new List<Expression<Func<accInvoiceTemplateAdapter,object>>>();
                /* if (pocopaths != null)
                    if (pocopaths.Length == 0)
                        pocopaths = null;*/

			    if (pocopaths != null && pocopaths.Length > 0)
                {
					// Translate
                    foreach (var pocopath in pocopaths)
                    {
                        var param = Expression.Parameter(typeof(accInvoiceTemplateAdapter), "p");
                        var member = MemberExpression.PropertyOrField(param, ((System.Linq.Expressions.MemberExpression)(((System.Linq.Expressions.LambdaExpression)(pocopath)).Body)).Member.Name);
                        Expression<Func<accInvoiceTemplateAdapter, object>> path  = null;
                        switch(member.Member.Name){
							
							default:
								path = p => member;
							break;
                        }

                        paths.Add(path.Expand());
 					}
                }
                else {
                  paths = new List<Expression<Func<accInvoiceTemplateAdapter, object>>>();

					//List<Expression<Func<accInvoiceTemplateAdapter,object>>> pathBuilder = new List<Expression<Func<accInvoiceTemplateAdapter,object>>>();
					paths.Add(p => p.accFile.WithoutUpdate());

		
					//paths = pathBuilder.ToArray();		
			}
			object aux = null;
				if (adapter.accFile != null ){
					if(adapter.accFile.EntityKey == null) adapter.accFile.EntityKey = con.WrappedContext.CreateEntityKey("accFiles", adapter.accFile);
				}

                



                //con.AttachObjectGraph<accInvoiceTemplate>(adapter, p=>p.accFile);
                con.WrappedContext.AttachObjectGraph<accInvoiceTemplateAdapter>(adapter, paths.ToArray());
				if (saveChanges){
                	con.WrappedContext.SaveChanges();
					 
					}
                if(!saveChanges)
					outcontext = con.WrappedContext;
				else
					outcontext = null;
				itemResult = adapter.PocoEntity;
				OnUpdated(this, e = new BusinessRulesEventArgs<accInvoiceTemplate>() { ContextRequest = contextRequest, Item=itemResult, PathExpressions = pocopaths, SaveChanges =saveChanges });

              	return itemResult;

			  }
        }
        public accInvoiceTemplate Save(accInvoiceTemplate entity)
        {
			return Save(entity, true, null);
        }
        public int Save(List<accInvoiceTemplate> entities)
        {
			using (EFPocoContext con = new EFPocoContext())
			{
			
            int n = 0;
            foreach (accInvoiceTemplate item in entities)
            {
                try
                {
                    this.Save(item, false, con);
                    n++;
                }catch (Exception ex){
                    SFSdotNet.Framework.My.EventLog.Exception(ex);
                }
            }
            con.SaveChanges();
            return n;
            }
        }
        #endregion
        #region Delete
        public void Delete(accInvoiceTemplate entity)
        {
				this.Delete(entity, null);
			
        }
		 public void Delete(accInvoiceTemplate entity, ContextRequest contextRequest)
        {
				ObjectContext context = null;
				this.Delete(entity, true, out context, contextRequest);
			
        }

        
        public void Delete(accInvoiceTemplate entity, bool saveChanges, out  ObjectContext context, ContextRequest contextRequest, BusinessRulesEventArgs<accInvoiceTemplate> e = null)
        {
			using (EFPocoContext _con = new EFPocoContext())
			{
				int result = 0;
				
               	BusinessRulesEventArgs<accInvoiceTemplate> _e = null;
               List<accInvoiceTemplate> _items = new List<accInvoiceTemplate>();
                _items.Add(entity);
                if (e == null || e.PreventPartialPropagate == false)
                {
                    OnDeleting(this, _e = (e == null ? new BusinessRulesEventArgs<accInvoiceTemplate>() { ContextRequest = contextRequest, Item = entity, Items = _items, SaveChanges = saveChanges } : e));
                }
                if (_e != null)
                {
                    if (_e.Cancel)
						{
							context = null;
							return;

						}
					}


				accInvoiceTemplateAdapter adapter = _con.GetAdapterObject<accInvoiceTemplateAdapter>(entity);
                adapter.EntityKey = _con.WrappedContext.CreateEntityKey("accInvoiceTemplates", adapter);
                
	            //adapter = _con.WrappedContext.AttachObjectGraph<accInvoiceTemplateAdapter>(adapter);
				try{
					_con.WrappedContext.AttachTo("accInvoiceTemplates", adapter);
                }catch{
					
				}
									//IsDeleted
					bool logicDelete = true;
					if (adapter.IsDeleted != null)
					{
						if (adapter.IsDeleted.Value)
							logicDelete = false;
					}
					if (logicDelete)
					{
											entity = GetBy(p => p.GuidInvoiceTemplate == entity.GuidInvoiceTemplate, contextRequest).FirstOrDefault();
						entity.IsDeleted = true;
						Update(entity, contextRequest);
					}
					else {
						_con.WrappedContext.DeleteObject(adapter);
					}
								
				if (!saveChanges)
                    context = _con.WrappedContext;
                else
                    context = null;
				 SaveOptions saveOption = SaveOptions.None;
                if (saveChanges)
                    saveOption = SaveOptions.AcceptAllChangesAfterSave;

				result = _con.WrappedContext.SaveChanges(saveOption);
				if (saveChanges){
					
					}
			if (e == null || e.PreventPartialPropagate == false)
                {

                    if (_e == null)
                        _e = new BusinessRulesEventArgs<accInvoiceTemplate>() { ContextRequest = contextRequest, Item = entity, Items = _items };

                    OnDeleted(this, _e);
                }

				//return null;
			}            
        }
        public void Delete(List<accInvoiceTemplate> entities,  ContextRequest contextRequest = null )
        {
				ObjectContext context = null;
			 BusinessRulesEventArgs<accInvoiceTemplate> _e = null;

                OnDeleting(this, _e = new BusinessRulesEventArgs<accInvoiceTemplate>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities });
                if (_e != null)
                {
                    if (_e.Cancel)
                    {
                        context = null;
                        return;

                    }
                }
                bool allSucced = true;
                BusinessRulesEventArgs<accInvoiceTemplate> eToChilds = new BusinessRulesEventArgs<accInvoiceTemplate>();
                if (_e != null)
                {
                    eToChilds = _e;
                }
                else
                {
                    eToChilds = new BusinessRulesEventArgs<accInvoiceTemplate>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                }
				foreach (accInvoiceTemplate item in entities)
				{
					try
                    {
                        this.Delete(item, true, out context, contextRequest, e: eToChilds);
                    }
                    catch (Exception ex)
                    {
                        SFSdotNet.Framework.My.EventLog.Error(ex);
                        allSucced = false;
                    }
				}
				if (_e == null)
                    _e = new BusinessRulesEventArgs<accInvoiceTemplate>() { ContextRequest = contextRequest, CountResult = entities.Count, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                OnDeleted(this, _e);

			
        }
        #endregion
 
        #region GetCount
		 public int GetCount(Expression<Func<accInvoiceTemplate, bool>> predicate)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

			return GetCount(predicate, contextRequest);
		}
        public int GetCount(Expression<Func<accInvoiceTemplate, bool>> predicate, ContextRequest contextRequest)
        {


		
			using (EFPocoContext con = new EFPocoContext())
			{


				if (predicate == null) predicate = PredicateBuilder.True<accInvoiceTemplate>();
           		predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted == null);
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    		if (contextRequest.User !=null )
                        		if (contextRequest.Company != null )
                        			predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				
				return con.accInvoiceTemplates.Count(predicate);
			}

        }
		  public int GetCount(string predicate,  ContextRequest contextRequest)
         {
             return GetCount(predicate, null, contextRequest);
         }

         public int GetCount(string predicate)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return GetCount(predicate, contextRequest);
        }
		 public int GetCount(string predicate, string usemode){
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
				return GetCount( predicate,  usemode,  contextRequest);
		 }
        public int GetCount(string predicate, string usemode, ContextRequest contextRequest){
			  string freetext = null;
            Filter filter = new Filter();

              if (predicate.Contains("|"))
              {
                 
                  filter.SetFilterPart("ft", GetSpecificFilter(predicate));
                 
                  filter.ProcessText(predicate.Split(char.Parse("|"))[0]);
                  freetext = predicate.Split(char.Parse("|"))[1];
              }
              else {
                  filter.ProcessText(predicate);
              }
           
			e = null;
			contextRequest.FreeText = freetext;
			contextRequest.UseMode = usemode;
            OnCounting(this, e = new BusinessRulesEventArgs<accInvoiceTemplate>() {  Filter =filter, ContextRequest = contextRequest });
            if (e != null)
            {
                if (e.Cancel)
                {
                    context = null;
                    return e.CountResult;

                }

            

            }
			 predicate = filter.GetFilterComplete();
			StringBuilder sbQuerySystem = new StringBuilder();
		
					
                    filter.SetFilterPart("de","(IsDeleted != true OR IsDeleted == null)");
			
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    	if (contextRequest.User !=null )
                        	if (contextRequest.Company != null ){
                        		

								filter.SetFilterPart("co", @"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
						
						
							}
							
							}
							if (preventSecurityRestrictions) preventSecurityRestrictions= false;
			using (EFContext con = new EFContext())
			{
				   
                 filter.CleanAndProcess("");
				//string predicateWithFKAndComputed = SFSdotNet.Framework.Linq.Utils.ExtractSpecificProperties("", ref predicate );               
				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed();
               string predicateWithManyRelations = filter.GetFilterChildren();
			   ///QueryUtils.BreakeQuery1(predicate, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
			   predicate = filter.GetFilterComplete();
               if (!string.IsNullOrEmpty(predicate))
               {
				
					
                    return con.accInvoiceTemplates.Count(System.Linq.Dynamic.DynamicExpression.ParseLambda<accInvoiceTemplate, bool>(predicate));
					
                }else
                    return con.accInvoiceTemplates.Count();

			}

		}
         public int GetCount()
        {
            return GetCount(p => true);
        }
        #endregion
        
         public accInvoiceTemplate Update(accInvoiceTemplate entity, string paths)
        {
            return Update(entity, paths.Split(char.Parse(",")));
            
        }

        public accInvoiceTemplate Update(accInvoiceTemplate entity, string[] paths)
        {
            // Translate
            List<Expression<Func<accInvoiceTemplate, object>>> pathList = new List<Expression<Func<accInvoiceTemplate, object>>>();
            for (int i = 0; i <= paths.Length -1; i++)
            {
                var param = Expression.Parameter(typeof(accInvoiceTemplate), "p");
                var member = MemberExpression.PropertyOrField(param, paths[i]);

                Expression<Func<accInvoiceTemplate, object>> path = p => member;
                pathList.Add(path.Expand());
            }
			ObjectContext context = null;
			 return Update(entity, true,null, out context,  pathList.ToArray());
           //return Update(entity, pathList.ToArray());
        }

        public void Update(List<accInvoiceTemplate> entities, string paths)
        {
            foreach (var entity in entities )
            {
                Update(entity, paths);
            }
        }
		public accInvoiceTemplate Create(accInvoiceTemplate entity, ContextRequest contextRequest, string paths)
        {
          

            if (string.IsNullOrEmpty(paths))
                return Create(entity, contextRequest);

            return Create(entity, contextRequest, paths.Split(char.Parse(",")));
        }
        public accInvoiceTemplate Create(accInvoiceTemplate entity, string paths)
        {
			 if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return Create(entity, contextRequest, paths);

        }

        public  void Create(List<accInvoiceTemplate> entities, ContextRequest requestContext, string paths)
        {
            foreach (var entity in entities)
            {
                Create(entity,requestContext, paths);
            }
        }

        public void Create(List<accInvoiceTemplate> entities, string[] paths)
        {
            foreach (var entity in entities)
            {
                Create(entity, null, paths);
            }
        }
        
        public accInvoiceTemplate  Create(accInvoiceTemplate entity, ContextRequest contextRequest, string[] paths)
        {
            List<Expression<Func<accInvoiceTemplate, object>>> pathList = new List<Expression<Func<accInvoiceTemplate, object>>>();
            for (int i = 0; i < paths.Length - 1; i++)
            {
                var param = Expression.Parameter(typeof(accInvoiceTemplate), "p");
                var member = MemberExpression.PropertyOrField(param, paths[i]);

                Expression<Func<accInvoiceTemplate, object>> path = p => member;
                pathList.Add(path.Expand());
            }
            return Create(entity, contextRequest, pathList.ToArray());
        }
        public void Delete(List<accInvoiceTemplate.CompositeKey> entityKeys)
        {

            List<accInvoiceTemplate> items = new List<accInvoiceTemplate>();
            foreach (var itemKey in entityKeys)
            {
                items.Add(GetByKey(itemKey.GuidInvoiceTemplate));
            }

            Delete(items);

        }
		
		
	}
		public partial class accMoneyMovementsBR{
	 	
           
		 #region Partial methods

           partial void OnUpdating(object sender, BusinessRulesEventArgs<accMoneyMovement> e);

            partial void OnUpdated(object sender, BusinessRulesEventArgs<accMoneyMovement> e);

            partial void OnCreating(object sender, BusinessRulesEventArgs<accMoneyMovement> e);
            partial void OnCreated(object sender, BusinessRulesEventArgs<accMoneyMovement> e);

            partial void OnDeleting(object sender, BusinessRulesEventArgs<accMoneyMovement> e);
            partial void OnDeleted(object sender, BusinessRulesEventArgs<accMoneyMovement> e);

            partial void OnGetting(object sender, BusinessRulesEventArgs<accMoneyMovement> e);
            partial void OnTaken(object sender, BusinessRulesEventArgs<accMoneyMovement> e);
            partial void OnCounting(object sender, BusinessRulesEventArgs<accMoneyMovement> e);
 
 
            #endregion
			
		private static accMoneyMovementsBR singlenton =null;
				public static accMoneyMovementsBR NewInstance(){
					return  new accMoneyMovementsBR();
					
				}
		public static accMoneyMovementsBR Instance{
			get{
				if (singlenton == null)
					singlenton = new accMoneyMovementsBR();
				return singlenton;
			}
		}
		private bool preventSecurityRestrictions = false;
		 public bool PreventAuditTrail { get; set;  }
		#region Fields
        EFPocoContext context = null;
        #endregion
        #region Constructor
        public accMoneyMovementsBR()
        {
            context = new EFPocoContext();
        }
		 public accMoneyMovementsBR(bool preventSecurity)
            {
                this.preventSecurityRestrictions = preventSecurity;
				context = new EFPocoContext();
            }
        #endregion
		
		#region Get

 		public IQueryable<accMoneyMovement> Get()
        {
            //using (EFContext con = new EFContext())
            //{
				EFContext con = new EFContext();
                var query = con.accMoneyMovements.AsQueryable();
                con.ContextOptions.ProxyCreationEnabled = false;

                //query = ContextQueryBuilder<Nutrient>.ApplyContextQuery(query, contextRequest);

                return query;




            //}

        }
		
		public List<accMoneyMovement> GetAll()
        {
            return this.GetBy(p => true);
        }
        public List<accMoneyMovement> GetAll(string includes)
        {
            return this.GetBy(p => true, includes);
        }
        public accMoneyMovement GetByKey(Guid guidMoneyMovement)
        {
            return GetByKey(guidMoneyMovement, true);
        }
        public accMoneyMovement GetByKey(Guid guidMoneyMovement, bool loadIncludes)
        {
            accMoneyMovement item = null;
			var query = PredicateBuilder.True<accMoneyMovement>();
                    
			string strWhere = @"GuidMoneyMovement = Guid(""" + guidMoneyMovement.ToString()+@""")";
            Expression<Func<accMoneyMovement, bool>> predicate = null;
            if (!string.IsNullOrEmpty(strWhere))
                predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<accMoneyMovement, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
			 ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();
            contextRequest.CustomQuery.FilterExpressionString = strWhere;

			//item = GetBy(predicate, loadIncludes, contextRequest).FirstOrDefault();
			item = GetBy(strWhere,loadIncludes,contextRequest).FirstOrDefault();
            return item;
        }
         public List<accMoneyMovement> GetBy(string strWhere, bool loadRelations, ContextRequest contextRequest)
        {
            if (!loadRelations)
                return GetBy(strWhere, contextRequest);
            else
                return GetBy(strWhere, contextRequest, "");

        }
		  public List<accMoneyMovement> GetBy(string strWhere, bool loadRelations)
        {
              if (!loadRelations)
                return GetBy(strWhere, new ContextRequest());
            else
                return GetBy(strWhere, new ContextRequest(), "");

        }
         public accMoneyMovement GetByKey(Guid guidMoneyMovement, params Expression<Func<accMoneyMovement, object>>[] includes)
        {
            accMoneyMovement item = null;
			string strWhere = @"GuidMoneyMovement = Guid(""" + guidMoneyMovement.ToString()+@""")";
          Expression<Func<accMoneyMovement, bool>> predicate = null;
            if (!string.IsNullOrEmpty(strWhere))
                predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<accMoneyMovement, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
        item = GetBy(predicate, includes).FirstOrDefault();
         ////   item = GetBy(strWhere,includes).FirstOrDefault();
			return item;

        }
        public accMoneyMovement GetByKey(Guid guidMoneyMovement, string includes)
        {
            accMoneyMovement item = null;
			string strWhere = @"GuidMoneyMovement = Guid(""" + guidMoneyMovement.ToString()+@""")";
            
			
            item = GetBy(strWhere, includes).FirstOrDefault();
            return item;

        }
		 public accMoneyMovement GetByKey(Guid guidMoneyMovement, string usemode, string includes)
		{
			return GetByKey(guidMoneyMovement, usemode, null, includes);

		 }
		 public accMoneyMovement GetByKey(Guid guidMoneyMovement, string usemode, ContextRequest context,  string includes)
        {
            accMoneyMovement item = null;
			string strWhere = @"GuidMoneyMovement = Guid(""" + guidMoneyMovement.ToString()+@""")";
			if (context == null)
				context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
			context.CustomQuery.IsByKey = true;
            context.CustomQuery.FilterExpressionString = strWhere;
            context.UseMode = usemode;
            item = GetBy(strWhere,context , includes).FirstOrDefault();
            return item;

        }

        #region Dynamic Predicate
        public List<accMoneyMovement> GetBy(Expression<Func<accMoneyMovement, bool>> predicate, int? pageSize, int? page)
        {
            return this.GetBy(predicate, pageSize, page, null, null);
        }
        public List<accMoneyMovement> GetBy(Expression<Func<accMoneyMovement, bool>> predicate, ContextRequest contextRequest)
        {

            return GetBy(predicate, contextRequest,"");
        }
        
        public List<accMoneyMovement> GetBy(Expression<Func<accMoneyMovement, bool>> predicate, ContextRequest contextRequest, params Expression<Func<accMoneyMovement, object>>[] includes)
        {
            StringBuilder sb = new StringBuilder();
           if (includes != null)
            {
                foreach (var path in includes)
                {

						if (sb.Length > 0) sb.Append(",");
						sb.Append(SFSdotNet.Framework.Linq.Utils.IncludeToString<accMoneyMovement>(path));

               }
            }
            return GetBy(predicate, contextRequest, sb.ToString());
        }
        
        
        public List<accMoneyMovement> GetBy(Expression<Func<accMoneyMovement, bool>> predicate, string includes)
        {
			ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";

            return GetBy(predicate, context, includes);
        }

        public List<accMoneyMovement> GetBy(Expression<Func<accMoneyMovement, bool>> predicate, params Expression<Func<accMoneyMovement, object>>[] includes)
        {
			if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }
			ContextRequest context = new ContextRequest();
			            context.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            context.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";
            return GetBy(predicate, context, includes);
        }

      
		public bool DisableCache { get; set; }
		 public List<accMoneyMovement> GetBy(Expression<Func<accMoneyMovement, bool>> predicate, ContextRequest contextRequest, string includes)
        {
            using (EFPocoContext con = new EFPocoContext())
            {
				if (DisableCache) 
                	con.CachingPolicy = EFCachingProvider.Caching.CachingPolicy.NoCaching;

				List<accMoneyMovement> result = null;
                 e = null;
	
				OnGetting(con, e = new BusinessRulesEventArgs<accMoneyMovement>() {  FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null) });

               // OnGetting(con,e = new BusinessRulesEventArgs<accMoneyMovement>() { FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = contextRequest.CustomQuery.FilterExpressionString});
				   if (e != null) {
				    predicate = e.FilterExpression;
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				con.EnableChangeTrackingUsingProxies = false;
				con.WrappedContext.accMoneyMovements.MergeOption = MergeOption.NoTracking;
                con.WrappedContext.ContextOptions.ProxyCreationEnabled = false;
                if (predicate == null) predicate = PredicateBuilder.True<accMoneyMovement>();
                
                var es = con.accMoneyMovements;

                IQueryable<accMoneyMovement> query = es.AsQueryable();

                                if (!string.IsNullOrEmpty(includes))
                {
                    foreach (string include in includes.Split(char.Parse(",")))
                    {
						if (!string.IsNullOrEmpty(include))
                            query = query.Include(include);
                    }
                }
                    predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
					 	if (!preventSecurityRestrictions)
						{
							if (contextRequest != null )
		                    	if (contextRequest.User !=null )
		                        	if (contextRequest.Company != null)
		                        		predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				query =query.Where(predicate);
                query = ContextQueryBuilder<accMoneyMovement>.ApplyContextQuery(query, contextRequest);

                result = query.ToList<accMoneyMovement>();
				  
                if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e =  new BusinessRulesEventArgs<accMoneyMovement>() { Items= result, IncludingComputedLinq = false, ContextRequest = contextRequest,  FilterExpression = predicate } :  e);
  
			

                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
            }
        }
		public void UpdateAgile(accMoneyMovement item, params string[] fields)
         {
             List<accMoneyMovement> list = new List<accMoneyMovement>();
             list.Add(item);
             this.UpdateBulk(list, fields);
         }
		public void UpdateBulk(List<accMoneyMovement>  items, params string[] fields)
         {
             SFSdotNet.Framework.My.ContextRequest req = new SFSdotNet.Framework.My.ContextRequest();
             req.CustomQuery = new SFSdotNet.Framework.My.CustomQuery();
             foreach (var field in fields)
             {
                 req.CustomQuery.SpecificProperties.Add(field);
             }
             UpdateBulk(items, req);

         }
        public void UpdateBulk(List<accMoneyMovement> items, ContextRequest req)
        {
            using (EFContext con = new EFContext())
            {



                foreach (var item in items)
                {
                    var setT = con.CreateObjectSet<accMoneyMovement>("accMoneyMovements");


                    var itemForAttach = new accMoneyMovement();
			itemForAttach.GuidMoneyMovement = item.GuidMoneyMovement;
					
                    itemForAttach = SFSdotNet.Framework.Entities.ConvertEntity.SetProperties<accMoneyMovement>(item, itemForAttach, null, req.CustomQuery.SpecificProperties.ToArray());
                    setT.Attach(itemForAttach);


                    foreach (var property in req.CustomQuery.SpecificProperties)
                    {
						
                        if (property != "GuidMoneyMovement")
                            con.ObjectStateManager.GetObjectStateEntry(itemForAttach).SetModifiedProperty(property);

                    }

                }
                con.SaveChanges();


            }
        }
		/*public int Update(List<accMoneyMovement> items, ContextRequest contextRequest)
            {
                int result = 0;
                using (EFContext con = new EFContext())
                {
                   
                

                    foreach (var item in items)
                    {
                        //secMessageToUser messageToUser = new secMessageToUser();
                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            item.GetType().GetProperty(prop).SetValue(item, item.GetType().GetProperty(prop).GetValue(item));
                        }
                        //messageToUser.GuidMessageToUser = (Guid)item.GetType().GetProperty("GuidMessageToUser").GetValue(item);

                        var setObject = con.CreateObjectSet<accMoneyMovement>("accMoneyMovements");
                        //messageToUser.Readed = DateTime.UtcNow;
                        setObject.Attach(item);
                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            con.ObjectStateManager.GetObjectStateEntry(item).SetModifiedProperty(prop);
                        }
                       
                    }
                    result = con.SaveChanges();

                    


                }
                return result;
            }
           */
        public List<accMoneyMovement> GetBy(string predicateString, ContextRequest contextRequest, string includes)
        {
            using (EFContext con = new EFContext())
            {
				if (DisableCache) 
                	con.CachingPolicy = EFCachingProvider.Caching.CachingPolicy.NoCaching;

				Filter filter = new Filter();
                if (predicateString.Contains("|"))
                {
                    string ft = GetSpecificFilter(predicateString);
                    if (!string.IsNullOrEmpty(ft))
                        filter.SetFilterPart("ft", ft);
                   
                    contextRequest.FreeText = predicateString.Split(char.Parse("|"))[1];
                    var q1 = predicateString.Split(char.Parse("|"))[0];
                    if (!string.IsNullOrEmpty(q1))
                    {
                        filter.ProcessText(q1);
                    }
                }
                else {
                    filter.ProcessText(predicateString);
                }

				List<accMoneyMovement> result = null;
                 e = null;
					OnGetting(con, e = new BusinessRulesEventArgs<accMoneyMovement>() { Filter = filter, ContextRequest = contextRequest /*, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null)*/ });

                  //OnGetting(con,e = new BusinessRulesEventArgs<accMoneyMovement>() {  ContextRequest = contextRequest, FilterExpressionString = predicateString });
			   	if (e != null) {
				    //predicateString = e.GetQueryString();
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				//	 else {
                //      predicateString = predicateString.Replace("*extraFreeText*", "").Replace("()","");
                //  }
				//con.EnableChangeTrackingUsingProxies = false;
				con.accMoneyMovements.MergeOption = MergeOption.NoTracking;
                con.ContextOptions.ProxyCreationEnabled = false;
                //if (predicate == null) predicate = PredicateBuilder.True<accMoneyMovement>();
                
                var es = con.accMoneyMovements;
				IQueryable<accMoneyMovement> query = es.AsQueryable();
		
				// include relations FK
				if(string.IsNullOrEmpty(includes) ){
					includes ="";
				}
				StringBuilder sbQuerySystem = new StringBuilder();
                    //predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				

				//if (!string.IsNullOrEmpty(predicateString))
                //      sbQuerySystem.Append(" And ");
                //sbQuerySystem.Append(" (IsDeleted != true Or IsDeleted = null) ");
				 filter.SetFilterPart("de", "(IsDeleted != true OR IsDeleted = null)");


					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
	                    	if (contextRequest.User !=null )
	                        	if (contextRequest.Company != null ){
	                        		//if (sbQuerySystem.Length > 0)
	                        		//	    			sbQuerySystem.Append( " And ");	
									//sbQuerySystem.Append(@" (GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
									filter.SetFilterPart("co",@"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @"""))");
								}
						}	
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				//string predicateString = predicate.ToDynamicLinq<accMoneyMovement>();
				//predicateString += sbQuerySystem.ToString();
				filter.CleanAndProcess("");

				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed(); //SFSdotNet.Framework.Linq.Utils.ExtractSpecificProperties("", ref predicateString );               
                string predicateWithManyRelations = filter.GetFilterChildren(); //SFSdotNet.Framework.Linq.Utils.CleanPartExpression(predicateString);

                //QueryUtils.BreakeQuery1(predicateString, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
                var _queryable = query.AsQueryable();
                if (!string.IsNullOrEmpty(predicateWithManyRelations))
                    _queryable = _queryable.Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams);
				if (contextRequest.CustomQuery.SpecificProperties.Count > 0)
                {

                    StringBuilder sbProps = new StringBuilder();
                    contextRequest.CustomQuery.SpecificProperties.Add("GuidMoneyMovement");
                    
					foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                    {
						if(sbProps.Length > 0)
							sbProps.Append(",");
                        sbProps.Append(prop);
                    }
					    IQueryable  queryableSelective = null ;
					  
					  if (!string.IsNullOrEmpty(predicateWithManyRelations))
							queryableSelective = con.accMoneyMovements.AsQueryable().Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams).Select(string.Format("new({0})", sbProps.ToString()));
					else
						queryableSelective = con.accMoneyMovements.AsQueryable().Select(string.Format("new({0})", sbProps.ToString()));


                    //if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
					//	queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

                    QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
                    
					if (!string.IsNullOrEmpty(queryOps.OrderByAndSort))
                        queryableSelective = queryableSelective.OrderBy(queryOps.OrderByAndSort);
                    if (queryOps.Skip != null)
                    {
                        queryableSelective = queryableSelective.Skip(queryOps.Skip.Value);
                    }
                    if (queryOps.PageSize != null)
                    {
                        queryableSelective = queryableSelective.Take(queryOps.PageSize.Value);
                    }
                    //var results = queryableSelective.ToList();
                    result = new List<accMoneyMovement>();
                    accMoneyMovement itemDef = null;
                    foreach (var item in queryableSelective)
                    {
                        itemDef = new accMoneyMovement();

                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            if (!prop.Contains("."))
                            {
                                itemDef.GetType().GetProperty(prop).SetValue(itemDef, item.GetType().GetProperty(prop).GetValue(item));
                            }
                            else {
                                throw new Exception("La seleccion de relaciones aún no esta soportada");
                            }

                        }

                        result.Add(itemDef);
                    }

                }
                else
                {
				var  queryable = _queryable.Select(                    
				p => 
                        new
                    {
					GuidMoneyMovement = p.GuidMoneyMovement
,CreatedDate = p.CreatedDate
,UpdatedDate = p.UpdatedDate
,CreatedBy = p.CreatedBy
,UpdatedBy = p.UpdatedBy
,IsDeleted = p.IsDeleted
,GuidCompany = p.GuidCompany

,

	
                    }
                    
                    );
					
				
                 if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
                    queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

				QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
            	if (!string.IsNullOrEmpty(queryOps.OrderByAndSort))
					queryable = queryable.OrderBy(queryOps.OrderByAndSort);
               	if (queryOps.Skip != null)
                {
                    queryable = queryable.Skip(queryOps.Skip.Value);
                }
                if (queryOps.PageSize != null)
                {
                    queryable = queryable.Take (queryOps.PageSize.Value);
                }
                result = queryable.AsEnumerable().
                    Select(
                    p =>  new accMoneyMovement()
                    {
					GuidMoneyMovement = p.GuidMoneyMovement
,CreatedDate = p.CreatedDate
,UpdatedDate = p.UpdatedDate
,CreatedBy = p.CreatedBy
,UpdatedBy = p.UpdatedBy
,IsDeleted = p.IsDeleted
,GuidCompany = p.GuidCompany

                    }
                     ).ToList();
				}


			 if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e = new BusinessRulesEventArgs<accMoneyMovement>() { Items= result, IncludingComputedLinq = true, ContextRequest = contextRequest, FilterExpressionString  = predicateString } :  e);
  
			
  
                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
            }
        }
		public List<accMoneyMovement> GetBy(Expression<Func<accMoneyMovement, bool>> predicate, bool loadRelations, ContextRequest contextRequest)
        {
			if(!loadRelations)
				return GetBy(predicate, contextRequest);
			else
				return GetBy(predicate, contextRequest, "");

        }

        public List<accMoneyMovement> GetBy(Expression<Func<accMoneyMovement, bool>> predicate, int? pageSize, int? page, string orderBy, SFSdotNet.Framework.Data.SortDirection? sortDirection)
        {
            return GetBy(predicate, new ContextRequest() { CustomQuery = new CustomQuery() { Page = page, PageSize = pageSize, OrderBy = orderBy, SortDirection = sortDirection } });
        }
        public List<accMoneyMovement> GetBy(Expression<Func<accMoneyMovement, bool>> predicate)
        {

			if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }
			ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();

			contextRequest.CurrentContext = SFSdotNet.Framework.My.Context.CurrentContext;
			            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

            contextRequest.CustomQuery.FilterExpressionString = null;
            return this.GetBy(predicate, contextRequest, "");
        }
        #endregion
        #region Dynamic String
		private string GetSpecificFilter(string filter) {
            string result = "";
		    //string linqFilter = String.Empty;
            string freeTextFilter = String.Empty;
            if (filter.Contains("|"))
            {
               // linqFilter = filter.Split(char.Parse("|"))[0];
                freeTextFilter = filter.Split(char.Parse("|"))[1];
            }
            //else {
            //    freeTextFilter = filter;
            //}
            //else {
            //    linqFilter = filter;
            //}
			// linqFilter = SFSdotNet.Framework.Linq.Utils.ReplaceCustomDateFilters(linqFilter);
            //string specificFilter = linqFilter;
            if (!string.IsNullOrEmpty(freeTextFilter))
            {
                System.Text.StringBuilder sbCont = new System.Text.StringBuilder();
                /*if (specificFilter.Length > 0)
                {
                    sbCont.Append(" AND ");
                    sbCont.Append(" ({0})");
                }
                else
                {
                    sbCont.Append("{0}");
                }*/
                //var words = freeTextFilter.Split(char.Parse(" "));
				var word = freeTextFilter;
                System.Text.StringBuilder sbSpec = new System.Text.StringBuilder();
                 int nWords = 1;
				/*foreach (var word in words)
                {
					if (word.Length > 0){
                    if (sbSpec.Length > 0) sbSpec.Append(" AND ");
					if (words.Length > 1) sbSpec.Append("("); */
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
								 //sbSpec.Append("*extraFreeText*");

                    /*if (words.Length > 1) sbSpec.Append(")");
					
					nWords++;

					}

                }*/
                //specificFilter = string.Format("{0}{1}", specificFilter, string.Format(sbCont.ToString(), sbSpec.ToString()));
                                 result = sbSpec.ToString();  
            }
			//result = specificFilter;
			
			return result;

		}
	
			public List<accMoneyMovement> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  params object[] extraParams)
        {
			return GetBy(filter, pageSize, page, orderBy, orderDir,  null, extraParams);
		}
           public List<accMoneyMovement> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir, string usemode, params object[] extraParams)
            { 
                return GetBy(filter, pageSize, page, orderBy, orderDir, usemode, null, extraParams);
            }


		public List<accMoneyMovement> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  string usemode, ContextRequest context, params object[] extraParams)

        {

            // string freetext = null;
            //if (filter.Contains("|"))
            //{
            //    int parts = filter.Split(char.Parse("|")).Count();
            //    if (parts > 1)
            //    {

            //        freetext = filter.Split(char.Parse("|"))[1];
            //    }
            //}
		
            //string specificFilter = "";
            //if (!string.IsNullOrEmpty(filter))
            //  specificFilter=  GetSpecificFilter(filter);
            if (string.IsNullOrEmpty(orderBy))
            {
			                orderBy = "UpdatedDate";
            }
			//orderDir = "desc";
			SFSdotNet.Framework.Data.SortDirection direction = SFSdotNet.Framework.Data.SortDirection.Ascending;
            if (!string.IsNullOrEmpty(orderDir))
            {
                if (orderDir == "desc")
                    direction = SFSdotNet.Framework.Data.SortDirection.Descending;
            }
            if (context == null)
                context = new ContextRequest();
			else
                context.CustomQuery = new CustomQuery();
             //context.FreeText = freetext;
             context.UseMode = usemode;
             context.CustomQuery =new SFSdotNet.Framework.My.CustomQuery()
 
                {
                    ExtraParams = extraParams,

                    OrderBy = orderBy,
                    SortDirection = direction,
                    Page = page,
                    PageSize = pageSize
               };
            

            if (!preventSecurityRestrictions) {
			 if (context.CurrentContext == null)
                {
					if (SFSdotNet.Framework.My.Context.CurrentContext != null &&  SFSdotNet.Framework.My.Context.CurrentContext.Company != null && SFSdotNet.Framework.My.Context.CurrentContext.User != null)
					{
						context.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
						context.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

					}
					else {
						throw new Exception("The security rule require a specific user and company");
					}
				}
            }
            return GetBy(filter, context);
  
        }


        public List<accMoneyMovement> GetBy(string strWhere, ContextRequest contextRequest)
        {
        	#region old code
				
				 //Expression<Func<tvsReservationTransport, bool>> predicate = null;
				string strWhereClean = strWhere.Replace("*extraFreeText*", "").Replace("()", "");
                //if (!string.IsNullOrEmpty(strWhereClean)){

                //    object[] extraParams = null;
                //    //if (contextRequest != null )
                //    //    if (contextRequest.CustomQuery != null )
                //    //        extraParams = contextRequest.CustomQuery.ExtraParams;
                //    //predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<tvsReservationTransport, bool>(strWhereClean, extraParams != null? extraParams.Cast<Guid>(): null);				
                //}
				 if (contextRequest == null)
                {
                    contextRequest = new ContextRequest();
                    if (contextRequest.CustomQuery == null)
                        contextRequest.CustomQuery = new CustomQuery();
                }
                  if (!preventSecurityRestrictions) {
					if (contextRequest.User == null || contextRequest.Company == null)
                      {
                     if (SFSdotNet.Framework.My.Context.CurrentContext.Company != null && SFSdotNet.Framework.My.Context.CurrentContext.User != null)
                     {
                         contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                         contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

                     }
                     else {
                         throw new Exception("The security rule require a specific User and Company ");
                     }
					 }
                 }
            contextRequest.CustomQuery.FilterExpressionString = strWhere;
				//return GetBy(predicate, contextRequest);  

			#endregion				
				
                    return GetBy(strWhere, contextRequest, "");  


        }
       public List<accMoneyMovement> GetBy(string strWhere)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
			
            return GetBy(strWhere, context, null);
        }

        public List<accMoneyMovement> GetBy(string strWhere, string includes)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
            return GetBy(strWhere, context, includes);
        }

        #endregion
        #endregion
		
		  #region SaveOrUpdate
        private accMoneyMovement Save(accMoneyMovement entity, bool saveChanges, EFPocoContext con)
        {
				ObjectContext context = null;
            return Update(entity, saveChanges,null, out context);

			
        }
		 public  accMoneyMovement Create( accMoneyMovement entity, params Expression<Func< accMoneyMovement, object>>[] paths)
         {
             return Create(entity, null, paths);

         }
 		 public accMoneyMovement Create(accMoneyMovement entity)
        {
				ObjectContext context = null;
				    if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: Create");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

				return this.Create(entity, true, contextRequest, out context);


        }
        public accMoneyMovement Create(accMoneyMovement entity, ContextRequest contextRequest)
         {
             ObjectContext context = null;
             return this.Create(entity, true, contextRequest,out context);

         }
         public accMoneyMovement Create(accMoneyMovement entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext context)
        {
                    return Create(entity, saveChanges , contextRequest , out context, null);
        }
         public accMoneyMovement Create(accMoneyMovement entity, ContextRequest contextRequest, params Expression<Func<accMoneyMovement,object>>[] paths)
        {
            ObjectContext context = null;
            if(paths != null)
				return Create(entity, true,contextRequest, out context, paths);
			else 
				return Create(entity, true,contextRequest, out context);
        }
        public accMoneyMovement Create(accMoneyMovement entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext context, params Expression<Func<accMoneyMovement,object>>[] pocopaths)
        {
			using (EFPocoContext con = new EFPocoContext())
			{
				accMoneyMovement itemResult = null;
#region Autos


			entity.CreatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.CreatedBy = contextRequest.User.GuidUser;
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.UpdatedBy = contextRequest.User.GuidUser;
	
			if (contextRequest != null)
				if(contextRequest.User != null)
					if (contextRequest.Company != null)
						entity.GuidCompany = contextRequest.Company.GuidCompany;
	

#endregion
                e = null;
                OnCreating(this,e = new BusinessRulesEventArgs<accMoneyMovement>() { ContextRequest = contextRequest, Item=entity, PathExpressions = pocopaths, SaveChanges =saveChanges });
				   if (e != null) {
						if (e.Cancel)
						{
							context = null;
							return e.Item;

						}
					}

                    if (entity.GuidMoneyMovement == Guid.Empty)
                   {
                       entity.GuidMoneyMovement = Guid.NewGuid();

                   }



				accMoneyMovementAdapter adapter = con.GetAdapterObject<accMoneyMovementAdapter>(entity);;
				List<Expression<Func<accMoneyMovementAdapter, object>>> paths = new List<Expression<Func<accMoneyMovementAdapter,object>>>();
                
			    if (pocopaths != null && pocopaths.Length > 0)
                {
					// Translate
                    foreach (var pocopath in pocopaths)
                    {
                        var param = Expression.Parameter(typeof(accMoneyMovementAdapter), "p");
                        var member = MemberExpression.PropertyOrField(param, ((System.Linq.Expressions.MemberExpression)(((System.Linq.Expressions.LambdaExpression)(pocopath)).Body)).Member.Name);
                        Expression<Func<accMoneyMovementAdapter, object>> path  = null;
                        switch(member.Member.Name){
							
							default:
								path = p => member;
							break;
                        }

                        
                       paths.Add(path.Expand());
                    }
                }
                object aux = null;
					//paths = pathBuilder.ToArray();




                //con.WrappedContext.AttachObjectGraph<accMoneyMovementAdapter>(adapter);
                con.WrappedContext.AttachObjectGraph<accMoneyMovementAdapter>(adapter, paths.ToArray());
              	if (saveChanges){
                    con.WrappedContext.SaveChanges(SaveOptions.AcceptAllChangesAfterSave);
					 
				}
                else
                    con.WrappedContext.SaveChanges(SaveOptions.None);
                if (!saveChanges)
                    context = con.WrappedContext;
                else
                    context = null;
				itemResult = adapter.PocoEntity;
                if (e != null)
                {
                    e.Item = itemResult;
                }
                OnCreated(this, e == null ? e = new BusinessRulesEventArgs<accMoneyMovement>() { ContextRequest = contextRequest, Item = itemResult, PathExpressions = pocopaths, SaveChanges = saveChanges } : e);



                if (e != null)
                {
                    itemResult = e.Item;
                }
                              return itemResult;
            }
        }
        BusinessRulesEventArgs<accMoneyMovement> e = null;
        public void Create(List<accMoneyMovement> entities)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            Create(entities, contextRequest, null);
        }
        public void Create(List<accMoneyMovement> entities, ContextRequest contextRequest)
        
        {
			ObjectContext context = null;
            	foreach (accMoneyMovement entity in entities)
				{
					this.Create(entity, true, contextRequest, out context);
				}
        }
         public accMoneyMovement Update(accMoneyMovement entity)
        {
            if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return Update(entity, contextRequest);
        }
        public accMoneyMovement Update(accMoneyMovement entity, ContextRequest requestContext)
        {
			  ObjectContext context = null;
            return Update(entity, true,requestContext, out context);
         }
		public  accMoneyMovement Update(accMoneyMovement entity, params Expression<Func<accMoneyMovement, object>>[] pocopaths)
        {
			  ObjectContext context = null;
              return Update(entity, true, null, out context, pocopaths);
         }
        public accMoneyMovement Update(accMoneyMovement entity, ContextRequest requestContext, bool saveChanges, out ObjectContext outcontext)
        {
			return Update(entity, saveChanges,requestContext, out outcontext, null);
		}
         public accMoneyMovement Update(accMoneyMovement entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext outcontext, params Expression<Func<accMoneyMovement,object>>[] pocopaths)
        {
		 if ((System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null) && contextRequest == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Update");
            }
            if (contextRequest == null)
            {
                contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            }

			using (EFPocoContext con = new EFPocoContext())
			{
				accMoneyMovement  itemResult = null;

	
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
			if(contextRequest.User != null)
				entity.UpdatedBy = contextRequest.User.GuidUser;

	    var oldentity = GetBy(p => p.GuidMoneyMovement == entity.GuidMoneyMovement, contextRequest).FirstOrDefault();
		if (oldentity != null) {
		
            entity.CreatedDate = oldentity.CreatedDate;
            entity.CreatedBy = oldentity.CreatedBy;
	
            entity.GuidCompany = oldentity.GuidCompany;
	
			

		}

				e = null;
                OnUpdating(this,e = new BusinessRulesEventArgs<accMoneyMovement>() { ContextRequest = contextRequest, Item=entity, PathExpressions = pocopaths, SaveChanges =saveChanges });
				   if (e != null) {
						if (e.Cancel)
						{
							outcontext = null;
							return e.Item;

						}
					}

                accMoneyMovementAdapter adapter = con.GetAdapterObject<accMoneyMovementAdapter>(entity);
                adapter.EntityKey = con.WrappedContext.CreateEntityKey("accMoneyMovements", adapter);
				    var es = con.accMoneyMovements;
				List<Expression<Func<accMoneyMovementAdapter, object>>> paths = new List<Expression<Func<accMoneyMovementAdapter,object>>>();
                /* if (pocopaths != null)
                    if (pocopaths.Length == 0)
                        pocopaths = null;*/

			    if (pocopaths != null && pocopaths.Length > 0)
                {
					// Translate
                    foreach (var pocopath in pocopaths)
                    {
                        var param = Expression.Parameter(typeof(accMoneyMovementAdapter), "p");
                        var member = MemberExpression.PropertyOrField(param, ((System.Linq.Expressions.MemberExpression)(((System.Linq.Expressions.LambdaExpression)(pocopath)).Body)).Member.Name);
                        Expression<Func<accMoneyMovementAdapter, object>> path  = null;
                        switch(member.Member.Name){
							
							default:
								path = p => member;
							break;
                        }

                        paths.Add(path.Expand());
 					}
                }
                else {
                  paths = new List<Expression<Func<accMoneyMovementAdapter, object>>>();

					//List<Expression<Func<accMoneyMovementAdapter,object>>> pathBuilder = new List<Expression<Func<accMoneyMovementAdapter,object>>>();
		
					//paths = pathBuilder.ToArray();		
			}
			object aux = null;



                //con.AttachObjectGraph<accMoneyMovement>(adapter);
                con.WrappedContext.AttachObjectGraph<accMoneyMovementAdapter>(adapter, paths.ToArray());
				if (saveChanges){
                	con.WrappedContext.SaveChanges();
					 
					}
                if(!saveChanges)
					outcontext = con.WrappedContext;
				else
					outcontext = null;
				itemResult = adapter.PocoEntity;
				OnUpdated(this, e = new BusinessRulesEventArgs<accMoneyMovement>() { ContextRequest = contextRequest, Item=itemResult, PathExpressions = pocopaths, SaveChanges =saveChanges });

              	return itemResult;

			  }
        }
        public accMoneyMovement Save(accMoneyMovement entity)
        {
			return Save(entity, true, null);
        }
        public int Save(List<accMoneyMovement> entities)
        {
			using (EFPocoContext con = new EFPocoContext())
			{
			
            int n = 0;
            foreach (accMoneyMovement item in entities)
            {
                try
                {
                    this.Save(item, false, con);
                    n++;
                }catch (Exception ex){
                    SFSdotNet.Framework.My.EventLog.Exception(ex);
                }
            }
            con.SaveChanges();
            return n;
            }
        }
        #endregion
        #region Delete
        public void Delete(accMoneyMovement entity)
        {
				this.Delete(entity, null);
			
        }
		 public void Delete(accMoneyMovement entity, ContextRequest contextRequest)
        {
				ObjectContext context = null;
				this.Delete(entity, true, out context, contextRequest);
			
        }

        
        public void Delete(accMoneyMovement entity, bool saveChanges, out  ObjectContext context, ContextRequest contextRequest, BusinessRulesEventArgs<accMoneyMovement> e = null)
        {
			using (EFPocoContext _con = new EFPocoContext())
			{
				int result = 0;
				
               	BusinessRulesEventArgs<accMoneyMovement> _e = null;
               List<accMoneyMovement> _items = new List<accMoneyMovement>();
                _items.Add(entity);
                if (e == null || e.PreventPartialPropagate == false)
                {
                    OnDeleting(this, _e = (e == null ? new BusinessRulesEventArgs<accMoneyMovement>() { ContextRequest = contextRequest, Item = entity, Items = _items, SaveChanges = saveChanges } : e));
                }
                if (_e != null)
                {
                    if (_e.Cancel)
						{
							context = null;
							return;

						}
					}


				accMoneyMovementAdapter adapter = _con.GetAdapterObject<accMoneyMovementAdapter>(entity);
                adapter.EntityKey = _con.WrappedContext.CreateEntityKey("accMoneyMovements", adapter);
                
	            //adapter = _con.WrappedContext.AttachObjectGraph<accMoneyMovementAdapter>(adapter);
				try{
					_con.WrappedContext.AttachTo("accMoneyMovements", adapter);
                }catch{
					
				}
									//IsDeleted
					bool logicDelete = true;
					if (adapter.IsDeleted != null)
					{
						if (adapter.IsDeleted.Value)
							logicDelete = false;
					}
					if (logicDelete)
					{
											entity = GetBy(p => p.GuidMoneyMovement == entity.GuidMoneyMovement, contextRequest).FirstOrDefault();
						entity.IsDeleted = true;
						Update(entity, contextRequest);
					}
					else {
						_con.WrappedContext.DeleteObject(adapter);
					}
								
				if (!saveChanges)
                    context = _con.WrappedContext;
                else
                    context = null;
				 SaveOptions saveOption = SaveOptions.None;
                if (saveChanges)
                    saveOption = SaveOptions.AcceptAllChangesAfterSave;

				result = _con.WrappedContext.SaveChanges(saveOption);
				if (saveChanges){
					
					}
			if (e == null || e.PreventPartialPropagate == false)
                {

                    if (_e == null)
                        _e = new BusinessRulesEventArgs<accMoneyMovement>() { ContextRequest = contextRequest, Item = entity, Items = _items };

                    OnDeleted(this, _e);
                }

				//return null;
			}            
        }
        public void Delete(List<accMoneyMovement> entities,  ContextRequest contextRequest = null )
        {
				ObjectContext context = null;
			 BusinessRulesEventArgs<accMoneyMovement> _e = null;

                OnDeleting(this, _e = new BusinessRulesEventArgs<accMoneyMovement>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities });
                if (_e != null)
                {
                    if (_e.Cancel)
                    {
                        context = null;
                        return;

                    }
                }
                bool allSucced = true;
                BusinessRulesEventArgs<accMoneyMovement> eToChilds = new BusinessRulesEventArgs<accMoneyMovement>();
                if (_e != null)
                {
                    eToChilds = _e;
                }
                else
                {
                    eToChilds = new BusinessRulesEventArgs<accMoneyMovement>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                }
				foreach (accMoneyMovement item in entities)
				{
					try
                    {
                        this.Delete(item, true, out context, contextRequest, e: eToChilds);
                    }
                    catch (Exception ex)
                    {
                        SFSdotNet.Framework.My.EventLog.Error(ex);
                        allSucced = false;
                    }
				}
				if (_e == null)
                    _e = new BusinessRulesEventArgs<accMoneyMovement>() { ContextRequest = contextRequest, CountResult = entities.Count, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                OnDeleted(this, _e);

			
        }
        #endregion
 
        #region GetCount
		 public int GetCount(Expression<Func<accMoneyMovement, bool>> predicate)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

			return GetCount(predicate, contextRequest);
		}
        public int GetCount(Expression<Func<accMoneyMovement, bool>> predicate, ContextRequest contextRequest)
        {


		
			using (EFPocoContext con = new EFPocoContext())
			{


				if (predicate == null) predicate = PredicateBuilder.True<accMoneyMovement>();
           		predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted == null);
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    		if (contextRequest.User !=null )
                        		if (contextRequest.Company != null )
                        			predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				
				return con.accMoneyMovements.Count(predicate);
			}

        }
		  public int GetCount(string predicate,  ContextRequest contextRequest)
         {
             return GetCount(predicate, null, contextRequest);
         }

         public int GetCount(string predicate)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return GetCount(predicate, contextRequest);
        }
		 public int GetCount(string predicate, string usemode){
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
				return GetCount( predicate,  usemode,  contextRequest);
		 }
        public int GetCount(string predicate, string usemode, ContextRequest contextRequest){
			  string freetext = null;
            Filter filter = new Filter();

              if (predicate.Contains("|"))
              {
                 
                  filter.SetFilterPart("ft", GetSpecificFilter(predicate));
                 
                  filter.ProcessText(predicate.Split(char.Parse("|"))[0]);
                  freetext = predicate.Split(char.Parse("|"))[1];
              }
              else {
                  filter.ProcessText(predicate);
              }
           
			e = null;
			contextRequest.FreeText = freetext;
			contextRequest.UseMode = usemode;
            OnCounting(this, e = new BusinessRulesEventArgs<accMoneyMovement>() {  Filter =filter, ContextRequest = contextRequest });
            if (e != null)
            {
                if (e.Cancel)
                {
                    context = null;
                    return e.CountResult;

                }

            

            }
			 predicate = filter.GetFilterComplete();
			StringBuilder sbQuerySystem = new StringBuilder();
		
					
                    filter.SetFilterPart("de","(IsDeleted != true OR IsDeleted == null)");
			
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    	if (contextRequest.User !=null )
                        	if (contextRequest.Company != null ){
                        		

								filter.SetFilterPart("co", @"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
						
						
							}
							
							}
							if (preventSecurityRestrictions) preventSecurityRestrictions= false;
			using (EFContext con = new EFContext())
			{
				   
                 filter.CleanAndProcess("");
				//string predicateWithFKAndComputed = SFSdotNet.Framework.Linq.Utils.ExtractSpecificProperties("", ref predicate );               
				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed();
               string predicateWithManyRelations = filter.GetFilterChildren();
			   ///QueryUtils.BreakeQuery1(predicate, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
			   predicate = filter.GetFilterComplete();
               if (!string.IsNullOrEmpty(predicate))
               {
				
					
                    return con.accMoneyMovements.Count(System.Linq.Dynamic.DynamicExpression.ParseLambda<accMoneyMovement, bool>(predicate));
					
                }else
                    return con.accMoneyMovements.Count();

			}

		}
         public int GetCount()
        {
            return GetCount(p => true);
        }
        #endregion
        
         public accMoneyMovement Update(accMoneyMovement entity, string paths)
        {
            return Update(entity, paths.Split(char.Parse(",")));
            
        }

        public accMoneyMovement Update(accMoneyMovement entity, string[] paths)
        {
            // Translate
            List<Expression<Func<accMoneyMovement, object>>> pathList = new List<Expression<Func<accMoneyMovement, object>>>();
            for (int i = 0; i <= paths.Length -1; i++)
            {
                var param = Expression.Parameter(typeof(accMoneyMovement), "p");
                var member = MemberExpression.PropertyOrField(param, paths[i]);

                Expression<Func<accMoneyMovement, object>> path = p => member;
                pathList.Add(path.Expand());
            }
			ObjectContext context = null;
			 return Update(entity, true,null, out context,  pathList.ToArray());
           //return Update(entity, pathList.ToArray());
        }

        public void Update(List<accMoneyMovement> entities, string paths)
        {
            foreach (var entity in entities )
            {
                Update(entity, paths);
            }
        }
		public accMoneyMovement Create(accMoneyMovement entity, ContextRequest contextRequest, string paths)
        {
          

            if (string.IsNullOrEmpty(paths))
                return Create(entity, contextRequest);

            return Create(entity, contextRequest, paths.Split(char.Parse(",")));
        }
        public accMoneyMovement Create(accMoneyMovement entity, string paths)
        {
			 if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return Create(entity, contextRequest, paths);

        }

        public  void Create(List<accMoneyMovement> entities, ContextRequest requestContext, string paths)
        {
            foreach (var entity in entities)
            {
                Create(entity,requestContext, paths);
            }
        }

        public void Create(List<accMoneyMovement> entities, string[] paths)
        {
            foreach (var entity in entities)
            {
                Create(entity, null, paths);
            }
        }
        
        public accMoneyMovement  Create(accMoneyMovement entity, ContextRequest contextRequest, string[] paths)
        {
            List<Expression<Func<accMoneyMovement, object>>> pathList = new List<Expression<Func<accMoneyMovement, object>>>();
            for (int i = 0; i < paths.Length - 1; i++)
            {
                var param = Expression.Parameter(typeof(accMoneyMovement), "p");
                var member = MemberExpression.PropertyOrField(param, paths[i]);

                Expression<Func<accMoneyMovement, object>> path = p => member;
                pathList.Add(path.Expand());
            }
            return Create(entity, contextRequest, pathList.ToArray());
        }
        public void Delete(List<accMoneyMovement.CompositeKey> entityKeys)
        {

            List<accMoneyMovement> items = new List<accMoneyMovement>();
            foreach (var itemKey in entityKeys)
            {
                items.Add(GetByKey(itemKey.GuidMoneyMovement));
            }

            Delete(items);

        }
		
		
	}
		public partial class accMoneyPlacesBR{
	 	
           
		 #region Partial methods

           partial void OnUpdating(object sender, BusinessRulesEventArgs<accMoneyPlace> e);

            partial void OnUpdated(object sender, BusinessRulesEventArgs<accMoneyPlace> e);

            partial void OnCreating(object sender, BusinessRulesEventArgs<accMoneyPlace> e);
            partial void OnCreated(object sender, BusinessRulesEventArgs<accMoneyPlace> e);

            partial void OnDeleting(object sender, BusinessRulesEventArgs<accMoneyPlace> e);
            partial void OnDeleted(object sender, BusinessRulesEventArgs<accMoneyPlace> e);

            partial void OnGetting(object sender, BusinessRulesEventArgs<accMoneyPlace> e);
            partial void OnTaken(object sender, BusinessRulesEventArgs<accMoneyPlace> e);
            partial void OnCounting(object sender, BusinessRulesEventArgs<accMoneyPlace> e);
 
 
            #endregion
			
		private static accMoneyPlacesBR singlenton =null;
				public static accMoneyPlacesBR NewInstance(){
					return  new accMoneyPlacesBR();
					
				}
		public static accMoneyPlacesBR Instance{
			get{
				if (singlenton == null)
					singlenton = new accMoneyPlacesBR();
				return singlenton;
			}
		}
		private bool preventSecurityRestrictions = false;
		 public bool PreventAuditTrail { get; set;  }
		#region Fields
        EFPocoContext context = null;
        #endregion
        #region Constructor
        public accMoneyPlacesBR()
        {
            context = new EFPocoContext();
        }
		 public accMoneyPlacesBR(bool preventSecurity)
            {
                this.preventSecurityRestrictions = preventSecurity;
				context = new EFPocoContext();
            }
        #endregion
		
		#region Get

 		public IQueryable<accMoneyPlace> Get()
        {
            //using (EFContext con = new EFContext())
            //{
				EFContext con = new EFContext();
                var query = con.accMoneyPlaces.AsQueryable();
                con.ContextOptions.ProxyCreationEnabled = false;

                //query = ContextQueryBuilder<Nutrient>.ApplyContextQuery(query, contextRequest);

                return query;




            //}

        }
		
		public List<accMoneyPlace> GetAll()
        {
            return this.GetBy(p => true);
        }
        public List<accMoneyPlace> GetAll(string includes)
        {
            return this.GetBy(p => true, includes);
        }
        public accMoneyPlace GetByKey(Guid guidMoneyPlace)
        {
            return GetByKey(guidMoneyPlace, true);
        }
        public accMoneyPlace GetByKey(Guid guidMoneyPlace, bool loadIncludes)
        {
            accMoneyPlace item = null;
			var query = PredicateBuilder.True<accMoneyPlace>();
                    
			string strWhere = @"GuidMoneyPlace = Guid(""" + guidMoneyPlace.ToString()+@""")";
            Expression<Func<accMoneyPlace, bool>> predicate = null;
            if (!string.IsNullOrEmpty(strWhere))
                predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<accMoneyPlace, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
			 ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();
            contextRequest.CustomQuery.FilterExpressionString = strWhere;

			//item = GetBy(predicate, loadIncludes, contextRequest).FirstOrDefault();
			item = GetBy(strWhere,loadIncludes,contextRequest).FirstOrDefault();
            return item;
        }
         public List<accMoneyPlace> GetBy(string strWhere, bool loadRelations, ContextRequest contextRequest)
        {
            if (!loadRelations)
                return GetBy(strWhere, contextRequest);
            else
                return GetBy(strWhere, contextRequest, "");

        }
		  public List<accMoneyPlace> GetBy(string strWhere, bool loadRelations)
        {
              if (!loadRelations)
                return GetBy(strWhere, new ContextRequest());
            else
                return GetBy(strWhere, new ContextRequest(), "");

        }
         public accMoneyPlace GetByKey(Guid guidMoneyPlace, params Expression<Func<accMoneyPlace, object>>[] includes)
        {
            accMoneyPlace item = null;
			string strWhere = @"GuidMoneyPlace = Guid(""" + guidMoneyPlace.ToString()+@""")";
          Expression<Func<accMoneyPlace, bool>> predicate = null;
            if (!string.IsNullOrEmpty(strWhere))
                predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<accMoneyPlace, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
        item = GetBy(predicate, includes).FirstOrDefault();
         ////   item = GetBy(strWhere,includes).FirstOrDefault();
			return item;

        }
        public accMoneyPlace GetByKey(Guid guidMoneyPlace, string includes)
        {
            accMoneyPlace item = null;
			string strWhere = @"GuidMoneyPlace = Guid(""" + guidMoneyPlace.ToString()+@""")";
            
			
            item = GetBy(strWhere, includes).FirstOrDefault();
            return item;

        }
		 public accMoneyPlace GetByKey(Guid guidMoneyPlace, string usemode, string includes)
		{
			return GetByKey(guidMoneyPlace, usemode, null, includes);

		 }
		 public accMoneyPlace GetByKey(Guid guidMoneyPlace, string usemode, ContextRequest context,  string includes)
        {
            accMoneyPlace item = null;
			string strWhere = @"GuidMoneyPlace = Guid(""" + guidMoneyPlace.ToString()+@""")";
			if (context == null)
				context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
			context.CustomQuery.IsByKey = true;
            context.CustomQuery.FilterExpressionString = strWhere;
            context.UseMode = usemode;
            item = GetBy(strWhere,context , includes).FirstOrDefault();
            return item;

        }

        #region Dynamic Predicate
        public List<accMoneyPlace> GetBy(Expression<Func<accMoneyPlace, bool>> predicate, int? pageSize, int? page)
        {
            return this.GetBy(predicate, pageSize, page, null, null);
        }
        public List<accMoneyPlace> GetBy(Expression<Func<accMoneyPlace, bool>> predicate, ContextRequest contextRequest)
        {

            return GetBy(predicate, contextRequest,"");
        }
        
        public List<accMoneyPlace> GetBy(Expression<Func<accMoneyPlace, bool>> predicate, ContextRequest contextRequest, params Expression<Func<accMoneyPlace, object>>[] includes)
        {
            StringBuilder sb = new StringBuilder();
           if (includes != null)
            {
                foreach (var path in includes)
                {

						if (sb.Length > 0) sb.Append(",");
						sb.Append(SFSdotNet.Framework.Linq.Utils.IncludeToString<accMoneyPlace>(path));

               }
            }
            return GetBy(predicate, contextRequest, sb.ToString());
        }
        
        
        public List<accMoneyPlace> GetBy(Expression<Func<accMoneyPlace, bool>> predicate, string includes)
        {
			ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";

            return GetBy(predicate, context, includes);
        }

        public List<accMoneyPlace> GetBy(Expression<Func<accMoneyPlace, bool>> predicate, params Expression<Func<accMoneyPlace, object>>[] includes)
        {
			if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }
			ContextRequest context = new ContextRequest();
			            context.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            context.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";
            return GetBy(predicate, context, includes);
        }

      
		public bool DisableCache { get; set; }
		 public List<accMoneyPlace> GetBy(Expression<Func<accMoneyPlace, bool>> predicate, ContextRequest contextRequest, string includes)
        {
            using (EFPocoContext con = new EFPocoContext())
            {
				if (DisableCache) 
                	con.CachingPolicy = EFCachingProvider.Caching.CachingPolicy.NoCaching;

				List<accMoneyPlace> result = null;
                 e = null;
	
				OnGetting(con, e = new BusinessRulesEventArgs<accMoneyPlace>() {  FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null) });

               // OnGetting(con,e = new BusinessRulesEventArgs<accMoneyPlace>() { FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = contextRequest.CustomQuery.FilterExpressionString});
				   if (e != null) {
				    predicate = e.FilterExpression;
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				con.EnableChangeTrackingUsingProxies = false;
				con.WrappedContext.accMoneyPlaces.MergeOption = MergeOption.NoTracking;
                con.WrappedContext.ContextOptions.ProxyCreationEnabled = false;
                if (predicate == null) predicate = PredicateBuilder.True<accMoneyPlace>();
 				string fkIncludes = "accBank,accReusableCatalogValue";
                if(contextRequest!=null){
					if (contextRequest.CustomQuery != null)
					{
						if (contextRequest.CustomQuery.IncludeForeignKeyPaths != null) {
							if (contextRequest.CustomQuery.IncludeForeignKeyPaths.Value == false)
								fkIncludes = "";
						}
					}
				}
				if (!string.IsNullOrEmpty(includes))
					includes = includes + "," + fkIncludes;
				else
					includes = fkIncludes;
                
                var es = con.accMoneyPlaces;

                IQueryable<accMoneyPlace> query = es.AsQueryable();

                                if (!string.IsNullOrEmpty(includes))
                {
                    foreach (string include in includes.Split(char.Parse(",")))
                    {
						if (!string.IsNullOrEmpty(include))
                            query = query.Include(include);
                    }
                }
                    predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
					 	if (!preventSecurityRestrictions)
						{
							if (contextRequest != null )
		                    	if (contextRequest.User !=null )
		                        	if (contextRequest.Company != null)
		                        		predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				query =query.Where(predicate);
                query = ContextQueryBuilder<accMoneyPlace>.ApplyContextQuery(query, contextRequest);

                result = query.ToList<accMoneyPlace>();
				  
                if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e =  new BusinessRulesEventArgs<accMoneyPlace>() { Items= result, IncludingComputedLinq = false, ContextRequest = contextRequest,  FilterExpression = predicate } :  e);
  
			

                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
            }
        }
		public void UpdateAgile(accMoneyPlace item, params string[] fields)
         {
             List<accMoneyPlace> list = new List<accMoneyPlace>();
             list.Add(item);
             this.UpdateBulk(list, fields);
         }
		public void UpdateBulk(List<accMoneyPlace>  items, params string[] fields)
         {
             SFSdotNet.Framework.My.ContextRequest req = new SFSdotNet.Framework.My.ContextRequest();
             req.CustomQuery = new SFSdotNet.Framework.My.CustomQuery();
             foreach (var field in fields)
             {
                 req.CustomQuery.SpecificProperties.Add(field);
             }
             UpdateBulk(items, req);

         }
        public void UpdateBulk(List<accMoneyPlace> items, ContextRequest req)
        {
            using (EFContext con = new EFContext())
            {



                foreach (var item in items)
                {
                    var setT = con.CreateObjectSet<accMoneyPlace>("accMoneyPlaces");


                    var itemForAttach = new accMoneyPlace();
			itemForAttach.GuidMoneyPlace = item.GuidMoneyPlace;
					
                    itemForAttach = SFSdotNet.Framework.Entities.ConvertEntity.SetProperties<accMoneyPlace>(item, itemForAttach, null, req.CustomQuery.SpecificProperties.ToArray());
                    setT.Attach(itemForAttach);


                    foreach (var property in req.CustomQuery.SpecificProperties)
                    {
						
                        if (property != "GuidMoneyPlace")
                            con.ObjectStateManager.GetObjectStateEntry(itemForAttach).SetModifiedProperty(property);

                    }

                }
                con.SaveChanges();


            }
        }
		/*public int Update(List<accMoneyPlace> items, ContextRequest contextRequest)
            {
                int result = 0;
                using (EFContext con = new EFContext())
                {
                   
                

                    foreach (var item in items)
                    {
                        //secMessageToUser messageToUser = new secMessageToUser();
                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            item.GetType().GetProperty(prop).SetValue(item, item.GetType().GetProperty(prop).GetValue(item));
                        }
                        //messageToUser.GuidMessageToUser = (Guid)item.GetType().GetProperty("GuidMessageToUser").GetValue(item);

                        var setObject = con.CreateObjectSet<accMoneyPlace>("accMoneyPlaces");
                        //messageToUser.Readed = DateTime.UtcNow;
                        setObject.Attach(item);
                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            con.ObjectStateManager.GetObjectStateEntry(item).SetModifiedProperty(prop);
                        }
                       
                    }
                    result = con.SaveChanges();

                    


                }
                return result;
            }
           */
        public List<accMoneyPlace> GetBy(string predicateString, ContextRequest contextRequest, string includes)
        {
            using (EFContext con = new EFContext())
            {
				if (DisableCache) 
                	con.CachingPolicy = EFCachingProvider.Caching.CachingPolicy.NoCaching;

				Filter filter = new Filter();
                if (predicateString.Contains("|"))
                {
                    string ft = GetSpecificFilter(predicateString);
                    if (!string.IsNullOrEmpty(ft))
                        filter.SetFilterPart("ft", ft);
                   
                    contextRequest.FreeText = predicateString.Split(char.Parse("|"))[1];
                    var q1 = predicateString.Split(char.Parse("|"))[0];
                    if (!string.IsNullOrEmpty(q1))
                    {
                        filter.ProcessText(q1);
                    }
                }
                else {
                    filter.ProcessText(predicateString);
                }

				List<accMoneyPlace> result = null;
                 e = null;
					OnGetting(con, e = new BusinessRulesEventArgs<accMoneyPlace>() { Filter = filter, ContextRequest = contextRequest /*, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null)*/ });

                  //OnGetting(con,e = new BusinessRulesEventArgs<accMoneyPlace>() {  ContextRequest = contextRequest, FilterExpressionString = predicateString });
			   	if (e != null) {
				    //predicateString = e.GetQueryString();
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				//	 else {
                //      predicateString = predicateString.Replace("*extraFreeText*", "").Replace("()","");
                //  }
				//con.EnableChangeTrackingUsingProxies = false;
				con.accMoneyPlaces.MergeOption = MergeOption.NoTracking;
                con.ContextOptions.ProxyCreationEnabled = false;
                //if (predicate == null) predicate = PredicateBuilder.True<accMoneyPlace>();
 				string fkIncludes = "accBank,accReusableCatalogValue";
                if(contextRequest!=null){
					if (contextRequest.CustomQuery != null)
					{
						if (contextRequest.CustomQuery.IncludeForeignKeyPaths != null) {
							if (contextRequest.CustomQuery.IncludeForeignKeyPaths.Value == false)
								fkIncludes = "";
						}
					}
				}else{
                    contextRequest = new ContextRequest();
                    contextRequest.CustomQuery = new CustomQuery();

                }
				if (!string.IsNullOrEmpty(includes))
					includes = includes + "," + fkIncludes;
				else
					includes = fkIncludes;
                
                var es = con.accMoneyPlaces;
				IQueryable<accMoneyPlace> query = es.AsQueryable();
		
				// include relations FK
				if(string.IsNullOrEmpty(includes) ){
					includes ="";
				}
				bool includeaccBank = includes.Split(char.Parse(",")).Contains("accBank");

				bool includeaccReusableCatalogValue = includes.Split(char.Parse(",")).Contains("accReusableCatalogValue");

				StringBuilder sbQuerySystem = new StringBuilder();
                    //predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				

				//if (!string.IsNullOrEmpty(predicateString))
                //      sbQuerySystem.Append(" And ");
                //sbQuerySystem.Append(" (IsDeleted != true Or IsDeleted = null) ");
				 filter.SetFilterPart("de", "(IsDeleted != true OR IsDeleted = null)");


					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
	                    	if (contextRequest.User !=null )
	                        	if (contextRequest.Company != null ){
	                        		//if (sbQuerySystem.Length > 0)
	                        		//	    			sbQuerySystem.Append( " And ");	
									//sbQuerySystem.Append(@" (GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
									filter.SetFilterPart("co",@"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @"""))");
								}
						}	
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				//string predicateString = predicate.ToDynamicLinq<accMoneyPlace>();
				//predicateString += sbQuerySystem.ToString();
				filter.CleanAndProcess("");

				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed(); //SFSdotNet.Framework.Linq.Utils.ExtractSpecificProperties("", ref predicateString );               
                string predicateWithManyRelations = filter.GetFilterChildren(); //SFSdotNet.Framework.Linq.Utils.CleanPartExpression(predicateString);

                //QueryUtils.BreakeQuery1(predicateString, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
                var _queryable = query.AsQueryable();
                if (!string.IsNullOrEmpty(predicateWithManyRelations))
                    _queryable = _queryable.Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams);
				if (contextRequest.CustomQuery.SpecificProperties.Count > 0)
                {

                    StringBuilder sbProps = new StringBuilder();
                    contextRequest.CustomQuery.SpecificProperties.Add("GuidMoneyPlace");
                    
					foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                    {
						if(sbProps.Length > 0)
							sbProps.Append(",");
                        sbProps.Append(prop);
                    }
					    IQueryable  queryableSelective = null ;
					  
					  if (!string.IsNullOrEmpty(predicateWithManyRelations))
							queryableSelective = con.accMoneyPlaces.AsQueryable().Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams).Select(string.Format("new({0})", sbProps.ToString()));
					else
						queryableSelective = con.accMoneyPlaces.AsQueryable().Select(string.Format("new({0})", sbProps.ToString()));


                    //if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
					//	queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

                    QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
                    
					if (!string.IsNullOrEmpty(queryOps.OrderByAndSort))
                        queryableSelective = queryableSelective.OrderBy(queryOps.OrderByAndSort);
                    if (queryOps.Skip != null)
                    {
                        queryableSelective = queryableSelective.Skip(queryOps.Skip.Value);
                    }
                    if (queryOps.PageSize != null)
                    {
                        queryableSelective = queryableSelective.Take(queryOps.PageSize.Value);
                    }
                    //var results = queryableSelective.ToList();
                    result = new List<accMoneyPlace>();
                    accMoneyPlace itemDef = null;
                    foreach (var item in queryableSelective)
                    {
                        itemDef = new accMoneyPlace();

                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            if (!prop.Contains("."))
                            {
                                itemDef.GetType().GetProperty(prop).SetValue(itemDef, item.GetType().GetProperty(prop).GetValue(item));
                            }
                            else {
                                throw new Exception("La seleccion de relaciones aún no esta soportada");
                            }

                        }

                        result.Add(itemDef);
                    }

                }
                else
                {
				var  queryable = _queryable.Select(                    
				p => 
                        new
                    {
					GuidMoneyPlace = p.GuidMoneyPlace
,Name = p.Name
,CreatedDate = p.CreatedDate
,UpdatedDate = p.UpdatedDate
,CreatedBy = p.CreatedBy
,UpdatedBy = p.UpdatedBy
,IsDeleted = p.IsDeleted
,GuidCompany = p.GuidCompany
,Number = p.Number
,InitialBalance = p.InitialBalance
,CurrentBalance = p.CurrentBalance

,accBank = includeaccBank ? p.accBank:null
,accReusableCatalogValue = includeaccReusableCatalogValue ? p.accReusableCatalogValue:null


	
                    }
                    
                    );
					
				
                 if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
                    queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

				QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
            	if (!string.IsNullOrEmpty(queryOps.OrderByAndSort))
					queryable = queryable.OrderBy(queryOps.OrderByAndSort);
               	if (queryOps.Skip != null)
                {
                    queryable = queryable.Skip(queryOps.Skip.Value);
                }
                if (queryOps.PageSize != null)
                {
                    queryable = queryable.Take (queryOps.PageSize.Value);
                }
                result = queryable.AsEnumerable().
                    Select(
                    p =>  new accMoneyPlace()
                    {
					GuidMoneyPlace = p.GuidMoneyPlace
,Name = p.Name
,CreatedDate = p.CreatedDate
,UpdatedDate = p.UpdatedDate
,CreatedBy = p.CreatedBy
,UpdatedBy = p.UpdatedBy
,IsDeleted = p.IsDeleted
,GuidCompany = p.GuidCompany
,Number = p.Number
,InitialBalance = p.InitialBalance
,CurrentBalance = p.CurrentBalance
,accBank = p.accBank
,accReusableCatalogValue = p.accReusableCatalogValue

                    }
                     ).ToList();
				}


			 if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e = new BusinessRulesEventArgs<accMoneyPlace>() { Items= result, IncludingComputedLinq = true, ContextRequest = contextRequest, FilterExpressionString  = predicateString } :  e);
  
			
  
                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
            }
        }
		public accMoneyPlace GetSummaryOperation(string function, string filter)
        {
			if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetSummaryOperation");
            }

            ContextRequest contextRequest = new ContextRequest();
			            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            //return GetSummaryOperation(function, filter, usemode, contextRequest);
            return GetSummaryOperation(function, filter, contextRequest);
		}

		public accMoneyPlace GetSummaryOperation(string function, string filter, ContextRequest contextRequest)
        {
			return  GetSummaryOperation(function, filter, null, contextRequest);
		}

		 public accMoneyPlace GetSummaryOperation(string function, string filter, string usemode)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetSummaryOperation");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
				return GetSummaryOperation(function, filter, usemode, contextRequest);

		}
        public accMoneyPlace GetSummaryOperation(string function, string filterString, string usemode, ContextRequest contextRequest)
        {
			  string freetext = null;

		    string predicate = "";
			 Filter filter = new Filter();
            if (filterString.Contains("|"))
            {
				freetext = filterString.Split(char.Parse("|"))[1];
                filter.ProcessText(filterString.Split(char.Parse("|"))[0]);
            }
			else {
                filter.ProcessText(filterString);
            }
            if (!string.IsNullOrEmpty(filterString))
                filter.SetFilterPart("ft", GetSpecificFilter(filterString));//predicate = GetSpecificFilter(filter);
				  e = null;
			contextRequest.FreeText = freetext;
			contextRequest.UseMode = usemode;
            OnCounting(this, e = new BusinessRulesEventArgs<accMoneyPlace>() { Filter = filter, ContextRequest = contextRequest });
            if (e != null)
            {
                if (e.Cancel)
                {
                    context = null;
                    return e.Item;

                }
                //predicate = e.GetQueryString();

            }
            //else
            //{
			predicate = filter.GetFilterComplete();//    predicate = predicate.Replace("*extraFreeText*", "").Replace("()", "");
            //}
			StringBuilder sbQuerySystem = new StringBuilder();
					 
					 //if (!string.IsNullOrEmpty(predicate)) {
                    //    sbQuerySystem.Append(" AND ");
                    //}
                    //sbQuerySystem.Append(" (IsDeleted != true OR IsDeleted == null)");
            filter.SetFilterPart("de", "(IsDeleted != true OR IsDeleted == null)");

			
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    	if (contextRequest.User !=null )
                        	if (contextRequest.Company != null ){
                        		//           if (sbQuerySystem.Length > 0)
                                //{
                                //    sbQuerySystem.Append(" AND ");
                    			//}
                                //sbQuerySystem.Append (@" (GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
								filter.SetFilterPart("co", @"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @"""))");
								
								
							}
							
							}
							if (preventSecurityRestrictions) preventSecurityRestrictions= false;
           
            accMoneyPlace result = new accMoneyPlace();
            using (EFContext con = new EFContext())
            {
                var es = con.accMoneyPlaces;
                IQueryable<accMoneyPlace> query = es.AsQueryable();
                // if (string.IsNullOrEmpty(predicate))
                //    predicate = "";
				filter.CleanAndProcess("");
				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed(); //SFSdotNet.Framework.Linq.Utils.ExtractSpecificProperties("", ref predicate);               
                //predicate  += sbQuerySystem.ToString();
                string predicateWithManyRelations = filter.GetFilterChildren();//SFSdotNet.Framework.Linq.Utils.CleanPartExpression(predicate);
       
                //QueryUtils.BreakeQuery1(predicate, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
				bool includeaccBank = predicate.Contains("accBank");

				bool includeaccReusableCatalogValue = predicate.Contains("accReusableCatalogValue");

                var _queryable = query.AsQueryable();
                if (!string.IsNullOrEmpty(predicateWithManyRelations))
                    _queryable = _queryable.Where(predicateWithManyRelations);

				var queryable = _queryable.Select(
                    p =>
                        new
                        {
						GuidMoneyPlace = p.GuidMoneyPlace
,Name = p.Name
,CreatedDate = p.CreatedDate
,UpdatedDate = p.UpdatedDate
,CreatedBy = p.CreatedBy
,UpdatedBy = p.UpdatedBy
,IsDeleted = p.IsDeleted
,GuidCompany = p.GuidCompany
,Number = p.Number
,InitialBalance = p.InitialBalance
,CurrentBalance = p.CurrentBalance

,accBank = includeaccBank ? p.accBank:null
,accReusableCatalogValue = includeaccReusableCatalogValue ? p.accReusableCatalogValue:null



						   
                        }

                    );

 				if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
						queryable = queryable.Where(predicateWithFKAndComputed);
                 var q1 = (from c in queryable group c by 1 into g select new  {
						
        
				CurrentBalance = g.Sum(p=>p.CurrentBalance)

                 });
                 result = q1.AsEnumerable().Select(
                     p => new accMoneyPlace() { 
					
                CurrentBalance = p.CurrentBalance
      
						}).FirstOrDefault();

            }
            return result;
        }
		public List<accMoneyPlace> GetBy(Expression<Func<accMoneyPlace, bool>> predicate, bool loadRelations, ContextRequest contextRequest)
        {
			if(!loadRelations)
				return GetBy(predicate, contextRequest);
			else
				return GetBy(predicate, contextRequest, "accIncomeExpenses");

        }

        public List<accMoneyPlace> GetBy(Expression<Func<accMoneyPlace, bool>> predicate, int? pageSize, int? page, string orderBy, SFSdotNet.Framework.Data.SortDirection? sortDirection)
        {
            return GetBy(predicate, new ContextRequest() { CustomQuery = new CustomQuery() { Page = page, PageSize = pageSize, OrderBy = orderBy, SortDirection = sortDirection } });
        }
        public List<accMoneyPlace> GetBy(Expression<Func<accMoneyPlace, bool>> predicate)
        {

			if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }
			ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();

			contextRequest.CurrentContext = SFSdotNet.Framework.My.Context.CurrentContext;
			            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

            contextRequest.CustomQuery.FilterExpressionString = null;
            return this.GetBy(predicate, contextRequest, "");
        }
        #endregion
        #region Dynamic String
		private string GetSpecificFilter(string filter) {
            string result = "";
		    //string linqFilter = String.Empty;
            string freeTextFilter = String.Empty;
            if (filter.Contains("|"))
            {
               // linqFilter = filter.Split(char.Parse("|"))[0];
                freeTextFilter = filter.Split(char.Parse("|"))[1];
            }
            //else {
            //    freeTextFilter = filter;
            //}
            //else {
            //    linqFilter = filter;
            //}
			// linqFilter = SFSdotNet.Framework.Linq.Utils.ReplaceCustomDateFilters(linqFilter);
            //string specificFilter = linqFilter;
            if (!string.IsNullOrEmpty(freeTextFilter))
            {
                System.Text.StringBuilder sbCont = new System.Text.StringBuilder();
                /*if (specificFilter.Length > 0)
                {
                    sbCont.Append(" AND ");
                    sbCont.Append(" ({0})");
                }
                else
                {
                    sbCont.Append("{0}");
                }*/
                //var words = freeTextFilter.Split(char.Parse(" "));
				var word = freeTextFilter;
                System.Text.StringBuilder sbSpec = new System.Text.StringBuilder();
                 int nWords = 1;
				/*foreach (var word in words)
                {
					if (word.Length > 0){
                    if (sbSpec.Length > 0) sbSpec.Append(" AND ");
					if (words.Length > 1) sbSpec.Append("("); */
					
	
					
											
					sbSpec.Append(string.Format(@"Name.Contains(""{0}"")", word));

					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
								sbSpec.Append(" OR ");
					
					//if (sbSpec.Length > 2)
					//	sbSpec.Append(" OR "); // test
					sbSpec.Append(string.Format(@"accBank.Name.Contains(""{0}"")", word)+" OR "+string.Format(@"accReusableCatalogValue.Title.Contains(""{0}"")", word));
								 //sbSpec.Append("*extraFreeText*");

                    /*if (words.Length > 1) sbSpec.Append(")");
					
					nWords++;

					}

                }*/
                //specificFilter = string.Format("{0}{1}", specificFilter, string.Format(sbCont.ToString(), sbSpec.ToString()));
                                 result = sbSpec.ToString();  
            }
			//result = specificFilter;
			
			return result;

		}
	
			public List<accMoneyPlace> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  params object[] extraParams)
        {
			return GetBy(filter, pageSize, page, orderBy, orderDir,  null, extraParams);
		}
           public List<accMoneyPlace> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir, string usemode, params object[] extraParams)
            { 
                return GetBy(filter, pageSize, page, orderBy, orderDir, usemode, null, extraParams);
            }


		public List<accMoneyPlace> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  string usemode, ContextRequest context, params object[] extraParams)

        {

            // string freetext = null;
            //if (filter.Contains("|"))
            //{
            //    int parts = filter.Split(char.Parse("|")).Count();
            //    if (parts > 1)
            //    {

            //        freetext = filter.Split(char.Parse("|"))[1];
            //    }
            //}
		
            //string specificFilter = "";
            //if (!string.IsNullOrEmpty(filter))
            //  specificFilter=  GetSpecificFilter(filter);
            if (string.IsNullOrEmpty(orderBy))
            {
			                orderBy = "UpdatedDate";
            }
			//orderDir = "desc";
			SFSdotNet.Framework.Data.SortDirection direction = SFSdotNet.Framework.Data.SortDirection.Ascending;
            if (!string.IsNullOrEmpty(orderDir))
            {
                if (orderDir == "desc")
                    direction = SFSdotNet.Framework.Data.SortDirection.Descending;
            }
            if (context == null)
                context = new ContextRequest();
			else
                context.CustomQuery = new CustomQuery();
             //context.FreeText = freetext;
             context.UseMode = usemode;
             context.CustomQuery =new SFSdotNet.Framework.My.CustomQuery()
 
                {
                    ExtraParams = extraParams,

                    OrderBy = orderBy,
                    SortDirection = direction,
                    Page = page,
                    PageSize = pageSize
               };
            

            if (!preventSecurityRestrictions) {
			 if (context.CurrentContext == null)
                {
					if (SFSdotNet.Framework.My.Context.CurrentContext != null &&  SFSdotNet.Framework.My.Context.CurrentContext.Company != null && SFSdotNet.Framework.My.Context.CurrentContext.User != null)
					{
						context.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
						context.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

					}
					else {
						throw new Exception("The security rule require a specific user and company");
					}
				}
            }
            return GetBy(filter, context);
  
        }


        public List<accMoneyPlace> GetBy(string strWhere, ContextRequest contextRequest)
        {
        	#region old code
				
				 //Expression<Func<tvsReservationTransport, bool>> predicate = null;
				string strWhereClean = strWhere.Replace("*extraFreeText*", "").Replace("()", "");
                //if (!string.IsNullOrEmpty(strWhereClean)){

                //    object[] extraParams = null;
                //    //if (contextRequest != null )
                //    //    if (contextRequest.CustomQuery != null )
                //    //        extraParams = contextRequest.CustomQuery.ExtraParams;
                //    //predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<tvsReservationTransport, bool>(strWhereClean, extraParams != null? extraParams.Cast<Guid>(): null);				
                //}
				 if (contextRequest == null)
                {
                    contextRequest = new ContextRequest();
                    if (contextRequest.CustomQuery == null)
                        contextRequest.CustomQuery = new CustomQuery();
                }
                  if (!preventSecurityRestrictions) {
					if (contextRequest.User == null || contextRequest.Company == null)
                      {
                     if (SFSdotNet.Framework.My.Context.CurrentContext.Company != null && SFSdotNet.Framework.My.Context.CurrentContext.User != null)
                     {
                         contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                         contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

                     }
                     else {
                         throw new Exception("The security rule require a specific User and Company ");
                     }
					 }
                 }
            contextRequest.CustomQuery.FilterExpressionString = strWhere;
				//return GetBy(predicate, contextRequest);  

			#endregion				
				
                    return GetBy(strWhere, contextRequest, "");  


        }
       public List<accMoneyPlace> GetBy(string strWhere)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
			
            return GetBy(strWhere, context, null);
        }

        public List<accMoneyPlace> GetBy(string strWhere, string includes)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
            return GetBy(strWhere, context, includes);
        }

        #endregion
        #endregion
		
		  #region SaveOrUpdate
        private accMoneyPlace Save(accMoneyPlace entity, bool saveChanges, EFPocoContext con)
        {
				ObjectContext context = null;
            return Update(entity, saveChanges,null, out context);

			
        }
		 public  accMoneyPlace Create( accMoneyPlace entity, params Expression<Func< accMoneyPlace, object>>[] paths)
         {
             return Create(entity, null, paths);

         }
 		 public accMoneyPlace Create(accMoneyPlace entity)
        {
				ObjectContext context = null;
				    if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: Create");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

				return this.Create(entity, true, contextRequest, out context);


        }
        public accMoneyPlace Create(accMoneyPlace entity, ContextRequest contextRequest)
         {
             ObjectContext context = null;
             return this.Create(entity, true, contextRequest,out context);

         }
         public accMoneyPlace Create(accMoneyPlace entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext context)
        {
                    return Create(entity, saveChanges , contextRequest , out context, null);
        }
         public accMoneyPlace Create(accMoneyPlace entity, ContextRequest contextRequest, params Expression<Func<accMoneyPlace,object>>[] paths)
        {
            ObjectContext context = null;
            if(paths != null)
				return Create(entity, true,contextRequest, out context, paths);
			else 
				return Create(entity, true,contextRequest, out context);
        }
        public accMoneyPlace Create(accMoneyPlace entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext context, params Expression<Func<accMoneyPlace,object>>[] pocopaths)
        {
			using (EFPocoContext con = new EFPocoContext())
			{
				accMoneyPlace itemResult = null;
#region Autos


			entity.CreatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.CreatedBy = contextRequest.User.GuidUser;
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.UpdatedBy = contextRequest.User.GuidUser;
	
			if (contextRequest != null)
				if(contextRequest.User != null)
					if (contextRequest.Company != null)
						entity.GuidCompany = contextRequest.Company.GuidCompany;
	

#endregion
                e = null;
                OnCreating(this,e = new BusinessRulesEventArgs<accMoneyPlace>() { ContextRequest = contextRequest, Item=entity, PathExpressions = pocopaths, SaveChanges =saveChanges });
				   if (e != null) {
						if (e.Cancel)
						{
							context = null;
							return e.Item;

						}
					}

                    if (entity.GuidMoneyPlace == Guid.Empty)
                   {
                       entity.GuidMoneyPlace = Guid.NewGuid();

                   }



				accMoneyPlaceAdapter adapter = con.GetAdapterObject<accMoneyPlaceAdapter>(entity);;
				List<Expression<Func<accMoneyPlaceAdapter, object>>> paths = new List<Expression<Func<accMoneyPlaceAdapter,object>>>();
                
			    if (pocopaths != null && pocopaths.Length > 0)
                {
					// Translate
                    foreach (var pocopath in pocopaths)
                    {
                        var param = Expression.Parameter(typeof(accMoneyPlaceAdapter), "p");
                        var member = MemberExpression.PropertyOrField(param, ((System.Linq.Expressions.MemberExpression)(((System.Linq.Expressions.LambdaExpression)(pocopath)).Body)).Member.Name);
                        Expression<Func<accMoneyPlaceAdapter, object>> path  = null;
                        switch(member.Member.Name){
                        
							case "accIncomeExpenses":
								path = p => p.accIncomeExpenses.First().WithoutUpdate();

								//path = p => member;
								//path = p => p.accIncomeExpenses.First().accMoneyInOutConcept.WithoutUpdate();											
								//path = p => p.accIncomeExpenses.First().accProvider.WithoutUpdate();											
								//path = p => p.accIncomeExpenses.First().accReusableCatalogValue.WithoutUpdate();											
								//path = p => p.accIncomeExpenses.First().accReusableStatusAuthorization.WithoutUpdate();											
								//path = p => p.accIncomeExpenses.First().accCompanyArea.WithoutUpdate();											
								//path = p => p.accIncomeExpenses.First().accParent.WithoutUpdate();											
								//path = p => p.accIncomeExpenses.First().accReusable_PaymentType.WithoutUpdate();											
							break;
							
							default:
								path = p => member;
							break;
                        }

                        
                       paths.Add(path.Expand());
                    }
                }
                object aux = null;
					paths.Add(p => p.accBank.WithoutUpdate());

					paths.Add(p => p.accReusableCatalogValue.WithoutUpdate());

					//paths = pathBuilder.ToArray();

				if (adapter.accBank != null ){
					if(adapter.accBank.EntityKey == null) adapter.accBank.EntityKey = con.WrappedContext.CreateEntityKey("accBanks", adapter.accBank);
				}
				if (adapter.accReusableCatalogValue != null ){
					if(adapter.accReusableCatalogValue.EntityKey == null) adapter.accReusableCatalogValue.EntityKey = con.WrappedContext.CreateEntityKey("accReusableCatalogValues", adapter.accReusableCatalogValue);
				}
#region Childs accIncomeExpenses 
				if (adapter.accIncomeExpenses != null)
                {
                    foreach (var item in adapter.accIncomeExpenses)
                    {
						
							if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accIncomeExpenses", item);
							if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)){ 
								//paths.Add(p => p.accIncomeExpenses.First().WithoutUpdate());
								
						if (item.accMoneyInOutConcept != null){
							item.accMoneyInOutConcept.EntityKey = con.WrappedContext.CreateEntityKey("accMoneyInOutConcepts", item.accMoneyInOutConcept);
                            
             
						}								
							if (item.accMoneyPlace == null)
								item.accMoneyPlace = adapter;

						if (item.accProvider != null){
							item.accProvider.EntityKey = con.WrappedContext.CreateEntityKey("accProviders", item.accProvider);
                            
             
						}								
						if (item.accReusableCatalogValue != null){
							item.accReusableCatalogValue.EntityKey = con.WrappedContext.CreateEntityKey("accReusableCatalogValues", item.accReusableCatalogValue);
                            
             
						}								
						if (item.accReusableStatusAuthorization != null){
							item.accReusableStatusAuthorization.EntityKey = con.WrappedContext.CreateEntityKey("accReusableCatalogValues", item.accReusableStatusAuthorization);
                            
             
						}								
						if (item.accCompanyArea != null){
							item.accCompanyArea.EntityKey = con.WrappedContext.CreateEntityKey("accCompanyAreas", item.accCompanyArea);
                            
             
						}								
						if (item.accParent != null){
							item.accParent.EntityKey = con.WrappedContext.CreateEntityKey("accIncomeExpenses", item.accParent);
                            
             
						}								
						if (item.accReusable_PaymentType != null){
							item.accReusable_PaymentType.EntityKey = con.WrappedContext.CreateEntityKey("accReusableCatalogValues", item.accReusable_PaymentType);
                            
             
						}								
								item.EntityKey = null;
							}

                    }
					if (adapter.accIncomeExpenses.Count > 0){
						paths.Add(p => p.accIncomeExpenses.First().WithoutUpdate());
						paths.Add(p => p.accIncomeExpenses.First().accMoneyInOutConcept.WithoutUpdate());
paths.Add(p => p.accIncomeExpenses.First().accProvider.WithoutUpdate());
paths.Add(p => p.accIncomeExpenses.First().accReusableCatalogValue.WithoutUpdate());
paths.Add(p => p.accIncomeExpenses.First().accReusableStatusAuthorization.WithoutUpdate());
paths.Add(p => p.accIncomeExpenses.First().accCompanyArea.WithoutUpdate());
paths.Add(p => p.accIncomeExpenses.First().accParent.WithoutUpdate());
paths.Add(p => p.accIncomeExpenses.First().accReusable_PaymentType.WithoutUpdate());
					
					}
                }
#endregion 




                //con.WrappedContext.AttachObjectGraph<accMoneyPlaceAdapter>(adapter, p=>p.accBank, p=>p.accReusableCatalogValue, p=>p.accIncomeExpenses);
                con.WrappedContext.AttachObjectGraph<accMoneyPlaceAdapter>(adapter, paths.ToArray());
              	if (saveChanges){
                    con.WrappedContext.SaveChanges(SaveOptions.AcceptAllChangesAfterSave);
					 
				}
                else
                    con.WrappedContext.SaveChanges(SaveOptions.None);
                if (!saveChanges)
                    context = con.WrappedContext;
                else
                    context = null;
				itemResult = adapter.PocoEntity;
                if (e != null)
                {
                    e.Item = itemResult;
                }
                OnCreated(this, e == null ? e = new BusinessRulesEventArgs<accMoneyPlace>() { ContextRequest = contextRequest, Item = itemResult, PathExpressions = pocopaths, SaveChanges = saveChanges } : e);



                if (e != null)
                {
                    itemResult = e.Item;
                }
                              return itemResult;
            }
        }
        BusinessRulesEventArgs<accMoneyPlace> e = null;
        public void Create(List<accMoneyPlace> entities)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            Create(entities, contextRequest, null);
        }
        public void Create(List<accMoneyPlace> entities, ContextRequest contextRequest)
        
        {
			ObjectContext context = null;
            	foreach (accMoneyPlace entity in entities)
				{
					this.Create(entity, true, contextRequest, out context);
				}
        }
         public accMoneyPlace Update(accMoneyPlace entity)
        {
            if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return Update(entity, contextRequest);
        }
        public accMoneyPlace Update(accMoneyPlace entity, ContextRequest requestContext)
        {
			  ObjectContext context = null;
            return Update(entity, true,requestContext, out context);
         }
		public  accMoneyPlace Update(accMoneyPlace entity, params Expression<Func<accMoneyPlace, object>>[] pocopaths)
        {
			  ObjectContext context = null;
              return Update(entity, true, null, out context, pocopaths);
         }
        public accMoneyPlace Update(accMoneyPlace entity, ContextRequest requestContext, bool saveChanges, out ObjectContext outcontext)
        {
			return Update(entity, saveChanges,requestContext, out outcontext, null);
		}
         public accMoneyPlace Update(accMoneyPlace entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext outcontext, params Expression<Func<accMoneyPlace,object>>[] pocopaths)
        {
		 if ((System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null) && contextRequest == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Update");
            }
            if (contextRequest == null)
            {
                contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            }

			using (EFPocoContext con = new EFPocoContext())
			{
				accMoneyPlace  itemResult = null;

	
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
			if(contextRequest.User != null)
				entity.UpdatedBy = contextRequest.User.GuidUser;

	    var oldentity = GetBy(p => p.GuidMoneyPlace == entity.GuidMoneyPlace, contextRequest).FirstOrDefault();
		if (oldentity != null) {
		
            entity.CreatedDate = oldentity.CreatedDate;
            entity.CreatedBy = oldentity.CreatedBy;
	
            entity.GuidCompany = oldentity.GuidCompany;
	
			

		}

				e = null;
                OnUpdating(this,e = new BusinessRulesEventArgs<accMoneyPlace>() { ContextRequest = contextRequest, Item=entity, PathExpressions = pocopaths, SaveChanges =saveChanges });
				   if (e != null) {
						if (e.Cancel)
						{
							outcontext = null;
							return e.Item;

						}
					}

                accMoneyPlaceAdapter adapter = con.GetAdapterObject<accMoneyPlaceAdapter>(entity);
                adapter.EntityKey = con.WrappedContext.CreateEntityKey("accMoneyPlaces", adapter);
				    var es = con.accMoneyPlaces;
				List<Expression<Func<accMoneyPlaceAdapter, object>>> paths = new List<Expression<Func<accMoneyPlaceAdapter,object>>>();
                /* if (pocopaths != null)
                    if (pocopaths.Length == 0)
                        pocopaths = null;*/

			    if (pocopaths != null && pocopaths.Length > 0)
                {
					// Translate
                    foreach (var pocopath in pocopaths)
                    {
                        var param = Expression.Parameter(typeof(accMoneyPlaceAdapter), "p");
                        var member = MemberExpression.PropertyOrField(param, ((System.Linq.Expressions.MemberExpression)(((System.Linq.Expressions.LambdaExpression)(pocopath)).Body)).Member.Name);
                        Expression<Func<accMoneyPlaceAdapter, object>> path  = null;
                        switch(member.Member.Name){
                        
							case "accIncomeExpenses":
								//path = p => member;
								path = p => p.accIncomeExpenses.First().WithoutUpdate();
				//				path = p => p.accIncomeExpenses.First().accMoneyInOutConcept.WithoutUpdate();											
				//				path = p => p.accIncomeExpenses.First().accProvider.WithoutUpdate();											
				//				path = p => p.accIncomeExpenses.First().accReusableCatalogValue.WithoutUpdate();											
				//				path = p => p.accIncomeExpenses.First().accReusableStatusAuthorization.WithoutUpdate();											
				//				path = p => p.accIncomeExpenses.First().accCompanyArea.WithoutUpdate();											
				//				path = p => p.accIncomeExpenses.First().accParent.WithoutUpdate();											
				//				path = p => p.accIncomeExpenses.First().accReusable_PaymentType.WithoutUpdate();											
							break;
							
							default:
								path = p => member;
							break;
                        }

                        paths.Add(path.Expand());
 					}
                }
                else {
                  paths = new List<Expression<Func<accMoneyPlaceAdapter, object>>>();

					//List<Expression<Func<accMoneyPlaceAdapter,object>>> pathBuilder = new List<Expression<Func<accMoneyPlaceAdapter,object>>>();
					paths.Add(p => p.accBank.WithoutUpdate());

					paths.Add(p => p.accReusableCatalogValue.WithoutUpdate());

		
					//paths = pathBuilder.ToArray();		
			}
			object aux = null;
				if (adapter.accBank != null ){
					if(adapter.accBank.EntityKey == null) adapter.accBank.EntityKey = con.WrappedContext.CreateEntityKey("accBanks", adapter.accBank);
				}

                
				if (adapter.accReusableCatalogValue != null ){
					if(adapter.accReusableCatalogValue.EntityKey == null) adapter.accReusableCatalogValue.EntityKey = con.WrappedContext.CreateEntityKey("accReusableCatalogValues", adapter.accReusableCatalogValue);
				}

                
				if (adapter.accIncomeExpenses != null)
                {
                    foreach (var item in adapter.accIncomeExpenses)
                    {


                        if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accIncomeExpenses", item);
						if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)) item.EntityKey = null;
                        
                    }
					
                    if (adapter.accIncomeExpenses.Count > 0)
                    {
                        paths.Add(p => p.accIncomeExpenses.First().WithoutUpdate());

                    }

                }



                //con.AttachObjectGraph<accMoneyPlace>(adapter, p=>p.accBank, p=>p.accReusableCatalogValue, p=>p.accIncomeExpenses);
                con.WrappedContext.AttachObjectGraph<accMoneyPlaceAdapter>(adapter, paths.ToArray());
				if (saveChanges){
                	con.WrappedContext.SaveChanges();
					 
					}
                if(!saveChanges)
					outcontext = con.WrappedContext;
				else
					outcontext = null;
				itemResult = adapter.PocoEntity;
				OnUpdated(this, e = new BusinessRulesEventArgs<accMoneyPlace>() { ContextRequest = contextRequest, Item=itemResult, PathExpressions = pocopaths, SaveChanges =saveChanges });

              	return itemResult;

			  }
        }
        public accMoneyPlace Save(accMoneyPlace entity)
        {
			return Save(entity, true, null);
        }
        public int Save(List<accMoneyPlace> entities)
        {
			using (EFPocoContext con = new EFPocoContext())
			{
			
            int n = 0;
            foreach (accMoneyPlace item in entities)
            {
                try
                {
                    this.Save(item, false, con);
                    n++;
                }catch (Exception ex){
                    SFSdotNet.Framework.My.EventLog.Exception(ex);
                }
            }
            con.SaveChanges();
            return n;
            }
        }
        #endregion
        #region Delete
        public void Delete(accMoneyPlace entity)
        {
				this.Delete(entity, null);
			
        }
		 public void Delete(accMoneyPlace entity, ContextRequest contextRequest)
        {
				ObjectContext context = null;
				this.Delete(entity, true, out context, contextRequest);
			
        }

        
        public void Delete(accMoneyPlace entity, bool saveChanges, out  ObjectContext context, ContextRequest contextRequest, BusinessRulesEventArgs<accMoneyPlace> e = null)
        {
			using (EFPocoContext _con = new EFPocoContext())
			{
				int result = 0;
				
               	BusinessRulesEventArgs<accMoneyPlace> _e = null;
               List<accMoneyPlace> _items = new List<accMoneyPlace>();
                _items.Add(entity);
                if (e == null || e.PreventPartialPropagate == false)
                {
                    OnDeleting(this, _e = (e == null ? new BusinessRulesEventArgs<accMoneyPlace>() { ContextRequest = contextRequest, Item = entity, Items = _items, SaveChanges = saveChanges } : e));
                }
                if (_e != null)
                {
                    if (_e.Cancel)
						{
							context = null;
							return;

						}
					}


				accMoneyPlaceAdapter adapter = _con.GetAdapterObject<accMoneyPlaceAdapter>(entity);
                adapter.EntityKey = _con.WrappedContext.CreateEntityKey("accMoneyPlaces", adapter);
                
	            //adapter = _con.WrappedContext.AttachObjectGraph<accMoneyPlaceAdapter>(adapter);
				try{
					_con.WrappedContext.AttachTo("accMoneyPlaces", adapter);
                }catch{
					
				}
									//IsDeleted
					bool logicDelete = true;
					if (adapter.IsDeleted != null)
					{
						if (adapter.IsDeleted.Value)
							logicDelete = false;
					}
					if (logicDelete)
					{
											entity = GetBy(p => p.GuidMoneyPlace == entity.GuidMoneyPlace, contextRequest).FirstOrDefault();
						entity.IsDeleted = true;
						Update(entity, contextRequest);
					}
					else {
						_con.WrappedContext.DeleteObject(adapter);
					}
								
				if (!saveChanges)
                    context = _con.WrappedContext;
                else
                    context = null;
				 SaveOptions saveOption = SaveOptions.None;
                if (saveChanges)
                    saveOption = SaveOptions.AcceptAllChangesAfterSave;

				result = _con.WrappedContext.SaveChanges(saveOption);
				if (saveChanges){
					
					}
			if (e == null || e.PreventPartialPropagate == false)
                {

                    if (_e == null)
                        _e = new BusinessRulesEventArgs<accMoneyPlace>() { ContextRequest = contextRequest, Item = entity, Items = _items };

                    OnDeleted(this, _e);
                }

				//return null;
			}            
        }
        public void Delete(List<accMoneyPlace> entities,  ContextRequest contextRequest = null )
        {
				ObjectContext context = null;
			 BusinessRulesEventArgs<accMoneyPlace> _e = null;

                OnDeleting(this, _e = new BusinessRulesEventArgs<accMoneyPlace>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities });
                if (_e != null)
                {
                    if (_e.Cancel)
                    {
                        context = null;
                        return;

                    }
                }
                bool allSucced = true;
                BusinessRulesEventArgs<accMoneyPlace> eToChilds = new BusinessRulesEventArgs<accMoneyPlace>();
                if (_e != null)
                {
                    eToChilds = _e;
                }
                else
                {
                    eToChilds = new BusinessRulesEventArgs<accMoneyPlace>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                }
				foreach (accMoneyPlace item in entities)
				{
					try
                    {
                        this.Delete(item, true, out context, contextRequest, e: eToChilds);
                    }
                    catch (Exception ex)
                    {
                        SFSdotNet.Framework.My.EventLog.Error(ex);
                        allSucced = false;
                    }
				}
				if (_e == null)
                    _e = new BusinessRulesEventArgs<accMoneyPlace>() { ContextRequest = contextRequest, CountResult = entities.Count, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                OnDeleted(this, _e);

			
        }
        #endregion
 
        #region GetCount
		 public int GetCount(Expression<Func<accMoneyPlace, bool>> predicate)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

			return GetCount(predicate, contextRequest);
		}
        public int GetCount(Expression<Func<accMoneyPlace, bool>> predicate, ContextRequest contextRequest)
        {


		
			using (EFPocoContext con = new EFPocoContext())
			{


				if (predicate == null) predicate = PredicateBuilder.True<accMoneyPlace>();
           		predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted == null);
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    		if (contextRequest.User !=null )
                        		if (contextRequest.Company != null )
                        			predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				
				return con.accMoneyPlaces.Count(predicate);
			}

        }
		  public int GetCount(string predicate,  ContextRequest contextRequest)
         {
             return GetCount(predicate, null, contextRequest);
         }

         public int GetCount(string predicate)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return GetCount(predicate, contextRequest);
        }
		 public int GetCount(string predicate, string usemode){
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
				return GetCount( predicate,  usemode,  contextRequest);
		 }
        public int GetCount(string predicate, string usemode, ContextRequest contextRequest){
			  string freetext = null;
            Filter filter = new Filter();

              if (predicate.Contains("|"))
              {
                 
                  filter.SetFilterPart("ft", GetSpecificFilter(predicate));
                 
                  filter.ProcessText(predicate.Split(char.Parse("|"))[0]);
                  freetext = predicate.Split(char.Parse("|"))[1];
              }
              else {
                  filter.ProcessText(predicate);
              }
           
			e = null;
			contextRequest.FreeText = freetext;
			contextRequest.UseMode = usemode;
            OnCounting(this, e = new BusinessRulesEventArgs<accMoneyPlace>() {  Filter =filter, ContextRequest = contextRequest });
            if (e != null)
            {
                if (e.Cancel)
                {
                    context = null;
                    return e.CountResult;

                }

            

            }
			 predicate = filter.GetFilterComplete();
			StringBuilder sbQuerySystem = new StringBuilder();
		
					
                    filter.SetFilterPart("de","(IsDeleted != true OR IsDeleted == null)");
			
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    	if (contextRequest.User !=null )
                        	if (contextRequest.Company != null ){
                        		

								filter.SetFilterPart("co", @"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
						
						
							}
							
							}
							if (preventSecurityRestrictions) preventSecurityRestrictions= false;
			using (EFContext con = new EFContext())
			{
				   
                 filter.CleanAndProcess("");
				//string predicateWithFKAndComputed = SFSdotNet.Framework.Linq.Utils.ExtractSpecificProperties("", ref predicate );               
				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed();
               string predicateWithManyRelations = filter.GetFilterChildren();
			   ///QueryUtils.BreakeQuery1(predicate, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
			   predicate = filter.GetFilterComplete();
               if (!string.IsNullOrEmpty(predicate))
               {
				
					
                    return con.accMoneyPlaces.Count(System.Linq.Dynamic.DynamicExpression.ParseLambda<accMoneyPlace, bool>(predicate));
					
                }else
                    return con.accMoneyPlaces.Count();

			}

		}
         public int GetCount()
        {
            return GetCount(p => true);
        }
        #endregion
        
         public accMoneyPlace Update(accMoneyPlace entity, string paths)
        {
            return Update(entity, paths.Split(char.Parse(",")));
            
        }

        public accMoneyPlace Update(accMoneyPlace entity, string[] paths)
        {
            // Translate
            List<Expression<Func<accMoneyPlace, object>>> pathList = new List<Expression<Func<accMoneyPlace, object>>>();
            for (int i = 0; i <= paths.Length -1; i++)
            {
                var param = Expression.Parameter(typeof(accMoneyPlace), "p");
                var member = MemberExpression.PropertyOrField(param, paths[i]);

                Expression<Func<accMoneyPlace, object>> path = p => member;
                pathList.Add(path.Expand());
            }
			ObjectContext context = null;
			 return Update(entity, true,null, out context,  pathList.ToArray());
           //return Update(entity, pathList.ToArray());
        }

        public void Update(List<accMoneyPlace> entities, string paths)
        {
            foreach (var entity in entities )
            {
                Update(entity, paths);
            }
        }
		public accMoneyPlace Create(accMoneyPlace entity, ContextRequest contextRequest, string paths)
        {
          

            if (string.IsNullOrEmpty(paths))
                return Create(entity, contextRequest);

            return Create(entity, contextRequest, paths.Split(char.Parse(",")));
        }
        public accMoneyPlace Create(accMoneyPlace entity, string paths)
        {
			 if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return Create(entity, contextRequest, paths);

        }

        public  void Create(List<accMoneyPlace> entities, ContextRequest requestContext, string paths)
        {
            foreach (var entity in entities)
            {
                Create(entity,requestContext, paths);
            }
        }

        public void Create(List<accMoneyPlace> entities, string[] paths)
        {
            foreach (var entity in entities)
            {
                Create(entity, null, paths);
            }
        }
        
        public accMoneyPlace  Create(accMoneyPlace entity, ContextRequest contextRequest, string[] paths)
        {
            List<Expression<Func<accMoneyPlace, object>>> pathList = new List<Expression<Func<accMoneyPlace, object>>>();
            for (int i = 0; i < paths.Length - 1; i++)
            {
                var param = Expression.Parameter(typeof(accMoneyPlace), "p");
                var member = MemberExpression.PropertyOrField(param, paths[i]);

                Expression<Func<accMoneyPlace, object>> path = p => member;
                pathList.Add(path.Expand());
            }
            return Create(entity, contextRequest, pathList.ToArray());
        }
        public void Delete(List<accMoneyPlace.CompositeKey> entityKeys)
        {

            List<accMoneyPlace> items = new List<accMoneyPlace>();
            foreach (var itemKey in entityKeys)
            {
                items.Add(GetByKey(itemKey.GuidMoneyPlace));
            }

            Delete(items);

        }
		
		
	}
		public partial class accProvidersBR{
	 	
           
		 #region Partial methods

           partial void OnUpdating(object sender, BusinessRulesEventArgs<accProvider> e);

            partial void OnUpdated(object sender, BusinessRulesEventArgs<accProvider> e);

            partial void OnCreating(object sender, BusinessRulesEventArgs<accProvider> e);
            partial void OnCreated(object sender, BusinessRulesEventArgs<accProvider> e);

            partial void OnDeleting(object sender, BusinessRulesEventArgs<accProvider> e);
            partial void OnDeleted(object sender, BusinessRulesEventArgs<accProvider> e);

            partial void OnGetting(object sender, BusinessRulesEventArgs<accProvider> e);
            partial void OnTaken(object sender, BusinessRulesEventArgs<accProvider> e);
            partial void OnCounting(object sender, BusinessRulesEventArgs<accProvider> e);
 
 
            #endregion
			
		private static accProvidersBR singlenton =null;
				public static accProvidersBR NewInstance(){
					return  new accProvidersBR();
					
				}
		public static accProvidersBR Instance{
			get{
				if (singlenton == null)
					singlenton = new accProvidersBR();
				return singlenton;
			}
		}
		private bool preventSecurityRestrictions = false;
		 public bool PreventAuditTrail { get; set;  }
		#region Fields
        EFPocoContext context = null;
        #endregion
        #region Constructor
        public accProvidersBR()
        {
            context = new EFPocoContext();
        }
		 public accProvidersBR(bool preventSecurity)
            {
                this.preventSecurityRestrictions = preventSecurity;
				context = new EFPocoContext();
            }
        #endregion
		
		#region Get

 		public IQueryable<accProvider> Get()
        {
            //using (EFContext con = new EFContext())
            //{
				EFContext con = new EFContext();
                var query = con.accProviders.AsQueryable();
                con.ContextOptions.ProxyCreationEnabled = false;

                //query = ContextQueryBuilder<Nutrient>.ApplyContextQuery(query, contextRequest);

                return query;




            //}

        }
		
		public List<accProvider> GetAll()
        {
            return this.GetBy(p => true);
        }
        public List<accProvider> GetAll(string includes)
        {
            return this.GetBy(p => true, includes);
        }
        public accProvider GetByKey(Guid guidProvider)
        {
            return GetByKey(guidProvider, true);
        }
        public accProvider GetByKey(Guid guidProvider, bool loadIncludes)
        {
            accProvider item = null;
			var query = PredicateBuilder.True<accProvider>();
                    
			string strWhere = @"GuidProvider = Guid(""" + guidProvider.ToString()+@""")";
            Expression<Func<accProvider, bool>> predicate = null;
            if (!string.IsNullOrEmpty(strWhere))
                predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<accProvider, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
			 ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();
            contextRequest.CustomQuery.FilterExpressionString = strWhere;

			//item = GetBy(predicate, loadIncludes, contextRequest).FirstOrDefault();
			item = GetBy(strWhere,loadIncludes,contextRequest).FirstOrDefault();
            return item;
        }
         public List<accProvider> GetBy(string strWhere, bool loadRelations, ContextRequest contextRequest)
        {
            if (!loadRelations)
                return GetBy(strWhere, contextRequest);
            else
                return GetBy(strWhere, contextRequest, "");

        }
		  public List<accProvider> GetBy(string strWhere, bool loadRelations)
        {
              if (!loadRelations)
                return GetBy(strWhere, new ContextRequest());
            else
                return GetBy(strWhere, new ContextRequest(), "");

        }
         public accProvider GetByKey(Guid guidProvider, params Expression<Func<accProvider, object>>[] includes)
        {
            accProvider item = null;
			string strWhere = @"GuidProvider = Guid(""" + guidProvider.ToString()+@""")";
          Expression<Func<accProvider, bool>> predicate = null;
            if (!string.IsNullOrEmpty(strWhere))
                predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<accProvider, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
        item = GetBy(predicate, includes).FirstOrDefault();
         ////   item = GetBy(strWhere,includes).FirstOrDefault();
			return item;

        }
        public accProvider GetByKey(Guid guidProvider, string includes)
        {
            accProvider item = null;
			string strWhere = @"GuidProvider = Guid(""" + guidProvider.ToString()+@""")";
            
			
            item = GetBy(strWhere, includes).FirstOrDefault();
            return item;

        }
		 public accProvider GetByKey(Guid guidProvider, string usemode, string includes)
		{
			return GetByKey(guidProvider, usemode, null, includes);

		 }
		 public accProvider GetByKey(Guid guidProvider, string usemode, ContextRequest context,  string includes)
        {
            accProvider item = null;
			string strWhere = @"GuidProvider = Guid(""" + guidProvider.ToString()+@""")";
			if (context == null)
				context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
			context.CustomQuery.IsByKey = true;
            context.CustomQuery.FilterExpressionString = strWhere;
            context.UseMode = usemode;
            item = GetBy(strWhere,context , includes).FirstOrDefault();
            return item;

        }

        #region Dynamic Predicate
        public List<accProvider> GetBy(Expression<Func<accProvider, bool>> predicate, int? pageSize, int? page)
        {
            return this.GetBy(predicate, pageSize, page, null, null);
        }
        public List<accProvider> GetBy(Expression<Func<accProvider, bool>> predicate, ContextRequest contextRequest)
        {

            return GetBy(predicate, contextRequest,"");
        }
        
        public List<accProvider> GetBy(Expression<Func<accProvider, bool>> predicate, ContextRequest contextRequest, params Expression<Func<accProvider, object>>[] includes)
        {
            StringBuilder sb = new StringBuilder();
           if (includes != null)
            {
                foreach (var path in includes)
                {

						if (sb.Length > 0) sb.Append(",");
						sb.Append(SFSdotNet.Framework.Linq.Utils.IncludeToString<accProvider>(path));

               }
            }
            return GetBy(predicate, contextRequest, sb.ToString());
        }
        
        
        public List<accProvider> GetBy(Expression<Func<accProvider, bool>> predicate, string includes)
        {
			ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";

            return GetBy(predicate, context, includes);
        }

        public List<accProvider> GetBy(Expression<Func<accProvider, bool>> predicate, params Expression<Func<accProvider, object>>[] includes)
        {
			if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }
			ContextRequest context = new ContextRequest();
			            context.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            context.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";
            return GetBy(predicate, context, includes);
        }

      
		public bool DisableCache { get; set; }
		 public List<accProvider> GetBy(Expression<Func<accProvider, bool>> predicate, ContextRequest contextRequest, string includes)
        {
            using (EFPocoContext con = new EFPocoContext())
            {
				if (DisableCache) 
                	con.CachingPolicy = EFCachingProvider.Caching.CachingPolicy.NoCaching;

				List<accProvider> result = null;
                 e = null;
	
				OnGetting(con, e = new BusinessRulesEventArgs<accProvider>() {  FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null) });

               // OnGetting(con,e = new BusinessRulesEventArgs<accProvider>() { FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = contextRequest.CustomQuery.FilterExpressionString});
				   if (e != null) {
				    predicate = e.FilterExpression;
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				con.EnableChangeTrackingUsingProxies = false;
				con.WrappedContext.accProviders.MergeOption = MergeOption.NoTracking;
                con.WrappedContext.ContextOptions.ProxyCreationEnabled = false;
                if (predicate == null) predicate = PredicateBuilder.True<accProvider>();
                
                var es = con.accProviders;

                IQueryable<accProvider> query = es.AsQueryable();

                                if (!string.IsNullOrEmpty(includes))
                {
                    foreach (string include in includes.Split(char.Parse(",")))
                    {
						if (!string.IsNullOrEmpty(include))
                            query = query.Include(include);
                    }
                }
                    predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
					 	if (!preventSecurityRestrictions)
						{
							if (contextRequest != null )
		                    	if (contextRequest.User !=null )
		                        	if (contextRequest.Company != null)
		                        		predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				query =query.Where(predicate);
                query = ContextQueryBuilder<accProvider>.ApplyContextQuery(query, contextRequest);

                result = query.ToList<accProvider>();
				  
                if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e =  new BusinessRulesEventArgs<accProvider>() { Items= result, IncludingComputedLinq = false, ContextRequest = contextRequest,  FilterExpression = predicate } :  e);
  
			

                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
            }
        }
		public void UpdateAgile(accProvider item, params string[] fields)
         {
             List<accProvider> list = new List<accProvider>();
             list.Add(item);
             this.UpdateBulk(list, fields);
         }
		public void UpdateBulk(List<accProvider>  items, params string[] fields)
         {
             SFSdotNet.Framework.My.ContextRequest req = new SFSdotNet.Framework.My.ContextRequest();
             req.CustomQuery = new SFSdotNet.Framework.My.CustomQuery();
             foreach (var field in fields)
             {
                 req.CustomQuery.SpecificProperties.Add(field);
             }
             UpdateBulk(items, req);

         }
        public void UpdateBulk(List<accProvider> items, ContextRequest req)
        {
            using (EFContext con = new EFContext())
            {



                foreach (var item in items)
                {
                    var setT = con.CreateObjectSet<accProvider>("accProviders");


                    var itemForAttach = new accProvider();
			itemForAttach.GuidProvider = item.GuidProvider;
					
                    itemForAttach = SFSdotNet.Framework.Entities.ConvertEntity.SetProperties<accProvider>(item, itemForAttach, null, req.CustomQuery.SpecificProperties.ToArray());
                    setT.Attach(itemForAttach);


                    foreach (var property in req.CustomQuery.SpecificProperties)
                    {
						
                        if (property != "GuidProvider")
                            con.ObjectStateManager.GetObjectStateEntry(itemForAttach).SetModifiedProperty(property);

                    }

                }
                con.SaveChanges();


            }
        }
		/*public int Update(List<accProvider> items, ContextRequest contextRequest)
            {
                int result = 0;
                using (EFContext con = new EFContext())
                {
                   
                

                    foreach (var item in items)
                    {
                        //secMessageToUser messageToUser = new secMessageToUser();
                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            item.GetType().GetProperty(prop).SetValue(item, item.GetType().GetProperty(prop).GetValue(item));
                        }
                        //messageToUser.GuidMessageToUser = (Guid)item.GetType().GetProperty("GuidMessageToUser").GetValue(item);

                        var setObject = con.CreateObjectSet<accProvider>("accProviders");
                        //messageToUser.Readed = DateTime.UtcNow;
                        setObject.Attach(item);
                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            con.ObjectStateManager.GetObjectStateEntry(item).SetModifiedProperty(prop);
                        }
                       
                    }
                    result = con.SaveChanges();

                    


                }
                return result;
            }
           */
        public List<accProvider> GetBy(string predicateString, ContextRequest contextRequest, string includes)
        {
            using (EFContext con = new EFContext())
            {
				if (DisableCache) 
                	con.CachingPolicy = EFCachingProvider.Caching.CachingPolicy.NoCaching;

				Filter filter = new Filter();
                if (predicateString.Contains("|"))
                {
                    string ft = GetSpecificFilter(predicateString);
                    if (!string.IsNullOrEmpty(ft))
                        filter.SetFilterPart("ft", ft);
                   
                    contextRequest.FreeText = predicateString.Split(char.Parse("|"))[1];
                    var q1 = predicateString.Split(char.Parse("|"))[0];
                    if (!string.IsNullOrEmpty(q1))
                    {
                        filter.ProcessText(q1);
                    }
                }
                else {
                    filter.ProcessText(predicateString);
                }

				List<accProvider> result = null;
                 e = null;
					OnGetting(con, e = new BusinessRulesEventArgs<accProvider>() { Filter = filter, ContextRequest = contextRequest /*, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null)*/ });

                  //OnGetting(con,e = new BusinessRulesEventArgs<accProvider>() {  ContextRequest = contextRequest, FilterExpressionString = predicateString });
			   	if (e != null) {
				    //predicateString = e.GetQueryString();
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				//	 else {
                //      predicateString = predicateString.Replace("*extraFreeText*", "").Replace("()","");
                //  }
				//con.EnableChangeTrackingUsingProxies = false;
				con.accProviders.MergeOption = MergeOption.NoTracking;
                con.ContextOptions.ProxyCreationEnabled = false;
                //if (predicate == null) predicate = PredicateBuilder.True<accProvider>();
                
                var es = con.accProviders;
				IQueryable<accProvider> query = es.AsQueryable();
		
				// include relations FK
				if(string.IsNullOrEmpty(includes) ){
					includes ="";
				}
				StringBuilder sbQuerySystem = new StringBuilder();
                    //predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				

				//if (!string.IsNullOrEmpty(predicateString))
                //      sbQuerySystem.Append(" And ");
                //sbQuerySystem.Append(" (IsDeleted != true Or IsDeleted = null) ");
				 filter.SetFilterPart("de", "(IsDeleted != true OR IsDeleted = null)");


					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
	                    	if (contextRequest.User !=null )
	                        	if (contextRequest.Company != null ){
	                        		//if (sbQuerySystem.Length > 0)
	                        		//	    			sbQuerySystem.Append( " And ");	
									//sbQuerySystem.Append(@" (GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
									filter.SetFilterPart("co",@"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @"""))");
								}
						}	
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				//string predicateString = predicate.ToDynamicLinq<accProvider>();
				//predicateString += sbQuerySystem.ToString();
				filter.CleanAndProcess("");

				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed(); //SFSdotNet.Framework.Linq.Utils.ExtractSpecificProperties("", ref predicateString );               
                string predicateWithManyRelations = filter.GetFilterChildren(); //SFSdotNet.Framework.Linq.Utils.CleanPartExpression(predicateString);

                //QueryUtils.BreakeQuery1(predicateString, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
                var _queryable = query.AsQueryable();
                if (!string.IsNullOrEmpty(predicateWithManyRelations))
                    _queryable = _queryable.Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams);
				if (contextRequest.CustomQuery.SpecificProperties.Count > 0)
                {

                    StringBuilder sbProps = new StringBuilder();
                    contextRequest.CustomQuery.SpecificProperties.Add("GuidProvider");
                    
					foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                    {
						if(sbProps.Length > 0)
							sbProps.Append(",");
                        sbProps.Append(prop);
                    }
					    IQueryable  queryableSelective = null ;
					  
					  if (!string.IsNullOrEmpty(predicateWithManyRelations))
							queryableSelective = con.accProviders.AsQueryable().Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams).Select(string.Format("new({0})", sbProps.ToString()));
					else
						queryableSelective = con.accProviders.AsQueryable().Select(string.Format("new({0})", sbProps.ToString()));


                    //if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
					//	queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

                    QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
                    
					if (!string.IsNullOrEmpty(queryOps.OrderByAndSort))
                        queryableSelective = queryableSelective.OrderBy(queryOps.OrderByAndSort);
                    if (queryOps.Skip != null)
                    {
                        queryableSelective = queryableSelective.Skip(queryOps.Skip.Value);
                    }
                    if (queryOps.PageSize != null)
                    {
                        queryableSelective = queryableSelective.Take(queryOps.PageSize.Value);
                    }
                    //var results = queryableSelective.ToList();
                    result = new List<accProvider>();
                    accProvider itemDef = null;
                    foreach (var item in queryableSelective)
                    {
                        itemDef = new accProvider();

                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            if (!prop.Contains("."))
                            {
                                itemDef.GetType().GetProperty(prop).SetValue(itemDef, item.GetType().GetProperty(prop).GetValue(item));
                            }
                            else {
                                throw new Exception("La seleccion de relaciones aún no esta soportada");
                            }

                        }

                        result.Add(itemDef);
                    }

                }
                else
                {
				var  queryable = _queryable.Select(                    
				p => 
                        new
                    {
					GuidProvider = p.GuidProvider
,Name = p.Name
,LegalName = p.LegalName
,LegalCode = p.LegalCode
,Address = p.Address
,GuidCity = p.GuidCity
,GuidState = p.GuidState
,GuidCountry = p.GuidCountry
,CreatedDate = p.CreatedDate
,UpdatedDate = p.UpdatedDate
,CreatedBy = p.CreatedBy
,UpdatedBy = p.UpdatedBy
,IsDeleted = p.IsDeleted
,GuidCompany = p.GuidCompany

,

	
                    }
                    
                    );
					
				
                 if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
                    queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

				QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
            	if (!string.IsNullOrEmpty(queryOps.OrderByAndSort))
					queryable = queryable.OrderBy(queryOps.OrderByAndSort);
               	if (queryOps.Skip != null)
                {
                    queryable = queryable.Skip(queryOps.Skip.Value);
                }
                if (queryOps.PageSize != null)
                {
                    queryable = queryable.Take (queryOps.PageSize.Value);
                }
                result = queryable.AsEnumerable().
                    Select(
                    p =>  new accProvider()
                    {
					GuidProvider = p.GuidProvider
,Name = p.Name
,LegalName = p.LegalName
,LegalCode = p.LegalCode
,Address = p.Address
,GuidCity = p.GuidCity
,GuidState = p.GuidState
,GuidCountry = p.GuidCountry
,CreatedDate = p.CreatedDate
,UpdatedDate = p.UpdatedDate
,CreatedBy = p.CreatedBy
,UpdatedBy = p.UpdatedBy
,IsDeleted = p.IsDeleted
,GuidCompany = p.GuidCompany

                    }
                     ).ToList();
				}


			 if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e = new BusinessRulesEventArgs<accProvider>() { Items= result, IncludingComputedLinq = true, ContextRequest = contextRequest, FilterExpressionString  = predicateString } :  e);
  
			
  
                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
            }
        }
		public List<accProvider> GetBy(Expression<Func<accProvider, bool>> predicate, bool loadRelations, ContextRequest contextRequest)
        {
			if(!loadRelations)
				return GetBy(predicate, contextRequest);
			else
				return GetBy(predicate, contextRequest, "accIncomeExpenses");

        }

        public List<accProvider> GetBy(Expression<Func<accProvider, bool>> predicate, int? pageSize, int? page, string orderBy, SFSdotNet.Framework.Data.SortDirection? sortDirection)
        {
            return GetBy(predicate, new ContextRequest() { CustomQuery = new CustomQuery() { Page = page, PageSize = pageSize, OrderBy = orderBy, SortDirection = sortDirection } });
        }
        public List<accProvider> GetBy(Expression<Func<accProvider, bool>> predicate)
        {

			if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }
			ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();

			contextRequest.CurrentContext = SFSdotNet.Framework.My.Context.CurrentContext;
			            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

            contextRequest.CustomQuery.FilterExpressionString = null;
            return this.GetBy(predicate, contextRequest, "");
        }
        #endregion
        #region Dynamic String
		private string GetSpecificFilter(string filter) {
            string result = "";
		    //string linqFilter = String.Empty;
            string freeTextFilter = String.Empty;
            if (filter.Contains("|"))
            {
               // linqFilter = filter.Split(char.Parse("|"))[0];
                freeTextFilter = filter.Split(char.Parse("|"))[1];
            }
            //else {
            //    freeTextFilter = filter;
            //}
            //else {
            //    linqFilter = filter;
            //}
			// linqFilter = SFSdotNet.Framework.Linq.Utils.ReplaceCustomDateFilters(linqFilter);
            //string specificFilter = linqFilter;
            if (!string.IsNullOrEmpty(freeTextFilter))
            {
                System.Text.StringBuilder sbCont = new System.Text.StringBuilder();
                /*if (specificFilter.Length > 0)
                {
                    sbCont.Append(" AND ");
                    sbCont.Append(" ({0})");
                }
                else
                {
                    sbCont.Append("{0}");
                }*/
                //var words = freeTextFilter.Split(char.Parse(" "));
				var word = freeTextFilter;
                System.Text.StringBuilder sbSpec = new System.Text.StringBuilder();
                 int nWords = 1;
				/*foreach (var word in words)
                {
					if (word.Length > 0){
                    if (sbSpec.Length > 0) sbSpec.Append(" AND ");
					if (words.Length > 1) sbSpec.Append("("); */
					
	
					
											
					sbSpec.Append(string.Format(@"Name.Contains(""{0}"")", word));

					
											sbSpec.Append(" OR ");
										
					sbSpec.Append(string.Format(@"LegalName.Contains(""{0}"")", word));

					
											sbSpec.Append(" OR ");
										
					sbSpec.Append(string.Format(@"LegalCode.Contains(""{0}"")", word));

					
											sbSpec.Append(" OR ");
										
					sbSpec.Append(string.Format(@"Address.Contains(""{0}"")", word));

					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
								 //sbSpec.Append("*extraFreeText*");

                    /*if (words.Length > 1) sbSpec.Append(")");
					
					nWords++;

					}

                }*/
                //specificFilter = string.Format("{0}{1}", specificFilter, string.Format(sbCont.ToString(), sbSpec.ToString()));
                                 result = sbSpec.ToString();  
            }
			//result = specificFilter;
			
			return result;

		}
	
			public List<accProvider> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  params object[] extraParams)
        {
			return GetBy(filter, pageSize, page, orderBy, orderDir,  null, extraParams);
		}
           public List<accProvider> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir, string usemode, params object[] extraParams)
            { 
                return GetBy(filter, pageSize, page, orderBy, orderDir, usemode, null, extraParams);
            }


		public List<accProvider> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  string usemode, ContextRequest context, params object[] extraParams)

        {

            // string freetext = null;
            //if (filter.Contains("|"))
            //{
            //    int parts = filter.Split(char.Parse("|")).Count();
            //    if (parts > 1)
            //    {

            //        freetext = filter.Split(char.Parse("|"))[1];
            //    }
            //}
		
            //string specificFilter = "";
            //if (!string.IsNullOrEmpty(filter))
            //  specificFilter=  GetSpecificFilter(filter);
            if (string.IsNullOrEmpty(orderBy))
            {
			                orderBy = "UpdatedDate";
            }
			//orderDir = "desc";
			SFSdotNet.Framework.Data.SortDirection direction = SFSdotNet.Framework.Data.SortDirection.Ascending;
            if (!string.IsNullOrEmpty(orderDir))
            {
                if (orderDir == "desc")
                    direction = SFSdotNet.Framework.Data.SortDirection.Descending;
            }
            if (context == null)
                context = new ContextRequest();
			else
                context.CustomQuery = new CustomQuery();
             //context.FreeText = freetext;
             context.UseMode = usemode;
             context.CustomQuery =new SFSdotNet.Framework.My.CustomQuery()
 
                {
                    ExtraParams = extraParams,

                    OrderBy = orderBy,
                    SortDirection = direction,
                    Page = page,
                    PageSize = pageSize
               };
            

            if (!preventSecurityRestrictions) {
			 if (context.CurrentContext == null)
                {
					if (SFSdotNet.Framework.My.Context.CurrentContext != null &&  SFSdotNet.Framework.My.Context.CurrentContext.Company != null && SFSdotNet.Framework.My.Context.CurrentContext.User != null)
					{
						context.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
						context.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

					}
					else {
						throw new Exception("The security rule require a specific user and company");
					}
				}
            }
            return GetBy(filter, context);
  
        }


        public List<accProvider> GetBy(string strWhere, ContextRequest contextRequest)
        {
        	#region old code
				
				 //Expression<Func<tvsReservationTransport, bool>> predicate = null;
				string strWhereClean = strWhere.Replace("*extraFreeText*", "").Replace("()", "");
                //if (!string.IsNullOrEmpty(strWhereClean)){

                //    object[] extraParams = null;
                //    //if (contextRequest != null )
                //    //    if (contextRequest.CustomQuery != null )
                //    //        extraParams = contextRequest.CustomQuery.ExtraParams;
                //    //predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<tvsReservationTransport, bool>(strWhereClean, extraParams != null? extraParams.Cast<Guid>(): null);				
                //}
				 if (contextRequest == null)
                {
                    contextRequest = new ContextRequest();
                    if (contextRequest.CustomQuery == null)
                        contextRequest.CustomQuery = new CustomQuery();
                }
                  if (!preventSecurityRestrictions) {
					if (contextRequest.User == null || contextRequest.Company == null)
                      {
                     if (SFSdotNet.Framework.My.Context.CurrentContext.Company != null && SFSdotNet.Framework.My.Context.CurrentContext.User != null)
                     {
                         contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                         contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

                     }
                     else {
                         throw new Exception("The security rule require a specific User and Company ");
                     }
					 }
                 }
            contextRequest.CustomQuery.FilterExpressionString = strWhere;
				//return GetBy(predicate, contextRequest);  

			#endregion				
				
                    return GetBy(strWhere, contextRequest, "");  


        }
       public List<accProvider> GetBy(string strWhere)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
			
            return GetBy(strWhere, context, null);
        }

        public List<accProvider> GetBy(string strWhere, string includes)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
            return GetBy(strWhere, context, includes);
        }

        #endregion
        #endregion
		
		  #region SaveOrUpdate
        private accProvider Save(accProvider entity, bool saveChanges, EFPocoContext con)
        {
				ObjectContext context = null;
            return Update(entity, saveChanges,null, out context);

			
        }
		 public  accProvider Create( accProvider entity, params Expression<Func< accProvider, object>>[] paths)
         {
             return Create(entity, null, paths);

         }
 		 public accProvider Create(accProvider entity)
        {
				ObjectContext context = null;
				    if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: Create");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

				return this.Create(entity, true, contextRequest, out context);


        }
        public accProvider Create(accProvider entity, ContextRequest contextRequest)
         {
             ObjectContext context = null;
             return this.Create(entity, true, contextRequest,out context);

         }
         public accProvider Create(accProvider entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext context)
        {
                    return Create(entity, saveChanges , contextRequest , out context, null);
        }
         public accProvider Create(accProvider entity, ContextRequest contextRequest, params Expression<Func<accProvider,object>>[] paths)
        {
            ObjectContext context = null;
            if(paths != null)
				return Create(entity, true,contextRequest, out context, paths);
			else 
				return Create(entity, true,contextRequest, out context);
        }
        public accProvider Create(accProvider entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext context, params Expression<Func<accProvider,object>>[] pocopaths)
        {
			using (EFPocoContext con = new EFPocoContext())
			{
				accProvider itemResult = null;
#region Autos


			entity.CreatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.CreatedBy = contextRequest.User.GuidUser;
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.UpdatedBy = contextRequest.User.GuidUser;
	
			if (contextRequest != null)
				if(contextRequest.User != null)
					if (contextRequest.Company != null)
						entity.GuidCompany = contextRequest.Company.GuidCompany;
	

#endregion
                e = null;
                OnCreating(this,e = new BusinessRulesEventArgs<accProvider>() { ContextRequest = contextRequest, Item=entity, PathExpressions = pocopaths, SaveChanges =saveChanges });
				   if (e != null) {
						if (e.Cancel)
						{
							context = null;
							return e.Item;

						}
					}

                    if (entity.GuidProvider == Guid.Empty)
                   {
                       entity.GuidProvider = Guid.NewGuid();

                   }



				accProviderAdapter adapter = con.GetAdapterObject<accProviderAdapter>(entity);;
				List<Expression<Func<accProviderAdapter, object>>> paths = new List<Expression<Func<accProviderAdapter,object>>>();
                
			    if (pocopaths != null && pocopaths.Length > 0)
                {
					// Translate
                    foreach (var pocopath in pocopaths)
                    {
                        var param = Expression.Parameter(typeof(accProviderAdapter), "p");
                        var member = MemberExpression.PropertyOrField(param, ((System.Linq.Expressions.MemberExpression)(((System.Linq.Expressions.LambdaExpression)(pocopath)).Body)).Member.Name);
                        Expression<Func<accProviderAdapter, object>> path  = null;
                        switch(member.Member.Name){
                        
							case "accIncomeExpenses":
								path = p => p.accIncomeExpenses.First().WithoutUpdate();

								//path = p => member;
								//path = p => p.accIncomeExpenses.First().accMoneyInOutConcept.WithoutUpdate();											
								//path = p => p.accIncomeExpenses.First().accMoneyPlace.WithoutUpdate();											
								//path = p => p.accIncomeExpenses.First().accReusableCatalogValue.WithoutUpdate();											
								//path = p => p.accIncomeExpenses.First().accReusableStatusAuthorization.WithoutUpdate();											
								//path = p => p.accIncomeExpenses.First().accCompanyArea.WithoutUpdate();											
								//path = p => p.accIncomeExpenses.First().accParent.WithoutUpdate();											
								//path = p => p.accIncomeExpenses.First().accReusable_PaymentType.WithoutUpdate();											
							break;
							
							default:
								path = p => member;
							break;
                        }

                        
                       paths.Add(path.Expand());
                    }
                }
                object aux = null;
					//paths = pathBuilder.ToArray();

#region Childs accIncomeExpenses 
				if (adapter.accIncomeExpenses != null)
                {
                    foreach (var item in adapter.accIncomeExpenses)
                    {
						
							if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accIncomeExpenses", item);
							if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)){ 
								//paths.Add(p => p.accIncomeExpenses.First().WithoutUpdate());
								
						if (item.accMoneyInOutConcept != null){
							item.accMoneyInOutConcept.EntityKey = con.WrappedContext.CreateEntityKey("accMoneyInOutConcepts", item.accMoneyInOutConcept);
                            
             
						}								
						if (item.accMoneyPlace != null){
							item.accMoneyPlace.EntityKey = con.WrappedContext.CreateEntityKey("accMoneyPlaces", item.accMoneyPlace);
                            
             
						}								
							if (item.accProvider == null)
								item.accProvider = adapter;

						if (item.accReusableCatalogValue != null){
							item.accReusableCatalogValue.EntityKey = con.WrappedContext.CreateEntityKey("accReusableCatalogValues", item.accReusableCatalogValue);
                            
             
						}								
						if (item.accReusableStatusAuthorization != null){
							item.accReusableStatusAuthorization.EntityKey = con.WrappedContext.CreateEntityKey("accReusableCatalogValues", item.accReusableStatusAuthorization);
                            
             
						}								
						if (item.accCompanyArea != null){
							item.accCompanyArea.EntityKey = con.WrappedContext.CreateEntityKey("accCompanyAreas", item.accCompanyArea);
                            
             
						}								
						if (item.accParent != null){
							item.accParent.EntityKey = con.WrappedContext.CreateEntityKey("accIncomeExpenses", item.accParent);
                            
             
						}								
						if (item.accReusable_PaymentType != null){
							item.accReusable_PaymentType.EntityKey = con.WrappedContext.CreateEntityKey("accReusableCatalogValues", item.accReusable_PaymentType);
                            
             
						}								
								item.EntityKey = null;
							}

                    }
					if (adapter.accIncomeExpenses.Count > 0){
						paths.Add(p => p.accIncomeExpenses.First().WithoutUpdate());
						paths.Add(p => p.accIncomeExpenses.First().accMoneyInOutConcept.WithoutUpdate());
paths.Add(p => p.accIncomeExpenses.First().accMoneyPlace.WithoutUpdate());
paths.Add(p => p.accIncomeExpenses.First().accReusableCatalogValue.WithoutUpdate());
paths.Add(p => p.accIncomeExpenses.First().accReusableStatusAuthorization.WithoutUpdate());
paths.Add(p => p.accIncomeExpenses.First().accCompanyArea.WithoutUpdate());
paths.Add(p => p.accIncomeExpenses.First().accParent.WithoutUpdate());
paths.Add(p => p.accIncomeExpenses.First().accReusable_PaymentType.WithoutUpdate());
					
					}
                }
#endregion 




                //con.WrappedContext.AttachObjectGraph<accProviderAdapter>(adapter, p=>p.accIncomeExpenses);
                con.WrappedContext.AttachObjectGraph<accProviderAdapter>(adapter, paths.ToArray());
              	if (saveChanges){
                    con.WrappedContext.SaveChanges(SaveOptions.AcceptAllChangesAfterSave);
					 
				}
                else
                    con.WrappedContext.SaveChanges(SaveOptions.None);
                if (!saveChanges)
                    context = con.WrappedContext;
                else
                    context = null;
				itemResult = adapter.PocoEntity;
                if (e != null)
                {
                    e.Item = itemResult;
                }
                OnCreated(this, e == null ? e = new BusinessRulesEventArgs<accProvider>() { ContextRequest = contextRequest, Item = itemResult, PathExpressions = pocopaths, SaveChanges = saveChanges } : e);



                if (e != null)
                {
                    itemResult = e.Item;
                }
                              return itemResult;
            }
        }
        BusinessRulesEventArgs<accProvider> e = null;
        public void Create(List<accProvider> entities)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            Create(entities, contextRequest, null);
        }
        public void Create(List<accProvider> entities, ContextRequest contextRequest)
        
        {
			ObjectContext context = null;
            	foreach (accProvider entity in entities)
				{
					this.Create(entity, true, contextRequest, out context);
				}
        }
         public accProvider Update(accProvider entity)
        {
            if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return Update(entity, contextRequest);
        }
        public accProvider Update(accProvider entity, ContextRequest requestContext)
        {
			  ObjectContext context = null;
            return Update(entity, true,requestContext, out context);
         }
		public  accProvider Update(accProvider entity, params Expression<Func<accProvider, object>>[] pocopaths)
        {
			  ObjectContext context = null;
              return Update(entity, true, null, out context, pocopaths);
         }
        public accProvider Update(accProvider entity, ContextRequest requestContext, bool saveChanges, out ObjectContext outcontext)
        {
			return Update(entity, saveChanges,requestContext, out outcontext, null);
		}
         public accProvider Update(accProvider entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext outcontext, params Expression<Func<accProvider,object>>[] pocopaths)
        {
		 if ((System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null) && contextRequest == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Update");
            }
            if (contextRequest == null)
            {
                contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            }

			using (EFPocoContext con = new EFPocoContext())
			{
				accProvider  itemResult = null;

	
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
			if(contextRequest.User != null)
				entity.UpdatedBy = contextRequest.User.GuidUser;

	    var oldentity = GetBy(p => p.GuidProvider == entity.GuidProvider, contextRequest).FirstOrDefault();
		if (oldentity != null) {
		
            entity.CreatedDate = oldentity.CreatedDate;
            entity.CreatedBy = oldentity.CreatedBy;
	
            entity.GuidCompany = oldentity.GuidCompany;
	
			

		}

				e = null;
                OnUpdating(this,e = new BusinessRulesEventArgs<accProvider>() { ContextRequest = contextRequest, Item=entity, PathExpressions = pocopaths, SaveChanges =saveChanges });
				   if (e != null) {
						if (e.Cancel)
						{
							outcontext = null;
							return e.Item;

						}
					}

                accProviderAdapter adapter = con.GetAdapterObject<accProviderAdapter>(entity);
                adapter.EntityKey = con.WrappedContext.CreateEntityKey("accProviders", adapter);
				    var es = con.accProviders;
				List<Expression<Func<accProviderAdapter, object>>> paths = new List<Expression<Func<accProviderAdapter,object>>>();
                /* if (pocopaths != null)
                    if (pocopaths.Length == 0)
                        pocopaths = null;*/

			    if (pocopaths != null && pocopaths.Length > 0)
                {
					// Translate
                    foreach (var pocopath in pocopaths)
                    {
                        var param = Expression.Parameter(typeof(accProviderAdapter), "p");
                        var member = MemberExpression.PropertyOrField(param, ((System.Linq.Expressions.MemberExpression)(((System.Linq.Expressions.LambdaExpression)(pocopath)).Body)).Member.Name);
                        Expression<Func<accProviderAdapter, object>> path  = null;
                        switch(member.Member.Name){
                        
							case "accIncomeExpenses":
								//path = p => member;
								path = p => p.accIncomeExpenses.First().WithoutUpdate();
				//				path = p => p.accIncomeExpenses.First().accMoneyInOutConcept.WithoutUpdate();											
				//				path = p => p.accIncomeExpenses.First().accMoneyPlace.WithoutUpdate();											
				//				path = p => p.accIncomeExpenses.First().accReusableCatalogValue.WithoutUpdate();											
				//				path = p => p.accIncomeExpenses.First().accReusableStatusAuthorization.WithoutUpdate();											
				//				path = p => p.accIncomeExpenses.First().accCompanyArea.WithoutUpdate();											
				//				path = p => p.accIncomeExpenses.First().accParent.WithoutUpdate();											
				//				path = p => p.accIncomeExpenses.First().accReusable_PaymentType.WithoutUpdate();											
							break;
							
							default:
								path = p => member;
							break;
                        }

                        paths.Add(path.Expand());
 					}
                }
                else {
                  paths = new List<Expression<Func<accProviderAdapter, object>>>();

					//List<Expression<Func<accProviderAdapter,object>>> pathBuilder = new List<Expression<Func<accProviderAdapter,object>>>();
		
					//paths = pathBuilder.ToArray();		
			}
			object aux = null;
				if (adapter.accIncomeExpenses != null)
                {
                    foreach (var item in adapter.accIncomeExpenses)
                    {


                        if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accIncomeExpenses", item);
						if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)) item.EntityKey = null;
                        
                    }
					
                    if (adapter.accIncomeExpenses.Count > 0)
                    {
                        paths.Add(p => p.accIncomeExpenses.First().WithoutUpdate());

                    }

                }



                //con.AttachObjectGraph<accProvider>(adapter, p=>p.accIncomeExpenses);
                con.WrappedContext.AttachObjectGraph<accProviderAdapter>(adapter, paths.ToArray());
				if (saveChanges){
                	con.WrappedContext.SaveChanges();
					 
					}
                if(!saveChanges)
					outcontext = con.WrappedContext;
				else
					outcontext = null;
				itemResult = adapter.PocoEntity;
				OnUpdated(this, e = new BusinessRulesEventArgs<accProvider>() { ContextRequest = contextRequest, Item=itemResult, PathExpressions = pocopaths, SaveChanges =saveChanges });

              	return itemResult;

			  }
        }
        public accProvider Save(accProvider entity)
        {
			return Save(entity, true, null);
        }
        public int Save(List<accProvider> entities)
        {
			using (EFPocoContext con = new EFPocoContext())
			{
			
            int n = 0;
            foreach (accProvider item in entities)
            {
                try
                {
                    this.Save(item, false, con);
                    n++;
                }catch (Exception ex){
                    SFSdotNet.Framework.My.EventLog.Exception(ex);
                }
            }
            con.SaveChanges();
            return n;
            }
        }
        #endregion
        #region Delete
        public void Delete(accProvider entity)
        {
				this.Delete(entity, null);
			
        }
		 public void Delete(accProvider entity, ContextRequest contextRequest)
        {
				ObjectContext context = null;
				this.Delete(entity, true, out context, contextRequest);
			
        }

        
        public void Delete(accProvider entity, bool saveChanges, out  ObjectContext context, ContextRequest contextRequest, BusinessRulesEventArgs<accProvider> e = null)
        {
			using (EFPocoContext _con = new EFPocoContext())
			{
				int result = 0;
				
               	BusinessRulesEventArgs<accProvider> _e = null;
               List<accProvider> _items = new List<accProvider>();
                _items.Add(entity);
                if (e == null || e.PreventPartialPropagate == false)
                {
                    OnDeleting(this, _e = (e == null ? new BusinessRulesEventArgs<accProvider>() { ContextRequest = contextRequest, Item = entity, Items = _items, SaveChanges = saveChanges } : e));
                }
                if (_e != null)
                {
                    if (_e.Cancel)
						{
							context = null;
							return;

						}
					}


				accProviderAdapter adapter = _con.GetAdapterObject<accProviderAdapter>(entity);
                adapter.EntityKey = _con.WrappedContext.CreateEntityKey("accProviders", adapter);
                
	            //adapter = _con.WrappedContext.AttachObjectGraph<accProviderAdapter>(adapter);
				try{
					_con.WrappedContext.AttachTo("accProviders", adapter);
                }catch{
					
				}
									//IsDeleted
					bool logicDelete = true;
					if (adapter.IsDeleted != null)
					{
						if (adapter.IsDeleted.Value)
							logicDelete = false;
					}
					if (logicDelete)
					{
											entity = GetBy(p => p.GuidProvider == entity.GuidProvider, contextRequest).FirstOrDefault();
						entity.IsDeleted = true;
						Update(entity, contextRequest);
					}
					else {
						_con.WrappedContext.DeleteObject(adapter);
					}
								
				if (!saveChanges)
                    context = _con.WrappedContext;
                else
                    context = null;
				 SaveOptions saveOption = SaveOptions.None;
                if (saveChanges)
                    saveOption = SaveOptions.AcceptAllChangesAfterSave;

				result = _con.WrappedContext.SaveChanges(saveOption);
				if (saveChanges){
					
					}
			if (e == null || e.PreventPartialPropagate == false)
                {

                    if (_e == null)
                        _e = new BusinessRulesEventArgs<accProvider>() { ContextRequest = contextRequest, Item = entity, Items = _items };

                    OnDeleted(this, _e);
                }

				//return null;
			}            
        }
        public void Delete(List<accProvider> entities,  ContextRequest contextRequest = null )
        {
				ObjectContext context = null;
			 BusinessRulesEventArgs<accProvider> _e = null;

                OnDeleting(this, _e = new BusinessRulesEventArgs<accProvider>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities });
                if (_e != null)
                {
                    if (_e.Cancel)
                    {
                        context = null;
                        return;

                    }
                }
                bool allSucced = true;
                BusinessRulesEventArgs<accProvider> eToChilds = new BusinessRulesEventArgs<accProvider>();
                if (_e != null)
                {
                    eToChilds = _e;
                }
                else
                {
                    eToChilds = new BusinessRulesEventArgs<accProvider>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                }
				foreach (accProvider item in entities)
				{
					try
                    {
                        this.Delete(item, true, out context, contextRequest, e: eToChilds);
                    }
                    catch (Exception ex)
                    {
                        SFSdotNet.Framework.My.EventLog.Error(ex);
                        allSucced = false;
                    }
				}
				if (_e == null)
                    _e = new BusinessRulesEventArgs<accProvider>() { ContextRequest = contextRequest, CountResult = entities.Count, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                OnDeleted(this, _e);

			
        }
        #endregion
 
        #region GetCount
		 public int GetCount(Expression<Func<accProvider, bool>> predicate)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

			return GetCount(predicate, contextRequest);
		}
        public int GetCount(Expression<Func<accProvider, bool>> predicate, ContextRequest contextRequest)
        {


		
			using (EFPocoContext con = new EFPocoContext())
			{


				if (predicate == null) predicate = PredicateBuilder.True<accProvider>();
           		predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted == null);
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    		if (contextRequest.User !=null )
                        		if (contextRequest.Company != null )
                        			predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				
				return con.accProviders.Count(predicate);
			}

        }
		  public int GetCount(string predicate,  ContextRequest contextRequest)
         {
             return GetCount(predicate, null, contextRequest);
         }

         public int GetCount(string predicate)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return GetCount(predicate, contextRequest);
        }
		 public int GetCount(string predicate, string usemode){
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
				return GetCount( predicate,  usemode,  contextRequest);
		 }
        public int GetCount(string predicate, string usemode, ContextRequest contextRequest){
			  string freetext = null;
            Filter filter = new Filter();

              if (predicate.Contains("|"))
              {
                 
                  filter.SetFilterPart("ft", GetSpecificFilter(predicate));
                 
                  filter.ProcessText(predicate.Split(char.Parse("|"))[0]);
                  freetext = predicate.Split(char.Parse("|"))[1];
              }
              else {
                  filter.ProcessText(predicate);
              }
           
			e = null;
			contextRequest.FreeText = freetext;
			contextRequest.UseMode = usemode;
            OnCounting(this, e = new BusinessRulesEventArgs<accProvider>() {  Filter =filter, ContextRequest = contextRequest });
            if (e != null)
            {
                if (e.Cancel)
                {
                    context = null;
                    return e.CountResult;

                }

            

            }
			 predicate = filter.GetFilterComplete();
			StringBuilder sbQuerySystem = new StringBuilder();
		
					
                    filter.SetFilterPart("de","(IsDeleted != true OR IsDeleted == null)");
			
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    	if (contextRequest.User !=null )
                        	if (contextRequest.Company != null ){
                        		

								filter.SetFilterPart("co", @"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
						
						
							}
							
							}
							if (preventSecurityRestrictions) preventSecurityRestrictions= false;
			using (EFContext con = new EFContext())
			{
				   
                 filter.CleanAndProcess("");
				//string predicateWithFKAndComputed = SFSdotNet.Framework.Linq.Utils.ExtractSpecificProperties("", ref predicate );               
				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed();
               string predicateWithManyRelations = filter.GetFilterChildren();
			   ///QueryUtils.BreakeQuery1(predicate, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
			   predicate = filter.GetFilterComplete();
               if (!string.IsNullOrEmpty(predicate))
               {
				
					
                    return con.accProviders.Count(System.Linq.Dynamic.DynamicExpression.ParseLambda<accProvider, bool>(predicate));
					
                }else
                    return con.accProviders.Count();

			}

		}
         public int GetCount()
        {
            return GetCount(p => true);
        }
        #endregion
        
         public accProvider Update(accProvider entity, string paths)
        {
            return Update(entity, paths.Split(char.Parse(",")));
            
        }

        public accProvider Update(accProvider entity, string[] paths)
        {
            // Translate
            List<Expression<Func<accProvider, object>>> pathList = new List<Expression<Func<accProvider, object>>>();
            for (int i = 0; i <= paths.Length -1; i++)
            {
                var param = Expression.Parameter(typeof(accProvider), "p");
                var member = MemberExpression.PropertyOrField(param, paths[i]);

                Expression<Func<accProvider, object>> path = p => member;
                pathList.Add(path.Expand());
            }
			ObjectContext context = null;
			 return Update(entity, true,null, out context,  pathList.ToArray());
           //return Update(entity, pathList.ToArray());
        }

        public void Update(List<accProvider> entities, string paths)
        {
            foreach (var entity in entities )
            {
                Update(entity, paths);
            }
        }
		public accProvider Create(accProvider entity, ContextRequest contextRequest, string paths)
        {
          

            if (string.IsNullOrEmpty(paths))
                return Create(entity, contextRequest);

            return Create(entity, contextRequest, paths.Split(char.Parse(",")));
        }
        public accProvider Create(accProvider entity, string paths)
        {
			 if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return Create(entity, contextRequest, paths);

        }

        public  void Create(List<accProvider> entities, ContextRequest requestContext, string paths)
        {
            foreach (var entity in entities)
            {
                Create(entity,requestContext, paths);
            }
        }

        public void Create(List<accProvider> entities, string[] paths)
        {
            foreach (var entity in entities)
            {
                Create(entity, null, paths);
            }
        }
        
        public accProvider  Create(accProvider entity, ContextRequest contextRequest, string[] paths)
        {
            List<Expression<Func<accProvider, object>>> pathList = new List<Expression<Func<accProvider, object>>>();
            for (int i = 0; i < paths.Length - 1; i++)
            {
                var param = Expression.Parameter(typeof(accProvider), "p");
                var member = MemberExpression.PropertyOrField(param, paths[i]);

                Expression<Func<accProvider, object>> path = p => member;
                pathList.Add(path.Expand());
            }
            return Create(entity, contextRequest, pathList.ToArray());
        }
        public void Delete(List<accProvider.CompositeKey> entityKeys)
        {

            List<accProvider> items = new List<accProvider>();
            foreach (var itemKey in entityKeys)
            {
                items.Add(GetByKey(itemKey.GuidProvider));
            }

            Delete(items);

        }
		
		
	}
		public partial class accReusableCatalogsBR{
	 	
           
		 #region Partial methods

           partial void OnUpdating(object sender, BusinessRulesEventArgs<accReusableCatalog> e);

            partial void OnUpdated(object sender, BusinessRulesEventArgs<accReusableCatalog> e);

            partial void OnCreating(object sender, BusinessRulesEventArgs<accReusableCatalog> e);
            partial void OnCreated(object sender, BusinessRulesEventArgs<accReusableCatalog> e);

            partial void OnDeleting(object sender, BusinessRulesEventArgs<accReusableCatalog> e);
            partial void OnDeleted(object sender, BusinessRulesEventArgs<accReusableCatalog> e);

            partial void OnGetting(object sender, BusinessRulesEventArgs<accReusableCatalog> e);
            partial void OnTaken(object sender, BusinessRulesEventArgs<accReusableCatalog> e);
            partial void OnCounting(object sender, BusinessRulesEventArgs<accReusableCatalog> e);
 
 
            #endregion
			
		private static accReusableCatalogsBR singlenton =null;
				public static accReusableCatalogsBR NewInstance(){
					return  new accReusableCatalogsBR();
					
				}
		public static accReusableCatalogsBR Instance{
			get{
				if (singlenton == null)
					singlenton = new accReusableCatalogsBR();
				return singlenton;
			}
		}
		private bool preventSecurityRestrictions = false;
		 public bool PreventAuditTrail { get; set;  }
		#region Fields
        EFPocoContext context = null;
        #endregion
        #region Constructor
        public accReusableCatalogsBR()
        {
            context = new EFPocoContext();
        }
		 public accReusableCatalogsBR(bool preventSecurity)
            {
                this.preventSecurityRestrictions = preventSecurity;
				context = new EFPocoContext();
            }
        #endregion
		
		#region Get

 		public IQueryable<accReusableCatalog> Get()
        {
            //using (EFContext con = new EFContext())
            //{
				EFContext con = new EFContext();
                var query = con.accReusableCatalogs.AsQueryable();
                con.ContextOptions.ProxyCreationEnabled = false;

                //query = ContextQueryBuilder<Nutrient>.ApplyContextQuery(query, contextRequest);

                return query;




            //}

        }
		
		public List<accReusableCatalog> GetAll()
        {
            return this.GetBy(p => true);
        }
        public List<accReusableCatalog> GetAll(string includes)
        {
            return this.GetBy(p => true, includes);
        }
        public accReusableCatalog GetByKey(Guid guidReusableCatalog)
        {
            return GetByKey(guidReusableCatalog, true);
        }
        public accReusableCatalog GetByKey(Guid guidReusableCatalog, bool loadIncludes)
        {
            accReusableCatalog item = null;
			var query = PredicateBuilder.True<accReusableCatalog>();
                    
			string strWhere = @"GuidReusableCatalog = Guid(""" + guidReusableCatalog.ToString()+@""")";
            Expression<Func<accReusableCatalog, bool>> predicate = null;
            if (!string.IsNullOrEmpty(strWhere))
                predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<accReusableCatalog, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
			 ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();
            contextRequest.CustomQuery.FilterExpressionString = strWhere;

			//item = GetBy(predicate, loadIncludes, contextRequest).FirstOrDefault();
			item = GetBy(strWhere,loadIncludes,contextRequest).FirstOrDefault();
            return item;
        }
         public List<accReusableCatalog> GetBy(string strWhere, bool loadRelations, ContextRequest contextRequest)
        {
            if (!loadRelations)
                return GetBy(strWhere, contextRequest);
            else
                return GetBy(strWhere, contextRequest, "");

        }
		  public List<accReusableCatalog> GetBy(string strWhere, bool loadRelations)
        {
              if (!loadRelations)
                return GetBy(strWhere, new ContextRequest());
            else
                return GetBy(strWhere, new ContextRequest(), "");

        }
         public accReusableCatalog GetByKey(Guid guidReusableCatalog, params Expression<Func<accReusableCatalog, object>>[] includes)
        {
            accReusableCatalog item = null;
			string strWhere = @"GuidReusableCatalog = Guid(""" + guidReusableCatalog.ToString()+@""")";
          Expression<Func<accReusableCatalog, bool>> predicate = null;
            if (!string.IsNullOrEmpty(strWhere))
                predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<accReusableCatalog, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
        item = GetBy(predicate, includes).FirstOrDefault();
         ////   item = GetBy(strWhere,includes).FirstOrDefault();
			return item;

        }
        public accReusableCatalog GetByKey(Guid guidReusableCatalog, string includes)
        {
            accReusableCatalog item = null;
			string strWhere = @"GuidReusableCatalog = Guid(""" + guidReusableCatalog.ToString()+@""")";
            
			
            item = GetBy(strWhere, includes).FirstOrDefault();
            return item;

        }
		 public accReusableCatalog GetByKey(Guid guidReusableCatalog, string usemode, string includes)
		{
			return GetByKey(guidReusableCatalog, usemode, null, includes);

		 }
		 public accReusableCatalog GetByKey(Guid guidReusableCatalog, string usemode, ContextRequest context,  string includes)
        {
            accReusableCatalog item = null;
			string strWhere = @"GuidReusableCatalog = Guid(""" + guidReusableCatalog.ToString()+@""")";
			if (context == null)
				context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
			context.CustomQuery.IsByKey = true;
            context.CustomQuery.FilterExpressionString = strWhere;
            context.UseMode = usemode;
            item = GetBy(strWhere,context , includes).FirstOrDefault();
            return item;

        }

        #region Dynamic Predicate
        public List<accReusableCatalog> GetBy(Expression<Func<accReusableCatalog, bool>> predicate, int? pageSize, int? page)
        {
            return this.GetBy(predicate, pageSize, page, null, null);
        }
        public List<accReusableCatalog> GetBy(Expression<Func<accReusableCatalog, bool>> predicate, ContextRequest contextRequest)
        {

            return GetBy(predicate, contextRequest,"");
        }
        
        public List<accReusableCatalog> GetBy(Expression<Func<accReusableCatalog, bool>> predicate, ContextRequest contextRequest, params Expression<Func<accReusableCatalog, object>>[] includes)
        {
            StringBuilder sb = new StringBuilder();
           if (includes != null)
            {
                foreach (var path in includes)
                {

						if (sb.Length > 0) sb.Append(",");
						sb.Append(SFSdotNet.Framework.Linq.Utils.IncludeToString<accReusableCatalog>(path));

               }
            }
            return GetBy(predicate, contextRequest, sb.ToString());
        }
        
        
        public List<accReusableCatalog> GetBy(Expression<Func<accReusableCatalog, bool>> predicate, string includes)
        {
			ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";

            return GetBy(predicate, context, includes);
        }

        public List<accReusableCatalog> GetBy(Expression<Func<accReusableCatalog, bool>> predicate, params Expression<Func<accReusableCatalog, object>>[] includes)
        {
			if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }
			ContextRequest context = new ContextRequest();
			            context.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            context.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";
            return GetBy(predicate, context, includes);
        }

      
		public bool DisableCache { get; set; }
		 public List<accReusableCatalog> GetBy(Expression<Func<accReusableCatalog, bool>> predicate, ContextRequest contextRequest, string includes)
        {
            using (EFPocoContext con = new EFPocoContext())
            {
				if (DisableCache) 
                	con.CachingPolicy = EFCachingProvider.Caching.CachingPolicy.NoCaching;

				List<accReusableCatalog> result = null;
                 e = null;
	
				OnGetting(con, e = new BusinessRulesEventArgs<accReusableCatalog>() {  FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null) });

               // OnGetting(con,e = new BusinessRulesEventArgs<accReusableCatalog>() { FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = contextRequest.CustomQuery.FilterExpressionString});
				   if (e != null) {
				    predicate = e.FilterExpression;
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				con.EnableChangeTrackingUsingProxies = false;
				con.WrappedContext.accReusableCatalogs.MergeOption = MergeOption.NoTracking;
                con.WrappedContext.ContextOptions.ProxyCreationEnabled = false;
                if (predicate == null) predicate = PredicateBuilder.True<accReusableCatalog>();
                
                var es = con.accReusableCatalogs;

                IQueryable<accReusableCatalog> query = es.AsQueryable();

                                if (!string.IsNullOrEmpty(includes))
                {
                    foreach (string include in includes.Split(char.Parse(",")))
                    {
						if (!string.IsNullOrEmpty(include))
                            query = query.Include(include);
                    }
                }
				query =query.Where(predicate);
                query = ContextQueryBuilder<accReusableCatalog>.ApplyContextQuery(query, contextRequest);

                result = query.ToList<accReusableCatalog>();
				  
                if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e =  new BusinessRulesEventArgs<accReusableCatalog>() { Items= result, IncludingComputedLinq = false, ContextRequest = contextRequest,  FilterExpression = predicate } :  e);
  
			

                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
            }
        }
		public void UpdateAgile(accReusableCatalog item, params string[] fields)
         {
             List<accReusableCatalog> list = new List<accReusableCatalog>();
             list.Add(item);
             this.UpdateBulk(list, fields);
         }
		public void UpdateBulk(List<accReusableCatalog>  items, params string[] fields)
         {
             SFSdotNet.Framework.My.ContextRequest req = new SFSdotNet.Framework.My.ContextRequest();
             req.CustomQuery = new SFSdotNet.Framework.My.CustomQuery();
             foreach (var field in fields)
             {
                 req.CustomQuery.SpecificProperties.Add(field);
             }
             UpdateBulk(items, req);

         }
        public void UpdateBulk(List<accReusableCatalog> items, ContextRequest req)
        {
            using (EFContext con = new EFContext())
            {



                foreach (var item in items)
                {
                    var setT = con.CreateObjectSet<accReusableCatalog>("accReusableCatalogs");


                    var itemForAttach = new accReusableCatalog();
			itemForAttach.GuidReusableCatalog = item.GuidReusableCatalog;
					
                    itemForAttach = SFSdotNet.Framework.Entities.ConvertEntity.SetProperties<accReusableCatalog>(item, itemForAttach, null, req.CustomQuery.SpecificProperties.ToArray());
                    setT.Attach(itemForAttach);


                    foreach (var property in req.CustomQuery.SpecificProperties)
                    {
						
                        if (property != "GuidReusableCatalog")
                            con.ObjectStateManager.GetObjectStateEntry(itemForAttach).SetModifiedProperty(property);

                    }

                }
                con.SaveChanges();


            }
        }
		/*public int Update(List<accReusableCatalog> items, ContextRequest contextRequest)
            {
                int result = 0;
                using (EFContext con = new EFContext())
                {
                   
                

                    foreach (var item in items)
                    {
                        //secMessageToUser messageToUser = new secMessageToUser();
                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            item.GetType().GetProperty(prop).SetValue(item, item.GetType().GetProperty(prop).GetValue(item));
                        }
                        //messageToUser.GuidMessageToUser = (Guid)item.GetType().GetProperty("GuidMessageToUser").GetValue(item);

                        var setObject = con.CreateObjectSet<accReusableCatalog>("accReusableCatalogs");
                        //messageToUser.Readed = DateTime.UtcNow;
                        setObject.Attach(item);
                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            con.ObjectStateManager.GetObjectStateEntry(item).SetModifiedProperty(prop);
                        }
                       
                    }
                    result = con.SaveChanges();

                    


                }
                return result;
            }
           */
        public List<accReusableCatalog> GetBy(string predicateString, ContextRequest contextRequest, string includes)
        {
            using (EFContext con = new EFContext())
            {
				if (DisableCache) 
                	con.CachingPolicy = EFCachingProvider.Caching.CachingPolicy.NoCaching;

				Filter filter = new Filter();
                if (predicateString.Contains("|"))
                {
                    string ft = GetSpecificFilter(predicateString);
                    if (!string.IsNullOrEmpty(ft))
                        filter.SetFilterPart("ft", ft);
                   
                    contextRequest.FreeText = predicateString.Split(char.Parse("|"))[1];
                    var q1 = predicateString.Split(char.Parse("|"))[0];
                    if (!string.IsNullOrEmpty(q1))
                    {
                        filter.ProcessText(q1);
                    }
                }
                else {
                    filter.ProcessText(predicateString);
                }

				List<accReusableCatalog> result = null;
                 e = null;
					OnGetting(con, e = new BusinessRulesEventArgs<accReusableCatalog>() { Filter = filter, ContextRequest = contextRequest /*, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null)*/ });

                  //OnGetting(con,e = new BusinessRulesEventArgs<accReusableCatalog>() {  ContextRequest = contextRequest, FilterExpressionString = predicateString });
			   	if (e != null) {
				    //predicateString = e.GetQueryString();
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				//	 else {
                //      predicateString = predicateString.Replace("*extraFreeText*", "").Replace("()","");
                //  }
				//con.EnableChangeTrackingUsingProxies = false;
				con.accReusableCatalogs.MergeOption = MergeOption.NoTracking;
                con.ContextOptions.ProxyCreationEnabled = false;
                //if (predicate == null) predicate = PredicateBuilder.True<accReusableCatalog>();
                
                var es = con.accReusableCatalogs;
				IQueryable<accReusableCatalog> query = es.AsQueryable();
		
				// include relations FK
				if(string.IsNullOrEmpty(includes) ){
					includes ="";
				}
				StringBuilder sbQuerySystem = new StringBuilder();
				//string predicateString = predicate.ToDynamicLinq<accReusableCatalog>();
				//predicateString += sbQuerySystem.ToString();
				filter.CleanAndProcess("");

				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed(); //SFSdotNet.Framework.Linq.Utils.ExtractSpecificProperties("", ref predicateString );               
                string predicateWithManyRelations = filter.GetFilterChildren(); //SFSdotNet.Framework.Linq.Utils.CleanPartExpression(predicateString);

                //QueryUtils.BreakeQuery1(predicateString, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
                var _queryable = query.AsQueryable();
                if (!string.IsNullOrEmpty(predicateWithManyRelations))
                    _queryable = _queryable.Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams);
				if (contextRequest.CustomQuery.SpecificProperties.Count > 0)
                {

                    StringBuilder sbProps = new StringBuilder();
                    contextRequest.CustomQuery.SpecificProperties.Add("GuidReusableCatalog");
                    
					foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                    {
						if(sbProps.Length > 0)
							sbProps.Append(",");
                        sbProps.Append(prop);
                    }
					    IQueryable  queryableSelective = null ;
					  
					  if (!string.IsNullOrEmpty(predicateWithManyRelations))
							queryableSelective = con.accReusableCatalogs.AsQueryable().Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams).Select(string.Format("new({0})", sbProps.ToString()));
					else
						queryableSelective = con.accReusableCatalogs.AsQueryable().Select(string.Format("new({0})", sbProps.ToString()));


                    //if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
					//	queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

                    QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
                    
					if (!string.IsNullOrEmpty(queryOps.OrderByAndSort))
                        queryableSelective = queryableSelective.OrderBy(queryOps.OrderByAndSort);
                    if (queryOps.Skip != null)
                    {
                        queryableSelective = queryableSelective.Skip(queryOps.Skip.Value);
                    }
                    if (queryOps.PageSize != null)
                    {
                        queryableSelective = queryableSelective.Take(queryOps.PageSize.Value);
                    }
                    //var results = queryableSelective.ToList();
                    result = new List<accReusableCatalog>();
                    accReusableCatalog itemDef = null;
                    foreach (var item in queryableSelective)
                    {
                        itemDef = new accReusableCatalog();

                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            if (!prop.Contains("."))
                            {
                                itemDef.GetType().GetProperty(prop).SetValue(itemDef, item.GetType().GetProperty(prop).GetValue(item));
                            }
                            else {
                                throw new Exception("La seleccion de relaciones aún no esta soportada");
                            }

                        }

                        result.Add(itemDef);
                    }

                }
                else
                {
				var  queryable = _queryable.Select(                    
				p => 
                        new
                    {
					GuidReusableCatalog = p.GuidReusableCatalog
,NameKey = p.NameKey
,Title = p.Title

,

	
                    }
                    
                    );
					
				
                 if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
                    queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

				QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
            	if (!string.IsNullOrEmpty(queryOps.OrderByAndSort))
					queryable = queryable.OrderBy(queryOps.OrderByAndSort);
               	if (queryOps.Skip != null)
                {
                    queryable = queryable.Skip(queryOps.Skip.Value);
                }
                if (queryOps.PageSize != null)
                {
                    queryable = queryable.Take (queryOps.PageSize.Value);
                }
                result = queryable.AsEnumerable().
                    Select(
                    p =>  new accReusableCatalog()
                    {
					GuidReusableCatalog = p.GuidReusableCatalog
,NameKey = p.NameKey
,Title = p.Title

                    }
                     ).ToList();
				}


			 if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e = new BusinessRulesEventArgs<accReusableCatalog>() { Items= result, IncludingComputedLinq = true, ContextRequest = contextRequest, FilterExpressionString  = predicateString } :  e);
  
			
  
                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
            }
        }
		public List<accReusableCatalog> GetBy(Expression<Func<accReusableCatalog, bool>> predicate, bool loadRelations, ContextRequest contextRequest)
        {
			if(!loadRelations)
				return GetBy(predicate, contextRequest);
			else
				return GetBy(predicate, contextRequest, "accReusableCatalogValues");

        }

        public List<accReusableCatalog> GetBy(Expression<Func<accReusableCatalog, bool>> predicate, int? pageSize, int? page, string orderBy, SFSdotNet.Framework.Data.SortDirection? sortDirection)
        {
            return GetBy(predicate, new ContextRequest() { CustomQuery = new CustomQuery() { Page = page, PageSize = pageSize, OrderBy = orderBy, SortDirection = sortDirection } });
        }
        public List<accReusableCatalog> GetBy(Expression<Func<accReusableCatalog, bool>> predicate)
        {

			if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }
			ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();

			contextRequest.CurrentContext = SFSdotNet.Framework.My.Context.CurrentContext;
			            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

            contextRequest.CustomQuery.FilterExpressionString = null;
            return this.GetBy(predicate, contextRequest, "");
        }
        #endregion
        #region Dynamic String
		private string GetSpecificFilter(string filter) {
            string result = "";
		    //string linqFilter = String.Empty;
            string freeTextFilter = String.Empty;
            if (filter.Contains("|"))
            {
               // linqFilter = filter.Split(char.Parse("|"))[0];
                freeTextFilter = filter.Split(char.Parse("|"))[1];
            }
            //else {
            //    freeTextFilter = filter;
            //}
            //else {
            //    linqFilter = filter;
            //}
			// linqFilter = SFSdotNet.Framework.Linq.Utils.ReplaceCustomDateFilters(linqFilter);
            //string specificFilter = linqFilter;
            if (!string.IsNullOrEmpty(freeTextFilter))
            {
                System.Text.StringBuilder sbCont = new System.Text.StringBuilder();
                /*if (specificFilter.Length > 0)
                {
                    sbCont.Append(" AND ");
                    sbCont.Append(" ({0})");
                }
                else
                {
                    sbCont.Append("{0}");
                }*/
                //var words = freeTextFilter.Split(char.Parse(" "));
				var word = freeTextFilter;
                System.Text.StringBuilder sbSpec = new System.Text.StringBuilder();
                 int nWords = 1;
				/*foreach (var word in words)
                {
					if (word.Length > 0){
                    if (sbSpec.Length > 0) sbSpec.Append(" AND ");
					if (words.Length > 1) sbSpec.Append("("); */
					
	
					
											
					sbSpec.Append(string.Format(@"NameKey.Contains(""{0}"")", word));

					
											sbSpec.Append(" OR ");
										
					sbSpec.Append(string.Format(@"Title.Contains(""{0}"")", word));

					
								 //sbSpec.Append("*extraFreeText*");

                    /*if (words.Length > 1) sbSpec.Append(")");
					
					nWords++;

					}

                }*/
                //specificFilter = string.Format("{0}{1}", specificFilter, string.Format(sbCont.ToString(), sbSpec.ToString()));
                                 result = sbSpec.ToString();  
            }
			//result = specificFilter;
			
			return result;

		}
	
			public List<accReusableCatalog> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  params object[] extraParams)
        {
			return GetBy(filter, pageSize, page, orderBy, orderDir,  null, extraParams);
		}
           public List<accReusableCatalog> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir, string usemode, params object[] extraParams)
            { 
                return GetBy(filter, pageSize, page, orderBy, orderDir, usemode, null, extraParams);
            }


		public List<accReusableCatalog> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  string usemode, ContextRequest context, params object[] extraParams)

        {

            // string freetext = null;
            //if (filter.Contains("|"))
            //{
            //    int parts = filter.Split(char.Parse("|")).Count();
            //    if (parts > 1)
            //    {

            //        freetext = filter.Split(char.Parse("|"))[1];
            //    }
            //}
		
            //string specificFilter = "";
            //if (!string.IsNullOrEmpty(filter))
            //  specificFilter=  GetSpecificFilter(filter);
            if (string.IsNullOrEmpty(orderBy))
            {
			                orderBy = "NameKey";
            }
			//orderDir = "";
			SFSdotNet.Framework.Data.SortDirection direction = SFSdotNet.Framework.Data.SortDirection.Ascending;
            if (!string.IsNullOrEmpty(orderDir))
            {
                if (orderDir == "desc")
                    direction = SFSdotNet.Framework.Data.SortDirection.Descending;
            }
            if (context == null)
                context = new ContextRequest();
			else
                context.CustomQuery = new CustomQuery();
             //context.FreeText = freetext;
             context.UseMode = usemode;
             context.CustomQuery =new SFSdotNet.Framework.My.CustomQuery()
 
                {
                    ExtraParams = extraParams,

                    OrderBy = orderBy,
                    SortDirection = direction,
                    Page = page,
                    PageSize = pageSize
               };
            

            if (!preventSecurityRestrictions) {
			 if (context.CurrentContext == null)
                {
					if (SFSdotNet.Framework.My.Context.CurrentContext != null &&  SFSdotNet.Framework.My.Context.CurrentContext.Company != null && SFSdotNet.Framework.My.Context.CurrentContext.User != null)
					{
						context.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
						context.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

					}
					else {
						throw new Exception("The security rule require a specific user and company");
					}
				}
            }
            return GetBy(filter, context);
  
        }


        public List<accReusableCatalog> GetBy(string strWhere, ContextRequest contextRequest)
        {
        	#region old code
				
				 //Expression<Func<tvsReservationTransport, bool>> predicate = null;
				string strWhereClean = strWhere.Replace("*extraFreeText*", "").Replace("()", "");
                //if (!string.IsNullOrEmpty(strWhereClean)){

                //    object[] extraParams = null;
                //    //if (contextRequest != null )
                //    //    if (contextRequest.CustomQuery != null )
                //    //        extraParams = contextRequest.CustomQuery.ExtraParams;
                //    //predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<tvsReservationTransport, bool>(strWhereClean, extraParams != null? extraParams.Cast<Guid>(): null);				
                //}
				 if (contextRequest == null)
                {
                    contextRequest = new ContextRequest();
                    if (contextRequest.CustomQuery == null)
                        contextRequest.CustomQuery = new CustomQuery();
                }
                  if (!preventSecurityRestrictions) {
					if (contextRequest.User == null || contextRequest.Company == null)
                      {
                     if (SFSdotNet.Framework.My.Context.CurrentContext.Company != null && SFSdotNet.Framework.My.Context.CurrentContext.User != null)
                     {
                         contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                         contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

                     }
                     else {
                         throw new Exception("The security rule require a specific User and Company ");
                     }
					 }
                 }
            contextRequest.CustomQuery.FilterExpressionString = strWhere;
				//return GetBy(predicate, contextRequest);  

			#endregion				
				
                    return GetBy(strWhere, contextRequest, "");  


        }
       public List<accReusableCatalog> GetBy(string strWhere)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
			
            return GetBy(strWhere, context, null);
        }

        public List<accReusableCatalog> GetBy(string strWhere, string includes)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
            return GetBy(strWhere, context, includes);
        }

        #endregion
        #endregion
		
		  #region SaveOrUpdate
        private accReusableCatalog Save(accReusableCatalog entity, bool saveChanges, EFPocoContext con)
        {
				ObjectContext context = null;
            return Update(entity, saveChanges,null, out context);

			
        }
		 public  accReusableCatalog Create( accReusableCatalog entity, params Expression<Func< accReusableCatalog, object>>[] paths)
         {
             return Create(entity, null, paths);

         }
 		 public accReusableCatalog Create(accReusableCatalog entity)
        {
				ObjectContext context = null;
				    if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: Create");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

				return this.Create(entity, true, contextRequest, out context);


        }
        public accReusableCatalog Create(accReusableCatalog entity, ContextRequest contextRequest)
         {
             ObjectContext context = null;
             return this.Create(entity, true, contextRequest,out context);

         }
         public accReusableCatalog Create(accReusableCatalog entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext context)
        {
                    return Create(entity, saveChanges , contextRequest , out context, null);
        }
         public accReusableCatalog Create(accReusableCatalog entity, ContextRequest contextRequest, params Expression<Func<accReusableCatalog,object>>[] paths)
        {
            ObjectContext context = null;
            if(paths != null)
				return Create(entity, true,contextRequest, out context, paths);
			else 
				return Create(entity, true,contextRequest, out context);
        }
        public accReusableCatalog Create(accReusableCatalog entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext context, params Expression<Func<accReusableCatalog,object>>[] pocopaths)
        {
			using (EFPocoContext con = new EFPocoContext())
			{
				accReusableCatalog itemResult = null;
#region Autos


	
	

#endregion
                e = null;
                OnCreating(this,e = new BusinessRulesEventArgs<accReusableCatalog>() { ContextRequest = contextRequest, Item=entity, PathExpressions = pocopaths, SaveChanges =saveChanges });
				   if (e != null) {
						if (e.Cancel)
						{
							context = null;
							return e.Item;

						}
					}

                    if (entity.GuidReusableCatalog == Guid.Empty)
                   {
                       entity.GuidReusableCatalog = Guid.NewGuid();

                   }



				accReusableCatalogAdapter adapter = con.GetAdapterObject<accReusableCatalogAdapter>(entity);;
				List<Expression<Func<accReusableCatalogAdapter, object>>> paths = new List<Expression<Func<accReusableCatalogAdapter,object>>>();
                
			    if (pocopaths != null && pocopaths.Length > 0)
                {
					// Translate
                    foreach (var pocopath in pocopaths)
                    {
                        var param = Expression.Parameter(typeof(accReusableCatalogAdapter), "p");
                        var member = MemberExpression.PropertyOrField(param, ((System.Linq.Expressions.MemberExpression)(((System.Linq.Expressions.LambdaExpression)(pocopath)).Body)).Member.Name);
                        Expression<Func<accReusableCatalogAdapter, object>> path  = null;
                        switch(member.Member.Name){
                        
							case "accReusableCatalogValues":
								path = p => p.accReusableCatalogValues.First().WithoutUpdate();

								//path = p => member;
							break;
							
							default:
								path = p => member;
							break;
                        }

                        
                       paths.Add(path.Expand());
                    }
                }
                object aux = null;
					//paths = pathBuilder.ToArray();

#region Childs accReusableCatalogValues 
				if (adapter.accReusableCatalogValues != null)
                {
                    foreach (var item in adapter.accReusableCatalogValues)
                    {
						
							if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accReusableCatalogValues", item);
							if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)){ 
								//paths.Add(p => p.accReusableCatalogValues.First().WithoutUpdate());
								
							if (item.accReusableCatalog == null)
								item.accReusableCatalog = adapter;

								item.EntityKey = null;
							}

                    }
					if (adapter.accReusableCatalogValues.Count > 0){
						paths.Add(p => p.accReusableCatalogValues.First().WithoutUpdate());
											
					}
                }
#endregion 




                //con.WrappedContext.AttachObjectGraph<accReusableCatalogAdapter>(adapter, p=>p.accReusableCatalogValues);
                con.WrappedContext.AttachObjectGraph<accReusableCatalogAdapter>(adapter, paths.ToArray());
              	if (saveChanges){
                    con.WrappedContext.SaveChanges(SaveOptions.AcceptAllChangesAfterSave);
					 
				}
                else
                    con.WrappedContext.SaveChanges(SaveOptions.None);
                if (!saveChanges)
                    context = con.WrappedContext;
                else
                    context = null;
				itemResult = adapter.PocoEntity;
                if (e != null)
                {
                    e.Item = itemResult;
                }
                OnCreated(this, e == null ? e = new BusinessRulesEventArgs<accReusableCatalog>() { ContextRequest = contextRequest, Item = itemResult, PathExpressions = pocopaths, SaveChanges = saveChanges } : e);



                if (e != null)
                {
                    itemResult = e.Item;
                }
                              return itemResult;
            }
        }
        BusinessRulesEventArgs<accReusableCatalog> e = null;
        public void Create(List<accReusableCatalog> entities)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            Create(entities, contextRequest, null);
        }
        public void Create(List<accReusableCatalog> entities, ContextRequest contextRequest)
        
        {
			ObjectContext context = null;
            	foreach (accReusableCatalog entity in entities)
				{
					this.Create(entity, true, contextRequest, out context);
				}
        }
         public accReusableCatalog Update(accReusableCatalog entity)
        {
            if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return Update(entity, contextRequest);
        }
        public accReusableCatalog Update(accReusableCatalog entity, ContextRequest requestContext)
        {
			  ObjectContext context = null;
            return Update(entity, true,requestContext, out context);
         }
		public  accReusableCatalog Update(accReusableCatalog entity, params Expression<Func<accReusableCatalog, object>>[] pocopaths)
        {
			  ObjectContext context = null;
              return Update(entity, true, null, out context, pocopaths);
         }
        public accReusableCatalog Update(accReusableCatalog entity, ContextRequest requestContext, bool saveChanges, out ObjectContext outcontext)
        {
			return Update(entity, saveChanges,requestContext, out outcontext, null);
		}
         public accReusableCatalog Update(accReusableCatalog entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext outcontext, params Expression<Func<accReusableCatalog,object>>[] pocopaths)
        {
		 if ((System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null) && contextRequest == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Update");
            }
            if (contextRequest == null)
            {
                contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            }

			using (EFPocoContext con = new EFPocoContext())
			{
				accReusableCatalog  itemResult = null;

	

				e = null;
                OnUpdating(this,e = new BusinessRulesEventArgs<accReusableCatalog>() { ContextRequest = contextRequest, Item=entity, PathExpressions = pocopaths, SaveChanges =saveChanges });
				   if (e != null) {
						if (e.Cancel)
						{
							outcontext = null;
							return e.Item;

						}
					}

                accReusableCatalogAdapter adapter = con.GetAdapterObject<accReusableCatalogAdapter>(entity);
                adapter.EntityKey = con.WrappedContext.CreateEntityKey("accReusableCatalogs", adapter);
				    var es = con.accReusableCatalogs;
				List<Expression<Func<accReusableCatalogAdapter, object>>> paths = new List<Expression<Func<accReusableCatalogAdapter,object>>>();
                /* if (pocopaths != null)
                    if (pocopaths.Length == 0)
                        pocopaths = null;*/

			    if (pocopaths != null && pocopaths.Length > 0)
                {
					// Translate
                    foreach (var pocopath in pocopaths)
                    {
                        var param = Expression.Parameter(typeof(accReusableCatalogAdapter), "p");
                        var member = MemberExpression.PropertyOrField(param, ((System.Linq.Expressions.MemberExpression)(((System.Linq.Expressions.LambdaExpression)(pocopath)).Body)).Member.Name);
                        Expression<Func<accReusableCatalogAdapter, object>> path  = null;
                        switch(member.Member.Name){
                        
							case "accReusableCatalogValues":
								//path = p => member;
								path = p => p.accReusableCatalogValues.First().WithoutUpdate();
							break;
							
							default:
								path = p => member;
							break;
                        }

                        paths.Add(path.Expand());
 					}
                }
                else {
                  paths = new List<Expression<Func<accReusableCatalogAdapter, object>>>();

					//List<Expression<Func<accReusableCatalogAdapter,object>>> pathBuilder = new List<Expression<Func<accReusableCatalogAdapter,object>>>();
		
					//paths = pathBuilder.ToArray();		
			}
			object aux = null;
				if (adapter.accReusableCatalogValues != null)
                {
                    foreach (var item in adapter.accReusableCatalogValues)
                    {


                        if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accReusableCatalogValues", item);
						if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)) item.EntityKey = null;
                        
                    }
					
                    if (adapter.accReusableCatalogValues.Count > 0)
                    {
                        paths.Add(p => p.accReusableCatalogValues.First().WithoutUpdate());

                    }

                }



                //con.AttachObjectGraph<accReusableCatalog>(adapter, p=>p.accReusableCatalogValues);
                con.WrappedContext.AttachObjectGraph<accReusableCatalogAdapter>(adapter, paths.ToArray());
				if (saveChanges){
                	con.WrappedContext.SaveChanges();
					 
					}
                if(!saveChanges)
					outcontext = con.WrappedContext;
				else
					outcontext = null;
				itemResult = adapter.PocoEntity;
				OnUpdated(this, e = new BusinessRulesEventArgs<accReusableCatalog>() { ContextRequest = contextRequest, Item=itemResult, PathExpressions = pocopaths, SaveChanges =saveChanges });

              	return itemResult;

			  }
        }
        public accReusableCatalog Save(accReusableCatalog entity)
        {
			return Save(entity, true, null);
        }
        public int Save(List<accReusableCatalog> entities)
        {
			using (EFPocoContext con = new EFPocoContext())
			{
			
            int n = 0;
            foreach (accReusableCatalog item in entities)
            {
                try
                {
                    this.Save(item, false, con);
                    n++;
                }catch (Exception ex){
                    SFSdotNet.Framework.My.EventLog.Exception(ex);
                }
            }
            con.SaveChanges();
            return n;
            }
        }
        #endregion
        #region Delete
        public void Delete(accReusableCatalog entity)
        {
				this.Delete(entity, null);
			
        }
		 public void Delete(accReusableCatalog entity, ContextRequest contextRequest)
        {
				ObjectContext context = null;
				this.Delete(entity, true, out context, contextRequest);
			
        }

        
        public void Delete(accReusableCatalog entity, bool saveChanges, out  ObjectContext context, ContextRequest contextRequest, BusinessRulesEventArgs<accReusableCatalog> e = null)
        {
			using (EFPocoContext _con = new EFPocoContext())
			{
				int result = 0;
				
               	BusinessRulesEventArgs<accReusableCatalog> _e = null;
               List<accReusableCatalog> _items = new List<accReusableCatalog>();
                _items.Add(entity);
                if (e == null || e.PreventPartialPropagate == false)
                {
                    OnDeleting(this, _e = (e == null ? new BusinessRulesEventArgs<accReusableCatalog>() { ContextRequest = contextRequest, Item = entity, Items = _items, SaveChanges = saveChanges } : e));
                }
                if (_e != null)
                {
                    if (_e.Cancel)
						{
							context = null;
							return;

						}
					}


				accReusableCatalogAdapter adapter = _con.GetAdapterObject<accReusableCatalogAdapter>(entity);
                adapter.EntityKey = _con.WrappedContext.CreateEntityKey("accReusableCatalogs", adapter);
                
	            //adapter = _con.WrappedContext.AttachObjectGraph<accReusableCatalogAdapter>(adapter);
				try{
					_con.WrappedContext.AttachTo("accReusableCatalogs", adapter);
                }catch{
					
				}
									_con.WrappedContext.DeleteObject(adapter);
                				
				if (!saveChanges)
                    context = _con.WrappedContext;
                else
                    context = null;
				 SaveOptions saveOption = SaveOptions.None;
                if (saveChanges)
                    saveOption = SaveOptions.AcceptAllChangesAfterSave;

				result = _con.WrappedContext.SaveChanges(saveOption);
				if (saveChanges){
					
					}
			if (e == null || e.PreventPartialPropagate == false)
                {

                    if (_e == null)
                        _e = new BusinessRulesEventArgs<accReusableCatalog>() { ContextRequest = contextRequest, Item = entity, Items = _items };

                    OnDeleted(this, _e);
                }

				//return null;
			}            
        }
        public void Delete(List<accReusableCatalog> entities,  ContextRequest contextRequest = null )
        {
				ObjectContext context = null;
			 BusinessRulesEventArgs<accReusableCatalog> _e = null;

                OnDeleting(this, _e = new BusinessRulesEventArgs<accReusableCatalog>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities });
                if (_e != null)
                {
                    if (_e.Cancel)
                    {
                        context = null;
                        return;

                    }
                }
                bool allSucced = true;
                BusinessRulesEventArgs<accReusableCatalog> eToChilds = new BusinessRulesEventArgs<accReusableCatalog>();
                if (_e != null)
                {
                    eToChilds = _e;
                }
                else
                {
                    eToChilds = new BusinessRulesEventArgs<accReusableCatalog>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                }
				foreach (accReusableCatalog item in entities)
				{
					try
                    {
                        this.Delete(item, true, out context, contextRequest, e: eToChilds);
                    }
                    catch (Exception ex)
                    {
                        SFSdotNet.Framework.My.EventLog.Error(ex);
                        allSucced = false;
                    }
				}
				if (_e == null)
                    _e = new BusinessRulesEventArgs<accReusableCatalog>() { ContextRequest = contextRequest, CountResult = entities.Count, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                OnDeleted(this, _e);

			
        }
        #endregion
 
        #region GetCount
		 public int GetCount(Expression<Func<accReusableCatalog, bool>> predicate)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

			return GetCount(predicate, contextRequest);
		}
        public int GetCount(Expression<Func<accReusableCatalog, bool>> predicate, ContextRequest contextRequest)
        {


		
			using (EFPocoContext con = new EFPocoContext())
			{


				if (predicate == null) predicate = PredicateBuilder.True<accReusableCatalog>();
				
				return con.accReusableCatalogs.Count(predicate);
			}

        }
		  public int GetCount(string predicate,  ContextRequest contextRequest)
         {
             return GetCount(predicate, null, contextRequest);
         }

         public int GetCount(string predicate)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return GetCount(predicate, contextRequest);
        }
		 public int GetCount(string predicate, string usemode){
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
				return GetCount( predicate,  usemode,  contextRequest);
		 }
        public int GetCount(string predicate, string usemode, ContextRequest contextRequest){
			  string freetext = null;
            Filter filter = new Filter();

              if (predicate.Contains("|"))
              {
                 
                  filter.SetFilterPart("ft", GetSpecificFilter(predicate));
                 
                  filter.ProcessText(predicate.Split(char.Parse("|"))[0]);
                  freetext = predicate.Split(char.Parse("|"))[1];
              }
              else {
                  filter.ProcessText(predicate);
              }
           
			e = null;
			contextRequest.FreeText = freetext;
			contextRequest.UseMode = usemode;
            OnCounting(this, e = new BusinessRulesEventArgs<accReusableCatalog>() {  Filter =filter, ContextRequest = contextRequest });
            if (e != null)
            {
                if (e.Cancel)
                {
                    context = null;
                    return e.CountResult;

                }

            

            }
			 predicate = filter.GetFilterComplete();
			StringBuilder sbQuerySystem = new StringBuilder();
		
			using (EFContext con = new EFContext())
			{
				   
                 filter.CleanAndProcess("");
				//string predicateWithFKAndComputed = SFSdotNet.Framework.Linq.Utils.ExtractSpecificProperties("", ref predicate );               
				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed();
               string predicateWithManyRelations = filter.GetFilterChildren();
			   ///QueryUtils.BreakeQuery1(predicate, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
			   predicate = filter.GetFilterComplete();
               if (!string.IsNullOrEmpty(predicate))
               {
				
					
                    return con.accReusableCatalogs.Count(System.Linq.Dynamic.DynamicExpression.ParseLambda<accReusableCatalog, bool>(predicate));
					
                }else
                    return con.accReusableCatalogs.Count();

			}

		}
         public int GetCount()
        {
            return GetCount(p => true);
        }
        #endregion
        
         public accReusableCatalog Update(accReusableCatalog entity, string paths)
        {
            return Update(entity, paths.Split(char.Parse(",")));
            
        }

        public accReusableCatalog Update(accReusableCatalog entity, string[] paths)
        {
            // Translate
            List<Expression<Func<accReusableCatalog, object>>> pathList = new List<Expression<Func<accReusableCatalog, object>>>();
            for (int i = 0; i <= paths.Length -1; i++)
            {
                var param = Expression.Parameter(typeof(accReusableCatalog), "p");
                var member = MemberExpression.PropertyOrField(param, paths[i]);

                Expression<Func<accReusableCatalog, object>> path = p => member;
                pathList.Add(path.Expand());
            }
			ObjectContext context = null;
			 return Update(entity, true,null, out context,  pathList.ToArray());
           //return Update(entity, pathList.ToArray());
        }

        public void Update(List<accReusableCatalog> entities, string paths)
        {
            foreach (var entity in entities )
            {
                Update(entity, paths);
            }
        }
		public accReusableCatalog Create(accReusableCatalog entity, ContextRequest contextRequest, string paths)
        {
          

            if (string.IsNullOrEmpty(paths))
                return Create(entity, contextRequest);

            return Create(entity, contextRequest, paths.Split(char.Parse(",")));
        }
        public accReusableCatalog Create(accReusableCatalog entity, string paths)
        {
			 if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return Create(entity, contextRequest, paths);

        }

        public  void Create(List<accReusableCatalog> entities, ContextRequest requestContext, string paths)
        {
            foreach (var entity in entities)
            {
                Create(entity,requestContext, paths);
            }
        }

        public void Create(List<accReusableCatalog> entities, string[] paths)
        {
            foreach (var entity in entities)
            {
                Create(entity, null, paths);
            }
        }
        
        public accReusableCatalog  Create(accReusableCatalog entity, ContextRequest contextRequest, string[] paths)
        {
            List<Expression<Func<accReusableCatalog, object>>> pathList = new List<Expression<Func<accReusableCatalog, object>>>();
            for (int i = 0; i < paths.Length - 1; i++)
            {
                var param = Expression.Parameter(typeof(accReusableCatalog), "p");
                var member = MemberExpression.PropertyOrField(param, paths[i]);

                Expression<Func<accReusableCatalog, object>> path = p => member;
                pathList.Add(path.Expand());
            }
            return Create(entity, contextRequest, pathList.ToArray());
        }
        public void Delete(List<accReusableCatalog.CompositeKey> entityKeys)
        {

            List<accReusableCatalog> items = new List<accReusableCatalog>();
            foreach (var itemKey in entityKeys)
            {
                items.Add(GetByKey(itemKey.GuidReusableCatalog));
            }

            Delete(items);

        }
		
		
	}
		public partial class accServiceProductCategoriesBR{
	 	
           
		 #region Partial methods

           partial void OnUpdating(object sender, BusinessRulesEventArgs<accServiceProductCategory> e);

            partial void OnUpdated(object sender, BusinessRulesEventArgs<accServiceProductCategory> e);

            partial void OnCreating(object sender, BusinessRulesEventArgs<accServiceProductCategory> e);
            partial void OnCreated(object sender, BusinessRulesEventArgs<accServiceProductCategory> e);

            partial void OnDeleting(object sender, BusinessRulesEventArgs<accServiceProductCategory> e);
            partial void OnDeleted(object sender, BusinessRulesEventArgs<accServiceProductCategory> e);

            partial void OnGetting(object sender, BusinessRulesEventArgs<accServiceProductCategory> e);
            partial void OnTaken(object sender, BusinessRulesEventArgs<accServiceProductCategory> e);
            partial void OnCounting(object sender, BusinessRulesEventArgs<accServiceProductCategory> e);
 
 
            #endregion
			
		private static accServiceProductCategoriesBR singlenton =null;
				public static accServiceProductCategoriesBR NewInstance(){
					return  new accServiceProductCategoriesBR();
					
				}
		public static accServiceProductCategoriesBR Instance{
			get{
				if (singlenton == null)
					singlenton = new accServiceProductCategoriesBR();
				return singlenton;
			}
		}
		private bool preventSecurityRestrictions = false;
		 public bool PreventAuditTrail { get; set;  }
		#region Fields
        EFPocoContext context = null;
        #endregion
        #region Constructor
        public accServiceProductCategoriesBR()
        {
            context = new EFPocoContext();
        }
		 public accServiceProductCategoriesBR(bool preventSecurity)
            {
                this.preventSecurityRestrictions = preventSecurity;
				context = new EFPocoContext();
            }
        #endregion
		
		#region Get

 		public IQueryable<accServiceProductCategory> Get()
        {
            //using (EFContext con = new EFContext())
            //{
				EFContext con = new EFContext();
                var query = con.accServiceProductCategories.AsQueryable();
                con.ContextOptions.ProxyCreationEnabled = false;

                //query = ContextQueryBuilder<Nutrient>.ApplyContextQuery(query, contextRequest);

                return query;




            //}

        }
		
		public List<accServiceProductCategory> GetAll()
        {
            return this.GetBy(p => true);
        }
        public List<accServiceProductCategory> GetAll(string includes)
        {
            return this.GetBy(p => true, includes);
        }
        public accServiceProductCategory GetByKey(Guid guidServiceProductCategory)
        {
            return GetByKey(guidServiceProductCategory, true);
        }
        public accServiceProductCategory GetByKey(Guid guidServiceProductCategory, bool loadIncludes)
        {
            accServiceProductCategory item = null;
			var query = PredicateBuilder.True<accServiceProductCategory>();
                    
			string strWhere = @"GuidServiceProductCategory = Guid(""" + guidServiceProductCategory.ToString()+@""")";
            Expression<Func<accServiceProductCategory, bool>> predicate = null;
            if (!string.IsNullOrEmpty(strWhere))
                predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<accServiceProductCategory, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
			 ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();
            contextRequest.CustomQuery.FilterExpressionString = strWhere;

			//item = GetBy(predicate, loadIncludes, contextRequest).FirstOrDefault();
			item = GetBy(strWhere,loadIncludes,contextRequest).FirstOrDefault();
            return item;
        }
         public List<accServiceProductCategory> GetBy(string strWhere, bool loadRelations, ContextRequest contextRequest)
        {
            if (!loadRelations)
                return GetBy(strWhere, contextRequest);
            else
                return GetBy(strWhere, contextRequest, "");

        }
		  public List<accServiceProductCategory> GetBy(string strWhere, bool loadRelations)
        {
              if (!loadRelations)
                return GetBy(strWhere, new ContextRequest());
            else
                return GetBy(strWhere, new ContextRequest(), "");

        }
         public accServiceProductCategory GetByKey(Guid guidServiceProductCategory, params Expression<Func<accServiceProductCategory, object>>[] includes)
        {
            accServiceProductCategory item = null;
			string strWhere = @"GuidServiceProductCategory = Guid(""" + guidServiceProductCategory.ToString()+@""")";
          Expression<Func<accServiceProductCategory, bool>> predicate = null;
            if (!string.IsNullOrEmpty(strWhere))
                predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<accServiceProductCategory, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
        item = GetBy(predicate, includes).FirstOrDefault();
         ////   item = GetBy(strWhere,includes).FirstOrDefault();
			return item;

        }
        public accServiceProductCategory GetByKey(Guid guidServiceProductCategory, string includes)
        {
            accServiceProductCategory item = null;
			string strWhere = @"GuidServiceProductCategory = Guid(""" + guidServiceProductCategory.ToString()+@""")";
            
			
            item = GetBy(strWhere, includes).FirstOrDefault();
            return item;

        }
		 public accServiceProductCategory GetByKey(Guid guidServiceProductCategory, string usemode, string includes)
		{
			return GetByKey(guidServiceProductCategory, usemode, null, includes);

		 }
		 public accServiceProductCategory GetByKey(Guid guidServiceProductCategory, string usemode, ContextRequest context,  string includes)
        {
            accServiceProductCategory item = null;
			string strWhere = @"GuidServiceProductCategory = Guid(""" + guidServiceProductCategory.ToString()+@""")";
			if (context == null)
				context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
			context.CustomQuery.IsByKey = true;
            context.CustomQuery.FilterExpressionString = strWhere;
            context.UseMode = usemode;
            item = GetBy(strWhere,context , includes).FirstOrDefault();
            return item;

        }

        #region Dynamic Predicate
        public List<accServiceProductCategory> GetBy(Expression<Func<accServiceProductCategory, bool>> predicate, int? pageSize, int? page)
        {
            return this.GetBy(predicate, pageSize, page, null, null);
        }
        public List<accServiceProductCategory> GetBy(Expression<Func<accServiceProductCategory, bool>> predicate, ContextRequest contextRequest)
        {

            return GetBy(predicate, contextRequest,"");
        }
        
        public List<accServiceProductCategory> GetBy(Expression<Func<accServiceProductCategory, bool>> predicate, ContextRequest contextRequest, params Expression<Func<accServiceProductCategory, object>>[] includes)
        {
            StringBuilder sb = new StringBuilder();
           if (includes != null)
            {
                foreach (var path in includes)
                {

						if (sb.Length > 0) sb.Append(",");
						sb.Append(SFSdotNet.Framework.Linq.Utils.IncludeToString<accServiceProductCategory>(path));

               }
            }
            return GetBy(predicate, contextRequest, sb.ToString());
        }
        
        
        public List<accServiceProductCategory> GetBy(Expression<Func<accServiceProductCategory, bool>> predicate, string includes)
        {
			ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";

            return GetBy(predicate, context, includes);
        }

        public List<accServiceProductCategory> GetBy(Expression<Func<accServiceProductCategory, bool>> predicate, params Expression<Func<accServiceProductCategory, object>>[] includes)
        {
			if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }
			ContextRequest context = new ContextRequest();
			            context.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            context.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";
            return GetBy(predicate, context, includes);
        }

      
		public bool DisableCache { get; set; }
		 public List<accServiceProductCategory> GetBy(Expression<Func<accServiceProductCategory, bool>> predicate, ContextRequest contextRequest, string includes)
        {
            using (EFPocoContext con = new EFPocoContext())
            {
				if (DisableCache) 
                	con.CachingPolicy = EFCachingProvider.Caching.CachingPolicy.NoCaching;

				List<accServiceProductCategory> result = null;
                 e = null;
	
				OnGetting(con, e = new BusinessRulesEventArgs<accServiceProductCategory>() {  FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null) });

               // OnGetting(con,e = new BusinessRulesEventArgs<accServiceProductCategory>() { FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = contextRequest.CustomQuery.FilterExpressionString});
				   if (e != null) {
				    predicate = e.FilterExpression;
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				con.EnableChangeTrackingUsingProxies = false;
				con.WrappedContext.accServiceProductCategories.MergeOption = MergeOption.NoTracking;
                con.WrappedContext.ContextOptions.ProxyCreationEnabled = false;
                if (predicate == null) predicate = PredicateBuilder.True<accServiceProductCategory>();
                
                var es = con.accServiceProductCategories;

                IQueryable<accServiceProductCategory> query = es.AsQueryable();

                                if (!string.IsNullOrEmpty(includes))
                {
                    foreach (string include in includes.Split(char.Parse(",")))
                    {
						if (!string.IsNullOrEmpty(include))
                            query = query.Include(include);
                    }
                }
                    predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
					 	if (!preventSecurityRestrictions)
						{
							if (contextRequest != null )
		                    	if (contextRequest.User !=null )
		                        	if (contextRequest.Company != null)
		                        		predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				query =query.Where(predicate);
                query = ContextQueryBuilder<accServiceProductCategory>.ApplyContextQuery(query, contextRequest);

                result = query.ToList<accServiceProductCategory>();
				  
                if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e =  new BusinessRulesEventArgs<accServiceProductCategory>() { Items= result, IncludingComputedLinq = false, ContextRequest = contextRequest,  FilterExpression = predicate } :  e);
  
			

                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
            }
        }
		public void UpdateAgile(accServiceProductCategory item, params string[] fields)
         {
             List<accServiceProductCategory> list = new List<accServiceProductCategory>();
             list.Add(item);
             this.UpdateBulk(list, fields);
         }
		public void UpdateBulk(List<accServiceProductCategory>  items, params string[] fields)
         {
             SFSdotNet.Framework.My.ContextRequest req = new SFSdotNet.Framework.My.ContextRequest();
             req.CustomQuery = new SFSdotNet.Framework.My.CustomQuery();
             foreach (var field in fields)
             {
                 req.CustomQuery.SpecificProperties.Add(field);
             }
             UpdateBulk(items, req);

         }
        public void UpdateBulk(List<accServiceProductCategory> items, ContextRequest req)
        {
            using (EFContext con = new EFContext())
            {



                foreach (var item in items)
                {
                    var setT = con.CreateObjectSet<accServiceProductCategory>("accServiceProductCategories");


                    var itemForAttach = new accServiceProductCategory();
			itemForAttach.GuidServiceProductCategory = item.GuidServiceProductCategory;
					
                    itemForAttach = SFSdotNet.Framework.Entities.ConvertEntity.SetProperties<accServiceProductCategory>(item, itemForAttach, null, req.CustomQuery.SpecificProperties.ToArray());
                    setT.Attach(itemForAttach);


                    foreach (var property in req.CustomQuery.SpecificProperties)
                    {
						
                        if (property != "GuidServiceProductCategory")
                            con.ObjectStateManager.GetObjectStateEntry(itemForAttach).SetModifiedProperty(property);

                    }

                }
                con.SaveChanges();


            }
        }
		/*public int Update(List<accServiceProductCategory> items, ContextRequest contextRequest)
            {
                int result = 0;
                using (EFContext con = new EFContext())
                {
                   
                

                    foreach (var item in items)
                    {
                        //secMessageToUser messageToUser = new secMessageToUser();
                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            item.GetType().GetProperty(prop).SetValue(item, item.GetType().GetProperty(prop).GetValue(item));
                        }
                        //messageToUser.GuidMessageToUser = (Guid)item.GetType().GetProperty("GuidMessageToUser").GetValue(item);

                        var setObject = con.CreateObjectSet<accServiceProductCategory>("accServiceProductCategories");
                        //messageToUser.Readed = DateTime.UtcNow;
                        setObject.Attach(item);
                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            con.ObjectStateManager.GetObjectStateEntry(item).SetModifiedProperty(prop);
                        }
                       
                    }
                    result = con.SaveChanges();

                    


                }
                return result;
            }
           */
        public List<accServiceProductCategory> GetBy(string predicateString, ContextRequest contextRequest, string includes)
        {
            using (EFContext con = new EFContext())
            {
				if (DisableCache) 
                	con.CachingPolicy = EFCachingProvider.Caching.CachingPolicy.NoCaching;

				Filter filter = new Filter();
                if (predicateString.Contains("|"))
                {
                    string ft = GetSpecificFilter(predicateString);
                    if (!string.IsNullOrEmpty(ft))
                        filter.SetFilterPart("ft", ft);
                   
                    contextRequest.FreeText = predicateString.Split(char.Parse("|"))[1];
                    var q1 = predicateString.Split(char.Parse("|"))[0];
                    if (!string.IsNullOrEmpty(q1))
                    {
                        filter.ProcessText(q1);
                    }
                }
                else {
                    filter.ProcessText(predicateString);
                }

				List<accServiceProductCategory> result = null;
                 e = null;
					OnGetting(con, e = new BusinessRulesEventArgs<accServiceProductCategory>() { Filter = filter, ContextRequest = contextRequest /*, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null)*/ });

                  //OnGetting(con,e = new BusinessRulesEventArgs<accServiceProductCategory>() {  ContextRequest = contextRequest, FilterExpressionString = predicateString });
			   	if (e != null) {
				    //predicateString = e.GetQueryString();
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				//	 else {
                //      predicateString = predicateString.Replace("*extraFreeText*", "").Replace("()","");
                //  }
				//con.EnableChangeTrackingUsingProxies = false;
				con.accServiceProductCategories.MergeOption = MergeOption.NoTracking;
                con.ContextOptions.ProxyCreationEnabled = false;
                //if (predicate == null) predicate = PredicateBuilder.True<accServiceProductCategory>();
                
                var es = con.accServiceProductCategories;
				IQueryable<accServiceProductCategory> query = es.AsQueryable();
		
				// include relations FK
				if(string.IsNullOrEmpty(includes) ){
					includes ="";
				}
				StringBuilder sbQuerySystem = new StringBuilder();
                    //predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				

				//if (!string.IsNullOrEmpty(predicateString))
                //      sbQuerySystem.Append(" And ");
                //sbQuerySystem.Append(" (IsDeleted != true Or IsDeleted = null) ");
				 filter.SetFilterPart("de", "(IsDeleted != true OR IsDeleted = null)");


					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
	                    	if (contextRequest.User !=null )
	                        	if (contextRequest.Company != null ){
	                        		//if (sbQuerySystem.Length > 0)
	                        		//	    			sbQuerySystem.Append( " And ");	
									//sbQuerySystem.Append(@" (GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
									filter.SetFilterPart("co",@"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @"""))");
								}
						}	
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				//string predicateString = predicate.ToDynamicLinq<accServiceProductCategory>();
				//predicateString += sbQuerySystem.ToString();
				filter.CleanAndProcess("");

				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed(); //SFSdotNet.Framework.Linq.Utils.ExtractSpecificProperties("", ref predicateString );               
                string predicateWithManyRelations = filter.GetFilterChildren(); //SFSdotNet.Framework.Linq.Utils.CleanPartExpression(predicateString);

                //QueryUtils.BreakeQuery1(predicateString, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
                var _queryable = query.AsQueryable();
                if (!string.IsNullOrEmpty(predicateWithManyRelations))
                    _queryable = _queryable.Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams);
				if (contextRequest.CustomQuery.SpecificProperties.Count > 0)
                {

                    StringBuilder sbProps = new StringBuilder();
                    contextRequest.CustomQuery.SpecificProperties.Add("GuidServiceProductCategory");
                    
					foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                    {
						if(sbProps.Length > 0)
							sbProps.Append(",");
                        sbProps.Append(prop);
                    }
					    IQueryable  queryableSelective = null ;
					  
					  if (!string.IsNullOrEmpty(predicateWithManyRelations))
							queryableSelective = con.accServiceProductCategories.AsQueryable().Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams).Select(string.Format("new({0})", sbProps.ToString()));
					else
						queryableSelective = con.accServiceProductCategories.AsQueryable().Select(string.Format("new({0})", sbProps.ToString()));


                    //if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
					//	queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

                    QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
                    
					if (!string.IsNullOrEmpty(queryOps.OrderByAndSort))
                        queryableSelective = queryableSelective.OrderBy(queryOps.OrderByAndSort);
                    if (queryOps.Skip != null)
                    {
                        queryableSelective = queryableSelective.Skip(queryOps.Skip.Value);
                    }
                    if (queryOps.PageSize != null)
                    {
                        queryableSelective = queryableSelective.Take(queryOps.PageSize.Value);
                    }
                    //var results = queryableSelective.ToList();
                    result = new List<accServiceProductCategory>();
                    accServiceProductCategory itemDef = null;
                    foreach (var item in queryableSelective)
                    {
                        itemDef = new accServiceProductCategory();

                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            if (!prop.Contains("."))
                            {
                                itemDef.GetType().GetProperty(prop).SetValue(itemDef, item.GetType().GetProperty(prop).GetValue(item));
                            }
                            else {
                                throw new Exception("La seleccion de relaciones aún no esta soportada");
                            }

                        }

                        result.Add(itemDef);
                    }

                }
                else
                {
				var  queryable = _queryable.Select(                    
				p => 
                        new
                    {
					GuidServiceProductCategory = p.GuidServiceProductCategory
,Name = p.Name
,NameKey = p.NameKey
,Name_ES = p.Name_ES
,Name_EN = p.Name_EN
,CreatedDate = p.CreatedDate
,UpdatedDate = p.UpdatedDate
,CreatedBy = p.CreatedBy
,UpdatedBy = p.UpdatedBy
,IsDeleted = p.IsDeleted
,GuidCompany = p.GuidCompany

,

	
                    }
                    
                    );
					
				
                 if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
                    queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

				QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
            	if (!string.IsNullOrEmpty(queryOps.OrderByAndSort))
					queryable = queryable.OrderBy(queryOps.OrderByAndSort);
               	if (queryOps.Skip != null)
                {
                    queryable = queryable.Skip(queryOps.Skip.Value);
                }
                if (queryOps.PageSize != null)
                {
                    queryable = queryable.Take (queryOps.PageSize.Value);
                }
                result = queryable.AsEnumerable().
                    Select(
                    p =>  new accServiceProductCategory()
                    {
					GuidServiceProductCategory = p.GuidServiceProductCategory
,Name = p.Name
,NameKey = p.NameKey
,Name_ES = p.Name_ES
,Name_EN = p.Name_EN
,CreatedDate = p.CreatedDate
,UpdatedDate = p.UpdatedDate
,CreatedBy = p.CreatedBy
,UpdatedBy = p.UpdatedBy
,IsDeleted = p.IsDeleted
,GuidCompany = p.GuidCompany

                    }
                     ).ToList();
				}


			 if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e = new BusinessRulesEventArgs<accServiceProductCategory>() { Items= result, IncludingComputedLinq = true, ContextRequest = contextRequest, FilterExpressionString  = predicateString } :  e);
  
			
  
                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
            }
        }
		public List<accServiceProductCategory> GetBy(Expression<Func<accServiceProductCategory, bool>> predicate, bool loadRelations, ContextRequest contextRequest)
        {
			if(!loadRelations)
				return GetBy(predicate, contextRequest);
			else
				return GetBy(predicate, contextRequest, "accServiceProducts");

        }

        public List<accServiceProductCategory> GetBy(Expression<Func<accServiceProductCategory, bool>> predicate, int? pageSize, int? page, string orderBy, SFSdotNet.Framework.Data.SortDirection? sortDirection)
        {
            return GetBy(predicate, new ContextRequest() { CustomQuery = new CustomQuery() { Page = page, PageSize = pageSize, OrderBy = orderBy, SortDirection = sortDirection } });
        }
        public List<accServiceProductCategory> GetBy(Expression<Func<accServiceProductCategory, bool>> predicate)
        {

			if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }
			ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();

			contextRequest.CurrentContext = SFSdotNet.Framework.My.Context.CurrentContext;
			            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

            contextRequest.CustomQuery.FilterExpressionString = null;
            return this.GetBy(predicate, contextRequest, "");
        }
        #endregion
        #region Dynamic String
		private string GetSpecificFilter(string filter) {
            string result = "";
		    //string linqFilter = String.Empty;
            string freeTextFilter = String.Empty;
            if (filter.Contains("|"))
            {
               // linqFilter = filter.Split(char.Parse("|"))[0];
                freeTextFilter = filter.Split(char.Parse("|"))[1];
            }
            //else {
            //    freeTextFilter = filter;
            //}
            //else {
            //    linqFilter = filter;
            //}
			// linqFilter = SFSdotNet.Framework.Linq.Utils.ReplaceCustomDateFilters(linqFilter);
            //string specificFilter = linqFilter;
            if (!string.IsNullOrEmpty(freeTextFilter))
            {
                System.Text.StringBuilder sbCont = new System.Text.StringBuilder();
                /*if (specificFilter.Length > 0)
                {
                    sbCont.Append(" AND ");
                    sbCont.Append(" ({0})");
                }
                else
                {
                    sbCont.Append("{0}");
                }*/
                //var words = freeTextFilter.Split(char.Parse(" "));
				var word = freeTextFilter;
                System.Text.StringBuilder sbSpec = new System.Text.StringBuilder();
                 int nWords = 1;
				/*foreach (var word in words)
                {
					if (word.Length > 0){
                    if (sbSpec.Length > 0) sbSpec.Append(" AND ");
					if (words.Length > 1) sbSpec.Append("("); */
					
	
					
											
					sbSpec.Append(string.Format(@"Name.Contains(""{0}"")", word));

					
											sbSpec.Append(" OR ");
										
					sbSpec.Append(string.Format(@"NameKey.Contains(""{0}"")", word));

					
											sbSpec.Append(" OR ");
										
					sbSpec.Append(string.Format(@"Name_ES.Contains(""{0}"")", word));

					
											sbSpec.Append(" OR ");
										
					sbSpec.Append(string.Format(@"Name_EN.Contains(""{0}"")", word));

					
	
					
	
					
	
					
	
					
	
					
	
					
								 //sbSpec.Append("*extraFreeText*");

                    /*if (words.Length > 1) sbSpec.Append(")");
					
					nWords++;

					}

                }*/
                //specificFilter = string.Format("{0}{1}", specificFilter, string.Format(sbCont.ToString(), sbSpec.ToString()));
                                 result = sbSpec.ToString();  
            }
			//result = specificFilter;
			
			return result;

		}
	
			public List<accServiceProductCategory> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  params object[] extraParams)
        {
			return GetBy(filter, pageSize, page, orderBy, orderDir,  null, extraParams);
		}
           public List<accServiceProductCategory> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir, string usemode, params object[] extraParams)
            { 
                return GetBy(filter, pageSize, page, orderBy, orderDir, usemode, null, extraParams);
            }


		public List<accServiceProductCategory> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  string usemode, ContextRequest context, params object[] extraParams)

        {

            // string freetext = null;
            //if (filter.Contains("|"))
            //{
            //    int parts = filter.Split(char.Parse("|")).Count();
            //    if (parts > 1)
            //    {

            //        freetext = filter.Split(char.Parse("|"))[1];
            //    }
            //}
		
            //string specificFilter = "";
            //if (!string.IsNullOrEmpty(filter))
            //  specificFilter=  GetSpecificFilter(filter);
            if (string.IsNullOrEmpty(orderBy))
            {
			                orderBy = "UpdatedDate";
            }
			//orderDir = "desc";
			SFSdotNet.Framework.Data.SortDirection direction = SFSdotNet.Framework.Data.SortDirection.Ascending;
            if (!string.IsNullOrEmpty(orderDir))
            {
                if (orderDir == "desc")
                    direction = SFSdotNet.Framework.Data.SortDirection.Descending;
            }
            if (context == null)
                context = new ContextRequest();
			else
                context.CustomQuery = new CustomQuery();
             //context.FreeText = freetext;
             context.UseMode = usemode;
             context.CustomQuery =new SFSdotNet.Framework.My.CustomQuery()
 
                {
                    ExtraParams = extraParams,

                    OrderBy = orderBy,
                    SortDirection = direction,
                    Page = page,
                    PageSize = pageSize
               };
            

            if (!preventSecurityRestrictions) {
			 if (context.CurrentContext == null)
                {
					if (SFSdotNet.Framework.My.Context.CurrentContext != null &&  SFSdotNet.Framework.My.Context.CurrentContext.Company != null && SFSdotNet.Framework.My.Context.CurrentContext.User != null)
					{
						context.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
						context.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

					}
					else {
						throw new Exception("The security rule require a specific user and company");
					}
				}
            }
            return GetBy(filter, context);
  
        }


        public List<accServiceProductCategory> GetBy(string strWhere, ContextRequest contextRequest)
        {
        	#region old code
				
				 //Expression<Func<tvsReservationTransport, bool>> predicate = null;
				string strWhereClean = strWhere.Replace("*extraFreeText*", "").Replace("()", "");
                //if (!string.IsNullOrEmpty(strWhereClean)){

                //    object[] extraParams = null;
                //    //if (contextRequest != null )
                //    //    if (contextRequest.CustomQuery != null )
                //    //        extraParams = contextRequest.CustomQuery.ExtraParams;
                //    //predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<tvsReservationTransport, bool>(strWhereClean, extraParams != null? extraParams.Cast<Guid>(): null);				
                //}
				 if (contextRequest == null)
                {
                    contextRequest = new ContextRequest();
                    if (contextRequest.CustomQuery == null)
                        contextRequest.CustomQuery = new CustomQuery();
                }
                  if (!preventSecurityRestrictions) {
					if (contextRequest.User == null || contextRequest.Company == null)
                      {
                     if (SFSdotNet.Framework.My.Context.CurrentContext.Company != null && SFSdotNet.Framework.My.Context.CurrentContext.User != null)
                     {
                         contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                         contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

                     }
                     else {
                         throw new Exception("The security rule require a specific User and Company ");
                     }
					 }
                 }
            contextRequest.CustomQuery.FilterExpressionString = strWhere;
				//return GetBy(predicate, contextRequest);  

			#endregion				
				
                    return GetBy(strWhere, contextRequest, "");  


        }
       public List<accServiceProductCategory> GetBy(string strWhere)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
			
            return GetBy(strWhere, context, null);
        }

        public List<accServiceProductCategory> GetBy(string strWhere, string includes)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
            return GetBy(strWhere, context, includes);
        }

        #endregion
        #endregion
		
		  #region SaveOrUpdate
        private accServiceProductCategory Save(accServiceProductCategory entity, bool saveChanges, EFPocoContext con)
        {
				ObjectContext context = null;
            return Update(entity, saveChanges,null, out context);

			
        }
		 public  accServiceProductCategory Create( accServiceProductCategory entity, params Expression<Func< accServiceProductCategory, object>>[] paths)
         {
             return Create(entity, null, paths);

         }
 		 public accServiceProductCategory Create(accServiceProductCategory entity)
        {
				ObjectContext context = null;
				    if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: Create");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

				return this.Create(entity, true, contextRequest, out context);


        }
        public accServiceProductCategory Create(accServiceProductCategory entity, ContextRequest contextRequest)
         {
             ObjectContext context = null;
             return this.Create(entity, true, contextRequest,out context);

         }
         public accServiceProductCategory Create(accServiceProductCategory entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext context)
        {
                    return Create(entity, saveChanges , contextRequest , out context, null);
        }
         public accServiceProductCategory Create(accServiceProductCategory entity, ContextRequest contextRequest, params Expression<Func<accServiceProductCategory,object>>[] paths)
        {
            ObjectContext context = null;
            if(paths != null)
				return Create(entity, true,contextRequest, out context, paths);
			else 
				return Create(entity, true,contextRequest, out context);
        }
        public accServiceProductCategory Create(accServiceProductCategory entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext context, params Expression<Func<accServiceProductCategory,object>>[] pocopaths)
        {
			using (EFPocoContext con = new EFPocoContext())
			{
				accServiceProductCategory itemResult = null;
#region Autos


			entity.CreatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.CreatedBy = contextRequest.User.GuidUser;
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.UpdatedBy = contextRequest.User.GuidUser;
	
			if (contextRequest != null)
				if(contextRequest.User != null)
					if (contextRequest.Company != null)
						entity.GuidCompany = contextRequest.Company.GuidCompany;
	

#endregion
                e = null;
                OnCreating(this,e = new BusinessRulesEventArgs<accServiceProductCategory>() { ContextRequest = contextRequest, Item=entity, PathExpressions = pocopaths, SaveChanges =saveChanges });
				   if (e != null) {
						if (e.Cancel)
						{
							context = null;
							return e.Item;

						}
					}

                    if (entity.GuidServiceProductCategory == Guid.Empty)
                   {
                       entity.GuidServiceProductCategory = Guid.NewGuid();

                   }



				accServiceProductCategoryAdapter adapter = con.GetAdapterObject<accServiceProductCategoryAdapter>(entity);;
				List<Expression<Func<accServiceProductCategoryAdapter, object>>> paths = new List<Expression<Func<accServiceProductCategoryAdapter,object>>>();
                
			    if (pocopaths != null && pocopaths.Length > 0)
                {
					// Translate
                    foreach (var pocopath in pocopaths)
                    {
                        var param = Expression.Parameter(typeof(accServiceProductCategoryAdapter), "p");
                        var member = MemberExpression.PropertyOrField(param, ((System.Linq.Expressions.MemberExpression)(((System.Linq.Expressions.LambdaExpression)(pocopath)).Body)).Member.Name);
                        Expression<Func<accServiceProductCategoryAdapter, object>> path  = null;
                        switch(member.Member.Name){
                        
							case "accServiceProducts":
								path = p => p.accServiceProducts.First().WithoutUpdate();

								//path = p => member;
								//path = p => p.accServiceProducts.First().accFile.WithoutUpdate();											
							break;
							
							default:
								path = p => member;
							break;
                        }

                        
                       paths.Add(path.Expand());
                    }
                }
                object aux = null;
					//paths = pathBuilder.ToArray();

#region Childs accServiceProducts 
				if (adapter.accServiceProducts != null)
                {
                    foreach (var item in adapter.accServiceProducts)
                    {
						
							if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accServiceProducts", item);
							if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)){ 
								//paths.Add(p => p.accServiceProducts.First().WithoutUpdate());
								
						if (item.accFile != null){
							item.accFile.EntityKey = con.WrappedContext.CreateEntityKey("accFiles", item.accFile);
                            
             
						}								
							if (item.accServiceProductCategory == null)
								item.accServiceProductCategory = adapter;

								item.EntityKey = null;
							}

                    }
					if (adapter.accServiceProducts.Count > 0){
						paths.Add(p => p.accServiceProducts.First().WithoutUpdate());
						paths.Add(p => p.accServiceProducts.First().accFile.WithoutUpdate());
					
					}
                }
#endregion 




                //con.WrappedContext.AttachObjectGraph<accServiceProductCategoryAdapter>(adapter, p=>p.accServiceProducts);
                con.WrappedContext.AttachObjectGraph<accServiceProductCategoryAdapter>(adapter, paths.ToArray());
              	if (saveChanges){
                    con.WrappedContext.SaveChanges(SaveOptions.AcceptAllChangesAfterSave);
					 
				}
                else
                    con.WrappedContext.SaveChanges(SaveOptions.None);
                if (!saveChanges)
                    context = con.WrappedContext;
                else
                    context = null;
				itemResult = adapter.PocoEntity;
                if (e != null)
                {
                    e.Item = itemResult;
                }
                OnCreated(this, e == null ? e = new BusinessRulesEventArgs<accServiceProductCategory>() { ContextRequest = contextRequest, Item = itemResult, PathExpressions = pocopaths, SaveChanges = saveChanges } : e);



                if (e != null)
                {
                    itemResult = e.Item;
                }
                              return itemResult;
            }
        }
        BusinessRulesEventArgs<accServiceProductCategory> e = null;
        public void Create(List<accServiceProductCategory> entities)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            Create(entities, contextRequest, null);
        }
        public void Create(List<accServiceProductCategory> entities, ContextRequest contextRequest)
        
        {
			ObjectContext context = null;
            	foreach (accServiceProductCategory entity in entities)
				{
					this.Create(entity, true, contextRequest, out context);
				}
        }
         public accServiceProductCategory Update(accServiceProductCategory entity)
        {
            if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return Update(entity, contextRequest);
        }
        public accServiceProductCategory Update(accServiceProductCategory entity, ContextRequest requestContext)
        {
			  ObjectContext context = null;
            return Update(entity, true,requestContext, out context);
         }
		public  accServiceProductCategory Update(accServiceProductCategory entity, params Expression<Func<accServiceProductCategory, object>>[] pocopaths)
        {
			  ObjectContext context = null;
              return Update(entity, true, null, out context, pocopaths);
         }
        public accServiceProductCategory Update(accServiceProductCategory entity, ContextRequest requestContext, bool saveChanges, out ObjectContext outcontext)
        {
			return Update(entity, saveChanges,requestContext, out outcontext, null);
		}
         public accServiceProductCategory Update(accServiceProductCategory entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext outcontext, params Expression<Func<accServiceProductCategory,object>>[] pocopaths)
        {
		 if ((System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null) && contextRequest == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Update");
            }
            if (contextRequest == null)
            {
                contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            }

			using (EFPocoContext con = new EFPocoContext())
			{
				accServiceProductCategory  itemResult = null;

	
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
			if(contextRequest.User != null)
				entity.UpdatedBy = contextRequest.User.GuidUser;

	    var oldentity = GetBy(p => p.GuidServiceProductCategory == entity.GuidServiceProductCategory, contextRequest).FirstOrDefault();
		if (oldentity != null) {
		
            entity.CreatedDate = oldentity.CreatedDate;
            entity.CreatedBy = oldentity.CreatedBy;
	
            entity.GuidCompany = oldentity.GuidCompany;
	
			

		}

				e = null;
                OnUpdating(this,e = new BusinessRulesEventArgs<accServiceProductCategory>() { ContextRequest = contextRequest, Item=entity, PathExpressions = pocopaths, SaveChanges =saveChanges });
				   if (e != null) {
						if (e.Cancel)
						{
							outcontext = null;
							return e.Item;

						}
					}

                accServiceProductCategoryAdapter adapter = con.GetAdapterObject<accServiceProductCategoryAdapter>(entity);
                adapter.EntityKey = con.WrappedContext.CreateEntityKey("accServiceProductCategories", adapter);
				    var es = con.accServiceProductCategories;
				List<Expression<Func<accServiceProductCategoryAdapter, object>>> paths = new List<Expression<Func<accServiceProductCategoryAdapter,object>>>();
                /* if (pocopaths != null)
                    if (pocopaths.Length == 0)
                        pocopaths = null;*/

			    if (pocopaths != null && pocopaths.Length > 0)
                {
					// Translate
                    foreach (var pocopath in pocopaths)
                    {
                        var param = Expression.Parameter(typeof(accServiceProductCategoryAdapter), "p");
                        var member = MemberExpression.PropertyOrField(param, ((System.Linq.Expressions.MemberExpression)(((System.Linq.Expressions.LambdaExpression)(pocopath)).Body)).Member.Name);
                        Expression<Func<accServiceProductCategoryAdapter, object>> path  = null;
                        switch(member.Member.Name){
                        
							case "accServiceProducts":
								//path = p => member;
								path = p => p.accServiceProducts.First().WithoutUpdate();
				//				path = p => p.accServiceProducts.First().accFile.WithoutUpdate();											
							break;
							
							default:
								path = p => member;
							break;
                        }

                        paths.Add(path.Expand());
 					}
                }
                else {
                  paths = new List<Expression<Func<accServiceProductCategoryAdapter, object>>>();

					//List<Expression<Func<accServiceProductCategoryAdapter,object>>> pathBuilder = new List<Expression<Func<accServiceProductCategoryAdapter,object>>>();
		
					//paths = pathBuilder.ToArray();		
			}
			object aux = null;
				if (adapter.accServiceProducts != null)
                {
                    foreach (var item in adapter.accServiceProducts)
                    {


                        if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accServiceProducts", item);
						if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)) item.EntityKey = null;
                        
                    }
					
                    if (adapter.accServiceProducts.Count > 0)
                    {
                        paths.Add(p => p.accServiceProducts.First().WithoutUpdate());

                    }

                }



                //con.AttachObjectGraph<accServiceProductCategory>(adapter, p=>p.accServiceProducts);
                con.WrappedContext.AttachObjectGraph<accServiceProductCategoryAdapter>(adapter, paths.ToArray());
				if (saveChanges){
                	con.WrappedContext.SaveChanges();
					 
					}
                if(!saveChanges)
					outcontext = con.WrappedContext;
				else
					outcontext = null;
				itemResult = adapter.PocoEntity;
				OnUpdated(this, e = new BusinessRulesEventArgs<accServiceProductCategory>() { ContextRequest = contextRequest, Item=itemResult, PathExpressions = pocopaths, SaveChanges =saveChanges });

              	return itemResult;

			  }
        }
        public accServiceProductCategory Save(accServiceProductCategory entity)
        {
			return Save(entity, true, null);
        }
        public int Save(List<accServiceProductCategory> entities)
        {
			using (EFPocoContext con = new EFPocoContext())
			{
			
            int n = 0;
            foreach (accServiceProductCategory item in entities)
            {
                try
                {
                    this.Save(item, false, con);
                    n++;
                }catch (Exception ex){
                    SFSdotNet.Framework.My.EventLog.Exception(ex);
                }
            }
            con.SaveChanges();
            return n;
            }
        }
        #endregion
        #region Delete
        public void Delete(accServiceProductCategory entity)
        {
				this.Delete(entity, null);
			
        }
		 public void Delete(accServiceProductCategory entity, ContextRequest contextRequest)
        {
				ObjectContext context = null;
				this.Delete(entity, true, out context, contextRequest);
			
        }

        
        public void Delete(accServiceProductCategory entity, bool saveChanges, out  ObjectContext context, ContextRequest contextRequest, BusinessRulesEventArgs<accServiceProductCategory> e = null)
        {
			using (EFPocoContext _con = new EFPocoContext())
			{
				int result = 0;
				
               	BusinessRulesEventArgs<accServiceProductCategory> _e = null;
               List<accServiceProductCategory> _items = new List<accServiceProductCategory>();
                _items.Add(entity);
                if (e == null || e.PreventPartialPropagate == false)
                {
                    OnDeleting(this, _e = (e == null ? new BusinessRulesEventArgs<accServiceProductCategory>() { ContextRequest = contextRequest, Item = entity, Items = _items, SaveChanges = saveChanges } : e));
                }
                if (_e != null)
                {
                    if (_e.Cancel)
						{
							context = null;
							return;

						}
					}


				accServiceProductCategoryAdapter adapter = _con.GetAdapterObject<accServiceProductCategoryAdapter>(entity);
                adapter.EntityKey = _con.WrappedContext.CreateEntityKey("accServiceProductCategories", adapter);
                
	            //adapter = _con.WrappedContext.AttachObjectGraph<accServiceProductCategoryAdapter>(adapter);
				try{
					_con.WrappedContext.AttachTo("accServiceProductCategories", adapter);
                }catch{
					
				}
									//IsDeleted
					bool logicDelete = true;
					if (adapter.IsDeleted != null)
					{
						if (adapter.IsDeleted.Value)
							logicDelete = false;
					}
					if (logicDelete)
					{
											entity = GetBy(p => p.GuidServiceProductCategory == entity.GuidServiceProductCategory, contextRequest).FirstOrDefault();
						entity.IsDeleted = true;
						Update(entity, contextRequest);
					}
					else {
						_con.WrappedContext.DeleteObject(adapter);
					}
								
				if (!saveChanges)
                    context = _con.WrappedContext;
                else
                    context = null;
				 SaveOptions saveOption = SaveOptions.None;
                if (saveChanges)
                    saveOption = SaveOptions.AcceptAllChangesAfterSave;

				result = _con.WrappedContext.SaveChanges(saveOption);
				if (saveChanges){
					
					}
			if (e == null || e.PreventPartialPropagate == false)
                {

                    if (_e == null)
                        _e = new BusinessRulesEventArgs<accServiceProductCategory>() { ContextRequest = contextRequest, Item = entity, Items = _items };

                    OnDeleted(this, _e);
                }

				//return null;
			}            
        }
        public void Delete(List<accServiceProductCategory> entities,  ContextRequest contextRequest = null )
        {
				ObjectContext context = null;
			 BusinessRulesEventArgs<accServiceProductCategory> _e = null;

                OnDeleting(this, _e = new BusinessRulesEventArgs<accServiceProductCategory>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities });
                if (_e != null)
                {
                    if (_e.Cancel)
                    {
                        context = null;
                        return;

                    }
                }
                bool allSucced = true;
                BusinessRulesEventArgs<accServiceProductCategory> eToChilds = new BusinessRulesEventArgs<accServiceProductCategory>();
                if (_e != null)
                {
                    eToChilds = _e;
                }
                else
                {
                    eToChilds = new BusinessRulesEventArgs<accServiceProductCategory>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                }
				foreach (accServiceProductCategory item in entities)
				{
					try
                    {
                        this.Delete(item, true, out context, contextRequest, e: eToChilds);
                    }
                    catch (Exception ex)
                    {
                        SFSdotNet.Framework.My.EventLog.Error(ex);
                        allSucced = false;
                    }
				}
				if (_e == null)
                    _e = new BusinessRulesEventArgs<accServiceProductCategory>() { ContextRequest = contextRequest, CountResult = entities.Count, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                OnDeleted(this, _e);

			
        }
        #endregion
 
        #region GetCount
		 public int GetCount(Expression<Func<accServiceProductCategory, bool>> predicate)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

			return GetCount(predicate, contextRequest);
		}
        public int GetCount(Expression<Func<accServiceProductCategory, bool>> predicate, ContextRequest contextRequest)
        {


		
			using (EFPocoContext con = new EFPocoContext())
			{


				if (predicate == null) predicate = PredicateBuilder.True<accServiceProductCategory>();
           		predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted == null);
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    		if (contextRequest.User !=null )
                        		if (contextRequest.Company != null )
                        			predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				
				return con.accServiceProductCategories.Count(predicate);
			}

        }
		  public int GetCount(string predicate,  ContextRequest contextRequest)
         {
             return GetCount(predicate, null, contextRequest);
         }

         public int GetCount(string predicate)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return GetCount(predicate, contextRequest);
        }
		 public int GetCount(string predicate, string usemode){
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
				return GetCount( predicate,  usemode,  contextRequest);
		 }
        public int GetCount(string predicate, string usemode, ContextRequest contextRequest){
			  string freetext = null;
            Filter filter = new Filter();

              if (predicate.Contains("|"))
              {
                 
                  filter.SetFilterPart("ft", GetSpecificFilter(predicate));
                 
                  filter.ProcessText(predicate.Split(char.Parse("|"))[0]);
                  freetext = predicate.Split(char.Parse("|"))[1];
              }
              else {
                  filter.ProcessText(predicate);
              }
           
			e = null;
			contextRequest.FreeText = freetext;
			contextRequest.UseMode = usemode;
            OnCounting(this, e = new BusinessRulesEventArgs<accServiceProductCategory>() {  Filter =filter, ContextRequest = contextRequest });
            if (e != null)
            {
                if (e.Cancel)
                {
                    context = null;
                    return e.CountResult;

                }

            

            }
			 predicate = filter.GetFilterComplete();
			StringBuilder sbQuerySystem = new StringBuilder();
		
					
                    filter.SetFilterPart("de","(IsDeleted != true OR IsDeleted == null)");
			
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    	if (contextRequest.User !=null )
                        	if (contextRequest.Company != null ){
                        		

								filter.SetFilterPart("co", @"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
						
						
							}
							
							}
							if (preventSecurityRestrictions) preventSecurityRestrictions= false;
			using (EFContext con = new EFContext())
			{
				   
                 filter.CleanAndProcess("");
				//string predicateWithFKAndComputed = SFSdotNet.Framework.Linq.Utils.ExtractSpecificProperties("", ref predicate );               
				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed();
               string predicateWithManyRelations = filter.GetFilterChildren();
			   ///QueryUtils.BreakeQuery1(predicate, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
			   predicate = filter.GetFilterComplete();
               if (!string.IsNullOrEmpty(predicate))
               {
				
					
                    return con.accServiceProductCategories.Count(System.Linq.Dynamic.DynamicExpression.ParseLambda<accServiceProductCategory, bool>(predicate));
					
                }else
                    return con.accServiceProductCategories.Count();

			}

		}
         public int GetCount()
        {
            return GetCount(p => true);
        }
        #endregion
        
         public accServiceProductCategory Update(accServiceProductCategory entity, string paths)
        {
            return Update(entity, paths.Split(char.Parse(",")));
            
        }

        public accServiceProductCategory Update(accServiceProductCategory entity, string[] paths)
        {
            // Translate
            List<Expression<Func<accServiceProductCategory, object>>> pathList = new List<Expression<Func<accServiceProductCategory, object>>>();
            for (int i = 0; i <= paths.Length -1; i++)
            {
                var param = Expression.Parameter(typeof(accServiceProductCategory), "p");
                var member = MemberExpression.PropertyOrField(param, paths[i]);

                Expression<Func<accServiceProductCategory, object>> path = p => member;
                pathList.Add(path.Expand());
            }
			ObjectContext context = null;
			 return Update(entity, true,null, out context,  pathList.ToArray());
           //return Update(entity, pathList.ToArray());
        }

        public void Update(List<accServiceProductCategory> entities, string paths)
        {
            foreach (var entity in entities )
            {
                Update(entity, paths);
            }
        }
		public accServiceProductCategory Create(accServiceProductCategory entity, ContextRequest contextRequest, string paths)
        {
          

            if (string.IsNullOrEmpty(paths))
                return Create(entity, contextRequest);

            return Create(entity, contextRequest, paths.Split(char.Parse(",")));
        }
        public accServiceProductCategory Create(accServiceProductCategory entity, string paths)
        {
			 if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return Create(entity, contextRequest, paths);

        }

        public  void Create(List<accServiceProductCategory> entities, ContextRequest requestContext, string paths)
        {
            foreach (var entity in entities)
            {
                Create(entity,requestContext, paths);
            }
        }

        public void Create(List<accServiceProductCategory> entities, string[] paths)
        {
            foreach (var entity in entities)
            {
                Create(entity, null, paths);
            }
        }
        
        public accServiceProductCategory  Create(accServiceProductCategory entity, ContextRequest contextRequest, string[] paths)
        {
            List<Expression<Func<accServiceProductCategory, object>>> pathList = new List<Expression<Func<accServiceProductCategory, object>>>();
            for (int i = 0; i < paths.Length - 1; i++)
            {
                var param = Expression.Parameter(typeof(accServiceProductCategory), "p");
                var member = MemberExpression.PropertyOrField(param, paths[i]);

                Expression<Func<accServiceProductCategory, object>> path = p => member;
                pathList.Add(path.Expand());
            }
            return Create(entity, contextRequest, pathList.ToArray());
        }
        public void Delete(List<accServiceProductCategory.CompositeKey> entityKeys)
        {

            List<accServiceProductCategory> items = new List<accServiceProductCategory>();
            foreach (var itemKey in entityKeys)
            {
                items.Add(GetByKey(itemKey.GuidServiceProductCategory));
            }

            Delete(items);

        }
		
		
	}
		public partial class accServiceProductsBR{
	 	
           
		 #region Partial methods

           partial void OnUpdating(object sender, BusinessRulesEventArgs<accServiceProduct> e);

            partial void OnUpdated(object sender, BusinessRulesEventArgs<accServiceProduct> e);

            partial void OnCreating(object sender, BusinessRulesEventArgs<accServiceProduct> e);
            partial void OnCreated(object sender, BusinessRulesEventArgs<accServiceProduct> e);

            partial void OnDeleting(object sender, BusinessRulesEventArgs<accServiceProduct> e);
            partial void OnDeleted(object sender, BusinessRulesEventArgs<accServiceProduct> e);

            partial void OnGetting(object sender, BusinessRulesEventArgs<accServiceProduct> e);
            partial void OnTaken(object sender, BusinessRulesEventArgs<accServiceProduct> e);
            partial void OnCounting(object sender, BusinessRulesEventArgs<accServiceProduct> e);
 
 
            #endregion
			
		private static accServiceProductsBR singlenton =null;
				public static accServiceProductsBR NewInstance(){
					return  new accServiceProductsBR();
					
				}
		public static accServiceProductsBR Instance{
			get{
				if (singlenton == null)
					singlenton = new accServiceProductsBR();
				return singlenton;
			}
		}
		private bool preventSecurityRestrictions = false;
		 public bool PreventAuditTrail { get; set;  }
		#region Fields
        EFPocoContext context = null;
        #endregion
        #region Constructor
        public accServiceProductsBR()
        {
            context = new EFPocoContext();
        }
		 public accServiceProductsBR(bool preventSecurity)
            {
                this.preventSecurityRestrictions = preventSecurity;
				context = new EFPocoContext();
            }
        #endregion
		
		#region Get

 		public IQueryable<accServiceProduct> Get()
        {
            //using (EFContext con = new EFContext())
            //{
				EFContext con = new EFContext();
                var query = con.accServiceProducts.AsQueryable();
                con.ContextOptions.ProxyCreationEnabled = false;

                //query = ContextQueryBuilder<Nutrient>.ApplyContextQuery(query, contextRequest);

                return query;




            //}

        }
		
		public List<accServiceProduct> GetAll()
        {
            return this.GetBy(p => true);
        }
        public List<accServiceProduct> GetAll(string includes)
        {
            return this.GetBy(p => true, includes);
        }
        public accServiceProduct GetByKey(Guid guidServiceProduct)
        {
            return GetByKey(guidServiceProduct, true);
        }
        public accServiceProduct GetByKey(Guid guidServiceProduct, bool loadIncludes)
        {
            accServiceProduct item = null;
			var query = PredicateBuilder.True<accServiceProduct>();
                    
			string strWhere = @"GuidServiceProduct = Guid(""" + guidServiceProduct.ToString()+@""")";
            Expression<Func<accServiceProduct, bool>> predicate = null;
            if (!string.IsNullOrEmpty(strWhere))
                predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<accServiceProduct, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
			 ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();
            contextRequest.CustomQuery.FilterExpressionString = strWhere;

			//item = GetBy(predicate, loadIncludes, contextRequest).FirstOrDefault();
			item = GetBy(strWhere,loadIncludes,contextRequest).FirstOrDefault();
            return item;
        }
         public List<accServiceProduct> GetBy(string strWhere, bool loadRelations, ContextRequest contextRequest)
        {
            if (!loadRelations)
                return GetBy(strWhere, contextRequest);
            else
                return GetBy(strWhere, contextRequest, "");

        }
		  public List<accServiceProduct> GetBy(string strWhere, bool loadRelations)
        {
              if (!loadRelations)
                return GetBy(strWhere, new ContextRequest());
            else
                return GetBy(strWhere, new ContextRequest(), "");

        }
         public accServiceProduct GetByKey(Guid guidServiceProduct, params Expression<Func<accServiceProduct, object>>[] includes)
        {
            accServiceProduct item = null;
			string strWhere = @"GuidServiceProduct = Guid(""" + guidServiceProduct.ToString()+@""")";
          Expression<Func<accServiceProduct, bool>> predicate = null;
            if (!string.IsNullOrEmpty(strWhere))
                predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<accServiceProduct, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
        item = GetBy(predicate, includes).FirstOrDefault();
         ////   item = GetBy(strWhere,includes).FirstOrDefault();
			return item;

        }
        public accServiceProduct GetByKey(Guid guidServiceProduct, string includes)
        {
            accServiceProduct item = null;
			string strWhere = @"GuidServiceProduct = Guid(""" + guidServiceProduct.ToString()+@""")";
            
			
            item = GetBy(strWhere, includes).FirstOrDefault();
            return item;

        }
		 public accServiceProduct GetByKey(Guid guidServiceProduct, string usemode, string includes)
		{
			return GetByKey(guidServiceProduct, usemode, null, includes);

		 }
		 public accServiceProduct GetByKey(Guid guidServiceProduct, string usemode, ContextRequest context,  string includes)
        {
            accServiceProduct item = null;
			string strWhere = @"GuidServiceProduct = Guid(""" + guidServiceProduct.ToString()+@""")";
			if (context == null)
				context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
			context.CustomQuery.IsByKey = true;
            context.CustomQuery.FilterExpressionString = strWhere;
            context.UseMode = usemode;
            item = GetBy(strWhere,context , includes).FirstOrDefault();
            return item;

        }

        #region Dynamic Predicate
        public List<accServiceProduct> GetBy(Expression<Func<accServiceProduct, bool>> predicate, int? pageSize, int? page)
        {
            return this.GetBy(predicate, pageSize, page, null, null);
        }
        public List<accServiceProduct> GetBy(Expression<Func<accServiceProduct, bool>> predicate, ContextRequest contextRequest)
        {

            return GetBy(predicate, contextRequest,"");
        }
        
        public List<accServiceProduct> GetBy(Expression<Func<accServiceProduct, bool>> predicate, ContextRequest contextRequest, params Expression<Func<accServiceProduct, object>>[] includes)
        {
            StringBuilder sb = new StringBuilder();
           if (includes != null)
            {
                foreach (var path in includes)
                {

						if (sb.Length > 0) sb.Append(",");
						sb.Append(SFSdotNet.Framework.Linq.Utils.IncludeToString<accServiceProduct>(path));

               }
            }
            return GetBy(predicate, contextRequest, sb.ToString());
        }
        
        
        public List<accServiceProduct> GetBy(Expression<Func<accServiceProduct, bool>> predicate, string includes)
        {
			ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";

            return GetBy(predicate, context, includes);
        }

        public List<accServiceProduct> GetBy(Expression<Func<accServiceProduct, bool>> predicate, params Expression<Func<accServiceProduct, object>>[] includes)
        {
			if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }
			ContextRequest context = new ContextRequest();
			            context.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            context.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";
            return GetBy(predicate, context, includes);
        }

      
		public bool DisableCache { get; set; }
		 public List<accServiceProduct> GetBy(Expression<Func<accServiceProduct, bool>> predicate, ContextRequest contextRequest, string includes)
        {
            using (EFPocoContext con = new EFPocoContext())
            {
				if (DisableCache) 
                	con.CachingPolicy = EFCachingProvider.Caching.CachingPolicy.NoCaching;

				List<accServiceProduct> result = null;
                 e = null;
	
				OnGetting(con, e = new BusinessRulesEventArgs<accServiceProduct>() {  FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null) });

               // OnGetting(con,e = new BusinessRulesEventArgs<accServiceProduct>() { FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = contextRequest.CustomQuery.FilterExpressionString});
				   if (e != null) {
				    predicate = e.FilterExpression;
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				con.EnableChangeTrackingUsingProxies = false;
				con.WrappedContext.accServiceProducts.MergeOption = MergeOption.NoTracking;
                con.WrappedContext.ContextOptions.ProxyCreationEnabled = false;
                if (predicate == null) predicate = PredicateBuilder.True<accServiceProduct>();
 				string fkIncludes = "accServiceProductCategory";
                if(contextRequest!=null){
					if (contextRequest.CustomQuery != null)
					{
						if (contextRequest.CustomQuery.IncludeForeignKeyPaths != null) {
							if (contextRequest.CustomQuery.IncludeForeignKeyPaths.Value == false)
								fkIncludes = "";
						}
					}
				}
				if (!string.IsNullOrEmpty(includes))
					includes = includes + "," + fkIncludes;
				else
					includes = fkIncludes;
                
                var es = con.accServiceProducts;

                IQueryable<accServiceProduct> query = es.AsQueryable();

                                if (!string.IsNullOrEmpty(includes))
                {
                    foreach (string include in includes.Split(char.Parse(",")))
                    {
						if (!string.IsNullOrEmpty(include))
                            query = query.Include(include);
                    }
                }
                    predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
					 	if (!preventSecurityRestrictions)
						{
							if (contextRequest != null )
		                    	if (contextRequest.User !=null )
		                        	if (contextRequest.Company != null)
		                        		predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				query =query.Where(predicate);
                query = ContextQueryBuilder<accServiceProduct>.ApplyContextQuery(query, contextRequest);

                result = query.ToList<accServiceProduct>();
				  
                if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e =  new BusinessRulesEventArgs<accServiceProduct>() { Items= result, IncludingComputedLinq = false, ContextRequest = contextRequest,  FilterExpression = predicate } :  e);
  
			

                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
            }
        }
		public void UpdateAgile(accServiceProduct item, params string[] fields)
         {
             List<accServiceProduct> list = new List<accServiceProduct>();
             list.Add(item);
             this.UpdateBulk(list, fields);
         }
		public void UpdateBulk(List<accServiceProduct>  items, params string[] fields)
         {
             SFSdotNet.Framework.My.ContextRequest req = new SFSdotNet.Framework.My.ContextRequest();
             req.CustomQuery = new SFSdotNet.Framework.My.CustomQuery();
             foreach (var field in fields)
             {
                 req.CustomQuery.SpecificProperties.Add(field);
             }
             UpdateBulk(items, req);

         }
        public void UpdateBulk(List<accServiceProduct> items, ContextRequest req)
        {
            using (EFContext con = new EFContext())
            {



                foreach (var item in items)
                {
                    var setT = con.CreateObjectSet<accServiceProduct>("accServiceProducts");


                    var itemForAttach = new accServiceProduct();
			itemForAttach.GuidServiceProduct = item.GuidServiceProduct;
					
                    itemForAttach = SFSdotNet.Framework.Entities.ConvertEntity.SetProperties<accServiceProduct>(item, itemForAttach, null, req.CustomQuery.SpecificProperties.ToArray());
                    setT.Attach(itemForAttach);


                    foreach (var property in req.CustomQuery.SpecificProperties)
                    {
						
                        if (property != "GuidServiceProduct")
                            con.ObjectStateManager.GetObjectStateEntry(itemForAttach).SetModifiedProperty(property);

                    }

                }
                con.SaveChanges();


            }
        }
		/*public int Update(List<accServiceProduct> items, ContextRequest contextRequest)
            {
                int result = 0;
                using (EFContext con = new EFContext())
                {
                   
                

                    foreach (var item in items)
                    {
                        //secMessageToUser messageToUser = new secMessageToUser();
                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            item.GetType().GetProperty(prop).SetValue(item, item.GetType().GetProperty(prop).GetValue(item));
                        }
                        //messageToUser.GuidMessageToUser = (Guid)item.GetType().GetProperty("GuidMessageToUser").GetValue(item);

                        var setObject = con.CreateObjectSet<accServiceProduct>("accServiceProducts");
                        //messageToUser.Readed = DateTime.UtcNow;
                        setObject.Attach(item);
                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            con.ObjectStateManager.GetObjectStateEntry(item).SetModifiedProperty(prop);
                        }
                       
                    }
                    result = con.SaveChanges();

                    


                }
                return result;
            }
           */
        public List<accServiceProduct> GetBy(string predicateString, ContextRequest contextRequest, string includes)
        {
            using (EFContext con = new EFContext())
            {
				if (DisableCache) 
                	con.CachingPolicy = EFCachingProvider.Caching.CachingPolicy.NoCaching;

				Filter filter = new Filter();
                if (predicateString.Contains("|"))
                {
                    string ft = GetSpecificFilter(predicateString);
                    if (!string.IsNullOrEmpty(ft))
                        filter.SetFilterPart("ft", ft);
                   
                    contextRequest.FreeText = predicateString.Split(char.Parse("|"))[1];
                    var q1 = predicateString.Split(char.Parse("|"))[0];
                    if (!string.IsNullOrEmpty(q1))
                    {
                        filter.ProcessText(q1);
                    }
                }
                else {
                    filter.ProcessText(predicateString);
                }

				List<accServiceProduct> result = null;
                 e = null;
					OnGetting(con, e = new BusinessRulesEventArgs<accServiceProduct>() { Filter = filter, ContextRequest = contextRequest /*, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null)*/ });

                  //OnGetting(con,e = new BusinessRulesEventArgs<accServiceProduct>() {  ContextRequest = contextRequest, FilterExpressionString = predicateString });
			   	if (e != null) {
				    //predicateString = e.GetQueryString();
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				//	 else {
                //      predicateString = predicateString.Replace("*extraFreeText*", "").Replace("()","");
                //  }
				//con.EnableChangeTrackingUsingProxies = false;
				con.accServiceProducts.MergeOption = MergeOption.NoTracking;
                con.ContextOptions.ProxyCreationEnabled = false;
                //if (predicate == null) predicate = PredicateBuilder.True<accServiceProduct>();
 				string fkIncludes = "accServiceProductCategory";
                if(contextRequest!=null){
					if (contextRequest.CustomQuery != null)
					{
						if (contextRequest.CustomQuery.IncludeForeignKeyPaths != null) {
							if (contextRequest.CustomQuery.IncludeForeignKeyPaths.Value == false)
								fkIncludes = "";
						}
					}
				}else{
                    contextRequest = new ContextRequest();
                    contextRequest.CustomQuery = new CustomQuery();

                }
				if (!string.IsNullOrEmpty(includes))
					includes = includes + "," + fkIncludes;
				else
					includes = fkIncludes;
                
                var es = con.accServiceProducts;
				IQueryable<accServiceProduct> query = es.AsQueryable();
		
				// include relations FK
				if(string.IsNullOrEmpty(includes) ){
					includes ="";
				}
				bool includeaccFile = includes.Split(char.Parse(",")).Contains("accFile");

				bool includeaccServiceProductCategory = includes.Split(char.Parse(",")).Contains("accServiceProductCategory");

				StringBuilder sbQuerySystem = new StringBuilder();
                    //predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				

				//if (!string.IsNullOrEmpty(predicateString))
                //      sbQuerySystem.Append(" And ");
                //sbQuerySystem.Append(" (IsDeleted != true Or IsDeleted = null) ");
				 filter.SetFilterPart("de", "(IsDeleted != true OR IsDeleted = null)");


					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
	                    	if (contextRequest.User !=null )
	                        	if (contextRequest.Company != null ){
	                        		//if (sbQuerySystem.Length > 0)
	                        		//	    			sbQuerySystem.Append( " And ");	
									//sbQuerySystem.Append(@" (GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
									filter.SetFilterPart("co",@"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @"""))");
								}
						}	
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				//string predicateString = predicate.ToDynamicLinq<accServiceProduct>();
				//predicateString += sbQuerySystem.ToString();
				filter.CleanAndProcess("");

				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed(); //SFSdotNet.Framework.Linq.Utils.ExtractSpecificProperties("", ref predicateString );               
                string predicateWithManyRelations = filter.GetFilterChildren(); //SFSdotNet.Framework.Linq.Utils.CleanPartExpression(predicateString);

                //QueryUtils.BreakeQuery1(predicateString, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
                var _queryable = query.AsQueryable();
                if (!string.IsNullOrEmpty(predicateWithManyRelations))
                    _queryable = _queryable.Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams);
				if (contextRequest.CustomQuery.SpecificProperties.Count > 0)
                {

                    StringBuilder sbProps = new StringBuilder();
                    contextRequest.CustomQuery.SpecificProperties.Add("GuidServiceProduct");
                    
					foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                    {
						if(sbProps.Length > 0)
							sbProps.Append(",");
                        sbProps.Append(prop);
                    }
					    IQueryable  queryableSelective = null ;
					  
					  if (!string.IsNullOrEmpty(predicateWithManyRelations))
							queryableSelective = con.accServiceProducts.AsQueryable().Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams).Select(string.Format("new({0})", sbProps.ToString()));
					else
						queryableSelective = con.accServiceProducts.AsQueryable().Select(string.Format("new({0})", sbProps.ToString()));


                    //if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
					//	queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

                    QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
                    
					if (!string.IsNullOrEmpty(queryOps.OrderByAndSort))
                        queryableSelective = queryableSelective.OrderBy(queryOps.OrderByAndSort);
                    if (queryOps.Skip != null)
                    {
                        queryableSelective = queryableSelective.Skip(queryOps.Skip.Value);
                    }
                    if (queryOps.PageSize != null)
                    {
                        queryableSelective = queryableSelective.Take(queryOps.PageSize.Value);
                    }
                    //var results = queryableSelective.ToList();
                    result = new List<accServiceProduct>();
                    accServiceProduct itemDef = null;
                    foreach (var item in queryableSelective)
                    {
                        itemDef = new accServiceProduct();

                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            if (!prop.Contains("."))
                            {
                                itemDef.GetType().GetProperty(prop).SetValue(itemDef, item.GetType().GetProperty(prop).GetValue(item));
                            }
                            else {
                                throw new Exception("La seleccion de relaciones aún no esta soportada");
                            }

                        }

                        result.Add(itemDef);
                    }

                }
                else
                {
				var  queryable = _queryable.Select(                    
				p => 
                        new
                    {
					GuidServiceProduct = p.GuidServiceProduct
,Title = p.Title
,CreatedDate = p.CreatedDate
,UpdatedDate = p.UpdatedDate
,CreatedBy = p.CreatedBy
,UpdatedBy = p.UpdatedBy
,IsDeleted = p.IsDeleted
,GuidCompany = p.GuidCompany

,accFile = includeaccFile ? p.accFile:null
,accServiceProductCategory = includeaccServiceProductCategory ? p.accServiceProductCategory:null


	
                    }
                    
                    );
					
				
                 if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
                    queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

				QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
            	if (!string.IsNullOrEmpty(queryOps.OrderByAndSort))
					queryable = queryable.OrderBy(queryOps.OrderByAndSort);
               	if (queryOps.Skip != null)
                {
                    queryable = queryable.Skip(queryOps.Skip.Value);
                }
                if (queryOps.PageSize != null)
                {
                    queryable = queryable.Take (queryOps.PageSize.Value);
                }
                result = queryable.AsEnumerable().
                    Select(
                    p =>  new accServiceProduct()
                    {
					GuidServiceProduct = p.GuidServiceProduct
,Title = p.Title
,CreatedDate = p.CreatedDate
,UpdatedDate = p.UpdatedDate
,CreatedBy = p.CreatedBy
,UpdatedBy = p.UpdatedBy
,IsDeleted = p.IsDeleted
,GuidCompany = p.GuidCompany
,accFile = p.accFile
,accServiceProductCategory = p.accServiceProductCategory

                    }
                     ).ToList();
				}


			 if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e = new BusinessRulesEventArgs<accServiceProduct>() { Items= result, IncludingComputedLinq = true, ContextRequest = contextRequest, FilterExpressionString  = predicateString } :  e);
  
			
  
                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
            }
        }
		public List<accServiceProduct> GetBy(Expression<Func<accServiceProduct, bool>> predicate, bool loadRelations, ContextRequest contextRequest)
        {
			if(!loadRelations)
				return GetBy(predicate, contextRequest);
			else
				return GetBy(predicate, contextRequest, "accInvoiceServProducts");

        }

        public List<accServiceProduct> GetBy(Expression<Func<accServiceProduct, bool>> predicate, int? pageSize, int? page, string orderBy, SFSdotNet.Framework.Data.SortDirection? sortDirection)
        {
            return GetBy(predicate, new ContextRequest() { CustomQuery = new CustomQuery() { Page = page, PageSize = pageSize, OrderBy = orderBy, SortDirection = sortDirection } });
        }
        public List<accServiceProduct> GetBy(Expression<Func<accServiceProduct, bool>> predicate)
        {

			if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }
			ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();

			contextRequest.CurrentContext = SFSdotNet.Framework.My.Context.CurrentContext;
			            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

            contextRequest.CustomQuery.FilterExpressionString = null;
            return this.GetBy(predicate, contextRequest, "");
        }
        #endregion
        #region Dynamic String
		private string GetSpecificFilter(string filter) {
            string result = "";
		    //string linqFilter = String.Empty;
            string freeTextFilter = String.Empty;
            if (filter.Contains("|"))
            {
               // linqFilter = filter.Split(char.Parse("|"))[0];
                freeTextFilter = filter.Split(char.Parse("|"))[1];
            }
            //else {
            //    freeTextFilter = filter;
            //}
            //else {
            //    linqFilter = filter;
            //}
			// linqFilter = SFSdotNet.Framework.Linq.Utils.ReplaceCustomDateFilters(linqFilter);
            //string specificFilter = linqFilter;
            if (!string.IsNullOrEmpty(freeTextFilter))
            {
                System.Text.StringBuilder sbCont = new System.Text.StringBuilder();
                /*if (specificFilter.Length > 0)
                {
                    sbCont.Append(" AND ");
                    sbCont.Append(" ({0})");
                }
                else
                {
                    sbCont.Append("{0}");
                }*/
                //var words = freeTextFilter.Split(char.Parse(" "));
				var word = freeTextFilter;
                System.Text.StringBuilder sbSpec = new System.Text.StringBuilder();
                 int nWords = 1;
				/*foreach (var word in words)
                {
					if (word.Length > 0){
                    if (sbSpec.Length > 0) sbSpec.Append(" AND ");
					if (words.Length > 1) sbSpec.Append("("); */
					
	
					
											
					sbSpec.Append(string.Format(@"Title.Contains(""{0}"")", word));

					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
								sbSpec.Append(" OR ");
					
					//if (sbSpec.Length > 2)
					//	sbSpec.Append(" OR "); // test
					sbSpec.Append(string.Format(@"accFile.FileType.Contains(""{0}"")", word)+" OR "+string.Format(@"accServiceProductCategory.Name.Contains(""{0}"")", word));
								 //sbSpec.Append("*extraFreeText*");

                    /*if (words.Length > 1) sbSpec.Append(")");
					
					nWords++;

					}

                }*/
                //specificFilter = string.Format("{0}{1}", specificFilter, string.Format(sbCont.ToString(), sbSpec.ToString()));
                                 result = sbSpec.ToString();  
            }
			//result = specificFilter;
			
			return result;

		}
	
			public List<accServiceProduct> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  params object[] extraParams)
        {
			return GetBy(filter, pageSize, page, orderBy, orderDir,  null, extraParams);
		}
           public List<accServiceProduct> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir, string usemode, params object[] extraParams)
            { 
                return GetBy(filter, pageSize, page, orderBy, orderDir, usemode, null, extraParams);
            }


		public List<accServiceProduct> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  string usemode, ContextRequest context, params object[] extraParams)

        {

            // string freetext = null;
            //if (filter.Contains("|"))
            //{
            //    int parts = filter.Split(char.Parse("|")).Count();
            //    if (parts > 1)
            //    {

            //        freetext = filter.Split(char.Parse("|"))[1];
            //    }
            //}
		
            //string specificFilter = "";
            //if (!string.IsNullOrEmpty(filter))
            //  specificFilter=  GetSpecificFilter(filter);
            if (string.IsNullOrEmpty(orderBy))
            {
			                orderBy = "UpdatedDate";
            }
			//orderDir = "desc";
			SFSdotNet.Framework.Data.SortDirection direction = SFSdotNet.Framework.Data.SortDirection.Ascending;
            if (!string.IsNullOrEmpty(orderDir))
            {
                if (orderDir == "desc")
                    direction = SFSdotNet.Framework.Data.SortDirection.Descending;
            }
            if (context == null)
                context = new ContextRequest();
			else
                context.CustomQuery = new CustomQuery();
             //context.FreeText = freetext;
             context.UseMode = usemode;
             context.CustomQuery =new SFSdotNet.Framework.My.CustomQuery()
 
                {
                    ExtraParams = extraParams,

                    OrderBy = orderBy,
                    SortDirection = direction,
                    Page = page,
                    PageSize = pageSize
               };
            

            if (!preventSecurityRestrictions) {
			 if (context.CurrentContext == null)
                {
					if (SFSdotNet.Framework.My.Context.CurrentContext != null &&  SFSdotNet.Framework.My.Context.CurrentContext.Company != null && SFSdotNet.Framework.My.Context.CurrentContext.User != null)
					{
						context.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
						context.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

					}
					else {
						throw new Exception("The security rule require a specific user and company");
					}
				}
            }
            return GetBy(filter, context);
  
        }


        public List<accServiceProduct> GetBy(string strWhere, ContextRequest contextRequest)
        {
        	#region old code
				
				 //Expression<Func<tvsReservationTransport, bool>> predicate = null;
				string strWhereClean = strWhere.Replace("*extraFreeText*", "").Replace("()", "");
                //if (!string.IsNullOrEmpty(strWhereClean)){

                //    object[] extraParams = null;
                //    //if (contextRequest != null )
                //    //    if (contextRequest.CustomQuery != null )
                //    //        extraParams = contextRequest.CustomQuery.ExtraParams;
                //    //predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<tvsReservationTransport, bool>(strWhereClean, extraParams != null? extraParams.Cast<Guid>(): null);				
                //}
				 if (contextRequest == null)
                {
                    contextRequest = new ContextRequest();
                    if (contextRequest.CustomQuery == null)
                        contextRequest.CustomQuery = new CustomQuery();
                }
                  if (!preventSecurityRestrictions) {
					if (contextRequest.User == null || contextRequest.Company == null)
                      {
                     if (SFSdotNet.Framework.My.Context.CurrentContext.Company != null && SFSdotNet.Framework.My.Context.CurrentContext.User != null)
                     {
                         contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                         contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

                     }
                     else {
                         throw new Exception("The security rule require a specific User and Company ");
                     }
					 }
                 }
            contextRequest.CustomQuery.FilterExpressionString = strWhere;
				//return GetBy(predicate, contextRequest);  

			#endregion				
				
                    return GetBy(strWhere, contextRequest, "");  


        }
       public List<accServiceProduct> GetBy(string strWhere)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
			
            return GetBy(strWhere, context, null);
        }

        public List<accServiceProduct> GetBy(string strWhere, string includes)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
            return GetBy(strWhere, context, includes);
        }

        #endregion
        #endregion
		
		  #region SaveOrUpdate
        private accServiceProduct Save(accServiceProduct entity, bool saveChanges, EFPocoContext con)
        {
				ObjectContext context = null;
            return Update(entity, saveChanges,null, out context);

			
        }
		 public  accServiceProduct Create( accServiceProduct entity, params Expression<Func< accServiceProduct, object>>[] paths)
         {
             return Create(entity, null, paths);

         }
 		 public accServiceProduct Create(accServiceProduct entity)
        {
				ObjectContext context = null;
				    if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: Create");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

				return this.Create(entity, true, contextRequest, out context);


        }
        public accServiceProduct Create(accServiceProduct entity, ContextRequest contextRequest)
         {
             ObjectContext context = null;
             return this.Create(entity, true, contextRequest,out context);

         }
         public accServiceProduct Create(accServiceProduct entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext context)
        {
                    return Create(entity, saveChanges , contextRequest , out context, null);
        }
         public accServiceProduct Create(accServiceProduct entity, ContextRequest contextRequest, params Expression<Func<accServiceProduct,object>>[] paths)
        {
            ObjectContext context = null;
            if(paths != null)
				return Create(entity, true,contextRequest, out context, paths);
			else 
				return Create(entity, true,contextRequest, out context);
        }
        public accServiceProduct Create(accServiceProduct entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext context, params Expression<Func<accServiceProduct,object>>[] pocopaths)
        {
			using (EFPocoContext con = new EFPocoContext())
			{
				accServiceProduct itemResult = null;
#region Autos


			entity.CreatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.CreatedBy = contextRequest.User.GuidUser;
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.UpdatedBy = contextRequest.User.GuidUser;
	
			if (contextRequest != null)
				if(contextRequest.User != null)
					if (contextRequest.Company != null)
						entity.GuidCompany = contextRequest.Company.GuidCompany;
	

#endregion
                e = null;
                OnCreating(this,e = new BusinessRulesEventArgs<accServiceProduct>() { ContextRequest = contextRequest, Item=entity, PathExpressions = pocopaths, SaveChanges =saveChanges });
				   if (e != null) {
						if (e.Cancel)
						{
							context = null;
							return e.Item;

						}
					}

                    if (entity.GuidServiceProduct == Guid.Empty)
                   {
                       entity.GuidServiceProduct = Guid.NewGuid();

                   }



				accServiceProductAdapter adapter = con.GetAdapterObject<accServiceProductAdapter>(entity);;
				List<Expression<Func<accServiceProductAdapter, object>>> paths = new List<Expression<Func<accServiceProductAdapter,object>>>();
                
			    if (pocopaths != null && pocopaths.Length > 0)
                {
					// Translate
                    foreach (var pocopath in pocopaths)
                    {
                        var param = Expression.Parameter(typeof(accServiceProductAdapter), "p");
                        var member = MemberExpression.PropertyOrField(param, ((System.Linq.Expressions.MemberExpression)(((System.Linq.Expressions.LambdaExpression)(pocopath)).Body)).Member.Name);
                        Expression<Func<accServiceProductAdapter, object>> path  = null;
                        switch(member.Member.Name){
                        
							case "accInvoiceServProducts":
								path = p => p.accInvoiceServProducts.First().WithoutUpdate();

								//path = p => member;
								//path = p => p.accInvoiceServProducts.First().accInvoice.WithoutUpdate();											
							break;
							
							default:
								path = p => member;
							break;
                        }

                        
                       paths.Add(path.Expand());
                    }
                }
                object aux = null;
					paths.Add(p => p.accFile.WithoutUpdate());

					paths.Add(p => p.accServiceProductCategory.WithoutUpdate());

					//paths = pathBuilder.ToArray();

				if (adapter.accFile != null ){
					if(adapter.accFile.EntityKey == null) adapter.accFile.EntityKey = con.WrappedContext.CreateEntityKey("accFiles", adapter.accFile);
				}
#region Childs accInvoiceServProducts 
				if (adapter.accInvoiceServProducts != null)
                {
                    foreach (var item in adapter.accInvoiceServProducts)
                    {
						
							if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accInvoiceServProducts", item);
							if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)){ 
								//paths.Add(p => p.accInvoiceServProducts.First().WithoutUpdate());
								
						if (item.accInvoice != null){
							item.accInvoice.EntityKey = con.WrappedContext.CreateEntityKey("accInvoices", item.accInvoice);
                            
             
						}								
							if (item.accServiceProduct == null)
								item.accServiceProduct = adapter;

								item.EntityKey = null;
							}

                    }
					if (adapter.accInvoiceServProducts.Count > 0){
						paths.Add(p => p.accInvoiceServProducts.First().WithoutUpdate());
						paths.Add(p => p.accInvoiceServProducts.First().accInvoice.WithoutUpdate());
					
					}
                }
#endregion 

				if (adapter.accServiceProductCategory != null ){
					if(adapter.accServiceProductCategory.EntityKey == null) adapter.accServiceProductCategory.EntityKey = con.WrappedContext.CreateEntityKey("accServiceProductCategories", adapter.accServiceProductCategory);
				}



                //con.WrappedContext.AttachObjectGraph<accServiceProductAdapter>(adapter, p=>p.accInvoiceServProducts, p=>p.accServiceProductCategory);
                con.WrappedContext.AttachObjectGraph<accServiceProductAdapter>(adapter, paths.ToArray());
              	if (saveChanges){
                    con.WrappedContext.SaveChanges(SaveOptions.AcceptAllChangesAfterSave);
					 
				}
                else
                    con.WrappedContext.SaveChanges(SaveOptions.None);
                if (!saveChanges)
                    context = con.WrappedContext;
                else
                    context = null;
				itemResult = adapter.PocoEntity;
                if (e != null)
                {
                    e.Item = itemResult;
                }
                OnCreated(this, e == null ? e = new BusinessRulesEventArgs<accServiceProduct>() { ContextRequest = contextRequest, Item = itemResult, PathExpressions = pocopaths, SaveChanges = saveChanges } : e);



                if (e != null)
                {
                    itemResult = e.Item;
                }
                              return itemResult;
            }
        }
        BusinessRulesEventArgs<accServiceProduct> e = null;
        public void Create(List<accServiceProduct> entities)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            Create(entities, contextRequest, null);
        }
        public void Create(List<accServiceProduct> entities, ContextRequest contextRequest)
        
        {
			ObjectContext context = null;
            	foreach (accServiceProduct entity in entities)
				{
					this.Create(entity, true, contextRequest, out context);
				}
        }
         public accServiceProduct Update(accServiceProduct entity)
        {
            if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return Update(entity, contextRequest);
        }
        public accServiceProduct Update(accServiceProduct entity, ContextRequest requestContext)
        {
			  ObjectContext context = null;
            return Update(entity, true,requestContext, out context);
         }
		public  accServiceProduct Update(accServiceProduct entity, params Expression<Func<accServiceProduct, object>>[] pocopaths)
        {
			  ObjectContext context = null;
              return Update(entity, true, null, out context, pocopaths);
         }
        public accServiceProduct Update(accServiceProduct entity, ContextRequest requestContext, bool saveChanges, out ObjectContext outcontext)
        {
			return Update(entity, saveChanges,requestContext, out outcontext, null);
		}
         public accServiceProduct Update(accServiceProduct entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext outcontext, params Expression<Func<accServiceProduct,object>>[] pocopaths)
        {
		 if ((System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null) && contextRequest == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Update");
            }
            if (contextRequest == null)
            {
                contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            }

			using (EFPocoContext con = new EFPocoContext())
			{
				accServiceProduct  itemResult = null;

	
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
			if(contextRequest.User != null)
				entity.UpdatedBy = contextRequest.User.GuidUser;

	    var oldentity = GetBy(p => p.GuidServiceProduct == entity.GuidServiceProduct, contextRequest).FirstOrDefault();
		if (oldentity != null) {
		
            entity.CreatedDate = oldentity.CreatedDate;
            entity.CreatedBy = oldentity.CreatedBy;
	
            entity.GuidCompany = oldentity.GuidCompany;
	
			

		}

				e = null;
                OnUpdating(this,e = new BusinessRulesEventArgs<accServiceProduct>() { ContextRequest = contextRequest, Item=entity, PathExpressions = pocopaths, SaveChanges =saveChanges });
				   if (e != null) {
						if (e.Cancel)
						{
							outcontext = null;
							return e.Item;

						}
					}

                accServiceProductAdapter adapter = con.GetAdapterObject<accServiceProductAdapter>(entity);
                adapter.EntityKey = con.WrappedContext.CreateEntityKey("accServiceProducts", adapter);
				    var es = con.accServiceProducts;
				List<Expression<Func<accServiceProductAdapter, object>>> paths = new List<Expression<Func<accServiceProductAdapter,object>>>();
                /* if (pocopaths != null)
                    if (pocopaths.Length == 0)
                        pocopaths = null;*/

			    if (pocopaths != null && pocopaths.Length > 0)
                {
					// Translate
                    foreach (var pocopath in pocopaths)
                    {
                        var param = Expression.Parameter(typeof(accServiceProductAdapter), "p");
                        var member = MemberExpression.PropertyOrField(param, ((System.Linq.Expressions.MemberExpression)(((System.Linq.Expressions.LambdaExpression)(pocopath)).Body)).Member.Name);
                        Expression<Func<accServiceProductAdapter, object>> path  = null;
                        switch(member.Member.Name){
                        
							case "accInvoiceServProducts":
								//path = p => member;
								path = p => p.accInvoiceServProducts.First().WithoutUpdate();
				//				path = p => p.accInvoiceServProducts.First().accInvoice.WithoutUpdate();											
							break;
							
							default:
								path = p => member;
							break;
                        }

                        paths.Add(path.Expand());
 					}
                }
                else {
                  paths = new List<Expression<Func<accServiceProductAdapter, object>>>();

					//List<Expression<Func<accServiceProductAdapter,object>>> pathBuilder = new List<Expression<Func<accServiceProductAdapter,object>>>();
					paths.Add(p => p.accFile.WithoutUpdate());

					paths.Add(p => p.accServiceProductCategory.WithoutUpdate());

		
					//paths = pathBuilder.ToArray();		
			}
			object aux = null;
				if (adapter.accFile != null ){
					if(adapter.accFile.EntityKey == null) adapter.accFile.EntityKey = con.WrappedContext.CreateEntityKey("accFiles", adapter.accFile);
				}

                
				if (adapter.accInvoiceServProducts != null)
                {
                    foreach (var item in adapter.accInvoiceServProducts)
                    {


                        if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accInvoiceServProducts", item);
						if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)) item.EntityKey = null;
                        
                    }
					
                    if (adapter.accInvoiceServProducts.Count > 0)
                    {
                        paths.Add(p => p.accInvoiceServProducts.First().WithoutUpdate());

                    }

                }
				if (adapter.accServiceProductCategory != null ){
					if(adapter.accServiceProductCategory.EntityKey == null) adapter.accServiceProductCategory.EntityKey = con.WrappedContext.CreateEntityKey("accServiceProductCategories", adapter.accServiceProductCategory);
				}

                



                //con.AttachObjectGraph<accServiceProduct>(adapter, p=>p.accInvoiceServProducts, p=>p.accServiceProductCategory);
                con.WrappedContext.AttachObjectGraph<accServiceProductAdapter>(adapter, paths.ToArray());
				if (saveChanges){
                	con.WrappedContext.SaveChanges();
					 
					}
                if(!saveChanges)
					outcontext = con.WrappedContext;
				else
					outcontext = null;
				itemResult = adapter.PocoEntity;
				OnUpdated(this, e = new BusinessRulesEventArgs<accServiceProduct>() { ContextRequest = contextRequest, Item=itemResult, PathExpressions = pocopaths, SaveChanges =saveChanges });

              	return itemResult;

			  }
        }
        public accServiceProduct Save(accServiceProduct entity)
        {
			return Save(entity, true, null);
        }
        public int Save(List<accServiceProduct> entities)
        {
			using (EFPocoContext con = new EFPocoContext())
			{
			
            int n = 0;
            foreach (accServiceProduct item in entities)
            {
                try
                {
                    this.Save(item, false, con);
                    n++;
                }catch (Exception ex){
                    SFSdotNet.Framework.My.EventLog.Exception(ex);
                }
            }
            con.SaveChanges();
            return n;
            }
        }
        #endregion
        #region Delete
        public void Delete(accServiceProduct entity)
        {
				this.Delete(entity, null);
			
        }
		 public void Delete(accServiceProduct entity, ContextRequest contextRequest)
        {
				ObjectContext context = null;
				this.Delete(entity, true, out context, contextRequest);
			
        }

        
        public void Delete(accServiceProduct entity, bool saveChanges, out  ObjectContext context, ContextRequest contextRequest, BusinessRulesEventArgs<accServiceProduct> e = null)
        {
			using (EFPocoContext _con = new EFPocoContext())
			{
				int result = 0;
				
               	BusinessRulesEventArgs<accServiceProduct> _e = null;
               List<accServiceProduct> _items = new List<accServiceProduct>();
                _items.Add(entity);
                if (e == null || e.PreventPartialPropagate == false)
                {
                    OnDeleting(this, _e = (e == null ? new BusinessRulesEventArgs<accServiceProduct>() { ContextRequest = contextRequest, Item = entity, Items = _items, SaveChanges = saveChanges } : e));
                }
                if (_e != null)
                {
                    if (_e.Cancel)
						{
							context = null;
							return;

						}
					}


				accServiceProductAdapter adapter = _con.GetAdapterObject<accServiceProductAdapter>(entity);
                adapter.EntityKey = _con.WrappedContext.CreateEntityKey("accServiceProducts", adapter);
                
	            //adapter = _con.WrappedContext.AttachObjectGraph<accServiceProductAdapter>(adapter);
				try{
					_con.WrappedContext.AttachTo("accServiceProducts", adapter);
                }catch{
					
				}
									//IsDeleted
					bool logicDelete = true;
					if (adapter.IsDeleted != null)
					{
						if (adapter.IsDeleted.Value)
							logicDelete = false;
					}
					if (logicDelete)
					{
											entity = GetBy(p => p.GuidServiceProduct == entity.GuidServiceProduct, contextRequest).FirstOrDefault();
						entity.IsDeleted = true;
						Update(entity, contextRequest);
					}
					else {
						_con.WrappedContext.DeleteObject(adapter);
					}
								
				if (!saveChanges)
                    context = _con.WrappedContext;
                else
                    context = null;
				 SaveOptions saveOption = SaveOptions.None;
                if (saveChanges)
                    saveOption = SaveOptions.AcceptAllChangesAfterSave;

				result = _con.WrappedContext.SaveChanges(saveOption);
				if (saveChanges){
					
					}
			if (e == null || e.PreventPartialPropagate == false)
                {

                    if (_e == null)
                        _e = new BusinessRulesEventArgs<accServiceProduct>() { ContextRequest = contextRequest, Item = entity, Items = _items };

                    OnDeleted(this, _e);
                }

				//return null;
			}            
        }
        public void Delete(List<accServiceProduct> entities,  ContextRequest contextRequest = null )
        {
				ObjectContext context = null;
			 BusinessRulesEventArgs<accServiceProduct> _e = null;

                OnDeleting(this, _e = new BusinessRulesEventArgs<accServiceProduct>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities });
                if (_e != null)
                {
                    if (_e.Cancel)
                    {
                        context = null;
                        return;

                    }
                }
                bool allSucced = true;
                BusinessRulesEventArgs<accServiceProduct> eToChilds = new BusinessRulesEventArgs<accServiceProduct>();
                if (_e != null)
                {
                    eToChilds = _e;
                }
                else
                {
                    eToChilds = new BusinessRulesEventArgs<accServiceProduct>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                }
				foreach (accServiceProduct item in entities)
				{
					try
                    {
                        this.Delete(item, true, out context, contextRequest, e: eToChilds);
                    }
                    catch (Exception ex)
                    {
                        SFSdotNet.Framework.My.EventLog.Error(ex);
                        allSucced = false;
                    }
				}
				if (_e == null)
                    _e = new BusinessRulesEventArgs<accServiceProduct>() { ContextRequest = contextRequest, CountResult = entities.Count, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                OnDeleted(this, _e);

			
        }
        #endregion
 
        #region GetCount
		 public int GetCount(Expression<Func<accServiceProduct, bool>> predicate)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

			return GetCount(predicate, contextRequest);
		}
        public int GetCount(Expression<Func<accServiceProduct, bool>> predicate, ContextRequest contextRequest)
        {


		
			using (EFPocoContext con = new EFPocoContext())
			{


				if (predicate == null) predicate = PredicateBuilder.True<accServiceProduct>();
           		predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted == null);
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    		if (contextRequest.User !=null )
                        		if (contextRequest.Company != null )
                        			predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				
				return con.accServiceProducts.Count(predicate);
			}

        }
		  public int GetCount(string predicate,  ContextRequest contextRequest)
         {
             return GetCount(predicate, null, contextRequest);
         }

         public int GetCount(string predicate)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return GetCount(predicate, contextRequest);
        }
		 public int GetCount(string predicate, string usemode){
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
				return GetCount( predicate,  usemode,  contextRequest);
		 }
        public int GetCount(string predicate, string usemode, ContextRequest contextRequest){
			  string freetext = null;
            Filter filter = new Filter();

              if (predicate.Contains("|"))
              {
                 
                  filter.SetFilterPart("ft", GetSpecificFilter(predicate));
                 
                  filter.ProcessText(predicate.Split(char.Parse("|"))[0]);
                  freetext = predicate.Split(char.Parse("|"))[1];
              }
              else {
                  filter.ProcessText(predicate);
              }
           
			e = null;
			contextRequest.FreeText = freetext;
			contextRequest.UseMode = usemode;
            OnCounting(this, e = new BusinessRulesEventArgs<accServiceProduct>() {  Filter =filter, ContextRequest = contextRequest });
            if (e != null)
            {
                if (e.Cancel)
                {
                    context = null;
                    return e.CountResult;

                }

            

            }
			 predicate = filter.GetFilterComplete();
			StringBuilder sbQuerySystem = new StringBuilder();
		
					
                    filter.SetFilterPart("de","(IsDeleted != true OR IsDeleted == null)");
			
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    	if (contextRequest.User !=null )
                        	if (contextRequest.Company != null ){
                        		

								filter.SetFilterPart("co", @"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
						
						
							}
							
							}
							if (preventSecurityRestrictions) preventSecurityRestrictions= false;
			using (EFContext con = new EFContext())
			{
				   
                 filter.CleanAndProcess("");
				//string predicateWithFKAndComputed = SFSdotNet.Framework.Linq.Utils.ExtractSpecificProperties("", ref predicate );               
				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed();
               string predicateWithManyRelations = filter.GetFilterChildren();
			   ///QueryUtils.BreakeQuery1(predicate, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
			   predicate = filter.GetFilterComplete();
               if (!string.IsNullOrEmpty(predicate))
               {
				
					
                    return con.accServiceProducts.Count(System.Linq.Dynamic.DynamicExpression.ParseLambda<accServiceProduct, bool>(predicate));
					
                }else
                    return con.accServiceProducts.Count();

			}

		}
         public int GetCount()
        {
            return GetCount(p => true);
        }
        #endregion
        
         public accServiceProduct Update(accServiceProduct entity, string paths)
        {
            return Update(entity, paths.Split(char.Parse(",")));
            
        }

        public accServiceProduct Update(accServiceProduct entity, string[] paths)
        {
            // Translate
            List<Expression<Func<accServiceProduct, object>>> pathList = new List<Expression<Func<accServiceProduct, object>>>();
            for (int i = 0; i <= paths.Length -1; i++)
            {
                var param = Expression.Parameter(typeof(accServiceProduct), "p");
                var member = MemberExpression.PropertyOrField(param, paths[i]);

                Expression<Func<accServiceProduct, object>> path = p => member;
                pathList.Add(path.Expand());
            }
			ObjectContext context = null;
			 return Update(entity, true,null, out context,  pathList.ToArray());
           //return Update(entity, pathList.ToArray());
        }

        public void Update(List<accServiceProduct> entities, string paths)
        {
            foreach (var entity in entities )
            {
                Update(entity, paths);
            }
        }
		public accServiceProduct Create(accServiceProduct entity, ContextRequest contextRequest, string paths)
        {
          

            if (string.IsNullOrEmpty(paths))
                return Create(entity, contextRequest);

            return Create(entity, contextRequest, paths.Split(char.Parse(",")));
        }
        public accServiceProduct Create(accServiceProduct entity, string paths)
        {
			 if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return Create(entity, contextRequest, paths);

        }

        public  void Create(List<accServiceProduct> entities, ContextRequest requestContext, string paths)
        {
            foreach (var entity in entities)
            {
                Create(entity,requestContext, paths);
            }
        }

        public void Create(List<accServiceProduct> entities, string[] paths)
        {
            foreach (var entity in entities)
            {
                Create(entity, null, paths);
            }
        }
        
        public accServiceProduct  Create(accServiceProduct entity, ContextRequest contextRequest, string[] paths)
        {
            List<Expression<Func<accServiceProduct, object>>> pathList = new List<Expression<Func<accServiceProduct, object>>>();
            for (int i = 0; i < paths.Length - 1; i++)
            {
                var param = Expression.Parameter(typeof(accServiceProduct), "p");
                var member = MemberExpression.PropertyOrField(param, paths[i]);

                Expression<Func<accServiceProduct, object>> path = p => member;
                pathList.Add(path.Expand());
            }
            return Create(entity, contextRequest, pathList.ToArray());
        }
        public void Delete(List<accServiceProduct.CompositeKey> entityKeys)
        {

            List<accServiceProduct> items = new List<accServiceProduct>();
            foreach (var itemKey in entityKeys)
            {
                items.Add(GetByKey(itemKey.GuidServiceProduct));
            }

            Delete(items);

        }
		
		
	}
		public partial class accReusableCatalogValuesBR{
	 	
           
		 #region Partial methods

           partial void OnUpdating(object sender, BusinessRulesEventArgs<accReusableCatalogValue> e);

            partial void OnUpdated(object sender, BusinessRulesEventArgs<accReusableCatalogValue> e);

            partial void OnCreating(object sender, BusinessRulesEventArgs<accReusableCatalogValue> e);
            partial void OnCreated(object sender, BusinessRulesEventArgs<accReusableCatalogValue> e);

            partial void OnDeleting(object sender, BusinessRulesEventArgs<accReusableCatalogValue> e);
            partial void OnDeleted(object sender, BusinessRulesEventArgs<accReusableCatalogValue> e);

            partial void OnGetting(object sender, BusinessRulesEventArgs<accReusableCatalogValue> e);
            partial void OnTaken(object sender, BusinessRulesEventArgs<accReusableCatalogValue> e);
            partial void OnCounting(object sender, BusinessRulesEventArgs<accReusableCatalogValue> e);
 
 
            #endregion
			
		private static accReusableCatalogValuesBR singlenton =null;
				public static accReusableCatalogValuesBR NewInstance(){
					return  new accReusableCatalogValuesBR();
					
				}
		public static accReusableCatalogValuesBR Instance{
			get{
				if (singlenton == null)
					singlenton = new accReusableCatalogValuesBR();
				return singlenton;
			}
		}
		private bool preventSecurityRestrictions = false;
		 public bool PreventAuditTrail { get; set;  }
		#region Fields
        EFPocoContext context = null;
        #endregion
        #region Constructor
        public accReusableCatalogValuesBR()
        {
            context = new EFPocoContext();
        }
		 public accReusableCatalogValuesBR(bool preventSecurity)
            {
                this.preventSecurityRestrictions = preventSecurity;
				context = new EFPocoContext();
            }
        #endregion
		
		#region Get

 		public IQueryable<accReusableCatalogValue> Get()
        {
            //using (EFContext con = new EFContext())
            //{
				EFContext con = new EFContext();
                var query = con.accReusableCatalogValues.AsQueryable();
                con.ContextOptions.ProxyCreationEnabled = false;

                //query = ContextQueryBuilder<Nutrient>.ApplyContextQuery(query, contextRequest);

                return query;




            //}

        }
		
		public List<accReusableCatalogValue> GetAll()
        {
            return this.GetBy(p => true);
        }
        public List<accReusableCatalogValue> GetAll(string includes)
        {
            return this.GetBy(p => true, includes);
        }
        public accReusableCatalogValue GetByKey(Guid guidReusableCatalogValue)
        {
            return GetByKey(guidReusableCatalogValue, true);
        }
        public accReusableCatalogValue GetByKey(Guid guidReusableCatalogValue, bool loadIncludes)
        {
            accReusableCatalogValue item = null;
			var query = PredicateBuilder.True<accReusableCatalogValue>();
                    
			string strWhere = @"GuidReusableCatalogValue = Guid(""" + guidReusableCatalogValue.ToString()+@""")";
            Expression<Func<accReusableCatalogValue, bool>> predicate = null;
            if (!string.IsNullOrEmpty(strWhere))
                predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<accReusableCatalogValue, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
			 ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();
            contextRequest.CustomQuery.FilterExpressionString = strWhere;

			//item = GetBy(predicate, loadIncludes, contextRequest).FirstOrDefault();
			item = GetBy(strWhere,loadIncludes,contextRequest).FirstOrDefault();
            return item;
        }
         public List<accReusableCatalogValue> GetBy(string strWhere, bool loadRelations, ContextRequest contextRequest)
        {
            if (!loadRelations)
                return GetBy(strWhere, contextRequest);
            else
                return GetBy(strWhere, contextRequest, "");

        }
		  public List<accReusableCatalogValue> GetBy(string strWhere, bool loadRelations)
        {
              if (!loadRelations)
                return GetBy(strWhere, new ContextRequest());
            else
                return GetBy(strWhere, new ContextRequest(), "");

        }
         public accReusableCatalogValue GetByKey(Guid guidReusableCatalogValue, params Expression<Func<accReusableCatalogValue, object>>[] includes)
        {
            accReusableCatalogValue item = null;
			string strWhere = @"GuidReusableCatalogValue = Guid(""" + guidReusableCatalogValue.ToString()+@""")";
          Expression<Func<accReusableCatalogValue, bool>> predicate = null;
            if (!string.IsNullOrEmpty(strWhere))
                predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<accReusableCatalogValue, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
        item = GetBy(predicate, includes).FirstOrDefault();
         ////   item = GetBy(strWhere,includes).FirstOrDefault();
			return item;

        }
        public accReusableCatalogValue GetByKey(Guid guidReusableCatalogValue, string includes)
        {
            accReusableCatalogValue item = null;
			string strWhere = @"GuidReusableCatalogValue = Guid(""" + guidReusableCatalogValue.ToString()+@""")";
            
			
            item = GetBy(strWhere, includes).FirstOrDefault();
            return item;

        }
		 public accReusableCatalogValue GetByKey(Guid guidReusableCatalogValue, string usemode, string includes)
		{
			return GetByKey(guidReusableCatalogValue, usemode, null, includes);

		 }
		 public accReusableCatalogValue GetByKey(Guid guidReusableCatalogValue, string usemode, ContextRequest context,  string includes)
        {
            accReusableCatalogValue item = null;
			string strWhere = @"GuidReusableCatalogValue = Guid(""" + guidReusableCatalogValue.ToString()+@""")";
			if (context == null)
				context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
			context.CustomQuery.IsByKey = true;
            context.CustomQuery.FilterExpressionString = strWhere;
            context.UseMode = usemode;
            item = GetBy(strWhere,context , includes).FirstOrDefault();
            return item;

        }

        #region Dynamic Predicate
        public List<accReusableCatalogValue> GetBy(Expression<Func<accReusableCatalogValue, bool>> predicate, int? pageSize, int? page)
        {
            return this.GetBy(predicate, pageSize, page, null, null);
        }
        public List<accReusableCatalogValue> GetBy(Expression<Func<accReusableCatalogValue, bool>> predicate, ContextRequest contextRequest)
        {

            return GetBy(predicate, contextRequest,"");
        }
        
        public List<accReusableCatalogValue> GetBy(Expression<Func<accReusableCatalogValue, bool>> predicate, ContextRequest contextRequest, params Expression<Func<accReusableCatalogValue, object>>[] includes)
        {
            StringBuilder sb = new StringBuilder();
           if (includes != null)
            {
                foreach (var path in includes)
                {

						if (sb.Length > 0) sb.Append(",");
						sb.Append(SFSdotNet.Framework.Linq.Utils.IncludeToString<accReusableCatalogValue>(path));

               }
            }
            return GetBy(predicate, contextRequest, sb.ToString());
        }
        
        
        public List<accReusableCatalogValue> GetBy(Expression<Func<accReusableCatalogValue, bool>> predicate, string includes)
        {
			ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";

            return GetBy(predicate, context, includes);
        }

        public List<accReusableCatalogValue> GetBy(Expression<Func<accReusableCatalogValue, bool>> predicate, params Expression<Func<accReusableCatalogValue, object>>[] includes)
        {
			if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }
			ContextRequest context = new ContextRequest();
			            context.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            context.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";
            return GetBy(predicate, context, includes);
        }

      
		public bool DisableCache { get; set; }
		 public List<accReusableCatalogValue> GetBy(Expression<Func<accReusableCatalogValue, bool>> predicate, ContextRequest contextRequest, string includes)
        {
            using (EFPocoContext con = new EFPocoContext())
            {
				if (DisableCache) 
                	con.CachingPolicy = EFCachingProvider.Caching.CachingPolicy.NoCaching;

				List<accReusableCatalogValue> result = null;
                 e = null;
	
				OnGetting(con, e = new BusinessRulesEventArgs<accReusableCatalogValue>() {  FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null) });

               // OnGetting(con,e = new BusinessRulesEventArgs<accReusableCatalogValue>() { FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = contextRequest.CustomQuery.FilterExpressionString});
				   if (e != null) {
				    predicate = e.FilterExpression;
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				con.EnableChangeTrackingUsingProxies = false;
				con.WrappedContext.accReusableCatalogValues.MergeOption = MergeOption.NoTracking;
                con.WrappedContext.ContextOptions.ProxyCreationEnabled = false;
                if (predicate == null) predicate = PredicateBuilder.True<accReusableCatalogValue>();
 				string fkIncludes = "accReusableCatalog";
                if(contextRequest!=null){
					if (contextRequest.CustomQuery != null)
					{
						if (contextRequest.CustomQuery.IncludeForeignKeyPaths != null) {
							if (contextRequest.CustomQuery.IncludeForeignKeyPaths.Value == false)
								fkIncludes = "";
						}
					}
				}
				if (!string.IsNullOrEmpty(includes))
					includes = includes + "," + fkIncludes;
				else
					includes = fkIncludes;
                
                var es = con.accReusableCatalogValues;

                IQueryable<accReusableCatalogValue> query = es.AsQueryable();

                                if (!string.IsNullOrEmpty(includes))
                {
                    foreach (string include in includes.Split(char.Parse(",")))
                    {
						if (!string.IsNullOrEmpty(include))
                            query = query.Include(include);
                    }
                }
				query =query.Where(predicate);
                query = ContextQueryBuilder<accReusableCatalogValue>.ApplyContextQuery(query, contextRequest);

                result = query.ToList<accReusableCatalogValue>();
				  
                if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e =  new BusinessRulesEventArgs<accReusableCatalogValue>() { Items= result, IncludingComputedLinq = false, ContextRequest = contextRequest,  FilterExpression = predicate } :  e);
  
			

                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
            }
        }
		public void UpdateAgile(accReusableCatalogValue item, params string[] fields)
         {
             List<accReusableCatalogValue> list = new List<accReusableCatalogValue>();
             list.Add(item);
             this.UpdateBulk(list, fields);
         }
		public void UpdateBulk(List<accReusableCatalogValue>  items, params string[] fields)
         {
             SFSdotNet.Framework.My.ContextRequest req = new SFSdotNet.Framework.My.ContextRequest();
             req.CustomQuery = new SFSdotNet.Framework.My.CustomQuery();
             foreach (var field in fields)
             {
                 req.CustomQuery.SpecificProperties.Add(field);
             }
             UpdateBulk(items, req);

         }
        public void UpdateBulk(List<accReusableCatalogValue> items, ContextRequest req)
        {
            using (EFContext con = new EFContext())
            {



                foreach (var item in items)
                {
                    var setT = con.CreateObjectSet<accReusableCatalogValue>("accReusableCatalogValues");


                    var itemForAttach = new accReusableCatalogValue();
			itemForAttach.GuidReusableCatalogValue = item.GuidReusableCatalogValue;
					
                    itemForAttach = SFSdotNet.Framework.Entities.ConvertEntity.SetProperties<accReusableCatalogValue>(item, itemForAttach, null, req.CustomQuery.SpecificProperties.ToArray());
                    setT.Attach(itemForAttach);


                    foreach (var property in req.CustomQuery.SpecificProperties)
                    {
						
                        if (property != "GuidReusableCatalogValue")
                            con.ObjectStateManager.GetObjectStateEntry(itemForAttach).SetModifiedProperty(property);

                    }

                }
                con.SaveChanges();


            }
        }
		/*public int Update(List<accReusableCatalogValue> items, ContextRequest contextRequest)
            {
                int result = 0;
                using (EFContext con = new EFContext())
                {
                   
                

                    foreach (var item in items)
                    {
                        //secMessageToUser messageToUser = new secMessageToUser();
                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            item.GetType().GetProperty(prop).SetValue(item, item.GetType().GetProperty(prop).GetValue(item));
                        }
                        //messageToUser.GuidMessageToUser = (Guid)item.GetType().GetProperty("GuidMessageToUser").GetValue(item);

                        var setObject = con.CreateObjectSet<accReusableCatalogValue>("accReusableCatalogValues");
                        //messageToUser.Readed = DateTime.UtcNow;
                        setObject.Attach(item);
                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            con.ObjectStateManager.GetObjectStateEntry(item).SetModifiedProperty(prop);
                        }
                       
                    }
                    result = con.SaveChanges();

                    


                }
                return result;
            }
           */
        public List<accReusableCatalogValue> GetBy(string predicateString, ContextRequest contextRequest, string includes)
        {
            using (EFContext con = new EFContext())
            {
				if (DisableCache) 
                	con.CachingPolicy = EFCachingProvider.Caching.CachingPolicy.NoCaching;

				Filter filter = new Filter();
                if (predicateString.Contains("|"))
                {
                    string ft = GetSpecificFilter(predicateString);
                    if (!string.IsNullOrEmpty(ft))
                        filter.SetFilterPart("ft", ft);
                   
                    contextRequest.FreeText = predicateString.Split(char.Parse("|"))[1];
                    var q1 = predicateString.Split(char.Parse("|"))[0];
                    if (!string.IsNullOrEmpty(q1))
                    {
                        filter.ProcessText(q1);
                    }
                }
                else {
                    filter.ProcessText(predicateString);
                }

				List<accReusableCatalogValue> result = null;
                 e = null;
					OnGetting(con, e = new BusinessRulesEventArgs<accReusableCatalogValue>() { Filter = filter, ContextRequest = contextRequest /*, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null)*/ });

                  //OnGetting(con,e = new BusinessRulesEventArgs<accReusableCatalogValue>() {  ContextRequest = contextRequest, FilterExpressionString = predicateString });
			   	if (e != null) {
				    //predicateString = e.GetQueryString();
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				//	 else {
                //      predicateString = predicateString.Replace("*extraFreeText*", "").Replace("()","");
                //  }
				//con.EnableChangeTrackingUsingProxies = false;
				con.accReusableCatalogValues.MergeOption = MergeOption.NoTracking;
                con.ContextOptions.ProxyCreationEnabled = false;
                //if (predicate == null) predicate = PredicateBuilder.True<accReusableCatalogValue>();
 				string fkIncludes = "accReusableCatalog";
                if(contextRequest!=null){
					if (contextRequest.CustomQuery != null)
					{
						if (contextRequest.CustomQuery.IncludeForeignKeyPaths != null) {
							if (contextRequest.CustomQuery.IncludeForeignKeyPaths.Value == false)
								fkIncludes = "";
						}
					}
				}else{
                    contextRequest = new ContextRequest();
                    contextRequest.CustomQuery = new CustomQuery();

                }
				if (!string.IsNullOrEmpty(includes))
					includes = includes + "," + fkIncludes;
				else
					includes = fkIncludes;
                
                var es = con.accReusableCatalogValues;
				IQueryable<accReusableCatalogValue> query = es.AsQueryable();
		
				// include relations FK
				if(string.IsNullOrEmpty(includes) ){
					includes ="";
				}
				bool includeaccReusableCatalog = includes.Split(char.Parse(",")).Contains("accReusableCatalog");

				StringBuilder sbQuerySystem = new StringBuilder();
				//string predicateString = predicate.ToDynamicLinq<accReusableCatalogValue>();
				//predicateString += sbQuerySystem.ToString();
				filter.CleanAndProcess("");

				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed(); //SFSdotNet.Framework.Linq.Utils.ExtractSpecificProperties("", ref predicateString );               
                string predicateWithManyRelations = filter.GetFilterChildren(); //SFSdotNet.Framework.Linq.Utils.CleanPartExpression(predicateString);

                //QueryUtils.BreakeQuery1(predicateString, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
                var _queryable = query.AsQueryable();
                if (!string.IsNullOrEmpty(predicateWithManyRelations))
                    _queryable = _queryable.Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams);
				if (contextRequest.CustomQuery.SpecificProperties.Count > 0)
                {

                    StringBuilder sbProps = new StringBuilder();
                    contextRequest.CustomQuery.SpecificProperties.Add("GuidReusableCatalogValue");
                    
					foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                    {
						if(sbProps.Length > 0)
							sbProps.Append(",");
                        sbProps.Append(prop);
                    }
					    IQueryable  queryableSelective = null ;
					  
					  if (!string.IsNullOrEmpty(predicateWithManyRelations))
							queryableSelective = con.accReusableCatalogValues.AsQueryable().Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams).Select(string.Format("new({0})", sbProps.ToString()));
					else
						queryableSelective = con.accReusableCatalogValues.AsQueryable().Select(string.Format("new({0})", sbProps.ToString()));


                    //if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
					//	queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

                    QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
                    
					if (!string.IsNullOrEmpty(queryOps.OrderByAndSort))
                        queryableSelective = queryableSelective.OrderBy(queryOps.OrderByAndSort);
                    if (queryOps.Skip != null)
                    {
                        queryableSelective = queryableSelective.Skip(queryOps.Skip.Value);
                    }
                    if (queryOps.PageSize != null)
                    {
                        queryableSelective = queryableSelective.Take(queryOps.PageSize.Value);
                    }
                    //var results = queryableSelective.ToList();
                    result = new List<accReusableCatalogValue>();
                    accReusableCatalogValue itemDef = null;
                    foreach (var item in queryableSelective)
                    {
                        itemDef = new accReusableCatalogValue();

                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            if (!prop.Contains("."))
                            {
                                itemDef.GetType().GetProperty(prop).SetValue(itemDef, item.GetType().GetProperty(prop).GetValue(item));
                            }
                            else {
                                throw new Exception("La seleccion de relaciones aún no esta soportada");
                            }

                        }

                        result.Add(itemDef);
                    }

                }
                else
                {
				var  queryable = _queryable.Select(                    
				p => 
                        new
                    {
					GuidReusableCatalogValue = p.GuidReusableCatalogValue
,ValueString = p.ValueString
,Title = p.Title
,OrderOption = p.OrderOption

,accReusableCatalog = includeaccReusableCatalog ? p.accReusableCatalog:null


	
                    }
                    
                    );
					
				
                 if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
                    queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

				QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
            	if (!string.IsNullOrEmpty(queryOps.OrderByAndSort))
					queryable = queryable.OrderBy(queryOps.OrderByAndSort);
               	if (queryOps.Skip != null)
                {
                    queryable = queryable.Skip(queryOps.Skip.Value);
                }
                if (queryOps.PageSize != null)
                {
                    queryable = queryable.Take (queryOps.PageSize.Value);
                }
                result = queryable.AsEnumerable().
                    Select(
                    p =>  new accReusableCatalogValue()
                    {
					GuidReusableCatalogValue = p.GuidReusableCatalogValue
,ValueString = p.ValueString
,Title = p.Title
,OrderOption = p.OrderOption
,accReusableCatalog = p.accReusableCatalog

                    }
                     ).ToList();
				}


			 if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e = new BusinessRulesEventArgs<accReusableCatalogValue>() { Items= result, IncludingComputedLinq = true, ContextRequest = contextRequest, FilterExpressionString  = predicateString } :  e);
  
			
  
                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
            }
        }
		public List<accReusableCatalogValue> GetBy(Expression<Func<accReusableCatalogValue, bool>> predicate, bool loadRelations, ContextRequest contextRequest)
        {
			if(!loadRelations)
				return GetBy(predicate, contextRequest);
			else
				return GetBy(predicate, contextRequest, "accMoneyPlaces,accMoneyInOutConcepts,accCatalogs,accIncomeExpenses,accIncomeExpenses1,accIncomeExpenses11");

        }

        public List<accReusableCatalogValue> GetBy(Expression<Func<accReusableCatalogValue, bool>> predicate, int? pageSize, int? page, string orderBy, SFSdotNet.Framework.Data.SortDirection? sortDirection)
        {
            return GetBy(predicate, new ContextRequest() { CustomQuery = new CustomQuery() { Page = page, PageSize = pageSize, OrderBy = orderBy, SortDirection = sortDirection } });
        }
        public List<accReusableCatalogValue> GetBy(Expression<Func<accReusableCatalogValue, bool>> predicate)
        {

			if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }
			ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();

			contextRequest.CurrentContext = SFSdotNet.Framework.My.Context.CurrentContext;
			            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

            contextRequest.CustomQuery.FilterExpressionString = null;
            return this.GetBy(predicate, contextRequest, "");
        }
        #endregion
        #region Dynamic String
		private string GetSpecificFilter(string filter) {
            string result = "";
		    //string linqFilter = String.Empty;
            string freeTextFilter = String.Empty;
            if (filter.Contains("|"))
            {
               // linqFilter = filter.Split(char.Parse("|"))[0];
                freeTextFilter = filter.Split(char.Parse("|"))[1];
            }
            //else {
            //    freeTextFilter = filter;
            //}
            //else {
            //    linqFilter = filter;
            //}
			// linqFilter = SFSdotNet.Framework.Linq.Utils.ReplaceCustomDateFilters(linqFilter);
            //string specificFilter = linqFilter;
            if (!string.IsNullOrEmpty(freeTextFilter))
            {
                System.Text.StringBuilder sbCont = new System.Text.StringBuilder();
                /*if (specificFilter.Length > 0)
                {
                    sbCont.Append(" AND ");
                    sbCont.Append(" ({0})");
                }
                else
                {
                    sbCont.Append("{0}");
                }*/
                //var words = freeTextFilter.Split(char.Parse(" "));
				var word = freeTextFilter;
                System.Text.StringBuilder sbSpec = new System.Text.StringBuilder();
                 int nWords = 1;
				/*foreach (var word in words)
                {
					if (word.Length > 0){
                    if (sbSpec.Length > 0) sbSpec.Append(" AND ");
					if (words.Length > 1) sbSpec.Append("("); */
					
	
					
											
					sbSpec.Append(string.Format(@"ValueString.Contains(""{0}"")", word));

					
											sbSpec.Append(" OR ");
										
					sbSpec.Append(string.Format(@"Title.Contains(""{0}"")", word));

					
	
					
	
					
								sbSpec.Append(" OR ");
					
					//if (sbSpec.Length > 2)
					//	sbSpec.Append(" OR "); // test
					sbSpec.Append(string.Format(@"accReusableCatalog.NameKey.Contains(""{0}"")", word));
								 //sbSpec.Append("*extraFreeText*");

                    /*if (words.Length > 1) sbSpec.Append(")");
					
					nWords++;

					}

                }*/
                //specificFilter = string.Format("{0}{1}", specificFilter, string.Format(sbCont.ToString(), sbSpec.ToString()));
                                 result = sbSpec.ToString();  
            }
			//result = specificFilter;
			
			return result;

		}
	
			public List<accReusableCatalogValue> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  params object[] extraParams)
        {
			return GetBy(filter, pageSize, page, orderBy, orderDir,  null, extraParams);
		}
           public List<accReusableCatalogValue> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir, string usemode, params object[] extraParams)
            { 
                return GetBy(filter, pageSize, page, orderBy, orderDir, usemode, null, extraParams);
            }


		public List<accReusableCatalogValue> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  string usemode, ContextRequest context, params object[] extraParams)

        {

            // string freetext = null;
            //if (filter.Contains("|"))
            //{
            //    int parts = filter.Split(char.Parse("|")).Count();
            //    if (parts > 1)
            //    {

            //        freetext = filter.Split(char.Parse("|"))[1];
            //    }
            //}
		
            //string specificFilter = "";
            //if (!string.IsNullOrEmpty(filter))
            //  specificFilter=  GetSpecificFilter(filter);
            if (string.IsNullOrEmpty(orderBy))
            {
			                orderBy = "Title";
            }
			//orderDir = "";
			SFSdotNet.Framework.Data.SortDirection direction = SFSdotNet.Framework.Data.SortDirection.Ascending;
            if (!string.IsNullOrEmpty(orderDir))
            {
                if (orderDir == "desc")
                    direction = SFSdotNet.Framework.Data.SortDirection.Descending;
            }
            if (context == null)
                context = new ContextRequest();
			else
                context.CustomQuery = new CustomQuery();
             //context.FreeText = freetext;
             context.UseMode = usemode;
             context.CustomQuery =new SFSdotNet.Framework.My.CustomQuery()
 
                {
                    ExtraParams = extraParams,

                    OrderBy = orderBy,
                    SortDirection = direction,
                    Page = page,
                    PageSize = pageSize
               };
            

            if (!preventSecurityRestrictions) {
			 if (context.CurrentContext == null)
                {
					if (SFSdotNet.Framework.My.Context.CurrentContext != null &&  SFSdotNet.Framework.My.Context.CurrentContext.Company != null && SFSdotNet.Framework.My.Context.CurrentContext.User != null)
					{
						context.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
						context.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

					}
					else {
						throw new Exception("The security rule require a specific user and company");
					}
				}
            }
            return GetBy(filter, context);
  
        }


        public List<accReusableCatalogValue> GetBy(string strWhere, ContextRequest contextRequest)
        {
        	#region old code
				
				 //Expression<Func<tvsReservationTransport, bool>> predicate = null;
				string strWhereClean = strWhere.Replace("*extraFreeText*", "").Replace("()", "");
                //if (!string.IsNullOrEmpty(strWhereClean)){

                //    object[] extraParams = null;
                //    //if (contextRequest != null )
                //    //    if (contextRequest.CustomQuery != null )
                //    //        extraParams = contextRequest.CustomQuery.ExtraParams;
                //    //predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<tvsReservationTransport, bool>(strWhereClean, extraParams != null? extraParams.Cast<Guid>(): null);				
                //}
				 if (contextRequest == null)
                {
                    contextRequest = new ContextRequest();
                    if (contextRequest.CustomQuery == null)
                        contextRequest.CustomQuery = new CustomQuery();
                }
                  if (!preventSecurityRestrictions) {
					if (contextRequest.User == null || contextRequest.Company == null)
                      {
                     if (SFSdotNet.Framework.My.Context.CurrentContext.Company != null && SFSdotNet.Framework.My.Context.CurrentContext.User != null)
                     {
                         contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                         contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

                     }
                     else {
                         throw new Exception("The security rule require a specific User and Company ");
                     }
					 }
                 }
            contextRequest.CustomQuery.FilterExpressionString = strWhere;
				//return GetBy(predicate, contextRequest);  

			#endregion				
				
                    return GetBy(strWhere, contextRequest, "");  


        }
       public List<accReusableCatalogValue> GetBy(string strWhere)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
			
            return GetBy(strWhere, context, null);
        }

        public List<accReusableCatalogValue> GetBy(string strWhere, string includes)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
            return GetBy(strWhere, context, includes);
        }

        #endregion
        #endregion
		
		  #region SaveOrUpdate
        private accReusableCatalogValue Save(accReusableCatalogValue entity, bool saveChanges, EFPocoContext con)
        {
				ObjectContext context = null;
            return Update(entity, saveChanges,null, out context);

			
        }
		 public  accReusableCatalogValue Create( accReusableCatalogValue entity, params Expression<Func< accReusableCatalogValue, object>>[] paths)
         {
             return Create(entity, null, paths);

         }
 		 public accReusableCatalogValue Create(accReusableCatalogValue entity)
        {
				ObjectContext context = null;
				    if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: Create");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

				return this.Create(entity, true, contextRequest, out context);


        }
        public accReusableCatalogValue Create(accReusableCatalogValue entity, ContextRequest contextRequest)
         {
             ObjectContext context = null;
             return this.Create(entity, true, contextRequest,out context);

         }
         public accReusableCatalogValue Create(accReusableCatalogValue entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext context)
        {
                    return Create(entity, saveChanges , contextRequest , out context, null);
        }
         public accReusableCatalogValue Create(accReusableCatalogValue entity, ContextRequest contextRequest, params Expression<Func<accReusableCatalogValue,object>>[] paths)
        {
            ObjectContext context = null;
            if(paths != null)
				return Create(entity, true,contextRequest, out context, paths);
			else 
				return Create(entity, true,contextRequest, out context);
        }
        public accReusableCatalogValue Create(accReusableCatalogValue entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext context, params Expression<Func<accReusableCatalogValue,object>>[] pocopaths)
        {
			using (EFPocoContext con = new EFPocoContext())
			{
				accReusableCatalogValue itemResult = null;
#region Autos


	
	

#endregion
                e = null;
                OnCreating(this,e = new BusinessRulesEventArgs<accReusableCatalogValue>() { ContextRequest = contextRequest, Item=entity, PathExpressions = pocopaths, SaveChanges =saveChanges });
				   if (e != null) {
						if (e.Cancel)
						{
							context = null;
							return e.Item;

						}
					}

                    if (entity.GuidReusableCatalogValue == Guid.Empty)
                   {
                       entity.GuidReusableCatalogValue = Guid.NewGuid();

                   }



				accReusableCatalogValueAdapter adapter = con.GetAdapterObject<accReusableCatalogValueAdapter>(entity);;
				List<Expression<Func<accReusableCatalogValueAdapter, object>>> paths = new List<Expression<Func<accReusableCatalogValueAdapter,object>>>();
                
			    if (pocopaths != null && pocopaths.Length > 0)
                {
					// Translate
                    foreach (var pocopath in pocopaths)
                    {
                        var param = Expression.Parameter(typeof(accReusableCatalogValueAdapter), "p");
                        var member = MemberExpression.PropertyOrField(param, ((System.Linq.Expressions.MemberExpression)(((System.Linq.Expressions.LambdaExpression)(pocopath)).Body)).Member.Name);
                        Expression<Func<accReusableCatalogValueAdapter, object>> path  = null;
                        switch(member.Member.Name){
                        
							case "accMoneyPlaces":
								path = p => p.accMoneyPlaces.First().WithoutUpdate();

								//path = p => member;
								//path = p => p.accMoneyPlaces.First().accBank.WithoutUpdate();											
							break;
                        
							case "accMoneyInOutConcepts":
								path = p => p.accMoneyInOutConcepts.First().WithoutUpdate();

								//path = p => member;
								//path = p => p.accMoneyInOutConcepts.First().accInExCategory.WithoutUpdate();											
							break;
                        
							case "accCatalogs":
								path = p => p.accCatalogs.First().WithoutUpdate();

								//path = p => member;
								//path = p => p.accCatalogs.First().accParentCatalog.WithoutUpdate();											
							break;
                        
							case "accIncomeExpenses":
								path = p => p.accIncomeExpenses.First().WithoutUpdate();

								//path = p => member;
								//path = p => p.accIncomeExpenses.First().accMoneyInOutConcept.WithoutUpdate();											
								//path = p => p.accIncomeExpenses.First().accMoneyPlace.WithoutUpdate();											
								//path = p => p.accIncomeExpenses.First().accProvider.WithoutUpdate();											
								//path = p => p.accIncomeExpenses.First().accCompanyArea.WithoutUpdate();											
								//path = p => p.accIncomeExpenses.First().accParent.WithoutUpdate();											
							break;
                        
							case "accIncomeExpenses1":
								path = p => p.accIncomeExpenses1.First().WithoutUpdate();

								//path = p => member;
								//path = p => p.accIncomeExpenses1.First().accMoneyInOutConcept.WithoutUpdate();											
								//path = p => p.accIncomeExpenses1.First().accMoneyPlace.WithoutUpdate();											
								//path = p => p.accIncomeExpenses1.First().accProvider.WithoutUpdate();											
								//path = p => p.accIncomeExpenses1.First().accCompanyArea.WithoutUpdate();											
								//path = p => p.accIncomeExpenses1.First().accParent.WithoutUpdate();											
							break;
                        
							case "accIncomeExpenses11":
								path = p => p.accIncomeExpenses11.First().WithoutUpdate();

								//path = p => member;
								//path = p => p.accIncomeExpenses11.First().accMoneyInOutConcept.WithoutUpdate();											
								//path = p => p.accIncomeExpenses11.First().accMoneyPlace.WithoutUpdate();											
								//path = p => p.accIncomeExpenses11.First().accProvider.WithoutUpdate();											
								//path = p => p.accIncomeExpenses11.First().accCompanyArea.WithoutUpdate();											
								//path = p => p.accIncomeExpenses11.First().accParent.WithoutUpdate();											
							break;
							
							default:
								path = p => member;
							break;
                        }

                        
                       paths.Add(path.Expand());
                    }
                }
                object aux = null;
					paths.Add(p => p.accReusableCatalog.WithoutUpdate());

					//paths = pathBuilder.ToArray();

#region Childs accMoneyPlaces 
				if (adapter.accMoneyPlaces != null)
                {
                    foreach (var item in adapter.accMoneyPlaces)
                    {
						
							if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accMoneyPlaces", item);
							if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)){ 
								//paths.Add(p => p.accMoneyPlaces.First().WithoutUpdate());
								
						if (item.accBank != null){
							item.accBank.EntityKey = con.WrappedContext.CreateEntityKey("accBanks", item.accBank);
                            
             
						}								
							if (item.accReusableCatalogValue == null)
								item.accReusableCatalogValue = adapter;

								item.EntityKey = null;
							}

                    }
					if (adapter.accMoneyPlaces.Count > 0){
						paths.Add(p => p.accMoneyPlaces.First().WithoutUpdate());
						paths.Add(p => p.accMoneyPlaces.First().accBank.WithoutUpdate());
					
					}
                }
#endregion 

				if (adapter.accReusableCatalog != null ){
					if(adapter.accReusableCatalog.EntityKey == null) adapter.accReusableCatalog.EntityKey = con.WrappedContext.CreateEntityKey("accReusableCatalogs", adapter.accReusableCatalog);
				}
#region Childs accMoneyInOutConcepts 
				if (adapter.accMoneyInOutConcepts != null)
                {
                    foreach (var item in adapter.accMoneyInOutConcepts)
                    {
						
							if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accMoneyInOutConcepts", item);
							if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)){ 
								//paths.Add(p => p.accMoneyInOutConcepts.First().WithoutUpdate());
								
							if (item.accReusableCatalogValue == null)
								item.accReusableCatalogValue = adapter;

						if (item.accInExCategory != null){
							item.accInExCategory.EntityKey = con.WrappedContext.CreateEntityKey("accInExCategories", item.accInExCategory);
                            
             
						}								
								item.EntityKey = null;
							}

                    }
					if (adapter.accMoneyInOutConcepts.Count > 0){
						paths.Add(p => p.accMoneyInOutConcepts.First().WithoutUpdate());
						paths.Add(p => p.accMoneyInOutConcepts.First().accInExCategory.WithoutUpdate());
					
					}
                }
#endregion 

#region Childs accCatalogs 
				if (adapter.accCatalogs != null)
                {
                    foreach (var item in adapter.accCatalogs)
                    {
						
							if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accCatalogs", item);
							if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)){ 
								//paths.Add(p => p.accCatalogs.First().WithoutUpdate());
								
							if (item.accReusableCatalogValue == null)
								item.accReusableCatalogValue = adapter;

						if (item.accParentCatalog != null){
							item.accParentCatalog.EntityKey = con.WrappedContext.CreateEntityKey("accCatalogs", item.accParentCatalog);
                            
             
						}								
								item.EntityKey = null;
							}

                    }
					if (adapter.accCatalogs.Count > 0){
						paths.Add(p => p.accCatalogs.First().WithoutUpdate());
						paths.Add(p => p.accCatalogs.First().accParentCatalog.WithoutUpdate());
					
					}
                }
#endregion 

#region Childs accIncomeExpenses 
				if (adapter.accIncomeExpenses != null)
                {
                    foreach (var item in adapter.accIncomeExpenses)
                    {
						
							if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accIncomeExpenses", item);
							if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)){ 
								//paths.Add(p => p.accIncomeExpenses.First().WithoutUpdate());
								
						if (item.accMoneyInOutConcept != null){
							item.accMoneyInOutConcept.EntityKey = con.WrappedContext.CreateEntityKey("accMoneyInOutConcepts", item.accMoneyInOutConcept);
                            
             
						}								
						if (item.accMoneyPlace != null){
							item.accMoneyPlace.EntityKey = con.WrappedContext.CreateEntityKey("accMoneyPlaces", item.accMoneyPlace);
                            
             
						}								
						if (item.accProvider != null){
							item.accProvider.EntityKey = con.WrappedContext.CreateEntityKey("accProviders", item.accProvider);
                            
             
						}								
							if (item.accReusableCatalogValue == null)
								item.accReusableCatalogValue = adapter;

						if (item.accReusableStatusAuthorization != null){
							item.accReusableStatusAuthorization.EntityKey = con.WrappedContext.CreateEntityKey("accReusableCatalogValues", item.accReusableStatusAuthorization);
                            
             
						}								
						if (item.accCompanyArea != null){
							item.accCompanyArea.EntityKey = con.WrappedContext.CreateEntityKey("accCompanyAreas", item.accCompanyArea);
                            
             
						}								
						if (item.accParent != null){
							item.accParent.EntityKey = con.WrappedContext.CreateEntityKey("accIncomeExpenses", item.accParent);
                            
             
						}								
						if (item.accReusable_PaymentType != null){
							item.accReusable_PaymentType.EntityKey = con.WrappedContext.CreateEntityKey("accReusableCatalogValues", item.accReusable_PaymentType);
                            
             
						}								
								item.EntityKey = null;
							}

                    }
					if (adapter.accIncomeExpenses.Count > 0){
						paths.Add(p => p.accIncomeExpenses.First().WithoutUpdate());
						paths.Add(p => p.accIncomeExpenses.First().accMoneyInOutConcept.WithoutUpdate());
paths.Add(p => p.accIncomeExpenses.First().accMoneyPlace.WithoutUpdate());
paths.Add(p => p.accIncomeExpenses.First().accProvider.WithoutUpdate());
paths.Add(p => p.accIncomeExpenses.First().accReusableStatusAuthorization.WithoutUpdate());
paths.Add(p => p.accIncomeExpenses.First().accCompanyArea.WithoutUpdate());
paths.Add(p => p.accIncomeExpenses.First().accParent.WithoutUpdate());
paths.Add(p => p.accIncomeExpenses.First().accReusable_PaymentType.WithoutUpdate());
					
					}
                }
#endregion 

#region Childs accIncomeExpenses1 
				if (adapter.accIncomeExpenses1 != null)
                {
                    foreach (var item in adapter.accIncomeExpenses1)
                    {
						
							if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accIncomeExpenses", item);
							if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)){ 
								//paths.Add(p => p.accIncomeExpenses1.First().WithoutUpdate());
								
						if (item.accMoneyInOutConcept != null){
							item.accMoneyInOutConcept.EntityKey = con.WrappedContext.CreateEntityKey("accMoneyInOutConcepts", item.accMoneyInOutConcept);
                            
             
						}								
						if (item.accMoneyPlace != null){
							item.accMoneyPlace.EntityKey = con.WrappedContext.CreateEntityKey("accMoneyPlaces", item.accMoneyPlace);
                            
             
						}								
						if (item.accProvider != null){
							item.accProvider.EntityKey = con.WrappedContext.CreateEntityKey("accProviders", item.accProvider);
                            
             
						}								
						if (item.accReusableCatalogValue != null){
							item.accReusableCatalogValue.EntityKey = con.WrappedContext.CreateEntityKey("accReusableCatalogValues", item.accReusableCatalogValue);
                            
             
						}								
							if (item.accReusableStatusAuthorization == null)
								item.accReusableStatusAuthorization = adapter;

						if (item.accCompanyArea != null){
							item.accCompanyArea.EntityKey = con.WrappedContext.CreateEntityKey("accCompanyAreas", item.accCompanyArea);
                            
             
						}								
						if (item.accParent != null){
							item.accParent.EntityKey = con.WrappedContext.CreateEntityKey("accIncomeExpenses", item.accParent);
                            
             
						}								
						if (item.accReusable_PaymentType != null){
							item.accReusable_PaymentType.EntityKey = con.WrappedContext.CreateEntityKey("accReusableCatalogValues", item.accReusable_PaymentType);
                            
             
						}								
								item.EntityKey = null;
							}

                    }
					if (adapter.accIncomeExpenses1.Count > 0){
						paths.Add(p => p.accIncomeExpenses1.First().WithoutUpdate());
						paths.Add(p => p.accIncomeExpenses1.First().accMoneyInOutConcept.WithoutUpdate());
paths.Add(p => p.accIncomeExpenses1.First().accMoneyPlace.WithoutUpdate());
paths.Add(p => p.accIncomeExpenses1.First().accProvider.WithoutUpdate());
paths.Add(p => p.accIncomeExpenses1.First().accReusableCatalogValue.WithoutUpdate());
paths.Add(p => p.accIncomeExpenses1.First().accCompanyArea.WithoutUpdate());
paths.Add(p => p.accIncomeExpenses1.First().accParent.WithoutUpdate());
paths.Add(p => p.accIncomeExpenses1.First().accReusable_PaymentType.WithoutUpdate());
					
					}
                }
#endregion 

#region Childs accIncomeExpenses11 
				if (adapter.accIncomeExpenses11 != null)
                {
                    foreach (var item in adapter.accIncomeExpenses11)
                    {
						
							if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accIncomeExpenses", item);
							if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)){ 
								//paths.Add(p => p.accIncomeExpenses11.First().WithoutUpdate());
								
						if (item.accMoneyInOutConcept != null){
							item.accMoneyInOutConcept.EntityKey = con.WrappedContext.CreateEntityKey("accMoneyInOutConcepts", item.accMoneyInOutConcept);
                            
             
						}								
						if (item.accMoneyPlace != null){
							item.accMoneyPlace.EntityKey = con.WrappedContext.CreateEntityKey("accMoneyPlaces", item.accMoneyPlace);
                            
             
						}								
						if (item.accProvider != null){
							item.accProvider.EntityKey = con.WrappedContext.CreateEntityKey("accProviders", item.accProvider);
                            
             
						}								
						if (item.accReusableCatalogValue != null){
							item.accReusableCatalogValue.EntityKey = con.WrappedContext.CreateEntityKey("accReusableCatalogValues", item.accReusableCatalogValue);
                            
             
						}								
						if (item.accReusableStatusAuthorization != null){
							item.accReusableStatusAuthorization.EntityKey = con.WrappedContext.CreateEntityKey("accReusableCatalogValues", item.accReusableStatusAuthorization);
                            
             
						}								
						if (item.accCompanyArea != null){
							item.accCompanyArea.EntityKey = con.WrappedContext.CreateEntityKey("accCompanyAreas", item.accCompanyArea);
                            
             
						}								
						if (item.accParent != null){
							item.accParent.EntityKey = con.WrappedContext.CreateEntityKey("accIncomeExpenses", item.accParent);
                            
             
						}								
							if (item.accReusable_PaymentType == null)
								item.accReusable_PaymentType = adapter;

								item.EntityKey = null;
							}

                    }
					if (adapter.accIncomeExpenses11.Count > 0){
						paths.Add(p => p.accIncomeExpenses11.First().WithoutUpdate());
						paths.Add(p => p.accIncomeExpenses11.First().accMoneyInOutConcept.WithoutUpdate());
paths.Add(p => p.accIncomeExpenses11.First().accMoneyPlace.WithoutUpdate());
paths.Add(p => p.accIncomeExpenses11.First().accProvider.WithoutUpdate());
paths.Add(p => p.accIncomeExpenses11.First().accReusableCatalogValue.WithoutUpdate());
paths.Add(p => p.accIncomeExpenses11.First().accReusableStatusAuthorization.WithoutUpdate());
paths.Add(p => p.accIncomeExpenses11.First().accCompanyArea.WithoutUpdate());
paths.Add(p => p.accIncomeExpenses11.First().accParent.WithoutUpdate());
					
					}
                }
#endregion 




                //con.WrappedContext.AttachObjectGraph<accReusableCatalogValueAdapter>(adapter, p=>p.accMoneyPlaces, p=>p.accReusableCatalog, p=>p.accMoneyInOutConcepts, p=>p.accCatalogs, p=>p.accIncomeExpenses, p=>p.accIncomeExpenses1, p=>p.accIncomeExpenses11);
                con.WrappedContext.AttachObjectGraph<accReusableCatalogValueAdapter>(adapter, paths.ToArray());
              	if (saveChanges){
                    con.WrappedContext.SaveChanges(SaveOptions.AcceptAllChangesAfterSave);
					 
				}
                else
                    con.WrappedContext.SaveChanges(SaveOptions.None);
                if (!saveChanges)
                    context = con.WrappedContext;
                else
                    context = null;
				itemResult = adapter.PocoEntity;
                if (e != null)
                {
                    e.Item = itemResult;
                }
                OnCreated(this, e == null ? e = new BusinessRulesEventArgs<accReusableCatalogValue>() { ContextRequest = contextRequest, Item = itemResult, PathExpressions = pocopaths, SaveChanges = saveChanges } : e);



                if (e != null)
                {
                    itemResult = e.Item;
                }
                              return itemResult;
            }
        }
        BusinessRulesEventArgs<accReusableCatalogValue> e = null;
        public void Create(List<accReusableCatalogValue> entities)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            Create(entities, contextRequest, null);
        }
        public void Create(List<accReusableCatalogValue> entities, ContextRequest contextRequest)
        
        {
			ObjectContext context = null;
            	foreach (accReusableCatalogValue entity in entities)
				{
					this.Create(entity, true, contextRequest, out context);
				}
        }
         public accReusableCatalogValue Update(accReusableCatalogValue entity)
        {
            if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return Update(entity, contextRequest);
        }
        public accReusableCatalogValue Update(accReusableCatalogValue entity, ContextRequest requestContext)
        {
			  ObjectContext context = null;
            return Update(entity, true,requestContext, out context);
         }
		public  accReusableCatalogValue Update(accReusableCatalogValue entity, params Expression<Func<accReusableCatalogValue, object>>[] pocopaths)
        {
			  ObjectContext context = null;
              return Update(entity, true, null, out context, pocopaths);
         }
        public accReusableCatalogValue Update(accReusableCatalogValue entity, ContextRequest requestContext, bool saveChanges, out ObjectContext outcontext)
        {
			return Update(entity, saveChanges,requestContext, out outcontext, null);
		}
         public accReusableCatalogValue Update(accReusableCatalogValue entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext outcontext, params Expression<Func<accReusableCatalogValue,object>>[] pocopaths)
        {
		 if ((System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null) && contextRequest == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Update");
            }
            if (contextRequest == null)
            {
                contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            }

			using (EFPocoContext con = new EFPocoContext())
			{
				accReusableCatalogValue  itemResult = null;

	

				e = null;
                OnUpdating(this,e = new BusinessRulesEventArgs<accReusableCatalogValue>() { ContextRequest = contextRequest, Item=entity, PathExpressions = pocopaths, SaveChanges =saveChanges });
				   if (e != null) {
						if (e.Cancel)
						{
							outcontext = null;
							return e.Item;

						}
					}

                accReusableCatalogValueAdapter adapter = con.GetAdapterObject<accReusableCatalogValueAdapter>(entity);
                adapter.EntityKey = con.WrappedContext.CreateEntityKey("accReusableCatalogValues", adapter);
				    var es = con.accReusableCatalogValues;
				List<Expression<Func<accReusableCatalogValueAdapter, object>>> paths = new List<Expression<Func<accReusableCatalogValueAdapter,object>>>();
                /* if (pocopaths != null)
                    if (pocopaths.Length == 0)
                        pocopaths = null;*/

			    if (pocopaths != null && pocopaths.Length > 0)
                {
					// Translate
                    foreach (var pocopath in pocopaths)
                    {
                        var param = Expression.Parameter(typeof(accReusableCatalogValueAdapter), "p");
                        var member = MemberExpression.PropertyOrField(param, ((System.Linq.Expressions.MemberExpression)(((System.Linq.Expressions.LambdaExpression)(pocopath)).Body)).Member.Name);
                        Expression<Func<accReusableCatalogValueAdapter, object>> path  = null;
                        switch(member.Member.Name){
                        
							case "accMoneyPlaces":
								//path = p => member;
								path = p => p.accMoneyPlaces.First().WithoutUpdate();
				//				path = p => p.accMoneyPlaces.First().accBank.WithoutUpdate();											
							break;
                        
							case "accMoneyInOutConcepts":
								//path = p => member;
								path = p => p.accMoneyInOutConcepts.First().WithoutUpdate();
				//				path = p => p.accMoneyInOutConcepts.First().accInExCategory.WithoutUpdate();											
							break;
                        
							case "accCatalogs":
								//path = p => member;
								path = p => p.accCatalogs.First().WithoutUpdate();
				//				path = p => p.accCatalogs.First().accParentCatalog.WithoutUpdate();											
							break;
                        
							case "accIncomeExpenses":
								//path = p => member;
								path = p => p.accIncomeExpenses.First().WithoutUpdate();
				//				path = p => p.accIncomeExpenses.First().accMoneyInOutConcept.WithoutUpdate();											
				//				path = p => p.accIncomeExpenses.First().accMoneyPlace.WithoutUpdate();											
				//				path = p => p.accIncomeExpenses.First().accProvider.WithoutUpdate();											
				//				path = p => p.accIncomeExpenses.First().accCompanyArea.WithoutUpdate();											
				//				path = p => p.accIncomeExpenses.First().accParent.WithoutUpdate();											
							break;
                        
							case "accIncomeExpenses1":
								//path = p => member;
								path = p => p.accIncomeExpenses1.First().WithoutUpdate();
				//				path = p => p.accIncomeExpenses1.First().accMoneyInOutConcept.WithoutUpdate();											
				//				path = p => p.accIncomeExpenses1.First().accMoneyPlace.WithoutUpdate();											
				//				path = p => p.accIncomeExpenses1.First().accProvider.WithoutUpdate();											
				//				path = p => p.accIncomeExpenses1.First().accCompanyArea.WithoutUpdate();											
				//				path = p => p.accIncomeExpenses1.First().accParent.WithoutUpdate();											
							break;
                        
							case "accIncomeExpenses11":
								//path = p => member;
								path = p => p.accIncomeExpenses11.First().WithoutUpdate();
				//				path = p => p.accIncomeExpenses11.First().accMoneyInOutConcept.WithoutUpdate();											
				//				path = p => p.accIncomeExpenses11.First().accMoneyPlace.WithoutUpdate();											
				//				path = p => p.accIncomeExpenses11.First().accProvider.WithoutUpdate();											
				//				path = p => p.accIncomeExpenses11.First().accCompanyArea.WithoutUpdate();											
				//				path = p => p.accIncomeExpenses11.First().accParent.WithoutUpdate();											
							break;
							
							default:
								path = p => member;
							break;
                        }

                        paths.Add(path.Expand());
 					}
                }
                else {
                  paths = new List<Expression<Func<accReusableCatalogValueAdapter, object>>>();

					//List<Expression<Func<accReusableCatalogValueAdapter,object>>> pathBuilder = new List<Expression<Func<accReusableCatalogValueAdapter,object>>>();
					paths.Add(p => p.accReusableCatalog.WithoutUpdate());

		
					//paths = pathBuilder.ToArray();		
			}
			object aux = null;
				if (adapter.accMoneyPlaces != null)
                {
                    foreach (var item in adapter.accMoneyPlaces)
                    {


                        if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accMoneyPlaces", item);
						if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)) item.EntityKey = null;
                        
                    }
					
                    if (adapter.accMoneyPlaces.Count > 0)
                    {
                        paths.Add(p => p.accMoneyPlaces.First().WithoutUpdate());

                    }

                }
				if (adapter.accReusableCatalog != null ){
					if(adapter.accReusableCatalog.EntityKey == null) adapter.accReusableCatalog.EntityKey = con.WrappedContext.CreateEntityKey("accReusableCatalogs", adapter.accReusableCatalog);
				}

                
				if (adapter.accMoneyInOutConcepts != null)
                {
                    foreach (var item in adapter.accMoneyInOutConcepts)
                    {


                        if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accMoneyInOutConcepts", item);
						if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)) item.EntityKey = null;
                        
                    }
					
                    if (adapter.accMoneyInOutConcepts.Count > 0)
                    {
                        paths.Add(p => p.accMoneyInOutConcepts.First().WithoutUpdate());

                    }

                }
				if (adapter.accCatalogs != null)
                {
                    foreach (var item in adapter.accCatalogs)
                    {


                        if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accCatalogs", item);
						if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)) item.EntityKey = null;
                        
                    }
					
                    if (adapter.accCatalogs.Count > 0)
                    {
                        paths.Add(p => p.accCatalogs.First().WithoutUpdate());

                    }

                }
				if (adapter.accIncomeExpenses != null)
                {
                    foreach (var item in adapter.accIncomeExpenses)
                    {


                        if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accIncomeExpenses", item);
						if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)) item.EntityKey = null;
                        
                    }
					
                    if (adapter.accIncomeExpenses.Count > 0)
                    {
                        paths.Add(p => p.accIncomeExpenses.First().WithoutUpdate());

                    }

                }
				if (adapter.accIncomeExpenses1 != null)
                {
                    foreach (var item in adapter.accIncomeExpenses1)
                    {


                        if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accIncomeExpenses", item);
						if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)) item.EntityKey = null;
                        
                    }
					
                    if (adapter.accIncomeExpenses1.Count > 0)
                    {
                        paths.Add(p => p.accIncomeExpenses1.First().WithoutUpdate());

                    }

                }
				if (adapter.accIncomeExpenses11 != null)
                {
                    foreach (var item in adapter.accIncomeExpenses11)
                    {


                        if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accIncomeExpenses", item);
						if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)) item.EntityKey = null;
                        
                    }
					
                    if (adapter.accIncomeExpenses11.Count > 0)
                    {
                        paths.Add(p => p.accIncomeExpenses11.First().WithoutUpdate());

                    }

                }



                //con.AttachObjectGraph<accReusableCatalogValue>(adapter, p=>p.accMoneyPlaces, p=>p.accReusableCatalog, p=>p.accMoneyInOutConcepts, p=>p.accCatalogs, p=>p.accIncomeExpenses, p=>p.accIncomeExpenses1, p=>p.accIncomeExpenses11);
                con.WrappedContext.AttachObjectGraph<accReusableCatalogValueAdapter>(adapter, paths.ToArray());
				if (saveChanges){
                	con.WrappedContext.SaveChanges();
					 
					}
                if(!saveChanges)
					outcontext = con.WrappedContext;
				else
					outcontext = null;
				itemResult = adapter.PocoEntity;
				OnUpdated(this, e = new BusinessRulesEventArgs<accReusableCatalogValue>() { ContextRequest = contextRequest, Item=itemResult, PathExpressions = pocopaths, SaveChanges =saveChanges });

              	return itemResult;

			  }
        }
        public accReusableCatalogValue Save(accReusableCatalogValue entity)
        {
			return Save(entity, true, null);
        }
        public int Save(List<accReusableCatalogValue> entities)
        {
			using (EFPocoContext con = new EFPocoContext())
			{
			
            int n = 0;
            foreach (accReusableCatalogValue item in entities)
            {
                try
                {
                    this.Save(item, false, con);
                    n++;
                }catch (Exception ex){
                    SFSdotNet.Framework.My.EventLog.Exception(ex);
                }
            }
            con.SaveChanges();
            return n;
            }
        }
        #endregion
        #region Delete
        public void Delete(accReusableCatalogValue entity)
        {
				this.Delete(entity, null);
			
        }
		 public void Delete(accReusableCatalogValue entity, ContextRequest contextRequest)
        {
				ObjectContext context = null;
				this.Delete(entity, true, out context, contextRequest);
			
        }

        
        public void Delete(accReusableCatalogValue entity, bool saveChanges, out  ObjectContext context, ContextRequest contextRequest, BusinessRulesEventArgs<accReusableCatalogValue> e = null)
        {
			using (EFPocoContext _con = new EFPocoContext())
			{
				int result = 0;
				
               	BusinessRulesEventArgs<accReusableCatalogValue> _e = null;
               List<accReusableCatalogValue> _items = new List<accReusableCatalogValue>();
                _items.Add(entity);
                if (e == null || e.PreventPartialPropagate == false)
                {
                    OnDeleting(this, _e = (e == null ? new BusinessRulesEventArgs<accReusableCatalogValue>() { ContextRequest = contextRequest, Item = entity, Items = _items, SaveChanges = saveChanges } : e));
                }
                if (_e != null)
                {
                    if (_e.Cancel)
						{
							context = null;
							return;

						}
					}


				accReusableCatalogValueAdapter adapter = _con.GetAdapterObject<accReusableCatalogValueAdapter>(entity);
                adapter.EntityKey = _con.WrappedContext.CreateEntityKey("accReusableCatalogValues", adapter);
                
	            //adapter = _con.WrappedContext.AttachObjectGraph<accReusableCatalogValueAdapter>(adapter);
				try{
					_con.WrappedContext.AttachTo("accReusableCatalogValues", adapter);
                }catch{
					
				}
									_con.WrappedContext.DeleteObject(adapter);
                				
				if (!saveChanges)
                    context = _con.WrappedContext;
                else
                    context = null;
				 SaveOptions saveOption = SaveOptions.None;
                if (saveChanges)
                    saveOption = SaveOptions.AcceptAllChangesAfterSave;

				result = _con.WrappedContext.SaveChanges(saveOption);
				if (saveChanges){
					
					}
			if (e == null || e.PreventPartialPropagate == false)
                {

                    if (_e == null)
                        _e = new BusinessRulesEventArgs<accReusableCatalogValue>() { ContextRequest = contextRequest, Item = entity, Items = _items };

                    OnDeleted(this, _e);
                }

				//return null;
			}            
        }
        public void Delete(List<accReusableCatalogValue> entities,  ContextRequest contextRequest = null )
        {
				ObjectContext context = null;
			 BusinessRulesEventArgs<accReusableCatalogValue> _e = null;

                OnDeleting(this, _e = new BusinessRulesEventArgs<accReusableCatalogValue>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities });
                if (_e != null)
                {
                    if (_e.Cancel)
                    {
                        context = null;
                        return;

                    }
                }
                bool allSucced = true;
                BusinessRulesEventArgs<accReusableCatalogValue> eToChilds = new BusinessRulesEventArgs<accReusableCatalogValue>();
                if (_e != null)
                {
                    eToChilds = _e;
                }
                else
                {
                    eToChilds = new BusinessRulesEventArgs<accReusableCatalogValue>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                }
				foreach (accReusableCatalogValue item in entities)
				{
					try
                    {
                        this.Delete(item, true, out context, contextRequest, e: eToChilds);
                    }
                    catch (Exception ex)
                    {
                        SFSdotNet.Framework.My.EventLog.Error(ex);
                        allSucced = false;
                    }
				}
				if (_e == null)
                    _e = new BusinessRulesEventArgs<accReusableCatalogValue>() { ContextRequest = contextRequest, CountResult = entities.Count, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                OnDeleted(this, _e);

			
        }
        #endregion
 
        #region GetCount
		 public int GetCount(Expression<Func<accReusableCatalogValue, bool>> predicate)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

			return GetCount(predicate, contextRequest);
		}
        public int GetCount(Expression<Func<accReusableCatalogValue, bool>> predicate, ContextRequest contextRequest)
        {


		
			using (EFPocoContext con = new EFPocoContext())
			{


				if (predicate == null) predicate = PredicateBuilder.True<accReusableCatalogValue>();
				
				return con.accReusableCatalogValues.Count(predicate);
			}

        }
		  public int GetCount(string predicate,  ContextRequest contextRequest)
         {
             return GetCount(predicate, null, contextRequest);
         }

         public int GetCount(string predicate)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return GetCount(predicate, contextRequest);
        }
		 public int GetCount(string predicate, string usemode){
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
				return GetCount( predicate,  usemode,  contextRequest);
		 }
        public int GetCount(string predicate, string usemode, ContextRequest contextRequest){
			  string freetext = null;
            Filter filter = new Filter();

              if (predicate.Contains("|"))
              {
                 
                  filter.SetFilterPart("ft", GetSpecificFilter(predicate));
                 
                  filter.ProcessText(predicate.Split(char.Parse("|"))[0]);
                  freetext = predicate.Split(char.Parse("|"))[1];
              }
              else {
                  filter.ProcessText(predicate);
              }
           
			e = null;
			contextRequest.FreeText = freetext;
			contextRequest.UseMode = usemode;
            OnCounting(this, e = new BusinessRulesEventArgs<accReusableCatalogValue>() {  Filter =filter, ContextRequest = contextRequest });
            if (e != null)
            {
                if (e.Cancel)
                {
                    context = null;
                    return e.CountResult;

                }

            

            }
			 predicate = filter.GetFilterComplete();
			StringBuilder sbQuerySystem = new StringBuilder();
		
			using (EFContext con = new EFContext())
			{
				   
                 filter.CleanAndProcess("");
				//string predicateWithFKAndComputed = SFSdotNet.Framework.Linq.Utils.ExtractSpecificProperties("", ref predicate );               
				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed();
               string predicateWithManyRelations = filter.GetFilterChildren();
			   ///QueryUtils.BreakeQuery1(predicate, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
			   predicate = filter.GetFilterComplete();
               if (!string.IsNullOrEmpty(predicate))
               {
				
					
                    return con.accReusableCatalogValues.Count(System.Linq.Dynamic.DynamicExpression.ParseLambda<accReusableCatalogValue, bool>(predicate));
					
                }else
                    return con.accReusableCatalogValues.Count();

			}

		}
         public int GetCount()
        {
            return GetCount(p => true);
        }
        #endregion
        
         public accReusableCatalogValue Update(accReusableCatalogValue entity, string paths)
        {
            return Update(entity, paths.Split(char.Parse(",")));
            
        }

        public accReusableCatalogValue Update(accReusableCatalogValue entity, string[] paths)
        {
            // Translate
            List<Expression<Func<accReusableCatalogValue, object>>> pathList = new List<Expression<Func<accReusableCatalogValue, object>>>();
            for (int i = 0; i <= paths.Length -1; i++)
            {
                var param = Expression.Parameter(typeof(accReusableCatalogValue), "p");
                var member = MemberExpression.PropertyOrField(param, paths[i]);

                Expression<Func<accReusableCatalogValue, object>> path = p => member;
                pathList.Add(path.Expand());
            }
			ObjectContext context = null;
			 return Update(entity, true,null, out context,  pathList.ToArray());
           //return Update(entity, pathList.ToArray());
        }

        public void Update(List<accReusableCatalogValue> entities, string paths)
        {
            foreach (var entity in entities )
            {
                Update(entity, paths);
            }
        }
		public accReusableCatalogValue Create(accReusableCatalogValue entity, ContextRequest contextRequest, string paths)
        {
          

            if (string.IsNullOrEmpty(paths))
                return Create(entity, contextRequest);

            return Create(entity, contextRequest, paths.Split(char.Parse(",")));
        }
        public accReusableCatalogValue Create(accReusableCatalogValue entity, string paths)
        {
			 if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return Create(entity, contextRequest, paths);

        }

        public  void Create(List<accReusableCatalogValue> entities, ContextRequest requestContext, string paths)
        {
            foreach (var entity in entities)
            {
                Create(entity,requestContext, paths);
            }
        }

        public void Create(List<accReusableCatalogValue> entities, string[] paths)
        {
            foreach (var entity in entities)
            {
                Create(entity, null, paths);
            }
        }
        
        public accReusableCatalogValue  Create(accReusableCatalogValue entity, ContextRequest contextRequest, string[] paths)
        {
            List<Expression<Func<accReusableCatalogValue, object>>> pathList = new List<Expression<Func<accReusableCatalogValue, object>>>();
            for (int i = 0; i < paths.Length - 1; i++)
            {
                var param = Expression.Parameter(typeof(accReusableCatalogValue), "p");
                var member = MemberExpression.PropertyOrField(param, paths[i]);

                Expression<Func<accReusableCatalogValue, object>> path = p => member;
                pathList.Add(path.Expand());
            }
            return Create(entity, contextRequest, pathList.ToArray());
        }
        public void Delete(List<accReusableCatalogValue.CompositeKey> entityKeys)
        {

            List<accReusableCatalogValue> items = new List<accReusableCatalogValue>();
            foreach (var itemKey in entityKeys)
            {
                items.Add(GetByKey(itemKey.GuidReusableCatalogValue));
            }

            Delete(items);

        }
		
		
	}
		public partial class accMoneyInOutConceptsBR{
	 	
           
		 #region Partial methods

           partial void OnUpdating(object sender, BusinessRulesEventArgs<accMoneyInOutConcept> e);

            partial void OnUpdated(object sender, BusinessRulesEventArgs<accMoneyInOutConcept> e);

            partial void OnCreating(object sender, BusinessRulesEventArgs<accMoneyInOutConcept> e);
            partial void OnCreated(object sender, BusinessRulesEventArgs<accMoneyInOutConcept> e);

            partial void OnDeleting(object sender, BusinessRulesEventArgs<accMoneyInOutConcept> e);
            partial void OnDeleted(object sender, BusinessRulesEventArgs<accMoneyInOutConcept> e);

            partial void OnGetting(object sender, BusinessRulesEventArgs<accMoneyInOutConcept> e);
            partial void OnTaken(object sender, BusinessRulesEventArgs<accMoneyInOutConcept> e);
            partial void OnCounting(object sender, BusinessRulesEventArgs<accMoneyInOutConcept> e);
 
 
            #endregion
			
		private static accMoneyInOutConceptsBR singlenton =null;
				public static accMoneyInOutConceptsBR NewInstance(){
					return  new accMoneyInOutConceptsBR();
					
				}
		public static accMoneyInOutConceptsBR Instance{
			get{
				if (singlenton == null)
					singlenton = new accMoneyInOutConceptsBR();
				return singlenton;
			}
		}
		private bool preventSecurityRestrictions = false;
		 public bool PreventAuditTrail { get; set;  }
		#region Fields
        EFPocoContext context = null;
        #endregion
        #region Constructor
        public accMoneyInOutConceptsBR()
        {
            context = new EFPocoContext();
        }
		 public accMoneyInOutConceptsBR(bool preventSecurity)
            {
                this.preventSecurityRestrictions = preventSecurity;
				context = new EFPocoContext();
            }
        #endregion
		
		#region Get

 		public IQueryable<accMoneyInOutConcept> Get()
        {
            //using (EFContext con = new EFContext())
            //{
				EFContext con = new EFContext();
                var query = con.accMoneyInOutConcepts.AsQueryable();
                con.ContextOptions.ProxyCreationEnabled = false;

                //query = ContextQueryBuilder<Nutrient>.ApplyContextQuery(query, contextRequest);

                return query;




            //}

        }
		
		public List<accMoneyInOutConcept> GetAll()
        {
            return this.GetBy(p => true);
        }
        public List<accMoneyInOutConcept> GetAll(string includes)
        {
            return this.GetBy(p => true, includes);
        }
        public accMoneyInOutConcept GetByKey(Guid guidMoneyInOutConcept)
        {
            return GetByKey(guidMoneyInOutConcept, true);
        }
        public accMoneyInOutConcept GetByKey(Guid guidMoneyInOutConcept, bool loadIncludes)
        {
            accMoneyInOutConcept item = null;
			var query = PredicateBuilder.True<accMoneyInOutConcept>();
                    
			string strWhere = @"GuidMoneyInOutConcept = Guid(""" + guidMoneyInOutConcept.ToString()+@""")";
            Expression<Func<accMoneyInOutConcept, bool>> predicate = null;
            if (!string.IsNullOrEmpty(strWhere))
                predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<accMoneyInOutConcept, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
			 ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();
            contextRequest.CustomQuery.FilterExpressionString = strWhere;

			//item = GetBy(predicate, loadIncludes, contextRequest).FirstOrDefault();
			item = GetBy(strWhere,loadIncludes,contextRequest).FirstOrDefault();
            return item;
        }
         public List<accMoneyInOutConcept> GetBy(string strWhere, bool loadRelations, ContextRequest contextRequest)
        {
            if (!loadRelations)
                return GetBy(strWhere, contextRequest);
            else
                return GetBy(strWhere, contextRequest, "");

        }
		  public List<accMoneyInOutConcept> GetBy(string strWhere, bool loadRelations)
        {
              if (!loadRelations)
                return GetBy(strWhere, new ContextRequest());
            else
                return GetBy(strWhere, new ContextRequest(), "");

        }
         public accMoneyInOutConcept GetByKey(Guid guidMoneyInOutConcept, params Expression<Func<accMoneyInOutConcept, object>>[] includes)
        {
            accMoneyInOutConcept item = null;
			string strWhere = @"GuidMoneyInOutConcept = Guid(""" + guidMoneyInOutConcept.ToString()+@""")";
          Expression<Func<accMoneyInOutConcept, bool>> predicate = null;
            if (!string.IsNullOrEmpty(strWhere))
                predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<accMoneyInOutConcept, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
        item = GetBy(predicate, includes).FirstOrDefault();
         ////   item = GetBy(strWhere,includes).FirstOrDefault();
			return item;

        }
        public accMoneyInOutConcept GetByKey(Guid guidMoneyInOutConcept, string includes)
        {
            accMoneyInOutConcept item = null;
			string strWhere = @"GuidMoneyInOutConcept = Guid(""" + guidMoneyInOutConcept.ToString()+@""")";
            
			
            item = GetBy(strWhere, includes).FirstOrDefault();
            return item;

        }
		 public accMoneyInOutConcept GetByKey(Guid guidMoneyInOutConcept, string usemode, string includes)
		{
			return GetByKey(guidMoneyInOutConcept, usemode, null, includes);

		 }
		 public accMoneyInOutConcept GetByKey(Guid guidMoneyInOutConcept, string usemode, ContextRequest context,  string includes)
        {
            accMoneyInOutConcept item = null;
			string strWhere = @"GuidMoneyInOutConcept = Guid(""" + guidMoneyInOutConcept.ToString()+@""")";
			if (context == null)
				context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
			context.CustomQuery.IsByKey = true;
            context.CustomQuery.FilterExpressionString = strWhere;
            context.UseMode = usemode;
            item = GetBy(strWhere,context , includes).FirstOrDefault();
            return item;

        }

        #region Dynamic Predicate
        public List<accMoneyInOutConcept> GetBy(Expression<Func<accMoneyInOutConcept, bool>> predicate, int? pageSize, int? page)
        {
            return this.GetBy(predicate, pageSize, page, null, null);
        }
        public List<accMoneyInOutConcept> GetBy(Expression<Func<accMoneyInOutConcept, bool>> predicate, ContextRequest contextRequest)
        {

            return GetBy(predicate, contextRequest,"");
        }
        
        public List<accMoneyInOutConcept> GetBy(Expression<Func<accMoneyInOutConcept, bool>> predicate, ContextRequest contextRequest, params Expression<Func<accMoneyInOutConcept, object>>[] includes)
        {
            StringBuilder sb = new StringBuilder();
           if (includes != null)
            {
                foreach (var path in includes)
                {

						if (sb.Length > 0) sb.Append(",");
						sb.Append(SFSdotNet.Framework.Linq.Utils.IncludeToString<accMoneyInOutConcept>(path));

               }
            }
            return GetBy(predicate, contextRequest, sb.ToString());
        }
        
        
        public List<accMoneyInOutConcept> GetBy(Expression<Func<accMoneyInOutConcept, bool>> predicate, string includes)
        {
			ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";

            return GetBy(predicate, context, includes);
        }

        public List<accMoneyInOutConcept> GetBy(Expression<Func<accMoneyInOutConcept, bool>> predicate, params Expression<Func<accMoneyInOutConcept, object>>[] includes)
        {
			if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }
			ContextRequest context = new ContextRequest();
			            context.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            context.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";
            return GetBy(predicate, context, includes);
        }

      
		public bool DisableCache { get; set; }
		 public List<accMoneyInOutConcept> GetBy(Expression<Func<accMoneyInOutConcept, bool>> predicate, ContextRequest contextRequest, string includes)
        {
            using (EFPocoContext con = new EFPocoContext())
            {
				if (DisableCache) 
                	con.CachingPolicy = EFCachingProvider.Caching.CachingPolicy.NoCaching;

				List<accMoneyInOutConcept> result = null;
                 e = null;
	
				OnGetting(con, e = new BusinessRulesEventArgs<accMoneyInOutConcept>() {  FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null) });

               // OnGetting(con,e = new BusinessRulesEventArgs<accMoneyInOutConcept>() { FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = contextRequest.CustomQuery.FilterExpressionString});
				   if (e != null) {
				    predicate = e.FilterExpression;
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				con.EnableChangeTrackingUsingProxies = false;
				con.WrappedContext.accMoneyInOutConcepts.MergeOption = MergeOption.NoTracking;
                con.WrappedContext.ContextOptions.ProxyCreationEnabled = false;
                if (predicate == null) predicate = PredicateBuilder.True<accMoneyInOutConcept>();
 				string fkIncludes = "accReusableCatalogValue,accInExCategory";
                if(contextRequest!=null){
					if (contextRequest.CustomQuery != null)
					{
						if (contextRequest.CustomQuery.IncludeForeignKeyPaths != null) {
							if (contextRequest.CustomQuery.IncludeForeignKeyPaths.Value == false)
								fkIncludes = "";
						}
					}
				}
				if (!string.IsNullOrEmpty(includes))
					includes = includes + "," + fkIncludes;
				else
					includes = fkIncludes;
                
                var es = con.accMoneyInOutConcepts;

                IQueryable<accMoneyInOutConcept> query = es.AsQueryable();

                                if (!string.IsNullOrEmpty(includes))
                {
                    foreach (string include in includes.Split(char.Parse(",")))
                    {
						if (!string.IsNullOrEmpty(include))
                            query = query.Include(include);
                    }
                }
                    predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
					 	if (!preventSecurityRestrictions)
						{
							if (contextRequest != null )
		                    	if (contextRequest.User !=null )
		                        	if (contextRequest.Company != null)
		                        		predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				query =query.Where(predicate);
                query = ContextQueryBuilder<accMoneyInOutConcept>.ApplyContextQuery(query, contextRequest);

                result = query.ToList<accMoneyInOutConcept>();
				  
                if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e =  new BusinessRulesEventArgs<accMoneyInOutConcept>() { Items= result, IncludingComputedLinq = false, ContextRequest = contextRequest,  FilterExpression = predicate } :  e);
  
			

                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
            }
        }
		public void UpdateAgile(accMoneyInOutConcept item, params string[] fields)
         {
             List<accMoneyInOutConcept> list = new List<accMoneyInOutConcept>();
             list.Add(item);
             this.UpdateBulk(list, fields);
         }
		public void UpdateBulk(List<accMoneyInOutConcept>  items, params string[] fields)
         {
             SFSdotNet.Framework.My.ContextRequest req = new SFSdotNet.Framework.My.ContextRequest();
             req.CustomQuery = new SFSdotNet.Framework.My.CustomQuery();
             foreach (var field in fields)
             {
                 req.CustomQuery.SpecificProperties.Add(field);
             }
             UpdateBulk(items, req);

         }
        public void UpdateBulk(List<accMoneyInOutConcept> items, ContextRequest req)
        {
            using (EFContext con = new EFContext())
            {



                foreach (var item in items)
                {
                    var setT = con.CreateObjectSet<accMoneyInOutConcept>("accMoneyInOutConcepts");


                    var itemForAttach = new accMoneyInOutConcept();
			itemForAttach.GuidMoneyInOutConcept = item.GuidMoneyInOutConcept;
					
                    itemForAttach = SFSdotNet.Framework.Entities.ConvertEntity.SetProperties<accMoneyInOutConcept>(item, itemForAttach, null, req.CustomQuery.SpecificProperties.ToArray());
                    setT.Attach(itemForAttach);


                    foreach (var property in req.CustomQuery.SpecificProperties)
                    {
						
                        if (property != "GuidMoneyInOutConcept")
                            con.ObjectStateManager.GetObjectStateEntry(itemForAttach).SetModifiedProperty(property);

                    }

                }
                con.SaveChanges();


            }
        }
		/*public int Update(List<accMoneyInOutConcept> items, ContextRequest contextRequest)
            {
                int result = 0;
                using (EFContext con = new EFContext())
                {
                   
                

                    foreach (var item in items)
                    {
                        //secMessageToUser messageToUser = new secMessageToUser();
                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            item.GetType().GetProperty(prop).SetValue(item, item.GetType().GetProperty(prop).GetValue(item));
                        }
                        //messageToUser.GuidMessageToUser = (Guid)item.GetType().GetProperty("GuidMessageToUser").GetValue(item);

                        var setObject = con.CreateObjectSet<accMoneyInOutConcept>("accMoneyInOutConcepts");
                        //messageToUser.Readed = DateTime.UtcNow;
                        setObject.Attach(item);
                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            con.ObjectStateManager.GetObjectStateEntry(item).SetModifiedProperty(prop);
                        }
                       
                    }
                    result = con.SaveChanges();

                    


                }
                return result;
            }
           */
        public List<accMoneyInOutConcept> GetBy(string predicateString, ContextRequest contextRequest, string includes)
        {
            using (EFContext con = new EFContext())
            {
				if (DisableCache) 
                	con.CachingPolicy = EFCachingProvider.Caching.CachingPolicy.NoCaching;

				Filter filter = new Filter();
                if (predicateString.Contains("|"))
                {
                    string ft = GetSpecificFilter(predicateString);
                    if (!string.IsNullOrEmpty(ft))
                        filter.SetFilterPart("ft", ft);
                   
                    contextRequest.FreeText = predicateString.Split(char.Parse("|"))[1];
                    var q1 = predicateString.Split(char.Parse("|"))[0];
                    if (!string.IsNullOrEmpty(q1))
                    {
                        filter.ProcessText(q1);
                    }
                }
                else {
                    filter.ProcessText(predicateString);
                }

				List<accMoneyInOutConcept> result = null;
                 e = null;
					OnGetting(con, e = new BusinessRulesEventArgs<accMoneyInOutConcept>() { Filter = filter, ContextRequest = contextRequest /*, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null)*/ });

                  //OnGetting(con,e = new BusinessRulesEventArgs<accMoneyInOutConcept>() {  ContextRequest = contextRequest, FilterExpressionString = predicateString });
			   	if (e != null) {
				    //predicateString = e.GetQueryString();
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				//	 else {
                //      predicateString = predicateString.Replace("*extraFreeText*", "").Replace("()","");
                //  }
				//con.EnableChangeTrackingUsingProxies = false;
				con.accMoneyInOutConcepts.MergeOption = MergeOption.NoTracking;
                con.ContextOptions.ProxyCreationEnabled = false;
                //if (predicate == null) predicate = PredicateBuilder.True<accMoneyInOutConcept>();
 				string fkIncludes = "accReusableCatalogValue,accInExCategory";
                if(contextRequest!=null){
					if (contextRequest.CustomQuery != null)
					{
						if (contextRequest.CustomQuery.IncludeForeignKeyPaths != null) {
							if (contextRequest.CustomQuery.IncludeForeignKeyPaths.Value == false)
								fkIncludes = "";
						}
					}
				}else{
                    contextRequest = new ContextRequest();
                    contextRequest.CustomQuery = new CustomQuery();

                }
				if (!string.IsNullOrEmpty(includes))
					includes = includes + "," + fkIncludes;
				else
					includes = fkIncludes;
                
                var es = con.accMoneyInOutConcepts;
				IQueryable<accMoneyInOutConcept> query = es.AsQueryable();
		
				// include relations FK
				if(string.IsNullOrEmpty(includes) ){
					includes ="";
				}
				bool includeaccReusableCatalogValue = includes.Split(char.Parse(",")).Contains("accReusableCatalogValue");

				bool includeaccInExCategory = includes.Split(char.Parse(",")).Contains("accInExCategory");

				StringBuilder sbQuerySystem = new StringBuilder();
                    //predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				

				//if (!string.IsNullOrEmpty(predicateString))
                //      sbQuerySystem.Append(" And ");
                //sbQuerySystem.Append(" (IsDeleted != true Or IsDeleted = null) ");
				 filter.SetFilterPart("de", "(IsDeleted != true OR IsDeleted = null)");


					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
	                    	if (contextRequest.User !=null )
	                        	if (contextRequest.Company != null ){
	                        		//if (sbQuerySystem.Length > 0)
	                        		//	    			sbQuerySystem.Append( " And ");	
									//sbQuerySystem.Append(@" (GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
									filter.SetFilterPart("co",@"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @"""))");
								}
						}	
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				//string predicateString = predicate.ToDynamicLinq<accMoneyInOutConcept>();
				//predicateString += sbQuerySystem.ToString();
				filter.CleanAndProcess("");

				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed(); //SFSdotNet.Framework.Linq.Utils.ExtractSpecificProperties("", ref predicateString );               
                string predicateWithManyRelations = filter.GetFilterChildren(); //SFSdotNet.Framework.Linq.Utils.CleanPartExpression(predicateString);

                //QueryUtils.BreakeQuery1(predicateString, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
                var _queryable = query.AsQueryable();
                if (!string.IsNullOrEmpty(predicateWithManyRelations))
                    _queryable = _queryable.Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams);
				if (contextRequest.CustomQuery.SpecificProperties.Count > 0)
                {

                    StringBuilder sbProps = new StringBuilder();
                    contextRequest.CustomQuery.SpecificProperties.Add("GuidMoneyInOutConcept");
                    
					foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                    {
						if(sbProps.Length > 0)
							sbProps.Append(",");
                        sbProps.Append(prop);
                    }
					    IQueryable  queryableSelective = null ;
					  
					  if (!string.IsNullOrEmpty(predicateWithManyRelations))
							queryableSelective = con.accMoneyInOutConcepts.AsQueryable().Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams).Select(string.Format("new({0})", sbProps.ToString()));
					else
						queryableSelective = con.accMoneyInOutConcepts.AsQueryable().Select(string.Format("new({0})", sbProps.ToString()));


                    //if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
					//	queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

                    QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
                    
					if (!string.IsNullOrEmpty(queryOps.OrderByAndSort))
                        queryableSelective = queryableSelective.OrderBy(queryOps.OrderByAndSort);
                    if (queryOps.Skip != null)
                    {
                        queryableSelective = queryableSelective.Skip(queryOps.Skip.Value);
                    }
                    if (queryOps.PageSize != null)
                    {
                        queryableSelective = queryableSelective.Take(queryOps.PageSize.Value);
                    }
                    //var results = queryableSelective.ToList();
                    result = new List<accMoneyInOutConcept>();
                    accMoneyInOutConcept itemDef = null;
                    foreach (var item in queryableSelective)
                    {
                        itemDef = new accMoneyInOutConcept();

                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            if (!prop.Contains("."))
                            {
                                itemDef.GetType().GetProperty(prop).SetValue(itemDef, item.GetType().GetProperty(prop).GetValue(item));
                            }
                            else {
                                throw new Exception("La seleccion de relaciones aún no esta soportada");
                            }

                        }

                        result.Add(itemDef);
                    }

                }
                else
                {
				var  queryable = _queryable.Select(                    
				p => 
                        new
                    {
					GuidMoneyInOutConcept = p.GuidMoneyInOutConcept
,CreatedDate = p.CreatedDate
,UpdatedDate = p.UpdatedDate
,CreatedBy = p.CreatedBy
,UpdatedBy = p.UpdatedBy
,IsDeleted = p.IsDeleted
,GuidCompany = p.GuidCompany
,Description = p.Description
,Title = p.Title

,accReusableCatalogValue = includeaccReusableCatalogValue ? p.accReusableCatalogValue:null
,accInExCategory = includeaccInExCategory ? p.accInExCategory:null


	
                    }
                    
                    );
					
				
                 if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
                    queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

				QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
            	if (!string.IsNullOrEmpty(queryOps.OrderByAndSort))
					queryable = queryable.OrderBy(queryOps.OrderByAndSort);
               	if (queryOps.Skip != null)
                {
                    queryable = queryable.Skip(queryOps.Skip.Value);
                }
                if (queryOps.PageSize != null)
                {
                    queryable = queryable.Take (queryOps.PageSize.Value);
                }
                result = queryable.AsEnumerable().
                    Select(
                    p =>  new accMoneyInOutConcept()
                    {
					GuidMoneyInOutConcept = p.GuidMoneyInOutConcept
,CreatedDate = p.CreatedDate
,UpdatedDate = p.UpdatedDate
,CreatedBy = p.CreatedBy
,UpdatedBy = p.UpdatedBy
,IsDeleted = p.IsDeleted
,GuidCompany = p.GuidCompany
,Description = p.Description
,Title = p.Title
,accReusableCatalogValue = p.accReusableCatalogValue
,accInExCategory = p.accInExCategory

                    }
                     ).ToList();
				}


			 if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e = new BusinessRulesEventArgs<accMoneyInOutConcept>() { Items= result, IncludingComputedLinq = true, ContextRequest = contextRequest, FilterExpressionString  = predicateString } :  e);
  
			
  
                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
            }
        }
		public List<accMoneyInOutConcept> GetBy(Expression<Func<accMoneyInOutConcept, bool>> predicate, bool loadRelations, ContextRequest contextRequest)
        {
			if(!loadRelations)
				return GetBy(predicate, contextRequest);
			else
				return GetBy(predicate, contextRequest, "accIncomeExpenses");

        }

        public List<accMoneyInOutConcept> GetBy(Expression<Func<accMoneyInOutConcept, bool>> predicate, int? pageSize, int? page, string orderBy, SFSdotNet.Framework.Data.SortDirection? sortDirection)
        {
            return GetBy(predicate, new ContextRequest() { CustomQuery = new CustomQuery() { Page = page, PageSize = pageSize, OrderBy = orderBy, SortDirection = sortDirection } });
        }
        public List<accMoneyInOutConcept> GetBy(Expression<Func<accMoneyInOutConcept, bool>> predicate)
        {

			if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }
			ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();

			contextRequest.CurrentContext = SFSdotNet.Framework.My.Context.CurrentContext;
			            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

            contextRequest.CustomQuery.FilterExpressionString = null;
            return this.GetBy(predicate, contextRequest, "");
        }
        #endregion
        #region Dynamic String
		private string GetSpecificFilter(string filter) {
            string result = "";
		    //string linqFilter = String.Empty;
            string freeTextFilter = String.Empty;
            if (filter.Contains("|"))
            {
               // linqFilter = filter.Split(char.Parse("|"))[0];
                freeTextFilter = filter.Split(char.Parse("|"))[1];
            }
            //else {
            //    freeTextFilter = filter;
            //}
            //else {
            //    linqFilter = filter;
            //}
			// linqFilter = SFSdotNet.Framework.Linq.Utils.ReplaceCustomDateFilters(linqFilter);
            //string specificFilter = linqFilter;
            if (!string.IsNullOrEmpty(freeTextFilter))
            {
                System.Text.StringBuilder sbCont = new System.Text.StringBuilder();
                /*if (specificFilter.Length > 0)
                {
                    sbCont.Append(" AND ");
                    sbCont.Append(" ({0})");
                }
                else
                {
                    sbCont.Append("{0}");
                }*/
                //var words = freeTextFilter.Split(char.Parse(" "));
				var word = freeTextFilter;
                System.Text.StringBuilder sbSpec = new System.Text.StringBuilder();
                 int nWords = 1;
				/*foreach (var word in words)
                {
					if (word.Length > 0){
                    if (sbSpec.Length > 0) sbSpec.Append(" AND ");
					if (words.Length > 1) sbSpec.Append("("); */
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
											
					sbSpec.Append(string.Format(@"Description.Contains(""{0}"")", word));

					
											sbSpec.Append(" OR ");
										
					sbSpec.Append(string.Format(@"Title.Contains(""{0}"")", word));

					
	
					
	
					
								sbSpec.Append(" OR ");
					
					//if (sbSpec.Length > 2)
					//	sbSpec.Append(" OR "); // test
					sbSpec.Append(string.Format(@"accReusableCatalogValue.Title.Contains(""{0}"")", word)+" OR "+string.Format(@"accInExCategory.Title.Contains(""{0}"")", word));
								 //sbSpec.Append("*extraFreeText*");

                    /*if (words.Length > 1) sbSpec.Append(")");
					
					nWords++;

					}

                }*/
                //specificFilter = string.Format("{0}{1}", specificFilter, string.Format(sbCont.ToString(), sbSpec.ToString()));
                                 result = sbSpec.ToString();  
            }
			//result = specificFilter;
			
			return result;

		}
	
			public List<accMoneyInOutConcept> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  params object[] extraParams)
        {
			return GetBy(filter, pageSize, page, orderBy, orderDir,  null, extraParams);
		}
           public List<accMoneyInOutConcept> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir, string usemode, params object[] extraParams)
            { 
                return GetBy(filter, pageSize, page, orderBy, orderDir, usemode, null, extraParams);
            }


		public List<accMoneyInOutConcept> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  string usemode, ContextRequest context, params object[] extraParams)

        {

            // string freetext = null;
            //if (filter.Contains("|"))
            //{
            //    int parts = filter.Split(char.Parse("|")).Count();
            //    if (parts > 1)
            //    {

            //        freetext = filter.Split(char.Parse("|"))[1];
            //    }
            //}
		
            //string specificFilter = "";
            //if (!string.IsNullOrEmpty(filter))
            //  specificFilter=  GetSpecificFilter(filter);
            if (string.IsNullOrEmpty(orderBy))
            {
			                orderBy = "UpdatedDate";
            }
			//orderDir = "desc";
			SFSdotNet.Framework.Data.SortDirection direction = SFSdotNet.Framework.Data.SortDirection.Ascending;
            if (!string.IsNullOrEmpty(orderDir))
            {
                if (orderDir == "desc")
                    direction = SFSdotNet.Framework.Data.SortDirection.Descending;
            }
            if (context == null)
                context = new ContextRequest();
			else
                context.CustomQuery = new CustomQuery();
             //context.FreeText = freetext;
             context.UseMode = usemode;
             context.CustomQuery =new SFSdotNet.Framework.My.CustomQuery()
 
                {
                    ExtraParams = extraParams,

                    OrderBy = orderBy,
                    SortDirection = direction,
                    Page = page,
                    PageSize = pageSize
               };
            

            if (!preventSecurityRestrictions) {
			 if (context.CurrentContext == null)
                {
					if (SFSdotNet.Framework.My.Context.CurrentContext != null &&  SFSdotNet.Framework.My.Context.CurrentContext.Company != null && SFSdotNet.Framework.My.Context.CurrentContext.User != null)
					{
						context.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
						context.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

					}
					else {
						throw new Exception("The security rule require a specific user and company");
					}
				}
            }
            return GetBy(filter, context);
  
        }


        public List<accMoneyInOutConcept> GetBy(string strWhere, ContextRequest contextRequest)
        {
        	#region old code
				
				 //Expression<Func<tvsReservationTransport, bool>> predicate = null;
				string strWhereClean = strWhere.Replace("*extraFreeText*", "").Replace("()", "");
                //if (!string.IsNullOrEmpty(strWhereClean)){

                //    object[] extraParams = null;
                //    //if (contextRequest != null )
                //    //    if (contextRequest.CustomQuery != null )
                //    //        extraParams = contextRequest.CustomQuery.ExtraParams;
                //    //predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<tvsReservationTransport, bool>(strWhereClean, extraParams != null? extraParams.Cast<Guid>(): null);				
                //}
				 if (contextRequest == null)
                {
                    contextRequest = new ContextRequest();
                    if (contextRequest.CustomQuery == null)
                        contextRequest.CustomQuery = new CustomQuery();
                }
                  if (!preventSecurityRestrictions) {
					if (contextRequest.User == null || contextRequest.Company == null)
                      {
                     if (SFSdotNet.Framework.My.Context.CurrentContext.Company != null && SFSdotNet.Framework.My.Context.CurrentContext.User != null)
                     {
                         contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                         contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

                     }
                     else {
                         throw new Exception("The security rule require a specific User and Company ");
                     }
					 }
                 }
            contextRequest.CustomQuery.FilterExpressionString = strWhere;
				//return GetBy(predicate, contextRequest);  

			#endregion				
				
                    return GetBy(strWhere, contextRequest, "");  


        }
       public List<accMoneyInOutConcept> GetBy(string strWhere)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
			
            return GetBy(strWhere, context, null);
        }

        public List<accMoneyInOutConcept> GetBy(string strWhere, string includes)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
            return GetBy(strWhere, context, includes);
        }

        #endregion
        #endregion
		
		  #region SaveOrUpdate
        private accMoneyInOutConcept Save(accMoneyInOutConcept entity, bool saveChanges, EFPocoContext con)
        {
				ObjectContext context = null;
            return Update(entity, saveChanges,null, out context);

			
        }
		 public  accMoneyInOutConcept Create( accMoneyInOutConcept entity, params Expression<Func< accMoneyInOutConcept, object>>[] paths)
         {
             return Create(entity, null, paths);

         }
 		 public accMoneyInOutConcept Create(accMoneyInOutConcept entity)
        {
				ObjectContext context = null;
				    if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: Create");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

				return this.Create(entity, true, contextRequest, out context);


        }
        public accMoneyInOutConcept Create(accMoneyInOutConcept entity, ContextRequest contextRequest)
         {
             ObjectContext context = null;
             return this.Create(entity, true, contextRequest,out context);

         }
         public accMoneyInOutConcept Create(accMoneyInOutConcept entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext context)
        {
                    return Create(entity, saveChanges , contextRequest , out context, null);
        }
         public accMoneyInOutConcept Create(accMoneyInOutConcept entity, ContextRequest contextRequest, params Expression<Func<accMoneyInOutConcept,object>>[] paths)
        {
            ObjectContext context = null;
            if(paths != null)
				return Create(entity, true,contextRequest, out context, paths);
			else 
				return Create(entity, true,contextRequest, out context);
        }
        public accMoneyInOutConcept Create(accMoneyInOutConcept entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext context, params Expression<Func<accMoneyInOutConcept,object>>[] pocopaths)
        {
			using (EFPocoContext con = new EFPocoContext())
			{
				accMoneyInOutConcept itemResult = null;
#region Autos


			entity.CreatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.CreatedBy = contextRequest.User.GuidUser;
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.UpdatedBy = contextRequest.User.GuidUser;
	
			if (contextRequest != null)
				if(contextRequest.User != null)
					if (contextRequest.Company != null)
						entity.GuidCompany = contextRequest.Company.GuidCompany;
	

#endregion
                e = null;
                OnCreating(this,e = new BusinessRulesEventArgs<accMoneyInOutConcept>() { ContextRequest = contextRequest, Item=entity, PathExpressions = pocopaths, SaveChanges =saveChanges });
				   if (e != null) {
						if (e.Cancel)
						{
							context = null;
							return e.Item;

						}
					}

                    if (entity.GuidMoneyInOutConcept == Guid.Empty)
                   {
                       entity.GuidMoneyInOutConcept = Guid.NewGuid();

                   }



				accMoneyInOutConceptAdapter adapter = con.GetAdapterObject<accMoneyInOutConceptAdapter>(entity);;
				List<Expression<Func<accMoneyInOutConceptAdapter, object>>> paths = new List<Expression<Func<accMoneyInOutConceptAdapter,object>>>();
                
			    if (pocopaths != null && pocopaths.Length > 0)
                {
					// Translate
                    foreach (var pocopath in pocopaths)
                    {
                        var param = Expression.Parameter(typeof(accMoneyInOutConceptAdapter), "p");
                        var member = MemberExpression.PropertyOrField(param, ((System.Linq.Expressions.MemberExpression)(((System.Linq.Expressions.LambdaExpression)(pocopath)).Body)).Member.Name);
                        Expression<Func<accMoneyInOutConceptAdapter, object>> path  = null;
                        switch(member.Member.Name){
                        
							case "accIncomeExpenses":
								path = p => p.accIncomeExpenses.First().WithoutUpdate();

								//path = p => member;
								//path = p => p.accIncomeExpenses.First().accMoneyPlace.WithoutUpdate();											
								//path = p => p.accIncomeExpenses.First().accProvider.WithoutUpdate();											
								//path = p => p.accIncomeExpenses.First().accReusableCatalogValue.WithoutUpdate();											
								//path = p => p.accIncomeExpenses.First().accReusableStatusAuthorization.WithoutUpdate();											
								//path = p => p.accIncomeExpenses.First().accCompanyArea.WithoutUpdate();											
								//path = p => p.accIncomeExpenses.First().accParent.WithoutUpdate();											
								//path = p => p.accIncomeExpenses.First().accReusable_PaymentType.WithoutUpdate();											
							break;
							
							default:
								path = p => member;
							break;
                        }

                        
                       paths.Add(path.Expand());
                    }
                }
                object aux = null;
					paths.Add(p => p.accReusableCatalogValue.WithoutUpdate());

					paths.Add(p => p.accInExCategory.WithoutUpdate());

					//paths = pathBuilder.ToArray();

				if (adapter.accReusableCatalogValue != null ){
					if(adapter.accReusableCatalogValue.EntityKey == null) adapter.accReusableCatalogValue.EntityKey = con.WrappedContext.CreateEntityKey("accReusableCatalogValues", adapter.accReusableCatalogValue);
				}
				if (adapter.accInExCategory != null ){
					if(adapter.accInExCategory.EntityKey == null) adapter.accInExCategory.EntityKey = con.WrappedContext.CreateEntityKey("accInExCategories", adapter.accInExCategory);
				}
#region Childs accIncomeExpenses 
				if (adapter.accIncomeExpenses != null)
                {
                    foreach (var item in adapter.accIncomeExpenses)
                    {
						
							if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accIncomeExpenses", item);
							if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)){ 
								//paths.Add(p => p.accIncomeExpenses.First().WithoutUpdate());
								
							if (item.accMoneyInOutConcept == null)
								item.accMoneyInOutConcept = adapter;

						if (item.accMoneyPlace != null){
							item.accMoneyPlace.EntityKey = con.WrappedContext.CreateEntityKey("accMoneyPlaces", item.accMoneyPlace);
                            
             
						}								
						if (item.accProvider != null){
							item.accProvider.EntityKey = con.WrappedContext.CreateEntityKey("accProviders", item.accProvider);
                            
             
						}								
						if (item.accReusableCatalogValue != null){
							item.accReusableCatalogValue.EntityKey = con.WrappedContext.CreateEntityKey("accReusableCatalogValues", item.accReusableCatalogValue);
                            
             
						}								
						if (item.accReusableStatusAuthorization != null){
							item.accReusableStatusAuthorization.EntityKey = con.WrappedContext.CreateEntityKey("accReusableCatalogValues", item.accReusableStatusAuthorization);
                            
             
						}								
						if (item.accCompanyArea != null){
							item.accCompanyArea.EntityKey = con.WrappedContext.CreateEntityKey("accCompanyAreas", item.accCompanyArea);
                            
             
						}								
						if (item.accParent != null){
							item.accParent.EntityKey = con.WrappedContext.CreateEntityKey("accIncomeExpenses", item.accParent);
                            
             
						}								
						if (item.accReusable_PaymentType != null){
							item.accReusable_PaymentType.EntityKey = con.WrappedContext.CreateEntityKey("accReusableCatalogValues", item.accReusable_PaymentType);
                            
             
						}								
								item.EntityKey = null;
							}

                    }
					if (adapter.accIncomeExpenses.Count > 0){
						paths.Add(p => p.accIncomeExpenses.First().WithoutUpdate());
						paths.Add(p => p.accIncomeExpenses.First().accMoneyPlace.WithoutUpdate());
paths.Add(p => p.accIncomeExpenses.First().accProvider.WithoutUpdate());
paths.Add(p => p.accIncomeExpenses.First().accReusableCatalogValue.WithoutUpdate());
paths.Add(p => p.accIncomeExpenses.First().accReusableStatusAuthorization.WithoutUpdate());
paths.Add(p => p.accIncomeExpenses.First().accCompanyArea.WithoutUpdate());
paths.Add(p => p.accIncomeExpenses.First().accParent.WithoutUpdate());
paths.Add(p => p.accIncomeExpenses.First().accReusable_PaymentType.WithoutUpdate());
					
					}
                }
#endregion 




                //con.WrappedContext.AttachObjectGraph<accMoneyInOutConceptAdapter>(adapter, p=>p.accReusableCatalogValue, p=>p.accInExCategory, p=>p.accIncomeExpenses);
                con.WrappedContext.AttachObjectGraph<accMoneyInOutConceptAdapter>(adapter, paths.ToArray());
              	if (saveChanges){
                    con.WrappedContext.SaveChanges(SaveOptions.AcceptAllChangesAfterSave);
					 
				}
                else
                    con.WrappedContext.SaveChanges(SaveOptions.None);
                if (!saveChanges)
                    context = con.WrappedContext;
                else
                    context = null;
				itemResult = adapter.PocoEntity;
                if (e != null)
                {
                    e.Item = itemResult;
                }
                OnCreated(this, e == null ? e = new BusinessRulesEventArgs<accMoneyInOutConcept>() { ContextRequest = contextRequest, Item = itemResult, PathExpressions = pocopaths, SaveChanges = saveChanges } : e);



                if (e != null)
                {
                    itemResult = e.Item;
                }
                              return itemResult;
            }
        }
        BusinessRulesEventArgs<accMoneyInOutConcept> e = null;
        public void Create(List<accMoneyInOutConcept> entities)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            Create(entities, contextRequest, null);
        }
        public void Create(List<accMoneyInOutConcept> entities, ContextRequest contextRequest)
        
        {
			ObjectContext context = null;
            	foreach (accMoneyInOutConcept entity in entities)
				{
					this.Create(entity, true, contextRequest, out context);
				}
        }
         public accMoneyInOutConcept Update(accMoneyInOutConcept entity)
        {
            if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return Update(entity, contextRequest);
        }
        public accMoneyInOutConcept Update(accMoneyInOutConcept entity, ContextRequest requestContext)
        {
			  ObjectContext context = null;
            return Update(entity, true,requestContext, out context);
         }
		public  accMoneyInOutConcept Update(accMoneyInOutConcept entity, params Expression<Func<accMoneyInOutConcept, object>>[] pocopaths)
        {
			  ObjectContext context = null;
              return Update(entity, true, null, out context, pocopaths);
         }
        public accMoneyInOutConcept Update(accMoneyInOutConcept entity, ContextRequest requestContext, bool saveChanges, out ObjectContext outcontext)
        {
			return Update(entity, saveChanges,requestContext, out outcontext, null);
		}
         public accMoneyInOutConcept Update(accMoneyInOutConcept entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext outcontext, params Expression<Func<accMoneyInOutConcept,object>>[] pocopaths)
        {
		 if ((System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null) && contextRequest == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Update");
            }
            if (contextRequest == null)
            {
                contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            }

			using (EFPocoContext con = new EFPocoContext())
			{
				accMoneyInOutConcept  itemResult = null;

	
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
			if(contextRequest.User != null)
				entity.UpdatedBy = contextRequest.User.GuidUser;

	    var oldentity = GetBy(p => p.GuidMoneyInOutConcept == entity.GuidMoneyInOutConcept, contextRequest).FirstOrDefault();
		if (oldentity != null) {
		
            entity.CreatedDate = oldentity.CreatedDate;
            entity.CreatedBy = oldentity.CreatedBy;
	
            entity.GuidCompany = oldentity.GuidCompany;
	
			

		}

				e = null;
                OnUpdating(this,e = new BusinessRulesEventArgs<accMoneyInOutConcept>() { ContextRequest = contextRequest, Item=entity, PathExpressions = pocopaths, SaveChanges =saveChanges });
				   if (e != null) {
						if (e.Cancel)
						{
							outcontext = null;
							return e.Item;

						}
					}

                accMoneyInOutConceptAdapter adapter = con.GetAdapterObject<accMoneyInOutConceptAdapter>(entity);
                adapter.EntityKey = con.WrappedContext.CreateEntityKey("accMoneyInOutConcepts", adapter);
				    var es = con.accMoneyInOutConcepts;
				List<Expression<Func<accMoneyInOutConceptAdapter, object>>> paths = new List<Expression<Func<accMoneyInOutConceptAdapter,object>>>();
                /* if (pocopaths != null)
                    if (pocopaths.Length == 0)
                        pocopaths = null;*/

			    if (pocopaths != null && pocopaths.Length > 0)
                {
					// Translate
                    foreach (var pocopath in pocopaths)
                    {
                        var param = Expression.Parameter(typeof(accMoneyInOutConceptAdapter), "p");
                        var member = MemberExpression.PropertyOrField(param, ((System.Linq.Expressions.MemberExpression)(((System.Linq.Expressions.LambdaExpression)(pocopath)).Body)).Member.Name);
                        Expression<Func<accMoneyInOutConceptAdapter, object>> path  = null;
                        switch(member.Member.Name){
                        
							case "accIncomeExpenses":
								//path = p => member;
								path = p => p.accIncomeExpenses.First().WithoutUpdate();
				//				path = p => p.accIncomeExpenses.First().accMoneyPlace.WithoutUpdate();											
				//				path = p => p.accIncomeExpenses.First().accProvider.WithoutUpdate();											
				//				path = p => p.accIncomeExpenses.First().accReusableCatalogValue.WithoutUpdate();											
				//				path = p => p.accIncomeExpenses.First().accReusableStatusAuthorization.WithoutUpdate();											
				//				path = p => p.accIncomeExpenses.First().accCompanyArea.WithoutUpdate();											
				//				path = p => p.accIncomeExpenses.First().accParent.WithoutUpdate();											
				//				path = p => p.accIncomeExpenses.First().accReusable_PaymentType.WithoutUpdate();											
							break;
							
							default:
								path = p => member;
							break;
                        }

                        paths.Add(path.Expand());
 					}
                }
                else {
                  paths = new List<Expression<Func<accMoneyInOutConceptAdapter, object>>>();

					//List<Expression<Func<accMoneyInOutConceptAdapter,object>>> pathBuilder = new List<Expression<Func<accMoneyInOutConceptAdapter,object>>>();
					paths.Add(p => p.accReusableCatalogValue.WithoutUpdate());

					paths.Add(p => p.accInExCategory.WithoutUpdate());

		
					//paths = pathBuilder.ToArray();		
			}
			object aux = null;
				if (adapter.accReusableCatalogValue != null ){
					if(adapter.accReusableCatalogValue.EntityKey == null) adapter.accReusableCatalogValue.EntityKey = con.WrappedContext.CreateEntityKey("accReusableCatalogValues", adapter.accReusableCatalogValue);
				}

                
				if (adapter.accInExCategory != null ){
					if(adapter.accInExCategory.EntityKey == null) adapter.accInExCategory.EntityKey = con.WrappedContext.CreateEntityKey("accInExCategories", adapter.accInExCategory);
				}

                
				if (adapter.accIncomeExpenses != null)
                {
                    foreach (var item in adapter.accIncomeExpenses)
                    {


                        if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accIncomeExpenses", item);
						if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)) item.EntityKey = null;
                        
                    }
					
                    if (adapter.accIncomeExpenses.Count > 0)
                    {
                        paths.Add(p => p.accIncomeExpenses.First().WithoutUpdate());

                    }

                }



                //con.AttachObjectGraph<accMoneyInOutConcept>(adapter, p=>p.accReusableCatalogValue, p=>p.accInExCategory, p=>p.accIncomeExpenses);
                con.WrappedContext.AttachObjectGraph<accMoneyInOutConceptAdapter>(adapter, paths.ToArray());
				if (saveChanges){
                	con.WrappedContext.SaveChanges();
					 
					}
                if(!saveChanges)
					outcontext = con.WrappedContext;
				else
					outcontext = null;
				itemResult = adapter.PocoEntity;
				OnUpdated(this, e = new BusinessRulesEventArgs<accMoneyInOutConcept>() { ContextRequest = contextRequest, Item=itemResult, PathExpressions = pocopaths, SaveChanges =saveChanges });

              	return itemResult;

			  }
        }
        public accMoneyInOutConcept Save(accMoneyInOutConcept entity)
        {
			return Save(entity, true, null);
        }
        public int Save(List<accMoneyInOutConcept> entities)
        {
			using (EFPocoContext con = new EFPocoContext())
			{
			
            int n = 0;
            foreach (accMoneyInOutConcept item in entities)
            {
                try
                {
                    this.Save(item, false, con);
                    n++;
                }catch (Exception ex){
                    SFSdotNet.Framework.My.EventLog.Exception(ex);
                }
            }
            con.SaveChanges();
            return n;
            }
        }
        #endregion
        #region Delete
        public void Delete(accMoneyInOutConcept entity)
        {
				this.Delete(entity, null);
			
        }
		 public void Delete(accMoneyInOutConcept entity, ContextRequest contextRequest)
        {
				ObjectContext context = null;
				this.Delete(entity, true, out context, contextRequest);
			
        }

        
        public void Delete(accMoneyInOutConcept entity, bool saveChanges, out  ObjectContext context, ContextRequest contextRequest, BusinessRulesEventArgs<accMoneyInOutConcept> e = null)
        {
			using (EFPocoContext _con = new EFPocoContext())
			{
				int result = 0;
				
               	BusinessRulesEventArgs<accMoneyInOutConcept> _e = null;
               List<accMoneyInOutConcept> _items = new List<accMoneyInOutConcept>();
                _items.Add(entity);
                if (e == null || e.PreventPartialPropagate == false)
                {
                    OnDeleting(this, _e = (e == null ? new BusinessRulesEventArgs<accMoneyInOutConcept>() { ContextRequest = contextRequest, Item = entity, Items = _items, SaveChanges = saveChanges } : e));
                }
                if (_e != null)
                {
                    if (_e.Cancel)
						{
							context = null;
							return;

						}
					}


				accMoneyInOutConceptAdapter adapter = _con.GetAdapterObject<accMoneyInOutConceptAdapter>(entity);
                adapter.EntityKey = _con.WrappedContext.CreateEntityKey("accMoneyInOutConcepts", adapter);
                
	            //adapter = _con.WrappedContext.AttachObjectGraph<accMoneyInOutConceptAdapter>(adapter);
				try{
					_con.WrappedContext.AttachTo("accMoneyInOutConcepts", adapter);
                }catch{
					
				}
									//IsDeleted
					bool logicDelete = true;
					if (adapter.IsDeleted != null)
					{
						if (adapter.IsDeleted.Value)
							logicDelete = false;
					}
					if (logicDelete)
					{
											entity = GetBy(p => p.GuidMoneyInOutConcept == entity.GuidMoneyInOutConcept, contextRequest).FirstOrDefault();
						entity.IsDeleted = true;
						Update(entity, contextRequest);
					}
					else {
						_con.WrappedContext.DeleteObject(adapter);
					}
								
				if (!saveChanges)
                    context = _con.WrappedContext;
                else
                    context = null;
				 SaveOptions saveOption = SaveOptions.None;
                if (saveChanges)
                    saveOption = SaveOptions.AcceptAllChangesAfterSave;

				result = _con.WrappedContext.SaveChanges(saveOption);
				if (saveChanges){
					
					}
			if (e == null || e.PreventPartialPropagate == false)
                {

                    if (_e == null)
                        _e = new BusinessRulesEventArgs<accMoneyInOutConcept>() { ContextRequest = contextRequest, Item = entity, Items = _items };

                    OnDeleted(this, _e);
                }

				//return null;
			}            
        }
        public void Delete(List<accMoneyInOutConcept> entities,  ContextRequest contextRequest = null )
        {
				ObjectContext context = null;
			 BusinessRulesEventArgs<accMoneyInOutConcept> _e = null;

                OnDeleting(this, _e = new BusinessRulesEventArgs<accMoneyInOutConcept>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities });
                if (_e != null)
                {
                    if (_e.Cancel)
                    {
                        context = null;
                        return;

                    }
                }
                bool allSucced = true;
                BusinessRulesEventArgs<accMoneyInOutConcept> eToChilds = new BusinessRulesEventArgs<accMoneyInOutConcept>();
                if (_e != null)
                {
                    eToChilds = _e;
                }
                else
                {
                    eToChilds = new BusinessRulesEventArgs<accMoneyInOutConcept>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                }
				foreach (accMoneyInOutConcept item in entities)
				{
					try
                    {
                        this.Delete(item, true, out context, contextRequest, e: eToChilds);
                    }
                    catch (Exception ex)
                    {
                        SFSdotNet.Framework.My.EventLog.Error(ex);
                        allSucced = false;
                    }
				}
				if (_e == null)
                    _e = new BusinessRulesEventArgs<accMoneyInOutConcept>() { ContextRequest = contextRequest, CountResult = entities.Count, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                OnDeleted(this, _e);

			
        }
        #endregion
 
        #region GetCount
		 public int GetCount(Expression<Func<accMoneyInOutConcept, bool>> predicate)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

			return GetCount(predicate, contextRequest);
		}
        public int GetCount(Expression<Func<accMoneyInOutConcept, bool>> predicate, ContextRequest contextRequest)
        {


		
			using (EFPocoContext con = new EFPocoContext())
			{


				if (predicate == null) predicate = PredicateBuilder.True<accMoneyInOutConcept>();
           		predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted == null);
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    		if (contextRequest.User !=null )
                        		if (contextRequest.Company != null )
                        			predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				
				return con.accMoneyInOutConcepts.Count(predicate);
			}

        }
		  public int GetCount(string predicate,  ContextRequest contextRequest)
         {
             return GetCount(predicate, null, contextRequest);
         }

         public int GetCount(string predicate)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return GetCount(predicate, contextRequest);
        }
		 public int GetCount(string predicate, string usemode){
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
				return GetCount( predicate,  usemode,  contextRequest);
		 }
        public int GetCount(string predicate, string usemode, ContextRequest contextRequest){
			  string freetext = null;
            Filter filter = new Filter();

              if (predicate.Contains("|"))
              {
                 
                  filter.SetFilterPart("ft", GetSpecificFilter(predicate));
                 
                  filter.ProcessText(predicate.Split(char.Parse("|"))[0]);
                  freetext = predicate.Split(char.Parse("|"))[1];
              }
              else {
                  filter.ProcessText(predicate);
              }
           
			e = null;
			contextRequest.FreeText = freetext;
			contextRequest.UseMode = usemode;
            OnCounting(this, e = new BusinessRulesEventArgs<accMoneyInOutConcept>() {  Filter =filter, ContextRequest = contextRequest });
            if (e != null)
            {
                if (e.Cancel)
                {
                    context = null;
                    return e.CountResult;

                }

            

            }
			 predicate = filter.GetFilterComplete();
			StringBuilder sbQuerySystem = new StringBuilder();
		
					
                    filter.SetFilterPart("de","(IsDeleted != true OR IsDeleted == null)");
			
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    	if (contextRequest.User !=null )
                        	if (contextRequest.Company != null ){
                        		

								filter.SetFilterPart("co", @"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
						
						
							}
							
							}
							if (preventSecurityRestrictions) preventSecurityRestrictions= false;
			using (EFContext con = new EFContext())
			{
				   
                 filter.CleanAndProcess("");
				//string predicateWithFKAndComputed = SFSdotNet.Framework.Linq.Utils.ExtractSpecificProperties("", ref predicate );               
				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed();
               string predicateWithManyRelations = filter.GetFilterChildren();
			   ///QueryUtils.BreakeQuery1(predicate, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
			   predicate = filter.GetFilterComplete();
               if (!string.IsNullOrEmpty(predicate))
               {
				
					
                    return con.accMoneyInOutConcepts.Count(System.Linq.Dynamic.DynamicExpression.ParseLambda<accMoneyInOutConcept, bool>(predicate));
					
                }else
                    return con.accMoneyInOutConcepts.Count();

			}

		}
         public int GetCount()
        {
            return GetCount(p => true);
        }
        #endregion
        
         public accMoneyInOutConcept Update(accMoneyInOutConcept entity, string paths)
        {
            return Update(entity, paths.Split(char.Parse(",")));
            
        }

        public accMoneyInOutConcept Update(accMoneyInOutConcept entity, string[] paths)
        {
            // Translate
            List<Expression<Func<accMoneyInOutConcept, object>>> pathList = new List<Expression<Func<accMoneyInOutConcept, object>>>();
            for (int i = 0; i <= paths.Length -1; i++)
            {
                var param = Expression.Parameter(typeof(accMoneyInOutConcept), "p");
                var member = MemberExpression.PropertyOrField(param, paths[i]);

                Expression<Func<accMoneyInOutConcept, object>> path = p => member;
                pathList.Add(path.Expand());
            }
			ObjectContext context = null;
			 return Update(entity, true,null, out context,  pathList.ToArray());
           //return Update(entity, pathList.ToArray());
        }

        public void Update(List<accMoneyInOutConcept> entities, string paths)
        {
            foreach (var entity in entities )
            {
                Update(entity, paths);
            }
        }
		public accMoneyInOutConcept Create(accMoneyInOutConcept entity, ContextRequest contextRequest, string paths)
        {
          

            if (string.IsNullOrEmpty(paths))
                return Create(entity, contextRequest);

            return Create(entity, contextRequest, paths.Split(char.Parse(",")));
        }
        public accMoneyInOutConcept Create(accMoneyInOutConcept entity, string paths)
        {
			 if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return Create(entity, contextRequest, paths);

        }

        public  void Create(List<accMoneyInOutConcept> entities, ContextRequest requestContext, string paths)
        {
            foreach (var entity in entities)
            {
                Create(entity,requestContext, paths);
            }
        }

        public void Create(List<accMoneyInOutConcept> entities, string[] paths)
        {
            foreach (var entity in entities)
            {
                Create(entity, null, paths);
            }
        }
        
        public accMoneyInOutConcept  Create(accMoneyInOutConcept entity, ContextRequest contextRequest, string[] paths)
        {
            List<Expression<Func<accMoneyInOutConcept, object>>> pathList = new List<Expression<Func<accMoneyInOutConcept, object>>>();
            for (int i = 0; i < paths.Length - 1; i++)
            {
                var param = Expression.Parameter(typeof(accMoneyInOutConcept), "p");
                var member = MemberExpression.PropertyOrField(param, paths[i]);

                Expression<Func<accMoneyInOutConcept, object>> path = p => member;
                pathList.Add(path.Expand());
            }
            return Create(entity, contextRequest, pathList.ToArray());
        }
        public void Delete(List<accMoneyInOutConcept.CompositeKey> entityKeys)
        {

            List<accMoneyInOutConcept> items = new List<accMoneyInOutConcept>();
            foreach (var itemKey in entityKeys)
            {
                items.Add(GetByKey(itemKey.GuidMoneyInOutConcept));
            }

            Delete(items);

        }
		
		
	}
		public partial class accCatalogsBR{
	 	
           
		 #region Partial methods

           partial void OnUpdating(object sender, BusinessRulesEventArgs<accCatalog> e);

            partial void OnUpdated(object sender, BusinessRulesEventArgs<accCatalog> e);

            partial void OnCreating(object sender, BusinessRulesEventArgs<accCatalog> e);
            partial void OnCreated(object sender, BusinessRulesEventArgs<accCatalog> e);

            partial void OnDeleting(object sender, BusinessRulesEventArgs<accCatalog> e);
            partial void OnDeleted(object sender, BusinessRulesEventArgs<accCatalog> e);

            partial void OnGetting(object sender, BusinessRulesEventArgs<accCatalog> e);
            partial void OnTaken(object sender, BusinessRulesEventArgs<accCatalog> e);
            partial void OnCounting(object sender, BusinessRulesEventArgs<accCatalog> e);
 
 
            #endregion
			
		private static accCatalogsBR singlenton =null;
				public static accCatalogsBR NewInstance(){
					return  new accCatalogsBR();
					
				}
		public static accCatalogsBR Instance{
			get{
				if (singlenton == null)
					singlenton = new accCatalogsBR();
				return singlenton;
			}
		}
		private bool preventSecurityRestrictions = false;
		 public bool PreventAuditTrail { get; set;  }
		#region Fields
        EFPocoContext context = null;
        #endregion
        #region Constructor
        public accCatalogsBR()
        {
            context = new EFPocoContext();
        }
		 public accCatalogsBR(bool preventSecurity)
            {
                this.preventSecurityRestrictions = preventSecurity;
				context = new EFPocoContext();
            }
        #endregion
		
		#region Get

 		public IQueryable<accCatalog> Get()
        {
            //using (EFContext con = new EFContext())
            //{
				EFContext con = new EFContext();
                var query = con.accCatalogs.AsQueryable();
                con.ContextOptions.ProxyCreationEnabled = false;

                //query = ContextQueryBuilder<Nutrient>.ApplyContextQuery(query, contextRequest);

                return query;




            //}

        }
		
		public List<accCatalog> GetAll()
        {
            return this.GetBy(p => true);
        }
        public List<accCatalog> GetAll(string includes)
        {
            return this.GetBy(p => true, includes);
        }
        public accCatalog GetByKey(Guid guidCatalog)
        {
            return GetByKey(guidCatalog, true);
        }
        public accCatalog GetByKey(Guid guidCatalog, bool loadIncludes)
        {
            accCatalog item = null;
			var query = PredicateBuilder.True<accCatalog>();
                    
			string strWhere = @"GuidCatalog = Guid(""" + guidCatalog.ToString()+@""")";
            Expression<Func<accCatalog, bool>> predicate = null;
            if (!string.IsNullOrEmpty(strWhere))
                predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<accCatalog, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
			 ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();
            contextRequest.CustomQuery.FilterExpressionString = strWhere;

			//item = GetBy(predicate, loadIncludes, contextRequest).FirstOrDefault();
			item = GetBy(strWhere,loadIncludes,contextRequest).FirstOrDefault();
            return item;
        }
         public List<accCatalog> GetBy(string strWhere, bool loadRelations, ContextRequest contextRequest)
        {
            if (!loadRelations)
                return GetBy(strWhere, contextRequest);
            else
                return GetBy(strWhere, contextRequest, "");

        }
		  public List<accCatalog> GetBy(string strWhere, bool loadRelations)
        {
              if (!loadRelations)
                return GetBy(strWhere, new ContextRequest());
            else
                return GetBy(strWhere, new ContextRequest(), "");

        }
         public accCatalog GetByKey(Guid guidCatalog, params Expression<Func<accCatalog, object>>[] includes)
        {
            accCatalog item = null;
			string strWhere = @"GuidCatalog = Guid(""" + guidCatalog.ToString()+@""")";
          Expression<Func<accCatalog, bool>> predicate = null;
            if (!string.IsNullOrEmpty(strWhere))
                predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<accCatalog, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
        item = GetBy(predicate, includes).FirstOrDefault();
         ////   item = GetBy(strWhere,includes).FirstOrDefault();
			return item;

        }
        public accCatalog GetByKey(Guid guidCatalog, string includes)
        {
            accCatalog item = null;
			string strWhere = @"GuidCatalog = Guid(""" + guidCatalog.ToString()+@""")";
            
			
            item = GetBy(strWhere, includes).FirstOrDefault();
            return item;

        }
		 public accCatalog GetByKey(Guid guidCatalog, string usemode, string includes)
		{
			return GetByKey(guidCatalog, usemode, null, includes);

		 }
		 public accCatalog GetByKey(Guid guidCatalog, string usemode, ContextRequest context,  string includes)
        {
            accCatalog item = null;
			string strWhere = @"GuidCatalog = Guid(""" + guidCatalog.ToString()+@""")";
			if (context == null)
				context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
			context.CustomQuery.IsByKey = true;
            context.CustomQuery.FilterExpressionString = strWhere;
            context.UseMode = usemode;
            item = GetBy(strWhere,context , includes).FirstOrDefault();
            return item;

        }

        #region Dynamic Predicate
        public List<accCatalog> GetBy(Expression<Func<accCatalog, bool>> predicate, int? pageSize, int? page)
        {
            return this.GetBy(predicate, pageSize, page, null, null);
        }
        public List<accCatalog> GetBy(Expression<Func<accCatalog, bool>> predicate, ContextRequest contextRequest)
        {

            return GetBy(predicate, contextRequest,"");
        }
        
        public List<accCatalog> GetBy(Expression<Func<accCatalog, bool>> predicate, ContextRequest contextRequest, params Expression<Func<accCatalog, object>>[] includes)
        {
            StringBuilder sb = new StringBuilder();
           if (includes != null)
            {
                foreach (var path in includes)
                {

						if (sb.Length > 0) sb.Append(",");
						sb.Append(SFSdotNet.Framework.Linq.Utils.IncludeToString<accCatalog>(path));

               }
            }
            return GetBy(predicate, contextRequest, sb.ToString());
        }
        
        
        public List<accCatalog> GetBy(Expression<Func<accCatalog, bool>> predicate, string includes)
        {
			ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";

            return GetBy(predicate, context, includes);
        }

        public List<accCatalog> GetBy(Expression<Func<accCatalog, bool>> predicate, params Expression<Func<accCatalog, object>>[] includes)
        {
			if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }
			ContextRequest context = new ContextRequest();
			            context.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            context.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";
            return GetBy(predicate, context, includes);
        }

      
		public bool DisableCache { get; set; }
		 public List<accCatalog> GetBy(Expression<Func<accCatalog, bool>> predicate, ContextRequest contextRequest, string includes)
        {
            using (EFPocoContext con = new EFPocoContext())
            {
				if (DisableCache) 
                	con.CachingPolicy = EFCachingProvider.Caching.CachingPolicy.NoCaching;

				List<accCatalog> result = null;
                 e = null;
	
				OnGetting(con, e = new BusinessRulesEventArgs<accCatalog>() {  FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null) });

               // OnGetting(con,e = new BusinessRulesEventArgs<accCatalog>() { FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = contextRequest.CustomQuery.FilterExpressionString});
				   if (e != null) {
				    predicate = e.FilterExpression;
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				con.EnableChangeTrackingUsingProxies = false;
				con.WrappedContext.accCatalogs.MergeOption = MergeOption.NoTracking;
                con.WrappedContext.ContextOptions.ProxyCreationEnabled = false;
                if (predicate == null) predicate = PredicateBuilder.True<accCatalog>();
 				string fkIncludes = "accReusableCatalogValue,accParentCatalog";
                if(contextRequest!=null){
					if (contextRequest.CustomQuery != null)
					{
						if (contextRequest.CustomQuery.IncludeForeignKeyPaths != null) {
							if (contextRequest.CustomQuery.IncludeForeignKeyPaths.Value == false)
								fkIncludes = "";
						}
					}
				}
				if (!string.IsNullOrEmpty(includes))
					includes = includes + "," + fkIncludes;
				else
					includes = fkIncludes;
                
                var es = con.accCatalogs;

                IQueryable<accCatalog> query = es.AsQueryable();

                                if (!string.IsNullOrEmpty(includes))
                {
                    foreach (string include in includes.Split(char.Parse(",")))
                    {
						if (!string.IsNullOrEmpty(include))
                            query = query.Include(include);
                    }
                }
                    predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
					 	if (!preventSecurityRestrictions)
						{
							if (contextRequest != null )
		                    	if (contextRequest.User !=null )
		                        	if (contextRequest.Company != null)
		                        		predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				query =query.Where(predicate);
                query = ContextQueryBuilder<accCatalog>.ApplyContextQuery(query, contextRequest);

                result = query.ToList<accCatalog>();
				  
                if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e =  new BusinessRulesEventArgs<accCatalog>() { Items= result, IncludingComputedLinq = false, ContextRequest = contextRequest,  FilterExpression = predicate } :  e);
  
			

                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
            }
        }
		public void UpdateAgile(accCatalog item, params string[] fields)
         {
             List<accCatalog> list = new List<accCatalog>();
             list.Add(item);
             this.UpdateBulk(list, fields);
         }
		public void UpdateBulk(List<accCatalog>  items, params string[] fields)
         {
             SFSdotNet.Framework.My.ContextRequest req = new SFSdotNet.Framework.My.ContextRequest();
             req.CustomQuery = new SFSdotNet.Framework.My.CustomQuery();
             foreach (var field in fields)
             {
                 req.CustomQuery.SpecificProperties.Add(field);
             }
             UpdateBulk(items, req);

         }
        public void UpdateBulk(List<accCatalog> items, ContextRequest req)
        {
            using (EFContext con = new EFContext())
            {



                foreach (var item in items)
                {
                    var setT = con.CreateObjectSet<accCatalog>("accCatalogs");


                    var itemForAttach = new accCatalog();
			itemForAttach.GuidCatalog = item.GuidCatalog;
					
                    itemForAttach = SFSdotNet.Framework.Entities.ConvertEntity.SetProperties<accCatalog>(item, itemForAttach, null, req.CustomQuery.SpecificProperties.ToArray());
                    setT.Attach(itemForAttach);


                    foreach (var property in req.CustomQuery.SpecificProperties)
                    {
						
                        if (property != "GuidCatalog")
                            con.ObjectStateManager.GetObjectStateEntry(itemForAttach).SetModifiedProperty(property);

                    }

                }
                con.SaveChanges();


            }
        }
		/*public int Update(List<accCatalog> items, ContextRequest contextRequest)
            {
                int result = 0;
                using (EFContext con = new EFContext())
                {
                   
                

                    foreach (var item in items)
                    {
                        //secMessageToUser messageToUser = new secMessageToUser();
                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            item.GetType().GetProperty(prop).SetValue(item, item.GetType().GetProperty(prop).GetValue(item));
                        }
                        //messageToUser.GuidMessageToUser = (Guid)item.GetType().GetProperty("GuidMessageToUser").GetValue(item);

                        var setObject = con.CreateObjectSet<accCatalog>("accCatalogs");
                        //messageToUser.Readed = DateTime.UtcNow;
                        setObject.Attach(item);
                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            con.ObjectStateManager.GetObjectStateEntry(item).SetModifiedProperty(prop);
                        }
                       
                    }
                    result = con.SaveChanges();

                    


                }
                return result;
            }
           */
        public List<accCatalog> GetBy(string predicateString, ContextRequest contextRequest, string includes)
        {
            using (EFContext con = new EFContext())
            {
				if (DisableCache) 
                	con.CachingPolicy = EFCachingProvider.Caching.CachingPolicy.NoCaching;

				Filter filter = new Filter();
                if (predicateString.Contains("|"))
                {
                    string ft = GetSpecificFilter(predicateString);
                    if (!string.IsNullOrEmpty(ft))
                        filter.SetFilterPart("ft", ft);
                   
                    contextRequest.FreeText = predicateString.Split(char.Parse("|"))[1];
                    var q1 = predicateString.Split(char.Parse("|"))[0];
                    if (!string.IsNullOrEmpty(q1))
                    {
                        filter.ProcessText(q1);
                    }
                }
                else {
                    filter.ProcessText(predicateString);
                }

				List<accCatalog> result = null;
                 e = null;
					OnGetting(con, e = new BusinessRulesEventArgs<accCatalog>() { Filter = filter, ContextRequest = contextRequest /*, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null)*/ });

                  //OnGetting(con,e = new BusinessRulesEventArgs<accCatalog>() {  ContextRequest = contextRequest, FilterExpressionString = predicateString });
			   	if (e != null) {
				    //predicateString = e.GetQueryString();
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				//	 else {
                //      predicateString = predicateString.Replace("*extraFreeText*", "").Replace("()","");
                //  }
				//con.EnableChangeTrackingUsingProxies = false;
				con.accCatalogs.MergeOption = MergeOption.NoTracking;
                con.ContextOptions.ProxyCreationEnabled = false;
                //if (predicate == null) predicate = PredicateBuilder.True<accCatalog>();
 				string fkIncludes = "accReusableCatalogValue,accParentCatalog";
                if(contextRequest!=null){
					if (contextRequest.CustomQuery != null)
					{
						if (contextRequest.CustomQuery.IncludeForeignKeyPaths != null) {
							if (contextRequest.CustomQuery.IncludeForeignKeyPaths.Value == false)
								fkIncludes = "";
						}
					}
				}else{
                    contextRequest = new ContextRequest();
                    contextRequest.CustomQuery = new CustomQuery();

                }
				if (!string.IsNullOrEmpty(includes))
					includes = includes + "," + fkIncludes;
				else
					includes = fkIncludes;
                
                var es = con.accCatalogs;
				IQueryable<accCatalog> query = es.AsQueryable();
		
				// include relations FK
				if(string.IsNullOrEmpty(includes) ){
					includes ="";
				}
				bool includeaccReusableCatalogValue = includes.Split(char.Parse(",")).Contains("accReusableCatalogValue");

				bool includeaccParentCatalog = includes.Split(char.Parse(",")).Contains("accParentCatalog");

				StringBuilder sbQuerySystem = new StringBuilder();
                    //predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				

				//if (!string.IsNullOrEmpty(predicateString))
                //      sbQuerySystem.Append(" And ");
                //sbQuerySystem.Append(" (IsDeleted != true Or IsDeleted = null) ");
				 filter.SetFilterPart("de", "(IsDeleted != true OR IsDeleted = null)");


					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
	                    	if (contextRequest.User !=null )
	                        	if (contextRequest.Company != null ){
	                        		//if (sbQuerySystem.Length > 0)
	                        		//	    			sbQuerySystem.Append( " And ");	
									//sbQuerySystem.Append(@" (GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
									filter.SetFilterPart("co",@"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @"""))");
								}
						}	
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				//string predicateString = predicate.ToDynamicLinq<accCatalog>();
				//predicateString += sbQuerySystem.ToString();
				filter.CleanAndProcess("ComputedName");

				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed(); //SFSdotNet.Framework.Linq.Utils.ExtractSpecificProperties("ComputedName", ref predicateString );               
                string predicateWithManyRelations = filter.GetFilterChildren(); //SFSdotNet.Framework.Linq.Utils.CleanPartExpression(predicateString);

                //QueryUtils.BreakeQuery1(predicateString, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
                var _queryable = query.AsQueryable();
                if (!string.IsNullOrEmpty(predicateWithManyRelations))
                    _queryable = _queryable.Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams);
				if (contextRequest.CustomQuery.SpecificProperties.Count > 0)
                {

                    StringBuilder sbProps = new StringBuilder();
                    contextRequest.CustomQuery.SpecificProperties.Add("GuidCatalog");
                    
					foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                    {
						if(sbProps.Length > 0)
							sbProps.Append(",");
                        sbProps.Append(prop);
                    }
					    IQueryable  queryableSelective = null ;
					  
					  if (!string.IsNullOrEmpty(predicateWithManyRelations))
							queryableSelective = con.accCatalogs.AsQueryable().Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams).Select(string.Format("new({0})", sbProps.ToString()));
					else
						queryableSelective = con.accCatalogs.AsQueryable().Select(string.Format("new({0})", sbProps.ToString()));


                    //if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
					//	queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

                    QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
                    
					if (!string.IsNullOrEmpty(queryOps.OrderByAndSort))
                        queryableSelective = queryableSelective.OrderBy(queryOps.OrderByAndSort);
                    if (queryOps.Skip != null)
                    {
                        queryableSelective = queryableSelective.Skip(queryOps.Skip.Value);
                    }
                    if (queryOps.PageSize != null)
                    {
                        queryableSelective = queryableSelective.Take(queryOps.PageSize.Value);
                    }
                    //var results = queryableSelective.ToList();
                    result = new List<accCatalog>();
                    accCatalog itemDef = null;
                    foreach (var item in queryableSelective)
                    {
                        itemDef = new accCatalog();

                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            if (!prop.Contains("."))
                            {
                                itemDef.GetType().GetProperty(prop).SetValue(itemDef, item.GetType().GetProperty(prop).GetValue(item));
                            }
                            else {
                                throw new Exception("La seleccion de relaciones aún no esta soportada");
                            }

                        }

                        result.Add(itemDef);
                    }

                }
                else
                {
				var  queryable = _queryable.Select(                    
				p => 
                        new
                    {
					GuidCatalog = p.GuidCatalog
,Number = p.Number
,Name = p.Name
,CreatedDate = p.CreatedDate
,UpdatedDate = p.UpdatedDate
,CreatedBy = p.CreatedBy
,UpdatedBy = p.UpdatedBy
,IsDeleted = p.IsDeleted
,GuidCompany = p.GuidCompany
,CatIndex = p.CatIndex

,accReusableCatalogValue = includeaccReusableCatalogValue ? p.accReusableCatalogValue:null
,accParentCatalog = includeaccParentCatalog ? p.accParentCatalog:null

,ComputedName = p.Number + " " + p.Name

	
                    }
                    
                    );
					
				
                 if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
                    queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

				QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
            	if (!string.IsNullOrEmpty(queryOps.OrderByAndSort))
					queryable = queryable.OrderBy(queryOps.OrderByAndSort);
               	if (queryOps.Skip != null)
                {
                    queryable = queryable.Skip(queryOps.Skip.Value);
                }
                if (queryOps.PageSize != null)
                {
                    queryable = queryable.Take (queryOps.PageSize.Value);
                }
                result = queryable.AsEnumerable().
                    Select(
                    p =>  new accCatalog()
                    {
					GuidCatalog = p.GuidCatalog
,Number = p.Number
,Name = p.Name
,CreatedDate = p.CreatedDate
,UpdatedDate = p.UpdatedDate
,CreatedBy = p.CreatedBy
,UpdatedBy = p.UpdatedBy
,IsDeleted = p.IsDeleted
,GuidCompany = p.GuidCompany
,CatIndex = p.CatIndex
,accReusableCatalogValue = p.accReusableCatalogValue
,accParentCatalog = p.accParentCatalog
,ComputedName = p.ComputedName

                    }
                     ).ToList();
				}


			 if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e = new BusinessRulesEventArgs<accCatalog>() { Items= result, IncludingComputedLinq = true, ContextRequest = contextRequest, FilterExpressionString  = predicateString } :  e);
  
			
  
                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
            }
        }
		public List<accCatalog> GetBy(Expression<Func<accCatalog, bool>> predicate, bool loadRelations, ContextRequest contextRequest)
        {
			if(!loadRelations)
				return GetBy(predicate, contextRequest);
			else
				return GetBy(predicate, contextRequest, "accCatalogEntries,accChildCatalogs");

        }

        public List<accCatalog> GetBy(Expression<Func<accCatalog, bool>> predicate, int? pageSize, int? page, string orderBy, SFSdotNet.Framework.Data.SortDirection? sortDirection)
        {
            return GetBy(predicate, new ContextRequest() { CustomQuery = new CustomQuery() { Page = page, PageSize = pageSize, OrderBy = orderBy, SortDirection = sortDirection } });
        }
        public List<accCatalog> GetBy(Expression<Func<accCatalog, bool>> predicate)
        {

			if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }
			ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();

			contextRequest.CurrentContext = SFSdotNet.Framework.My.Context.CurrentContext;
			            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

            contextRequest.CustomQuery.FilterExpressionString = null;
            return this.GetBy(predicate, contextRequest, "");
        }
        #endregion
        #region Dynamic String
		private string GetSpecificFilter(string filter) {
            string result = "";
		    //string linqFilter = String.Empty;
            string freeTextFilter = String.Empty;
            if (filter.Contains("|"))
            {
               // linqFilter = filter.Split(char.Parse("|"))[0];
                freeTextFilter = filter.Split(char.Parse("|"))[1];
            }
            //else {
            //    freeTextFilter = filter;
            //}
            //else {
            //    linqFilter = filter;
            //}
			// linqFilter = SFSdotNet.Framework.Linq.Utils.ReplaceCustomDateFilters(linqFilter);
            //string specificFilter = linqFilter;
            if (!string.IsNullOrEmpty(freeTextFilter))
            {
                System.Text.StringBuilder sbCont = new System.Text.StringBuilder();
                /*if (specificFilter.Length > 0)
                {
                    sbCont.Append(" AND ");
                    sbCont.Append(" ({0})");
                }
                else
                {
                    sbCont.Append("{0}");
                }*/
                //var words = freeTextFilter.Split(char.Parse(" "));
				var word = freeTextFilter;
                System.Text.StringBuilder sbSpec = new System.Text.StringBuilder();
                 int nWords = 1;
				/*foreach (var word in words)
                {
					if (word.Length > 0){
                    if (sbSpec.Length > 0) sbSpec.Append(" AND ");
					if (words.Length > 1) sbSpec.Append("("); */
					
	
					
											
					sbSpec.Append(string.Format(@"Number.Contains(""{0}"")", word));

					
											sbSpec.Append(" OR ");
										
					sbSpec.Append(string.Format(@"Name.Contains(""{0}"")", word));

					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
											sbSpec.Append(" OR ");
										
					sbSpec.Append(string.Format(@"ComputedName.Contains(""{0}"")", word));

					
								sbSpec.Append(" OR ");
					
					//if (sbSpec.Length > 2)
					//	sbSpec.Append(" OR "); // test
					sbSpec.Append(string.Format(@"accReusableCatalogValue.Title.Contains(""{0}"")", word)+" OR "+string.Format(@"accParentCatalog.ComputedName.Contains(""{0}"")", word));
								 //sbSpec.Append("*extraFreeText*");

                    /*if (words.Length > 1) sbSpec.Append(")");
					
					nWords++;

					}

                }*/
                //specificFilter = string.Format("{0}{1}", specificFilter, string.Format(sbCont.ToString(), sbSpec.ToString()));
                                 result = sbSpec.ToString();  
            }
			//result = specificFilter;
			
			return result;

		}
	
			public List<accCatalog> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  params object[] extraParams)
        {
			return GetBy(filter, pageSize, page, orderBy, orderDir,  null, extraParams);
		}
           public List<accCatalog> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir, string usemode, params object[] extraParams)
            { 
                return GetBy(filter, pageSize, page, orderBy, orderDir, usemode, null, extraParams);
            }


		public List<accCatalog> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  string usemode, ContextRequest context, params object[] extraParams)

        {

            // string freetext = null;
            //if (filter.Contains("|"))
            //{
            //    int parts = filter.Split(char.Parse("|")).Count();
            //    if (parts > 1)
            //    {

            //        freetext = filter.Split(char.Parse("|"))[1];
            //    }
            //}
		
            //string specificFilter = "";
            //if (!string.IsNullOrEmpty(filter))
            //  specificFilter=  GetSpecificFilter(filter);
            if (string.IsNullOrEmpty(orderBy))
            {
			                orderBy = "UpdatedDate";
            }
			//orderDir = "desc";
			SFSdotNet.Framework.Data.SortDirection direction = SFSdotNet.Framework.Data.SortDirection.Ascending;
            if (!string.IsNullOrEmpty(orderDir))
            {
                if (orderDir == "desc")
                    direction = SFSdotNet.Framework.Data.SortDirection.Descending;
            }
            if (context == null)
                context = new ContextRequest();
			else
                context.CustomQuery = new CustomQuery();
             //context.FreeText = freetext;
             context.UseMode = usemode;
             context.CustomQuery =new SFSdotNet.Framework.My.CustomQuery()
 
                {
                    ExtraParams = extraParams,

                    OrderBy = orderBy,
                    SortDirection = direction,
                    Page = page,
                    PageSize = pageSize
               };
            

            if (!preventSecurityRestrictions) {
			 if (context.CurrentContext == null)
                {
					if (SFSdotNet.Framework.My.Context.CurrentContext != null &&  SFSdotNet.Framework.My.Context.CurrentContext.Company != null && SFSdotNet.Framework.My.Context.CurrentContext.User != null)
					{
						context.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
						context.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

					}
					else {
						throw new Exception("The security rule require a specific user and company");
					}
				}
            }
            return GetBy(filter, context);
  
        }


        public List<accCatalog> GetBy(string strWhere, ContextRequest contextRequest)
        {
        	#region old code
				
				 //Expression<Func<tvsReservationTransport, bool>> predicate = null;
				string strWhereClean = strWhere.Replace("*extraFreeText*", "").Replace("()", "");
                //if (!string.IsNullOrEmpty(strWhereClean)){

                //    object[] extraParams = null;
                //    //if (contextRequest != null )
                //    //    if (contextRequest.CustomQuery != null )
                //    //        extraParams = contextRequest.CustomQuery.ExtraParams;
                //    //predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<tvsReservationTransport, bool>(strWhereClean, extraParams != null? extraParams.Cast<Guid>(): null);				
                //}
				 if (contextRequest == null)
                {
                    contextRequest = new ContextRequest();
                    if (contextRequest.CustomQuery == null)
                        contextRequest.CustomQuery = new CustomQuery();
                }
                  if (!preventSecurityRestrictions) {
					if (contextRequest.User == null || contextRequest.Company == null)
                      {
                     if (SFSdotNet.Framework.My.Context.CurrentContext.Company != null && SFSdotNet.Framework.My.Context.CurrentContext.User != null)
                     {
                         contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                         contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

                     }
                     else {
                         throw new Exception("The security rule require a specific User and Company ");
                     }
					 }
                 }
            contextRequest.CustomQuery.FilterExpressionString = strWhere;
				//return GetBy(predicate, contextRequest);  

			#endregion				
				
                    return GetBy(strWhere, contextRequest, "");  


        }
       public List<accCatalog> GetBy(string strWhere)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
			
            return GetBy(strWhere, context, null);
        }

        public List<accCatalog> GetBy(string strWhere, string includes)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
            return GetBy(strWhere, context, includes);
        }

        #endregion
        #endregion
		
		  #region SaveOrUpdate
        private accCatalog Save(accCatalog entity, bool saveChanges, EFPocoContext con)
        {
				ObjectContext context = null;
            return Update(entity, saveChanges,null, out context);

			
        }
		 public  accCatalog Create( accCatalog entity, params Expression<Func< accCatalog, object>>[] paths)
         {
             return Create(entity, null, paths);

         }
 		 public accCatalog Create(accCatalog entity)
        {
				ObjectContext context = null;
				    if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: Create");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

				return this.Create(entity, true, contextRequest, out context);


        }
        public accCatalog Create(accCatalog entity, ContextRequest contextRequest)
         {
             ObjectContext context = null;
             return this.Create(entity, true, contextRequest,out context);

         }
         public accCatalog Create(accCatalog entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext context)
        {
                    return Create(entity, saveChanges , contextRequest , out context, null);
        }
         public accCatalog Create(accCatalog entity, ContextRequest contextRequest, params Expression<Func<accCatalog,object>>[] paths)
        {
            ObjectContext context = null;
            if(paths != null)
				return Create(entity, true,contextRequest, out context, paths);
			else 
				return Create(entity, true,contextRequest, out context);
        }
        public accCatalog Create(accCatalog entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext context, params Expression<Func<accCatalog,object>>[] pocopaths)
        {
			using (EFPocoContext con = new EFPocoContext())
			{
				accCatalog itemResult = null;
#region Autos


			entity.CreatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.CreatedBy = contextRequest.User.GuidUser;
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.UpdatedBy = contextRequest.User.GuidUser;
	
			if (contextRequest != null)
				if(contextRequest.User != null)
					if (contextRequest.Company != null)
						entity.GuidCompany = contextRequest.Company.GuidCompany;
	

#endregion
                e = null;
                OnCreating(this,e = new BusinessRulesEventArgs<accCatalog>() { ContextRequest = contextRequest, Item=entity, PathExpressions = pocopaths, SaveChanges =saveChanges });
				   if (e != null) {
						if (e.Cancel)
						{
							context = null;
							return e.Item;

						}
					}

                    if (entity.GuidCatalog == Guid.Empty)
                   {
                       entity.GuidCatalog = Guid.NewGuid();

                   }



				accCatalogAdapter adapter = con.GetAdapterObject<accCatalogAdapter>(entity);;
				List<Expression<Func<accCatalogAdapter, object>>> paths = new List<Expression<Func<accCatalogAdapter,object>>>();
                
			    if (pocopaths != null && pocopaths.Length > 0)
                {
					// Translate
                    foreach (var pocopath in pocopaths)
                    {
                        var param = Expression.Parameter(typeof(accCatalogAdapter), "p");
                        var member = MemberExpression.PropertyOrField(param, ((System.Linq.Expressions.MemberExpression)(((System.Linq.Expressions.LambdaExpression)(pocopath)).Body)).Member.Name);
                        Expression<Func<accCatalogAdapter, object>> path  = null;
                        switch(member.Member.Name){
                        
							case "accCatalogEntries":
								path = p => p.accCatalogEntries.First().WithoutUpdate();

								//path = p => member;
							break;
                        
							case "accChildCatalogs":
								path = p => p.accChildCatalogs.First().WithoutUpdate();

								//path = p => member;
								//path = p => p.accChildCatalogs.First().accReusableCatalogValue.WithoutUpdate();											
							break;
							
							default:
								path = p => member;
							break;
                        }

                        
                       paths.Add(path.Expand());
                    }
                }
                object aux = null;
					paths.Add(p => p.accReusableCatalogValue.WithoutUpdate());

					paths.Add(p => p.accParentCatalog.WithoutUpdate());

					//paths = pathBuilder.ToArray();

#region Childs accCatalogEntries 
				if (adapter.accCatalogEntries != null)
                {
                    foreach (var item in adapter.accCatalogEntries)
                    {
						
							if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accCatalogEntries", item);
							if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)){ 
								//paths.Add(p => p.accCatalogEntries.First().WithoutUpdate());
								
							if (item.accCatalog == null)
								item.accCatalog = adapter;

								item.EntityKey = null;
							}

                    }
					if (adapter.accCatalogEntries.Count > 0){
						paths.Add(p => p.accCatalogEntries.First().WithoutUpdate());
											
					}
                }
#endregion 

				if (adapter.accReusableCatalogValue != null ){
					if(adapter.accReusableCatalogValue.EntityKey == null) adapter.accReusableCatalogValue.EntityKey = con.WrappedContext.CreateEntityKey("accReusableCatalogValues", adapter.accReusableCatalogValue);
				}
#region Childs accChildCatalogs 
				if (adapter.accChildCatalogs != null)
                {
                    foreach (var item in adapter.accChildCatalogs)
                    {
						
							if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accCatalogs", item);
							if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)){ 
								//paths.Add(p => p.accChildCatalogs.First().WithoutUpdate());
								
						if (item.accReusableCatalogValue != null){
							item.accReusableCatalogValue.EntityKey = con.WrappedContext.CreateEntityKey("accReusableCatalogValues", item.accReusableCatalogValue);
                            
             
						}								
							if (item.accParentCatalog == null)
								item.accParentCatalog = adapter;

								item.EntityKey = null;
							}

                    }
					if (adapter.accChildCatalogs.Count > 0){
						paths.Add(p => p.accChildCatalogs.First().WithoutUpdate());
						paths.Add(p => p.accChildCatalogs.First().accReusableCatalogValue.WithoutUpdate());
					
					}
                }
#endregion 

				if (adapter.accParentCatalog != null ){
					if(adapter.accParentCatalog.EntityKey == null) adapter.accParentCatalog.EntityKey = con.WrappedContext.CreateEntityKey("accCatalogs", adapter.accParentCatalog);
				}



                //con.WrappedContext.AttachObjectGraph<accCatalogAdapter>(adapter, p=>p.accCatalogEntries, p=>p.accReusableCatalogValue, p=>p.accChildCatalogs, p=>p.accParentCatalog);
                con.WrappedContext.AttachObjectGraph<accCatalogAdapter>(adapter, paths.ToArray());
              	if (saveChanges){
                    con.WrappedContext.SaveChanges(SaveOptions.AcceptAllChangesAfterSave);
					 
				}
                else
                    con.WrappedContext.SaveChanges(SaveOptions.None);
                if (!saveChanges)
                    context = con.WrappedContext;
                else
                    context = null;
				itemResult = adapter.PocoEntity;
                if (e != null)
                {
                    e.Item = itemResult;
                }
                OnCreated(this, e == null ? e = new BusinessRulesEventArgs<accCatalog>() { ContextRequest = contextRequest, Item = itemResult, PathExpressions = pocopaths, SaveChanges = saveChanges } : e);



                if (e != null)
                {
                    itemResult = e.Item;
                }
                              return itemResult;
            }
        }
        BusinessRulesEventArgs<accCatalog> e = null;
        public void Create(List<accCatalog> entities)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            Create(entities, contextRequest, null);
        }
        public void Create(List<accCatalog> entities, ContextRequest contextRequest)
        
        {
			ObjectContext context = null;
            	foreach (accCatalog entity in entities)
				{
					this.Create(entity, true, contextRequest, out context);
				}
        }
         public accCatalog Update(accCatalog entity)
        {
            if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return Update(entity, contextRequest);
        }
        public accCatalog Update(accCatalog entity, ContextRequest requestContext)
        {
			  ObjectContext context = null;
            return Update(entity, true,requestContext, out context);
         }
		public  accCatalog Update(accCatalog entity, params Expression<Func<accCatalog, object>>[] pocopaths)
        {
			  ObjectContext context = null;
              return Update(entity, true, null, out context, pocopaths);
         }
        public accCatalog Update(accCatalog entity, ContextRequest requestContext, bool saveChanges, out ObjectContext outcontext)
        {
			return Update(entity, saveChanges,requestContext, out outcontext, null);
		}
         public accCatalog Update(accCatalog entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext outcontext, params Expression<Func<accCatalog,object>>[] pocopaths)
        {
		 if ((System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null) && contextRequest == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Update");
            }
            if (contextRequest == null)
            {
                contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            }

			using (EFPocoContext con = new EFPocoContext())
			{
				accCatalog  itemResult = null;

	
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
			if(contextRequest.User != null)
				entity.UpdatedBy = contextRequest.User.GuidUser;

	    var oldentity = GetBy(p => p.GuidCatalog == entity.GuidCatalog, contextRequest).FirstOrDefault();
		if (oldentity != null) {
		
            entity.CreatedDate = oldentity.CreatedDate;
            entity.CreatedBy = oldentity.CreatedBy;
	
            entity.GuidCompany = oldentity.GuidCompany;
	
			

		}

				e = null;
                OnUpdating(this,e = new BusinessRulesEventArgs<accCatalog>() { ContextRequest = contextRequest, Item=entity, PathExpressions = pocopaths, SaveChanges =saveChanges });
				   if (e != null) {
						if (e.Cancel)
						{
							outcontext = null;
							return e.Item;

						}
					}

                accCatalogAdapter adapter = con.GetAdapterObject<accCatalogAdapter>(entity);
                adapter.EntityKey = con.WrappedContext.CreateEntityKey("accCatalogs", adapter);
				    var es = con.accCatalogs;
				List<Expression<Func<accCatalogAdapter, object>>> paths = new List<Expression<Func<accCatalogAdapter,object>>>();
                /* if (pocopaths != null)
                    if (pocopaths.Length == 0)
                        pocopaths = null;*/

			    if (pocopaths != null && pocopaths.Length > 0)
                {
					// Translate
                    foreach (var pocopath in pocopaths)
                    {
                        var param = Expression.Parameter(typeof(accCatalogAdapter), "p");
                        var member = MemberExpression.PropertyOrField(param, ((System.Linq.Expressions.MemberExpression)(((System.Linq.Expressions.LambdaExpression)(pocopath)).Body)).Member.Name);
                        Expression<Func<accCatalogAdapter, object>> path  = null;
                        switch(member.Member.Name){
                        
							case "accCatalogEntries":
								//path = p => member;
								path = p => p.accCatalogEntries.First().WithoutUpdate();
							break;
                        
							case "accChildCatalogs":
								//path = p => member;
								path = p => p.accChildCatalogs.First().WithoutUpdate();
				//				path = p => p.accChildCatalogs.First().accReusableCatalogValue.WithoutUpdate();											
							break;
							
							default:
								path = p => member;
							break;
                        }

                        paths.Add(path.Expand());
 					}
                }
                else {
                  paths = new List<Expression<Func<accCatalogAdapter, object>>>();

					//List<Expression<Func<accCatalogAdapter,object>>> pathBuilder = new List<Expression<Func<accCatalogAdapter,object>>>();
					paths.Add(p => p.accReusableCatalogValue.WithoutUpdate());

					paths.Add(p => p.accParentCatalog.WithoutUpdate());

		
					//paths = pathBuilder.ToArray();		
			}
			object aux = null;
				if (adapter.accCatalogEntries != null)
                {
                    foreach (var item in adapter.accCatalogEntries)
                    {


                        if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accCatalogEntries", item);
						if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)) item.EntityKey = null;
                        
                    }
					
                    if (adapter.accCatalogEntries.Count > 0)
                    {
                        paths.Add(p => p.accCatalogEntries.First().WithoutUpdate());

                    }

                }
				if (adapter.accReusableCatalogValue != null ){
					if(adapter.accReusableCatalogValue.EntityKey == null) adapter.accReusableCatalogValue.EntityKey = con.WrappedContext.CreateEntityKey("accReusableCatalogValues", adapter.accReusableCatalogValue);
				}

                
				if (adapter.accChildCatalogs != null)
                {
                    foreach (var item in adapter.accChildCatalogs)
                    {


                        if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accCatalogs", item);
						if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)) item.EntityKey = null;
                        
                    }
					
                    if (adapter.accChildCatalogs.Count > 0)
                    {
                        paths.Add(p => p.accChildCatalogs.First().WithoutUpdate());

                    }

                }
				if (adapter.accParentCatalog != null ){
					if(adapter.accParentCatalog.EntityKey == null) adapter.accParentCatalog.EntityKey = con.WrappedContext.CreateEntityKey("accCatalogs", adapter.accParentCatalog);
				}

                



                //con.AttachObjectGraph<accCatalog>(adapter, p=>p.accCatalogEntries, p=>p.accReusableCatalogValue, p=>p.accChildCatalogs, p=>p.accParentCatalog);
                con.WrappedContext.AttachObjectGraph<accCatalogAdapter>(adapter, paths.ToArray());
				if (saveChanges){
                	con.WrappedContext.SaveChanges();
					 
					}
                if(!saveChanges)
					outcontext = con.WrappedContext;
				else
					outcontext = null;
				itemResult = adapter.PocoEntity;
				OnUpdated(this, e = new BusinessRulesEventArgs<accCatalog>() { ContextRequest = contextRequest, Item=itemResult, PathExpressions = pocopaths, SaveChanges =saveChanges });

              	return itemResult;

			  }
        }
        public accCatalog Save(accCatalog entity)
        {
			return Save(entity, true, null);
        }
        public int Save(List<accCatalog> entities)
        {
			using (EFPocoContext con = new EFPocoContext())
			{
			
            int n = 0;
            foreach (accCatalog item in entities)
            {
                try
                {
                    this.Save(item, false, con);
                    n++;
                }catch (Exception ex){
                    SFSdotNet.Framework.My.EventLog.Exception(ex);
                }
            }
            con.SaveChanges();
            return n;
            }
        }
        #endregion
        #region Delete
        public void Delete(accCatalog entity)
        {
				this.Delete(entity, null);
			
        }
		 public void Delete(accCatalog entity, ContextRequest contextRequest)
        {
				ObjectContext context = null;
				this.Delete(entity, true, out context, contextRequest);
			
        }

        
        public void Delete(accCatalog entity, bool saveChanges, out  ObjectContext context, ContextRequest contextRequest, BusinessRulesEventArgs<accCatalog> e = null)
        {
			using (EFPocoContext _con = new EFPocoContext())
			{
				int result = 0;
				
               	BusinessRulesEventArgs<accCatalog> _e = null;
               List<accCatalog> _items = new List<accCatalog>();
                _items.Add(entity);
                if (e == null || e.PreventPartialPropagate == false)
                {
                    OnDeleting(this, _e = (e == null ? new BusinessRulesEventArgs<accCatalog>() { ContextRequest = contextRequest, Item = entity, Items = _items, SaveChanges = saveChanges } : e));
                }
                if (_e != null)
                {
                    if (_e.Cancel)
						{
							context = null;
							return;

						}
					}


				accCatalogAdapter adapter = _con.GetAdapterObject<accCatalogAdapter>(entity);
                adapter.EntityKey = _con.WrappedContext.CreateEntityKey("accCatalogs", adapter);
                
	            //adapter = _con.WrappedContext.AttachObjectGraph<accCatalogAdapter>(adapter);
				try{
					_con.WrappedContext.AttachTo("accCatalogs", adapter);
                }catch{
					
				}
									//IsDeleted
					bool logicDelete = true;
					if (adapter.IsDeleted != null)
					{
						if (adapter.IsDeleted.Value)
							logicDelete = false;
					}
					if (logicDelete)
					{
											entity = GetBy(p => p.GuidCatalog == entity.GuidCatalog, contextRequest).FirstOrDefault();
						entity.IsDeleted = true;
						Update(entity, contextRequest);
					}
					else {
						_con.WrappedContext.DeleteObject(adapter);
					}
								
				if (!saveChanges)
                    context = _con.WrappedContext;
                else
                    context = null;
				 SaveOptions saveOption = SaveOptions.None;
                if (saveChanges)
                    saveOption = SaveOptions.AcceptAllChangesAfterSave;

				result = _con.WrappedContext.SaveChanges(saveOption);
				if (saveChanges){
					
					}
			if (e == null || e.PreventPartialPropagate == false)
                {

                    if (_e == null)
                        _e = new BusinessRulesEventArgs<accCatalog>() { ContextRequest = contextRequest, Item = entity, Items = _items };

                    OnDeleted(this, _e);
                }

				//return null;
			}            
        }
        public void Delete(List<accCatalog> entities,  ContextRequest contextRequest = null )
        {
				ObjectContext context = null;
			 BusinessRulesEventArgs<accCatalog> _e = null;

                OnDeleting(this, _e = new BusinessRulesEventArgs<accCatalog>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities });
                if (_e != null)
                {
                    if (_e.Cancel)
                    {
                        context = null;
                        return;

                    }
                }
                bool allSucced = true;
                BusinessRulesEventArgs<accCatalog> eToChilds = new BusinessRulesEventArgs<accCatalog>();
                if (_e != null)
                {
                    eToChilds = _e;
                }
                else
                {
                    eToChilds = new BusinessRulesEventArgs<accCatalog>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                }
				foreach (accCatalog item in entities)
				{
					try
                    {
                        this.Delete(item, true, out context, contextRequest, e: eToChilds);
                    }
                    catch (Exception ex)
                    {
                        SFSdotNet.Framework.My.EventLog.Error(ex);
                        allSucced = false;
                    }
				}
				if (_e == null)
                    _e = new BusinessRulesEventArgs<accCatalog>() { ContextRequest = contextRequest, CountResult = entities.Count, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                OnDeleted(this, _e);

			
        }
        #endregion
 
        #region GetCount
		 public int GetCount(Expression<Func<accCatalog, bool>> predicate)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

			return GetCount(predicate, contextRequest);
		}
        public int GetCount(Expression<Func<accCatalog, bool>> predicate, ContextRequest contextRequest)
        {


		
			using (EFPocoContext con = new EFPocoContext())
			{


				if (predicate == null) predicate = PredicateBuilder.True<accCatalog>();
           		predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted == null);
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    		if (contextRequest.User !=null )
                        		if (contextRequest.Company != null )
                        			predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				
				return con.accCatalogs.Count(predicate);
			}

        }
		  public int GetCount(string predicate,  ContextRequest contextRequest)
         {
             return GetCount(predicate, null, contextRequest);
         }

         public int GetCount(string predicate)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return GetCount(predicate, contextRequest);
        }
		 public int GetCount(string predicate, string usemode){
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
				return GetCount( predicate,  usemode,  contextRequest);
		 }
        public int GetCount(string predicate, string usemode, ContextRequest contextRequest){
			  string freetext = null;
            Filter filter = new Filter();

              if (predicate.Contains("|"))
              {
                 
                  filter.SetFilterPart("ft", GetSpecificFilter(predicate));
                 
                  filter.ProcessText(predicate.Split(char.Parse("|"))[0]);
                  freetext = predicate.Split(char.Parse("|"))[1];
              }
              else {
                  filter.ProcessText(predicate);
              }
           
			e = null;
			contextRequest.FreeText = freetext;
			contextRequest.UseMode = usemode;
            OnCounting(this, e = new BusinessRulesEventArgs<accCatalog>() {  Filter =filter, ContextRequest = contextRequest });
            if (e != null)
            {
                if (e.Cancel)
                {
                    context = null;
                    return e.CountResult;

                }

            

            }
			 predicate = filter.GetFilterComplete();
			StringBuilder sbQuerySystem = new StringBuilder();
		
					
                    filter.SetFilterPart("de","(IsDeleted != true OR IsDeleted == null)");
			
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    	if (contextRequest.User !=null )
                        	if (contextRequest.Company != null ){
                        		

								filter.SetFilterPart("co", @"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
						
						
							}
							
							}
							if (preventSecurityRestrictions) preventSecurityRestrictions= false;
			using (EFContext con = new EFContext())
			{
				   
                 filter.CleanAndProcess("ComputedName");
				//string predicateWithFKAndComputed = SFSdotNet.Framework.Linq.Utils.ExtractSpecificProperties("ComputedName", ref predicate );               
				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed();
               string predicateWithManyRelations = filter.GetFilterChildren();
			   ///QueryUtils.BreakeQuery1(predicate, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
			   predicate = filter.GetFilterComplete();
               if (!string.IsNullOrEmpty(predicate))
               {
							bool includeaccReusableCatalogValue = predicate.Contains("accReusableCatalogValue");

							bool includeaccParentCatalog = predicate.Contains("accParentCatalog");

			 				var query = con.accCatalogs.AsQueryable();
                    var _queryable = query.AsQueryable();
                   if (!string.IsNullOrEmpty(predicateWithManyRelations))
					 	_queryable = _queryable.Where(predicateWithManyRelations);
                            
                    var queryable = _queryable.Select(
                          p =>
                              new
                              {			
			GuidCatalog = p.GuidCatalog
,Number = p.Number
,Name = p.Name
,CreatedDate = p.CreatedDate
,UpdatedDate = p.UpdatedDate
,CreatedBy = p.CreatedBy
,UpdatedBy = p.UpdatedBy
,IsDeleted = p.IsDeleted
,GuidCompany = p.GuidCompany
,CatIndex = p.CatIndex

,accReusableCatalogValue = includeaccReusableCatalogValue ? p.accReusableCatalogValue:null
,accParentCatalog = includeaccParentCatalog ? p.accParentCatalog:null

,ComputedName = p.Number + " " + p.Name


							}

                          );

					if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
                        queryable = queryable.Where(predicateWithFKAndComputed);

					
                    return queryable.Count();
			
					
                }else
                    return con.accCatalogs.Count();

			}

		}
         public int GetCount()
        {
            return GetCount(p => true);
        }
        #endregion
        
         public accCatalog Update(accCatalog entity, string paths)
        {
            return Update(entity, paths.Split(char.Parse(",")));
            
        }

        public accCatalog Update(accCatalog entity, string[] paths)
        {
            // Translate
            List<Expression<Func<accCatalog, object>>> pathList = new List<Expression<Func<accCatalog, object>>>();
            for (int i = 0; i <= paths.Length -1; i++)
            {
                var param = Expression.Parameter(typeof(accCatalog), "p");
                var member = MemberExpression.PropertyOrField(param, paths[i]);

                Expression<Func<accCatalog, object>> path = p => member;
                pathList.Add(path.Expand());
            }
			ObjectContext context = null;
			 return Update(entity, true,null, out context,  pathList.ToArray());
           //return Update(entity, pathList.ToArray());
        }

        public void Update(List<accCatalog> entities, string paths)
        {
            foreach (var entity in entities )
            {
                Update(entity, paths);
            }
        }
		public accCatalog Create(accCatalog entity, ContextRequest contextRequest, string paths)
        {
          

            if (string.IsNullOrEmpty(paths))
                return Create(entity, contextRequest);

            return Create(entity, contextRequest, paths.Split(char.Parse(",")));
        }
        public accCatalog Create(accCatalog entity, string paths)
        {
			 if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return Create(entity, contextRequest, paths);

        }

        public  void Create(List<accCatalog> entities, ContextRequest requestContext, string paths)
        {
            foreach (var entity in entities)
            {
                Create(entity,requestContext, paths);
            }
        }

        public void Create(List<accCatalog> entities, string[] paths)
        {
            foreach (var entity in entities)
            {
                Create(entity, null, paths);
            }
        }
        
        public accCatalog  Create(accCatalog entity, ContextRequest contextRequest, string[] paths)
        {
            List<Expression<Func<accCatalog, object>>> pathList = new List<Expression<Func<accCatalog, object>>>();
            for (int i = 0; i < paths.Length - 1; i++)
            {
                var param = Expression.Parameter(typeof(accCatalog), "p");
                var member = MemberExpression.PropertyOrField(param, paths[i]);

                Expression<Func<accCatalog, object>> path = p => member;
                pathList.Add(path.Expand());
            }
            return Create(entity, contextRequest, pathList.ToArray());
        }
        public void Delete(List<accCatalog.CompositeKey> entityKeys)
        {

            List<accCatalog> items = new List<accCatalog>();
            foreach (var itemKey in entityKeys)
            {
                items.Add(GetByKey(itemKey.GuidCatalog));
            }

            Delete(items);

        }
		
		
	}
		public partial class accCatalogEntriesBR{
	 	
           
		 #region Partial methods

           partial void OnUpdating(object sender, BusinessRulesEventArgs<accCatalogEntry> e);

            partial void OnUpdated(object sender, BusinessRulesEventArgs<accCatalogEntry> e);

            partial void OnCreating(object sender, BusinessRulesEventArgs<accCatalogEntry> e);
            partial void OnCreated(object sender, BusinessRulesEventArgs<accCatalogEntry> e);

            partial void OnDeleting(object sender, BusinessRulesEventArgs<accCatalogEntry> e);
            partial void OnDeleted(object sender, BusinessRulesEventArgs<accCatalogEntry> e);

            partial void OnGetting(object sender, BusinessRulesEventArgs<accCatalogEntry> e);
            partial void OnTaken(object sender, BusinessRulesEventArgs<accCatalogEntry> e);
            partial void OnCounting(object sender, BusinessRulesEventArgs<accCatalogEntry> e);
 
 
            #endregion
			
		private static accCatalogEntriesBR singlenton =null;
				public static accCatalogEntriesBR NewInstance(){
					return  new accCatalogEntriesBR();
					
				}
		public static accCatalogEntriesBR Instance{
			get{
				if (singlenton == null)
					singlenton = new accCatalogEntriesBR();
				return singlenton;
			}
		}
		private bool preventSecurityRestrictions = false;
		 public bool PreventAuditTrail { get; set;  }
		#region Fields
        EFPocoContext context = null;
        #endregion
        #region Constructor
        public accCatalogEntriesBR()
        {
            context = new EFPocoContext();
        }
		 public accCatalogEntriesBR(bool preventSecurity)
            {
                this.preventSecurityRestrictions = preventSecurity;
				context = new EFPocoContext();
            }
        #endregion
		
		#region Get

 		public IQueryable<accCatalogEntry> Get()
        {
            //using (EFContext con = new EFContext())
            //{
				EFContext con = new EFContext();
                var query = con.accCatalogEntries.AsQueryable();
                con.ContextOptions.ProxyCreationEnabled = false;

                //query = ContextQueryBuilder<Nutrient>.ApplyContextQuery(query, contextRequest);

                return query;




            //}

        }
		
		public List<accCatalogEntry> GetAll()
        {
            return this.GetBy(p => true);
        }
        public List<accCatalogEntry> GetAll(string includes)
        {
            return this.GetBy(p => true, includes);
        }
        public accCatalogEntry GetByKey(Guid guidCatalogEntry)
        {
            return GetByKey(guidCatalogEntry, true);
        }
        public accCatalogEntry GetByKey(Guid guidCatalogEntry, bool loadIncludes)
        {
            accCatalogEntry item = null;
			var query = PredicateBuilder.True<accCatalogEntry>();
                    
			string strWhere = @"GuidCatalogEntry = Guid(""" + guidCatalogEntry.ToString()+@""")";
            Expression<Func<accCatalogEntry, bool>> predicate = null;
            if (!string.IsNullOrEmpty(strWhere))
                predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<accCatalogEntry, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
			 ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();
            contextRequest.CustomQuery.FilterExpressionString = strWhere;

			//item = GetBy(predicate, loadIncludes, contextRequest).FirstOrDefault();
			item = GetBy(strWhere,loadIncludes,contextRequest).FirstOrDefault();
            return item;
        }
         public List<accCatalogEntry> GetBy(string strWhere, bool loadRelations, ContextRequest contextRequest)
        {
            if (!loadRelations)
                return GetBy(strWhere, contextRequest);
            else
                return GetBy(strWhere, contextRequest, "");

        }
		  public List<accCatalogEntry> GetBy(string strWhere, bool loadRelations)
        {
              if (!loadRelations)
                return GetBy(strWhere, new ContextRequest());
            else
                return GetBy(strWhere, new ContextRequest(), "");

        }
         public accCatalogEntry GetByKey(Guid guidCatalogEntry, params Expression<Func<accCatalogEntry, object>>[] includes)
        {
            accCatalogEntry item = null;
			string strWhere = @"GuidCatalogEntry = Guid(""" + guidCatalogEntry.ToString()+@""")";
          Expression<Func<accCatalogEntry, bool>> predicate = null;
            if (!string.IsNullOrEmpty(strWhere))
                predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<accCatalogEntry, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
        item = GetBy(predicate, includes).FirstOrDefault();
         ////   item = GetBy(strWhere,includes).FirstOrDefault();
			return item;

        }
        public accCatalogEntry GetByKey(Guid guidCatalogEntry, string includes)
        {
            accCatalogEntry item = null;
			string strWhere = @"GuidCatalogEntry = Guid(""" + guidCatalogEntry.ToString()+@""")";
            
			
            item = GetBy(strWhere, includes).FirstOrDefault();
            return item;

        }
		 public accCatalogEntry GetByKey(Guid guidCatalogEntry, string usemode, string includes)
		{
			return GetByKey(guidCatalogEntry, usemode, null, includes);

		 }
		 public accCatalogEntry GetByKey(Guid guidCatalogEntry, string usemode, ContextRequest context,  string includes)
        {
            accCatalogEntry item = null;
			string strWhere = @"GuidCatalogEntry = Guid(""" + guidCatalogEntry.ToString()+@""")";
			if (context == null)
				context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
			context.CustomQuery.IsByKey = true;
            context.CustomQuery.FilterExpressionString = strWhere;
            context.UseMode = usemode;
            item = GetBy(strWhere,context , includes).FirstOrDefault();
            return item;

        }

        #region Dynamic Predicate
        public List<accCatalogEntry> GetBy(Expression<Func<accCatalogEntry, bool>> predicate, int? pageSize, int? page)
        {
            return this.GetBy(predicate, pageSize, page, null, null);
        }
        public List<accCatalogEntry> GetBy(Expression<Func<accCatalogEntry, bool>> predicate, ContextRequest contextRequest)
        {

            return GetBy(predicate, contextRequest,"");
        }
        
        public List<accCatalogEntry> GetBy(Expression<Func<accCatalogEntry, bool>> predicate, ContextRequest contextRequest, params Expression<Func<accCatalogEntry, object>>[] includes)
        {
            StringBuilder sb = new StringBuilder();
           if (includes != null)
            {
                foreach (var path in includes)
                {

						if (sb.Length > 0) sb.Append(",");
						sb.Append(SFSdotNet.Framework.Linq.Utils.IncludeToString<accCatalogEntry>(path));

               }
            }
            return GetBy(predicate, contextRequest, sb.ToString());
        }
        
        
        public List<accCatalogEntry> GetBy(Expression<Func<accCatalogEntry, bool>> predicate, string includes)
        {
			ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";

            return GetBy(predicate, context, includes);
        }

        public List<accCatalogEntry> GetBy(Expression<Func<accCatalogEntry, bool>> predicate, params Expression<Func<accCatalogEntry, object>>[] includes)
        {
			if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }
			ContextRequest context = new ContextRequest();
			            context.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            context.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";
            return GetBy(predicate, context, includes);
        }

      
		public bool DisableCache { get; set; }
		 public List<accCatalogEntry> GetBy(Expression<Func<accCatalogEntry, bool>> predicate, ContextRequest contextRequest, string includes)
        {
            using (EFPocoContext con = new EFPocoContext())
            {
				if (DisableCache) 
                	con.CachingPolicy = EFCachingProvider.Caching.CachingPolicy.NoCaching;

				List<accCatalogEntry> result = null;
                 e = null;
	
				OnGetting(con, e = new BusinessRulesEventArgs<accCatalogEntry>() {  FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null) });

               // OnGetting(con,e = new BusinessRulesEventArgs<accCatalogEntry>() { FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = contextRequest.CustomQuery.FilterExpressionString});
				   if (e != null) {
				    predicate = e.FilterExpression;
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				con.EnableChangeTrackingUsingProxies = false;
				con.WrappedContext.accCatalogEntries.MergeOption = MergeOption.NoTracking;
                con.WrappedContext.ContextOptions.ProxyCreationEnabled = false;
                if (predicate == null) predicate = PredicateBuilder.True<accCatalogEntry>();
 				string fkIncludes = "accCatalog";
                if(contextRequest!=null){
					if (contextRequest.CustomQuery != null)
					{
						if (contextRequest.CustomQuery.IncludeForeignKeyPaths != null) {
							if (contextRequest.CustomQuery.IncludeForeignKeyPaths.Value == false)
								fkIncludes = "";
						}
					}
				}
				if (!string.IsNullOrEmpty(includes))
					includes = includes + "," + fkIncludes;
				else
					includes = fkIncludes;
                
                var es = con.accCatalogEntries;

                IQueryable<accCatalogEntry> query = es.AsQueryable();

                                if (!string.IsNullOrEmpty(includes))
                {
                    foreach (string include in includes.Split(char.Parse(",")))
                    {
						if (!string.IsNullOrEmpty(include))
                            query = query.Include(include);
                    }
                }
                    predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
					 	if (!preventSecurityRestrictions)
						{
							if (contextRequest != null )
		                    	if (contextRequest.User !=null )
		                        	if (contextRequest.Company != null)
		                        		predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				query =query.Where(predicate);
                query = ContextQueryBuilder<accCatalogEntry>.ApplyContextQuery(query, contextRequest);

                result = query.ToList<accCatalogEntry>();
				  
                if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e =  new BusinessRulesEventArgs<accCatalogEntry>() { Items= result, IncludingComputedLinq = false, ContextRequest = contextRequest,  FilterExpression = predicate } :  e);
  
			

                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
            }
        }
		public void UpdateAgile(accCatalogEntry item, params string[] fields)
         {
             List<accCatalogEntry> list = new List<accCatalogEntry>();
             list.Add(item);
             this.UpdateBulk(list, fields);
         }
		public void UpdateBulk(List<accCatalogEntry>  items, params string[] fields)
         {
             SFSdotNet.Framework.My.ContextRequest req = new SFSdotNet.Framework.My.ContextRequest();
             req.CustomQuery = new SFSdotNet.Framework.My.CustomQuery();
             foreach (var field in fields)
             {
                 req.CustomQuery.SpecificProperties.Add(field);
             }
             UpdateBulk(items, req);

         }
        public void UpdateBulk(List<accCatalogEntry> items, ContextRequest req)
        {
            using (EFContext con = new EFContext())
            {



                foreach (var item in items)
                {
                    var setT = con.CreateObjectSet<accCatalogEntry>("accCatalogEntries");


                    var itemForAttach = new accCatalogEntry();
			itemForAttach.GuidCatalogEntry = item.GuidCatalogEntry;
					
                    itemForAttach = SFSdotNet.Framework.Entities.ConvertEntity.SetProperties<accCatalogEntry>(item, itemForAttach, null, req.CustomQuery.SpecificProperties.ToArray());
                    setT.Attach(itemForAttach);


                    foreach (var property in req.CustomQuery.SpecificProperties)
                    {
						
                        if (property != "GuidCatalogEntry")
                            con.ObjectStateManager.GetObjectStateEntry(itemForAttach).SetModifiedProperty(property);

                    }

                }
                con.SaveChanges();


            }
        }
		/*public int Update(List<accCatalogEntry> items, ContextRequest contextRequest)
            {
                int result = 0;
                using (EFContext con = new EFContext())
                {
                   
                

                    foreach (var item in items)
                    {
                        //secMessageToUser messageToUser = new secMessageToUser();
                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            item.GetType().GetProperty(prop).SetValue(item, item.GetType().GetProperty(prop).GetValue(item));
                        }
                        //messageToUser.GuidMessageToUser = (Guid)item.GetType().GetProperty("GuidMessageToUser").GetValue(item);

                        var setObject = con.CreateObjectSet<accCatalogEntry>("accCatalogEntries");
                        //messageToUser.Readed = DateTime.UtcNow;
                        setObject.Attach(item);
                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            con.ObjectStateManager.GetObjectStateEntry(item).SetModifiedProperty(prop);
                        }
                       
                    }
                    result = con.SaveChanges();

                    


                }
                return result;
            }
           */
        public List<accCatalogEntry> GetBy(string predicateString, ContextRequest contextRequest, string includes)
        {
            using (EFContext con = new EFContext())
            {
				if (DisableCache) 
                	con.CachingPolicy = EFCachingProvider.Caching.CachingPolicy.NoCaching;

				Filter filter = new Filter();
                if (predicateString.Contains("|"))
                {
                    string ft = GetSpecificFilter(predicateString);
                    if (!string.IsNullOrEmpty(ft))
                        filter.SetFilterPart("ft", ft);
                   
                    contextRequest.FreeText = predicateString.Split(char.Parse("|"))[1];
                    var q1 = predicateString.Split(char.Parse("|"))[0];
                    if (!string.IsNullOrEmpty(q1))
                    {
                        filter.ProcessText(q1);
                    }
                }
                else {
                    filter.ProcessText(predicateString);
                }

				List<accCatalogEntry> result = null;
                 e = null;
					OnGetting(con, e = new BusinessRulesEventArgs<accCatalogEntry>() { Filter = filter, ContextRequest = contextRequest /*, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null)*/ });

                  //OnGetting(con,e = new BusinessRulesEventArgs<accCatalogEntry>() {  ContextRequest = contextRequest, FilterExpressionString = predicateString });
			   	if (e != null) {
				    //predicateString = e.GetQueryString();
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				//	 else {
                //      predicateString = predicateString.Replace("*extraFreeText*", "").Replace("()","");
                //  }
				//con.EnableChangeTrackingUsingProxies = false;
				con.accCatalogEntries.MergeOption = MergeOption.NoTracking;
                con.ContextOptions.ProxyCreationEnabled = false;
                //if (predicate == null) predicate = PredicateBuilder.True<accCatalogEntry>();
 				string fkIncludes = "accCatalog";
                if(contextRequest!=null){
					if (contextRequest.CustomQuery != null)
					{
						if (contextRequest.CustomQuery.IncludeForeignKeyPaths != null) {
							if (contextRequest.CustomQuery.IncludeForeignKeyPaths.Value == false)
								fkIncludes = "";
						}
					}
				}else{
                    contextRequest = new ContextRequest();
                    contextRequest.CustomQuery = new CustomQuery();

                }
				if (!string.IsNullOrEmpty(includes))
					includes = includes + "," + fkIncludes;
				else
					includes = fkIncludes;
                
                var es = con.accCatalogEntries;
				IQueryable<accCatalogEntry> query = es.AsQueryable();
		
				// include relations FK
				if(string.IsNullOrEmpty(includes) ){
					includes ="";
				}
				bool includeaccCatalog = includes.Split(char.Parse(",")).Contains("accCatalog");

				StringBuilder sbQuerySystem = new StringBuilder();
                    //predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				

				//if (!string.IsNullOrEmpty(predicateString))
                //      sbQuerySystem.Append(" And ");
                //sbQuerySystem.Append(" (IsDeleted != true Or IsDeleted = null) ");
				 filter.SetFilterPart("de", "(IsDeleted != true OR IsDeleted = null)");


					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
	                    	if (contextRequest.User !=null )
	                        	if (contextRequest.Company != null ){
	                        		//if (sbQuerySystem.Length > 0)
	                        		//	    			sbQuerySystem.Append( " And ");	
									//sbQuerySystem.Append(@" (GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
									filter.SetFilterPart("co",@"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @"""))");
								}
						}	
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				//string predicateString = predicate.ToDynamicLinq<accCatalogEntry>();
				//predicateString += sbQuerySystem.ToString();
				filter.CleanAndProcess("");

				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed(); //SFSdotNet.Framework.Linq.Utils.ExtractSpecificProperties("", ref predicateString );               
                string predicateWithManyRelations = filter.GetFilterChildren(); //SFSdotNet.Framework.Linq.Utils.CleanPartExpression(predicateString);

                //QueryUtils.BreakeQuery1(predicateString, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
                var _queryable = query.AsQueryable();
                if (!string.IsNullOrEmpty(predicateWithManyRelations))
                    _queryable = _queryable.Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams);
				if (contextRequest.CustomQuery.SpecificProperties.Count > 0)
                {

                    StringBuilder sbProps = new StringBuilder();
                    contextRequest.CustomQuery.SpecificProperties.Add("GuidCatalogEntry");
                    
					foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                    {
						if(sbProps.Length > 0)
							sbProps.Append(",");
                        sbProps.Append(prop);
                    }
					    IQueryable  queryableSelective = null ;
					  
					  if (!string.IsNullOrEmpty(predicateWithManyRelations))
							queryableSelective = con.accCatalogEntries.AsQueryable().Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams).Select(string.Format("new({0})", sbProps.ToString()));
					else
						queryableSelective = con.accCatalogEntries.AsQueryable().Select(string.Format("new({0})", sbProps.ToString()));


                    //if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
					//	queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

                    QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
                    
					if (!string.IsNullOrEmpty(queryOps.OrderByAndSort))
                        queryableSelective = queryableSelective.OrderBy(queryOps.OrderByAndSort);
                    if (queryOps.Skip != null)
                    {
                        queryableSelective = queryableSelective.Skip(queryOps.Skip.Value);
                    }
                    if (queryOps.PageSize != null)
                    {
                        queryableSelective = queryableSelective.Take(queryOps.PageSize.Value);
                    }
                    //var results = queryableSelective.ToList();
                    result = new List<accCatalogEntry>();
                    accCatalogEntry itemDef = null;
                    foreach (var item in queryableSelective)
                    {
                        itemDef = new accCatalogEntry();

                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            if (!prop.Contains("."))
                            {
                                itemDef.GetType().GetProperty(prop).SetValue(itemDef, item.GetType().GetProperty(prop).GetValue(item));
                            }
                            else {
                                throw new Exception("La seleccion de relaciones aún no esta soportada");
                            }

                        }

                        result.Add(itemDef);
                    }

                }
                else
                {
				var  queryable = _queryable.Select(                    
				p => 
                        new
                    {
					GuidCatalogEntry = p.GuidCatalogEntry
,CreatedDate = p.CreatedDate
,UpdatedDate = p.UpdatedDate
,CreatedBy = p.CreatedBy
,UpdatedBy = p.UpdatedBy
,IsDeleted = p.IsDeleted
,GuidCompany = p.GuidCompany
,Amount = p.Amount
,PosNegType = p.PosNegType

,accCatalog = includeaccCatalog ? p.accCatalog:null


	
                    }
                    
                    );
					
				
                 if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
                    queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

				QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
            	if (!string.IsNullOrEmpty(queryOps.OrderByAndSort))
					queryable = queryable.OrderBy(queryOps.OrderByAndSort);
               	if (queryOps.Skip != null)
                {
                    queryable = queryable.Skip(queryOps.Skip.Value);
                }
                if (queryOps.PageSize != null)
                {
                    queryable = queryable.Take (queryOps.PageSize.Value);
                }
                result = queryable.AsEnumerable().
                    Select(
                    p =>  new accCatalogEntry()
                    {
					GuidCatalogEntry = p.GuidCatalogEntry
,CreatedDate = p.CreatedDate
,UpdatedDate = p.UpdatedDate
,CreatedBy = p.CreatedBy
,UpdatedBy = p.UpdatedBy
,IsDeleted = p.IsDeleted
,GuidCompany = p.GuidCompany
,Amount = p.Amount
,PosNegType = p.PosNegType
,accCatalog = p.accCatalog

                    }
                     ).ToList();
				}


			 if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e = new BusinessRulesEventArgs<accCatalogEntry>() { Items= result, IncludingComputedLinq = true, ContextRequest = contextRequest, FilterExpressionString  = predicateString } :  e);
  
			
  
                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
            }
        }
		public List<accCatalogEntry> GetBy(Expression<Func<accCatalogEntry, bool>> predicate, bool loadRelations, ContextRequest contextRequest)
        {
			if(!loadRelations)
				return GetBy(predicate, contextRequest);
			else
				return GetBy(predicate, contextRequest, "");

        }

        public List<accCatalogEntry> GetBy(Expression<Func<accCatalogEntry, bool>> predicate, int? pageSize, int? page, string orderBy, SFSdotNet.Framework.Data.SortDirection? sortDirection)
        {
            return GetBy(predicate, new ContextRequest() { CustomQuery = new CustomQuery() { Page = page, PageSize = pageSize, OrderBy = orderBy, SortDirection = sortDirection } });
        }
        public List<accCatalogEntry> GetBy(Expression<Func<accCatalogEntry, bool>> predicate)
        {

			if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }
			ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();

			contextRequest.CurrentContext = SFSdotNet.Framework.My.Context.CurrentContext;
			            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

            contextRequest.CustomQuery.FilterExpressionString = null;
            return this.GetBy(predicate, contextRequest, "");
        }
        #endregion
        #region Dynamic String
		private string GetSpecificFilter(string filter) {
            string result = "";
		    //string linqFilter = String.Empty;
            string freeTextFilter = String.Empty;
            if (filter.Contains("|"))
            {
               // linqFilter = filter.Split(char.Parse("|"))[0];
                freeTextFilter = filter.Split(char.Parse("|"))[1];
            }
            //else {
            //    freeTextFilter = filter;
            //}
            //else {
            //    linqFilter = filter;
            //}
			// linqFilter = SFSdotNet.Framework.Linq.Utils.ReplaceCustomDateFilters(linqFilter);
            //string specificFilter = linqFilter;
            if (!string.IsNullOrEmpty(freeTextFilter))
            {
                System.Text.StringBuilder sbCont = new System.Text.StringBuilder();
                /*if (specificFilter.Length > 0)
                {
                    sbCont.Append(" AND ");
                    sbCont.Append(" ({0})");
                }
                else
                {
                    sbCont.Append("{0}");
                }*/
                //var words = freeTextFilter.Split(char.Parse(" "));
				var word = freeTextFilter;
                System.Text.StringBuilder sbSpec = new System.Text.StringBuilder();
                 int nWords = 1;
				/*foreach (var word in words)
                {
					if (word.Length > 0){
                    if (sbSpec.Length > 0) sbSpec.Append(" AND ");
					if (words.Length > 1) sbSpec.Append("("); */
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
								
					//if (sbSpec.Length > 2)
					//	sbSpec.Append(" OR "); // test
					sbSpec.Append(string.Format(@"accCatalog.ComputedName.Contains(""{0}"")", word));
								 //sbSpec.Append("*extraFreeText*");

                    /*if (words.Length > 1) sbSpec.Append(")");
					
					nWords++;

					}

                }*/
                //specificFilter = string.Format("{0}{1}", specificFilter, string.Format(sbCont.ToString(), sbSpec.ToString()));
                                 result = sbSpec.ToString();  
            }
			//result = specificFilter;
			
			return result;

		}
	
			public List<accCatalogEntry> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  params object[] extraParams)
        {
			return GetBy(filter, pageSize, page, orderBy, orderDir,  null, extraParams);
		}
           public List<accCatalogEntry> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir, string usemode, params object[] extraParams)
            { 
                return GetBy(filter, pageSize, page, orderBy, orderDir, usemode, null, extraParams);
            }


		public List<accCatalogEntry> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  string usemode, ContextRequest context, params object[] extraParams)

        {

            // string freetext = null;
            //if (filter.Contains("|"))
            //{
            //    int parts = filter.Split(char.Parse("|")).Count();
            //    if (parts > 1)
            //    {

            //        freetext = filter.Split(char.Parse("|"))[1];
            //    }
            //}
		
            //string specificFilter = "";
            //if (!string.IsNullOrEmpty(filter))
            //  specificFilter=  GetSpecificFilter(filter);
            if (string.IsNullOrEmpty(orderBy))
            {
			                orderBy = "UpdatedDate";
            }
			//orderDir = "desc";
			SFSdotNet.Framework.Data.SortDirection direction = SFSdotNet.Framework.Data.SortDirection.Ascending;
            if (!string.IsNullOrEmpty(orderDir))
            {
                if (orderDir == "desc")
                    direction = SFSdotNet.Framework.Data.SortDirection.Descending;
            }
            if (context == null)
                context = new ContextRequest();
			else
                context.CustomQuery = new CustomQuery();
             //context.FreeText = freetext;
             context.UseMode = usemode;
             context.CustomQuery =new SFSdotNet.Framework.My.CustomQuery()
 
                {
                    ExtraParams = extraParams,

                    OrderBy = orderBy,
                    SortDirection = direction,
                    Page = page,
                    PageSize = pageSize
               };
            

            if (!preventSecurityRestrictions) {
			 if (context.CurrentContext == null)
                {
					if (SFSdotNet.Framework.My.Context.CurrentContext != null &&  SFSdotNet.Framework.My.Context.CurrentContext.Company != null && SFSdotNet.Framework.My.Context.CurrentContext.User != null)
					{
						context.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
						context.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

					}
					else {
						throw new Exception("The security rule require a specific user and company");
					}
				}
            }
            return GetBy(filter, context);
  
        }


        public List<accCatalogEntry> GetBy(string strWhere, ContextRequest contextRequest)
        {
        	#region old code
				
				 //Expression<Func<tvsReservationTransport, bool>> predicate = null;
				string strWhereClean = strWhere.Replace("*extraFreeText*", "").Replace("()", "");
                //if (!string.IsNullOrEmpty(strWhereClean)){

                //    object[] extraParams = null;
                //    //if (contextRequest != null )
                //    //    if (contextRequest.CustomQuery != null )
                //    //        extraParams = contextRequest.CustomQuery.ExtraParams;
                //    //predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<tvsReservationTransport, bool>(strWhereClean, extraParams != null? extraParams.Cast<Guid>(): null);				
                //}
				 if (contextRequest == null)
                {
                    contextRequest = new ContextRequest();
                    if (contextRequest.CustomQuery == null)
                        contextRequest.CustomQuery = new CustomQuery();
                }
                  if (!preventSecurityRestrictions) {
					if (contextRequest.User == null || contextRequest.Company == null)
                      {
                     if (SFSdotNet.Framework.My.Context.CurrentContext.Company != null && SFSdotNet.Framework.My.Context.CurrentContext.User != null)
                     {
                         contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                         contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

                     }
                     else {
                         throw new Exception("The security rule require a specific User and Company ");
                     }
					 }
                 }
            contextRequest.CustomQuery.FilterExpressionString = strWhere;
				//return GetBy(predicate, contextRequest);  

			#endregion				
				
                    return GetBy(strWhere, contextRequest, "");  


        }
       public List<accCatalogEntry> GetBy(string strWhere)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
			
            return GetBy(strWhere, context, null);
        }

        public List<accCatalogEntry> GetBy(string strWhere, string includes)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
            return GetBy(strWhere, context, includes);
        }

        #endregion
        #endregion
		
		  #region SaveOrUpdate
        private accCatalogEntry Save(accCatalogEntry entity, bool saveChanges, EFPocoContext con)
        {
				ObjectContext context = null;
            return Update(entity, saveChanges,null, out context);

			
        }
		 public  accCatalogEntry Create( accCatalogEntry entity, params Expression<Func< accCatalogEntry, object>>[] paths)
         {
             return Create(entity, null, paths);

         }
 		 public accCatalogEntry Create(accCatalogEntry entity)
        {
				ObjectContext context = null;
				    if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: Create");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

				return this.Create(entity, true, contextRequest, out context);


        }
        public accCatalogEntry Create(accCatalogEntry entity, ContextRequest contextRequest)
         {
             ObjectContext context = null;
             return this.Create(entity, true, contextRequest,out context);

         }
         public accCatalogEntry Create(accCatalogEntry entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext context)
        {
                    return Create(entity, saveChanges , contextRequest , out context, null);
        }
         public accCatalogEntry Create(accCatalogEntry entity, ContextRequest contextRequest, params Expression<Func<accCatalogEntry,object>>[] paths)
        {
            ObjectContext context = null;
            if(paths != null)
				return Create(entity, true,contextRequest, out context, paths);
			else 
				return Create(entity, true,contextRequest, out context);
        }
        public accCatalogEntry Create(accCatalogEntry entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext context, params Expression<Func<accCatalogEntry,object>>[] pocopaths)
        {
			using (EFPocoContext con = new EFPocoContext())
			{
				accCatalogEntry itemResult = null;
#region Autos


			entity.CreatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.CreatedBy = contextRequest.User.GuidUser;
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.UpdatedBy = contextRequest.User.GuidUser;
	
			if (contextRequest != null)
				if(contextRequest.User != null)
					if (contextRequest.Company != null)
						entity.GuidCompany = contextRequest.Company.GuidCompany;
	

#endregion
                e = null;
                OnCreating(this,e = new BusinessRulesEventArgs<accCatalogEntry>() { ContextRequest = contextRequest, Item=entity, PathExpressions = pocopaths, SaveChanges =saveChanges });
				   if (e != null) {
						if (e.Cancel)
						{
							context = null;
							return e.Item;

						}
					}

                    if (entity.GuidCatalogEntry == Guid.Empty)
                   {
                       entity.GuidCatalogEntry = Guid.NewGuid();

                   }



				accCatalogEntryAdapter adapter = con.GetAdapterObject<accCatalogEntryAdapter>(entity);;
				List<Expression<Func<accCatalogEntryAdapter, object>>> paths = new List<Expression<Func<accCatalogEntryAdapter,object>>>();
                
			    if (pocopaths != null && pocopaths.Length > 0)
                {
					// Translate
                    foreach (var pocopath in pocopaths)
                    {
                        var param = Expression.Parameter(typeof(accCatalogEntryAdapter), "p");
                        var member = MemberExpression.PropertyOrField(param, ((System.Linq.Expressions.MemberExpression)(((System.Linq.Expressions.LambdaExpression)(pocopath)).Body)).Member.Name);
                        Expression<Func<accCatalogEntryAdapter, object>> path  = null;
                        switch(member.Member.Name){
							
							default:
								path = p => member;
							break;
                        }

                        
                       paths.Add(path.Expand());
                    }
                }
                object aux = null;
					paths.Add(p => p.accCatalog.WithoutUpdate());

					//paths = pathBuilder.ToArray();

				if (adapter.accCatalog != null ){
					if(adapter.accCatalog.EntityKey == null) adapter.accCatalog.EntityKey = con.WrappedContext.CreateEntityKey("accCatalogs", adapter.accCatalog);
				}



                //con.WrappedContext.AttachObjectGraph<accCatalogEntryAdapter>(adapter, p=>p.accCatalog);
                con.WrappedContext.AttachObjectGraph<accCatalogEntryAdapter>(adapter, paths.ToArray());
              	if (saveChanges){
                    con.WrappedContext.SaveChanges(SaveOptions.AcceptAllChangesAfterSave);
					 
				}
                else
                    con.WrappedContext.SaveChanges(SaveOptions.None);
                if (!saveChanges)
                    context = con.WrappedContext;
                else
                    context = null;
				itemResult = adapter.PocoEntity;
                if (e != null)
                {
                    e.Item = itemResult;
                }
                OnCreated(this, e == null ? e = new BusinessRulesEventArgs<accCatalogEntry>() { ContextRequest = contextRequest, Item = itemResult, PathExpressions = pocopaths, SaveChanges = saveChanges } : e);



                if (e != null)
                {
                    itemResult = e.Item;
                }
                              return itemResult;
            }
        }
        BusinessRulesEventArgs<accCatalogEntry> e = null;
        public void Create(List<accCatalogEntry> entities)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            Create(entities, contextRequest, null);
        }
        public void Create(List<accCatalogEntry> entities, ContextRequest contextRequest)
        
        {
			ObjectContext context = null;
            	foreach (accCatalogEntry entity in entities)
				{
					this.Create(entity, true, contextRequest, out context);
				}
        }
         public accCatalogEntry Update(accCatalogEntry entity)
        {
            if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return Update(entity, contextRequest);
        }
        public accCatalogEntry Update(accCatalogEntry entity, ContextRequest requestContext)
        {
			  ObjectContext context = null;
            return Update(entity, true,requestContext, out context);
         }
		public  accCatalogEntry Update(accCatalogEntry entity, params Expression<Func<accCatalogEntry, object>>[] pocopaths)
        {
			  ObjectContext context = null;
              return Update(entity, true, null, out context, pocopaths);
         }
        public accCatalogEntry Update(accCatalogEntry entity, ContextRequest requestContext, bool saveChanges, out ObjectContext outcontext)
        {
			return Update(entity, saveChanges,requestContext, out outcontext, null);
		}
         public accCatalogEntry Update(accCatalogEntry entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext outcontext, params Expression<Func<accCatalogEntry,object>>[] pocopaths)
        {
		 if ((System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null) && contextRequest == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Update");
            }
            if (contextRequest == null)
            {
                contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            }

			using (EFPocoContext con = new EFPocoContext())
			{
				accCatalogEntry  itemResult = null;

	
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
			if(contextRequest.User != null)
				entity.UpdatedBy = contextRequest.User.GuidUser;

	    var oldentity = GetBy(p => p.GuidCatalogEntry == entity.GuidCatalogEntry, contextRequest).FirstOrDefault();
		if (oldentity != null) {
		
            entity.CreatedDate = oldentity.CreatedDate;
            entity.CreatedBy = oldentity.CreatedBy;
	
            entity.GuidCompany = oldentity.GuidCompany;
	
			

		}

				e = null;
                OnUpdating(this,e = new BusinessRulesEventArgs<accCatalogEntry>() { ContextRequest = contextRequest, Item=entity, PathExpressions = pocopaths, SaveChanges =saveChanges });
				   if (e != null) {
						if (e.Cancel)
						{
							outcontext = null;
							return e.Item;

						}
					}

                accCatalogEntryAdapter adapter = con.GetAdapterObject<accCatalogEntryAdapter>(entity);
                adapter.EntityKey = con.WrappedContext.CreateEntityKey("accCatalogEntries", adapter);
				    var es = con.accCatalogEntries;
				List<Expression<Func<accCatalogEntryAdapter, object>>> paths = new List<Expression<Func<accCatalogEntryAdapter,object>>>();
                /* if (pocopaths != null)
                    if (pocopaths.Length == 0)
                        pocopaths = null;*/

			    if (pocopaths != null && pocopaths.Length > 0)
                {
					// Translate
                    foreach (var pocopath in pocopaths)
                    {
                        var param = Expression.Parameter(typeof(accCatalogEntryAdapter), "p");
                        var member = MemberExpression.PropertyOrField(param, ((System.Linq.Expressions.MemberExpression)(((System.Linq.Expressions.LambdaExpression)(pocopath)).Body)).Member.Name);
                        Expression<Func<accCatalogEntryAdapter, object>> path  = null;
                        switch(member.Member.Name){
							
							default:
								path = p => member;
							break;
                        }

                        paths.Add(path.Expand());
 					}
                }
                else {
                  paths = new List<Expression<Func<accCatalogEntryAdapter, object>>>();

					//List<Expression<Func<accCatalogEntryAdapter,object>>> pathBuilder = new List<Expression<Func<accCatalogEntryAdapter,object>>>();
					paths.Add(p => p.accCatalog.WithoutUpdate());

		
					//paths = pathBuilder.ToArray();		
			}
			object aux = null;
				if (adapter.accCatalog != null ){
					if(adapter.accCatalog.EntityKey == null) adapter.accCatalog.EntityKey = con.WrappedContext.CreateEntityKey("accCatalogs", adapter.accCatalog);
				}

                



                //con.AttachObjectGraph<accCatalogEntry>(adapter, p=>p.accCatalog);
                con.WrappedContext.AttachObjectGraph<accCatalogEntryAdapter>(adapter, paths.ToArray());
				if (saveChanges){
                	con.WrappedContext.SaveChanges();
					 
					}
                if(!saveChanges)
					outcontext = con.WrappedContext;
				else
					outcontext = null;
				itemResult = adapter.PocoEntity;
				OnUpdated(this, e = new BusinessRulesEventArgs<accCatalogEntry>() { ContextRequest = contextRequest, Item=itemResult, PathExpressions = pocopaths, SaveChanges =saveChanges });

              	return itemResult;

			  }
        }
        public accCatalogEntry Save(accCatalogEntry entity)
        {
			return Save(entity, true, null);
        }
        public int Save(List<accCatalogEntry> entities)
        {
			using (EFPocoContext con = new EFPocoContext())
			{
			
            int n = 0;
            foreach (accCatalogEntry item in entities)
            {
                try
                {
                    this.Save(item, false, con);
                    n++;
                }catch (Exception ex){
                    SFSdotNet.Framework.My.EventLog.Exception(ex);
                }
            }
            con.SaveChanges();
            return n;
            }
        }
        #endregion
        #region Delete
        public void Delete(accCatalogEntry entity)
        {
				this.Delete(entity, null);
			
        }
		 public void Delete(accCatalogEntry entity, ContextRequest contextRequest)
        {
				ObjectContext context = null;
				this.Delete(entity, true, out context, contextRequest);
			
        }

        
        public void Delete(accCatalogEntry entity, bool saveChanges, out  ObjectContext context, ContextRequest contextRequest, BusinessRulesEventArgs<accCatalogEntry> e = null)
        {
			using (EFPocoContext _con = new EFPocoContext())
			{
				int result = 0;
				
               	BusinessRulesEventArgs<accCatalogEntry> _e = null;
               List<accCatalogEntry> _items = new List<accCatalogEntry>();
                _items.Add(entity);
                if (e == null || e.PreventPartialPropagate == false)
                {
                    OnDeleting(this, _e = (e == null ? new BusinessRulesEventArgs<accCatalogEntry>() { ContextRequest = contextRequest, Item = entity, Items = _items, SaveChanges = saveChanges } : e));
                }
                if (_e != null)
                {
                    if (_e.Cancel)
						{
							context = null;
							return;

						}
					}


				accCatalogEntryAdapter adapter = _con.GetAdapterObject<accCatalogEntryAdapter>(entity);
                adapter.EntityKey = _con.WrappedContext.CreateEntityKey("accCatalogEntries", adapter);
                
	            //adapter = _con.WrappedContext.AttachObjectGraph<accCatalogEntryAdapter>(adapter);
				try{
					_con.WrappedContext.AttachTo("accCatalogEntries", adapter);
                }catch{
					
				}
									//IsDeleted
					bool logicDelete = true;
					if (adapter.IsDeleted != null)
					{
						if (adapter.IsDeleted.Value)
							logicDelete = false;
					}
					if (logicDelete)
					{
											entity = GetBy(p => p.GuidCatalogEntry == entity.GuidCatalogEntry, contextRequest).FirstOrDefault();
						entity.IsDeleted = true;
						Update(entity, contextRequest);
					}
					else {
						_con.WrappedContext.DeleteObject(adapter);
					}
								
				if (!saveChanges)
                    context = _con.WrappedContext;
                else
                    context = null;
				 SaveOptions saveOption = SaveOptions.None;
                if (saveChanges)
                    saveOption = SaveOptions.AcceptAllChangesAfterSave;

				result = _con.WrappedContext.SaveChanges(saveOption);
				if (saveChanges){
					
					}
			if (e == null || e.PreventPartialPropagate == false)
                {

                    if (_e == null)
                        _e = new BusinessRulesEventArgs<accCatalogEntry>() { ContextRequest = contextRequest, Item = entity, Items = _items };

                    OnDeleted(this, _e);
                }

				//return null;
			}            
        }
        public void Delete(List<accCatalogEntry> entities,  ContextRequest contextRequest = null )
        {
				ObjectContext context = null;
			 BusinessRulesEventArgs<accCatalogEntry> _e = null;

                OnDeleting(this, _e = new BusinessRulesEventArgs<accCatalogEntry>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities });
                if (_e != null)
                {
                    if (_e.Cancel)
                    {
                        context = null;
                        return;

                    }
                }
                bool allSucced = true;
                BusinessRulesEventArgs<accCatalogEntry> eToChilds = new BusinessRulesEventArgs<accCatalogEntry>();
                if (_e != null)
                {
                    eToChilds = _e;
                }
                else
                {
                    eToChilds = new BusinessRulesEventArgs<accCatalogEntry>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                }
				foreach (accCatalogEntry item in entities)
				{
					try
                    {
                        this.Delete(item, true, out context, contextRequest, e: eToChilds);
                    }
                    catch (Exception ex)
                    {
                        SFSdotNet.Framework.My.EventLog.Error(ex);
                        allSucced = false;
                    }
				}
				if (_e == null)
                    _e = new BusinessRulesEventArgs<accCatalogEntry>() { ContextRequest = contextRequest, CountResult = entities.Count, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                OnDeleted(this, _e);

			
        }
        #endregion
 
        #region GetCount
		 public int GetCount(Expression<Func<accCatalogEntry, bool>> predicate)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

			return GetCount(predicate, contextRequest);
		}
        public int GetCount(Expression<Func<accCatalogEntry, bool>> predicate, ContextRequest contextRequest)
        {


		
			using (EFPocoContext con = new EFPocoContext())
			{


				if (predicate == null) predicate = PredicateBuilder.True<accCatalogEntry>();
           		predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted == null);
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    		if (contextRequest.User !=null )
                        		if (contextRequest.Company != null )
                        			predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				
				return con.accCatalogEntries.Count(predicate);
			}

        }
		  public int GetCount(string predicate,  ContextRequest contextRequest)
         {
             return GetCount(predicate, null, contextRequest);
         }

         public int GetCount(string predicate)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return GetCount(predicate, contextRequest);
        }
		 public int GetCount(string predicate, string usemode){
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
				return GetCount( predicate,  usemode,  contextRequest);
		 }
        public int GetCount(string predicate, string usemode, ContextRequest contextRequest){
			  string freetext = null;
            Filter filter = new Filter();

              if (predicate.Contains("|"))
              {
                 
                  filter.SetFilterPart("ft", GetSpecificFilter(predicate));
                 
                  filter.ProcessText(predicate.Split(char.Parse("|"))[0]);
                  freetext = predicate.Split(char.Parse("|"))[1];
              }
              else {
                  filter.ProcessText(predicate);
              }
           
			e = null;
			contextRequest.FreeText = freetext;
			contextRequest.UseMode = usemode;
            OnCounting(this, e = new BusinessRulesEventArgs<accCatalogEntry>() {  Filter =filter, ContextRequest = contextRequest });
            if (e != null)
            {
                if (e.Cancel)
                {
                    context = null;
                    return e.CountResult;

                }

            

            }
			 predicate = filter.GetFilterComplete();
			StringBuilder sbQuerySystem = new StringBuilder();
		
					
                    filter.SetFilterPart("de","(IsDeleted != true OR IsDeleted == null)");
			
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    	if (contextRequest.User !=null )
                        	if (contextRequest.Company != null ){
                        		

								filter.SetFilterPart("co", @"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
						
						
							}
							
							}
							if (preventSecurityRestrictions) preventSecurityRestrictions= false;
			using (EFContext con = new EFContext())
			{
				   
                 filter.CleanAndProcess("");
				//string predicateWithFKAndComputed = SFSdotNet.Framework.Linq.Utils.ExtractSpecificProperties("", ref predicate );               
				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed();
               string predicateWithManyRelations = filter.GetFilterChildren();
			   ///QueryUtils.BreakeQuery1(predicate, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
			   predicate = filter.GetFilterComplete();
               if (!string.IsNullOrEmpty(predicate))
               {
				
					
                    return con.accCatalogEntries.Count(System.Linq.Dynamic.DynamicExpression.ParseLambda<accCatalogEntry, bool>(predicate));
					
                }else
                    return con.accCatalogEntries.Count();

			}

		}
         public int GetCount()
        {
            return GetCount(p => true);
        }
        #endregion
        
         public accCatalogEntry Update(accCatalogEntry entity, string paths)
        {
            return Update(entity, paths.Split(char.Parse(",")));
            
        }

        public accCatalogEntry Update(accCatalogEntry entity, string[] paths)
        {
            // Translate
            List<Expression<Func<accCatalogEntry, object>>> pathList = new List<Expression<Func<accCatalogEntry, object>>>();
            for (int i = 0; i <= paths.Length -1; i++)
            {
                var param = Expression.Parameter(typeof(accCatalogEntry), "p");
                var member = MemberExpression.PropertyOrField(param, paths[i]);

                Expression<Func<accCatalogEntry, object>> path = p => member;
                pathList.Add(path.Expand());
            }
			ObjectContext context = null;
			 return Update(entity, true,null, out context,  pathList.ToArray());
           //return Update(entity, pathList.ToArray());
        }

        public void Update(List<accCatalogEntry> entities, string paths)
        {
            foreach (var entity in entities )
            {
                Update(entity, paths);
            }
        }
		public accCatalogEntry Create(accCatalogEntry entity, ContextRequest contextRequest, string paths)
        {
          

            if (string.IsNullOrEmpty(paths))
                return Create(entity, contextRequest);

            return Create(entity, contextRequest, paths.Split(char.Parse(",")));
        }
        public accCatalogEntry Create(accCatalogEntry entity, string paths)
        {
			 if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return Create(entity, contextRequest, paths);

        }

        public  void Create(List<accCatalogEntry> entities, ContextRequest requestContext, string paths)
        {
            foreach (var entity in entities)
            {
                Create(entity,requestContext, paths);
            }
        }

        public void Create(List<accCatalogEntry> entities, string[] paths)
        {
            foreach (var entity in entities)
            {
                Create(entity, null, paths);
            }
        }
        
        public accCatalogEntry  Create(accCatalogEntry entity, ContextRequest contextRequest, string[] paths)
        {
            List<Expression<Func<accCatalogEntry, object>>> pathList = new List<Expression<Func<accCatalogEntry, object>>>();
            for (int i = 0; i < paths.Length - 1; i++)
            {
                var param = Expression.Parameter(typeof(accCatalogEntry), "p");
                var member = MemberExpression.PropertyOrField(param, paths[i]);

                Expression<Func<accCatalogEntry, object>> path = p => member;
                pathList.Add(path.Expand());
            }
            return Create(entity, contextRequest, pathList.ToArray());
        }
        public void Delete(List<accCatalogEntry.CompositeKey> entityKeys)
        {

            List<accCatalogEntry> items = new List<accCatalogEntry>();
            foreach (var itemKey in entityKeys)
            {
                items.Add(GetByKey(itemKey.GuidCatalogEntry));
            }

            Delete(items);

        }
		
		
	}
		public partial class accExpenseMatchInExesBR{
	 	
           
		 #region Partial methods

           partial void OnUpdating(object sender, BusinessRulesEventArgs<accExpenseMatchInEx> e);

            partial void OnUpdated(object sender, BusinessRulesEventArgs<accExpenseMatchInEx> e);

            partial void OnCreating(object sender, BusinessRulesEventArgs<accExpenseMatchInEx> e);
            partial void OnCreated(object sender, BusinessRulesEventArgs<accExpenseMatchInEx> e);

            partial void OnDeleting(object sender, BusinessRulesEventArgs<accExpenseMatchInEx> e);
            partial void OnDeleted(object sender, BusinessRulesEventArgs<accExpenseMatchInEx> e);

            partial void OnGetting(object sender, BusinessRulesEventArgs<accExpenseMatchInEx> e);
            partial void OnTaken(object sender, BusinessRulesEventArgs<accExpenseMatchInEx> e);
            partial void OnCounting(object sender, BusinessRulesEventArgs<accExpenseMatchInEx> e);
 
 
            #endregion
			
		private static accExpenseMatchInExesBR singlenton =null;
				public static accExpenseMatchInExesBR NewInstance(){
					return  new accExpenseMatchInExesBR();
					
				}
		public static accExpenseMatchInExesBR Instance{
			get{
				if (singlenton == null)
					singlenton = new accExpenseMatchInExesBR();
				return singlenton;
			}
		}
		private bool preventSecurityRestrictions = false;
		 public bool PreventAuditTrail { get; set;  }
		#region Fields
        EFPocoContext context = null;
        #endregion
        #region Constructor
        public accExpenseMatchInExesBR()
        {
            context = new EFPocoContext();
        }
		 public accExpenseMatchInExesBR(bool preventSecurity)
            {
                this.preventSecurityRestrictions = preventSecurity;
				context = new EFPocoContext();
            }
        #endregion
		
		#region Get

 		public IQueryable<accExpenseMatchInEx> Get()
        {
            //using (EFContext con = new EFContext())
            //{
				EFContext con = new EFContext();
                var query = con.accExpenseMatchInExes.AsQueryable();
                con.ContextOptions.ProxyCreationEnabled = false;

                //query = ContextQueryBuilder<Nutrient>.ApplyContextQuery(query, contextRequest);

                return query;




            //}

        }
		
		public List<accExpenseMatchInEx> GetAll()
        {
            return this.GetBy(p => true);
        }
        public List<accExpenseMatchInEx> GetAll(string includes)
        {
            return this.GetBy(p => true, includes);
        }
        public accExpenseMatchInEx GetByKey(Guid guidIncomeMatchInEx)
        {
            return GetByKey(guidIncomeMatchInEx, true);
        }
        public accExpenseMatchInEx GetByKey(Guid guidIncomeMatchInEx, bool loadIncludes)
        {
            accExpenseMatchInEx item = null;
			var query = PredicateBuilder.True<accExpenseMatchInEx>();
                    
			string strWhere = @"GuidIncomeMatchInEx = Guid(""" + guidIncomeMatchInEx.ToString()+@""")";
            Expression<Func<accExpenseMatchInEx, bool>> predicate = null;
            if (!string.IsNullOrEmpty(strWhere))
                predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<accExpenseMatchInEx, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
			 ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();
            contextRequest.CustomQuery.FilterExpressionString = strWhere;

			//item = GetBy(predicate, loadIncludes, contextRequest).FirstOrDefault();
			item = GetBy(strWhere,loadIncludes,contextRequest).FirstOrDefault();
            return item;
        }
         public List<accExpenseMatchInEx> GetBy(string strWhere, bool loadRelations, ContextRequest contextRequest)
        {
            if (!loadRelations)
                return GetBy(strWhere, contextRequest);
            else
                return GetBy(strWhere, contextRequest, "");

        }
		  public List<accExpenseMatchInEx> GetBy(string strWhere, bool loadRelations)
        {
              if (!loadRelations)
                return GetBy(strWhere, new ContextRequest());
            else
                return GetBy(strWhere, new ContextRequest(), "");

        }
         public accExpenseMatchInEx GetByKey(Guid guidIncomeMatchInEx, params Expression<Func<accExpenseMatchInEx, object>>[] includes)
        {
            accExpenseMatchInEx item = null;
			string strWhere = @"GuidIncomeMatchInEx = Guid(""" + guidIncomeMatchInEx.ToString()+@""")";
          Expression<Func<accExpenseMatchInEx, bool>> predicate = null;
            if (!string.IsNullOrEmpty(strWhere))
                predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<accExpenseMatchInEx, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
        item = GetBy(predicate, includes).FirstOrDefault();
         ////   item = GetBy(strWhere,includes).FirstOrDefault();
			return item;

        }
        public accExpenseMatchInEx GetByKey(Guid guidIncomeMatchInEx, string includes)
        {
            accExpenseMatchInEx item = null;
			string strWhere = @"GuidIncomeMatchInEx = Guid(""" + guidIncomeMatchInEx.ToString()+@""")";
            
			
            item = GetBy(strWhere, includes).FirstOrDefault();
            return item;

        }
		 public accExpenseMatchInEx GetByKey(Guid guidIncomeMatchInEx, string usemode, string includes)
		{
			return GetByKey(guidIncomeMatchInEx, usemode, null, includes);

		 }
		 public accExpenseMatchInEx GetByKey(Guid guidIncomeMatchInEx, string usemode, ContextRequest context,  string includes)
        {
            accExpenseMatchInEx item = null;
			string strWhere = @"GuidIncomeMatchInEx = Guid(""" + guidIncomeMatchInEx.ToString()+@""")";
			if (context == null)
				context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
			context.CustomQuery.IsByKey = true;
            context.CustomQuery.FilterExpressionString = strWhere;
            context.UseMode = usemode;
            item = GetBy(strWhere,context , includes).FirstOrDefault();
            return item;

        }

        #region Dynamic Predicate
        public List<accExpenseMatchInEx> GetBy(Expression<Func<accExpenseMatchInEx, bool>> predicate, int? pageSize, int? page)
        {
            return this.GetBy(predicate, pageSize, page, null, null);
        }
        public List<accExpenseMatchInEx> GetBy(Expression<Func<accExpenseMatchInEx, bool>> predicate, ContextRequest contextRequest)
        {

            return GetBy(predicate, contextRequest,"");
        }
        
        public List<accExpenseMatchInEx> GetBy(Expression<Func<accExpenseMatchInEx, bool>> predicate, ContextRequest contextRequest, params Expression<Func<accExpenseMatchInEx, object>>[] includes)
        {
            StringBuilder sb = new StringBuilder();
           if (includes != null)
            {
                foreach (var path in includes)
                {

						if (sb.Length > 0) sb.Append(",");
						sb.Append(SFSdotNet.Framework.Linq.Utils.IncludeToString<accExpenseMatchInEx>(path));

               }
            }
            return GetBy(predicate, contextRequest, sb.ToString());
        }
        
        
        public List<accExpenseMatchInEx> GetBy(Expression<Func<accExpenseMatchInEx, bool>> predicate, string includes)
        {
			ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";

            return GetBy(predicate, context, includes);
        }

        public List<accExpenseMatchInEx> GetBy(Expression<Func<accExpenseMatchInEx, bool>> predicate, params Expression<Func<accExpenseMatchInEx, object>>[] includes)
        {
			if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }
			ContextRequest context = new ContextRequest();
			            context.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            context.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";
            return GetBy(predicate, context, includes);
        }

      
		public bool DisableCache { get; set; }
		 public List<accExpenseMatchInEx> GetBy(Expression<Func<accExpenseMatchInEx, bool>> predicate, ContextRequest contextRequest, string includes)
        {
            using (EFPocoContext con = new EFPocoContext())
            {
				if (DisableCache) 
                	con.CachingPolicy = EFCachingProvider.Caching.CachingPolicy.NoCaching;

				List<accExpenseMatchInEx> result = null;
                 e = null;
	
				OnGetting(con, e = new BusinessRulesEventArgs<accExpenseMatchInEx>() {  FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null) });

               // OnGetting(con,e = new BusinessRulesEventArgs<accExpenseMatchInEx>() { FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = contextRequest.CustomQuery.FilterExpressionString});
				   if (e != null) {
				    predicate = e.FilterExpression;
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				con.EnableChangeTrackingUsingProxies = false;
				con.WrappedContext.accExpenseMatchInExes.MergeOption = MergeOption.NoTracking;
                con.WrappedContext.ContextOptions.ProxyCreationEnabled = false;
                if (predicate == null) predicate = PredicateBuilder.True<accExpenseMatchInEx>();
 				string fkIncludes = "accExpensePending,accIncomeExpens";
                if(contextRequest!=null){
					if (contextRequest.CustomQuery != null)
					{
						if (contextRequest.CustomQuery.IncludeForeignKeyPaths != null) {
							if (contextRequest.CustomQuery.IncludeForeignKeyPaths.Value == false)
								fkIncludes = "";
						}
					}
				}
				if (!string.IsNullOrEmpty(includes))
					includes = includes + "," + fkIncludes;
				else
					includes = fkIncludes;
                
                var es = con.accExpenseMatchInExes;

                IQueryable<accExpenseMatchInEx> query = es.AsQueryable();

                                if (!string.IsNullOrEmpty(includes))
                {
                    foreach (string include in includes.Split(char.Parse(",")))
                    {
						if (!string.IsNullOrEmpty(include))
                            query = query.Include(include);
                    }
                }
                    predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
					 	if (!preventSecurityRestrictions)
						{
							if (contextRequest != null )
		                    	if (contextRequest.User !=null )
		                        	if (contextRequest.Company != null)
		                        		predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				query =query.Where(predicate);
                query = ContextQueryBuilder<accExpenseMatchInEx>.ApplyContextQuery(query, contextRequest);

                result = query.ToList<accExpenseMatchInEx>();
				  
                if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e =  new BusinessRulesEventArgs<accExpenseMatchInEx>() { Items= result, IncludingComputedLinq = false, ContextRequest = contextRequest,  FilterExpression = predicate } :  e);
  
			

                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
            }
        }
		public void UpdateAgile(accExpenseMatchInEx item, params string[] fields)
         {
             List<accExpenseMatchInEx> list = new List<accExpenseMatchInEx>();
             list.Add(item);
             this.UpdateBulk(list, fields);
         }
		public void UpdateBulk(List<accExpenseMatchInEx>  items, params string[] fields)
         {
             SFSdotNet.Framework.My.ContextRequest req = new SFSdotNet.Framework.My.ContextRequest();
             req.CustomQuery = new SFSdotNet.Framework.My.CustomQuery();
             foreach (var field in fields)
             {
                 req.CustomQuery.SpecificProperties.Add(field);
             }
             UpdateBulk(items, req);

         }
        public void UpdateBulk(List<accExpenseMatchInEx> items, ContextRequest req)
        {
            using (EFContext con = new EFContext())
            {



                foreach (var item in items)
                {
                    var setT = con.CreateObjectSet<accExpenseMatchInEx>("accExpenseMatchInExes");


                    var itemForAttach = new accExpenseMatchInEx();
			itemForAttach.GuidIncomeMatchInEx = item.GuidIncomeMatchInEx;
					
                    itemForAttach = SFSdotNet.Framework.Entities.ConvertEntity.SetProperties<accExpenseMatchInEx>(item, itemForAttach, null, req.CustomQuery.SpecificProperties.ToArray());
                    setT.Attach(itemForAttach);


                    foreach (var property in req.CustomQuery.SpecificProperties)
                    {
						
                        if (property != "GuidIncomeMatchInEx")
                            con.ObjectStateManager.GetObjectStateEntry(itemForAttach).SetModifiedProperty(property);

                    }

                }
                con.SaveChanges();


            }
        }
		/*public int Update(List<accExpenseMatchInEx> items, ContextRequest contextRequest)
            {
                int result = 0;
                using (EFContext con = new EFContext())
                {
                   
                

                    foreach (var item in items)
                    {
                        //secMessageToUser messageToUser = new secMessageToUser();
                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            item.GetType().GetProperty(prop).SetValue(item, item.GetType().GetProperty(prop).GetValue(item));
                        }
                        //messageToUser.GuidMessageToUser = (Guid)item.GetType().GetProperty("GuidMessageToUser").GetValue(item);

                        var setObject = con.CreateObjectSet<accExpenseMatchInEx>("accExpenseMatchInExes");
                        //messageToUser.Readed = DateTime.UtcNow;
                        setObject.Attach(item);
                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            con.ObjectStateManager.GetObjectStateEntry(item).SetModifiedProperty(prop);
                        }
                       
                    }
                    result = con.SaveChanges();

                    


                }
                return result;
            }
           */
        public List<accExpenseMatchInEx> GetBy(string predicateString, ContextRequest contextRequest, string includes)
        {
            using (EFContext con = new EFContext())
            {
				if (DisableCache) 
                	con.CachingPolicy = EFCachingProvider.Caching.CachingPolicy.NoCaching;

				Filter filter = new Filter();
                if (predicateString.Contains("|"))
                {
                    string ft = GetSpecificFilter(predicateString);
                    if (!string.IsNullOrEmpty(ft))
                        filter.SetFilterPart("ft", ft);
                   
                    contextRequest.FreeText = predicateString.Split(char.Parse("|"))[1];
                    var q1 = predicateString.Split(char.Parse("|"))[0];
                    if (!string.IsNullOrEmpty(q1))
                    {
                        filter.ProcessText(q1);
                    }
                }
                else {
                    filter.ProcessText(predicateString);
                }

				List<accExpenseMatchInEx> result = null;
                 e = null;
					OnGetting(con, e = new BusinessRulesEventArgs<accExpenseMatchInEx>() { Filter = filter, ContextRequest = contextRequest /*, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null)*/ });

                  //OnGetting(con,e = new BusinessRulesEventArgs<accExpenseMatchInEx>() {  ContextRequest = contextRequest, FilterExpressionString = predicateString });
			   	if (e != null) {
				    //predicateString = e.GetQueryString();
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				//	 else {
                //      predicateString = predicateString.Replace("*extraFreeText*", "").Replace("()","");
                //  }
				//con.EnableChangeTrackingUsingProxies = false;
				con.accExpenseMatchInExes.MergeOption = MergeOption.NoTracking;
                con.ContextOptions.ProxyCreationEnabled = false;
                //if (predicate == null) predicate = PredicateBuilder.True<accExpenseMatchInEx>();
 				string fkIncludes = "accExpensePending,accIncomeExpens";
                if(contextRequest!=null){
					if (contextRequest.CustomQuery != null)
					{
						if (contextRequest.CustomQuery.IncludeForeignKeyPaths != null) {
							if (contextRequest.CustomQuery.IncludeForeignKeyPaths.Value == false)
								fkIncludes = "";
						}
					}
				}else{
                    contextRequest = new ContextRequest();
                    contextRequest.CustomQuery = new CustomQuery();

                }
				if (!string.IsNullOrEmpty(includes))
					includes = includes + "," + fkIncludes;
				else
					includes = fkIncludes;
                
                var es = con.accExpenseMatchInExes;
				IQueryable<accExpenseMatchInEx> query = es.AsQueryable();
		
				// include relations FK
				if(string.IsNullOrEmpty(includes) ){
					includes ="";
				}
				bool includeaccExpensePending = includes.Split(char.Parse(",")).Contains("accExpensePending");

				bool includeaccIncomeExpens = includes.Split(char.Parse(",")).Contains("accIncomeExpens");

				StringBuilder sbQuerySystem = new StringBuilder();
                    //predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				

				//if (!string.IsNullOrEmpty(predicateString))
                //      sbQuerySystem.Append(" And ");
                //sbQuerySystem.Append(" (IsDeleted != true Or IsDeleted = null) ");
				 filter.SetFilterPart("de", "(IsDeleted != true OR IsDeleted = null)");


					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
	                    	if (contextRequest.User !=null )
	                        	if (contextRequest.Company != null ){
	                        		//if (sbQuerySystem.Length > 0)
	                        		//	    			sbQuerySystem.Append( " And ");	
									//sbQuerySystem.Append(@" (GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
									filter.SetFilterPart("co",@"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @"""))");
								}
						}	
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				//string predicateString = predicate.ToDynamicLinq<accExpenseMatchInEx>();
				//predicateString += sbQuerySystem.ToString();
				filter.CleanAndProcess("");

				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed(); //SFSdotNet.Framework.Linq.Utils.ExtractSpecificProperties("", ref predicateString );               
                string predicateWithManyRelations = filter.GetFilterChildren(); //SFSdotNet.Framework.Linq.Utils.CleanPartExpression(predicateString);

                //QueryUtils.BreakeQuery1(predicateString, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
                var _queryable = query.AsQueryable();
                if (!string.IsNullOrEmpty(predicateWithManyRelations))
                    _queryable = _queryable.Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams);
				if (contextRequest.CustomQuery.SpecificProperties.Count > 0)
                {

                    StringBuilder sbProps = new StringBuilder();
                    contextRequest.CustomQuery.SpecificProperties.Add("GuidIncomeMatchInEx");
                    
					foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                    {
						if(sbProps.Length > 0)
							sbProps.Append(",");
                        sbProps.Append(prop);
                    }
					    IQueryable  queryableSelective = null ;
					  
					  if (!string.IsNullOrEmpty(predicateWithManyRelations))
							queryableSelective = con.accExpenseMatchInExes.AsQueryable().Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams).Select(string.Format("new({0})", sbProps.ToString()));
					else
						queryableSelective = con.accExpenseMatchInExes.AsQueryable().Select(string.Format("new({0})", sbProps.ToString()));


                    //if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
					//	queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

                    QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
                    
					if (!string.IsNullOrEmpty(queryOps.OrderByAndSort))
                        queryableSelective = queryableSelective.OrderBy(queryOps.OrderByAndSort);
                    if (queryOps.Skip != null)
                    {
                        queryableSelective = queryableSelective.Skip(queryOps.Skip.Value);
                    }
                    if (queryOps.PageSize != null)
                    {
                        queryableSelective = queryableSelective.Take(queryOps.PageSize.Value);
                    }
                    //var results = queryableSelective.ToList();
                    result = new List<accExpenseMatchInEx>();
                    accExpenseMatchInEx itemDef = null;
                    foreach (var item in queryableSelective)
                    {
                        itemDef = new accExpenseMatchInEx();

                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            if (!prop.Contains("."))
                            {
                                itemDef.GetType().GetProperty(prop).SetValue(itemDef, item.GetType().GetProperty(prop).GetValue(item));
                            }
                            else {
                                throw new Exception("La seleccion de relaciones aún no esta soportada");
                            }

                        }

                        result.Add(itemDef);
                    }

                }
                else
                {
				var  queryable = _queryable.Select(                    
				p => 
                        new
                    {
					GuidIncomeMatchInEx = p.GuidIncomeMatchInEx
,CreatedDate = p.CreatedDate
,UpdatedDate = p.UpdatedDate
,CreatedBy = p.CreatedBy
,UpdatedBy = p.UpdatedBy
,IsDeleted = p.IsDeleted
,GuidCompany = p.GuidCompany

,accExpensePending = includeaccExpensePending ? p.accExpensePending:null
,accIncomeExpens = includeaccIncomeExpens ? p.accIncomeExpens:null


	
                    }
                    
                    );
					
				
                 if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
                    queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

				QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
            	if (!string.IsNullOrEmpty(queryOps.OrderByAndSort))
					queryable = queryable.OrderBy(queryOps.OrderByAndSort);
               	if (queryOps.Skip != null)
                {
                    queryable = queryable.Skip(queryOps.Skip.Value);
                }
                if (queryOps.PageSize != null)
                {
                    queryable = queryable.Take (queryOps.PageSize.Value);
                }
                result = queryable.AsEnumerable().
                    Select(
                    p =>  new accExpenseMatchInEx()
                    {
					GuidIncomeMatchInEx = p.GuidIncomeMatchInEx
,CreatedDate = p.CreatedDate
,UpdatedDate = p.UpdatedDate
,CreatedBy = p.CreatedBy
,UpdatedBy = p.UpdatedBy
,IsDeleted = p.IsDeleted
,GuidCompany = p.GuidCompany
,accExpensePending = p.accExpensePending
,accIncomeExpens = p.accIncomeExpens

                    }
                     ).ToList();
				}


			 if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e = new BusinessRulesEventArgs<accExpenseMatchInEx>() { Items= result, IncludingComputedLinq = true, ContextRequest = contextRequest, FilterExpressionString  = predicateString } :  e);
  
			
  
                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
            }
        }
		public List<accExpenseMatchInEx> GetBy(Expression<Func<accExpenseMatchInEx, bool>> predicate, bool loadRelations, ContextRequest contextRequest)
        {
			if(!loadRelations)
				return GetBy(predicate, contextRequest);
			else
				return GetBy(predicate, contextRequest, "");

        }

        public List<accExpenseMatchInEx> GetBy(Expression<Func<accExpenseMatchInEx, bool>> predicate, int? pageSize, int? page, string orderBy, SFSdotNet.Framework.Data.SortDirection? sortDirection)
        {
            return GetBy(predicate, new ContextRequest() { CustomQuery = new CustomQuery() { Page = page, PageSize = pageSize, OrderBy = orderBy, SortDirection = sortDirection } });
        }
        public List<accExpenseMatchInEx> GetBy(Expression<Func<accExpenseMatchInEx, bool>> predicate)
        {

			if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }
			ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();

			contextRequest.CurrentContext = SFSdotNet.Framework.My.Context.CurrentContext;
			            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

            contextRequest.CustomQuery.FilterExpressionString = null;
            return this.GetBy(predicate, contextRequest, "");
        }
        #endregion
        #region Dynamic String
		private string GetSpecificFilter(string filter) {
            string result = "";
		    //string linqFilter = String.Empty;
            string freeTextFilter = String.Empty;
            if (filter.Contains("|"))
            {
               // linqFilter = filter.Split(char.Parse("|"))[0];
                freeTextFilter = filter.Split(char.Parse("|"))[1];
            }
            //else {
            //    freeTextFilter = filter;
            //}
            //else {
            //    linqFilter = filter;
            //}
			// linqFilter = SFSdotNet.Framework.Linq.Utils.ReplaceCustomDateFilters(linqFilter);
            //string specificFilter = linqFilter;
            if (!string.IsNullOrEmpty(freeTextFilter))
            {
                System.Text.StringBuilder sbCont = new System.Text.StringBuilder();
                /*if (specificFilter.Length > 0)
                {
                    sbCont.Append(" AND ");
                    sbCont.Append(" ({0})");
                }
                else
                {
                    sbCont.Append("{0}");
                }*/
                //var words = freeTextFilter.Split(char.Parse(" "));
				var word = freeTextFilter;
                System.Text.StringBuilder sbSpec = new System.Text.StringBuilder();
                 int nWords = 1;
				/*foreach (var word in words)
                {
					if (word.Length > 0){
                    if (sbSpec.Length > 0) sbSpec.Append(" AND ");
					if (words.Length > 1) sbSpec.Append("("); */
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
								
					//if (sbSpec.Length > 2)
					//	sbSpec.Append(" OR "); // test
					sbSpec.Append(string.Format(@"accIncomeExpens.Comments.Contains(""{0}"")", word));
								 //sbSpec.Append("*extraFreeText*");

                    /*if (words.Length > 1) sbSpec.Append(")");
					
					nWords++;

					}

                }*/
                //specificFilter = string.Format("{0}{1}", specificFilter, string.Format(sbCont.ToString(), sbSpec.ToString()));
                                 result = sbSpec.ToString();  
            }
			//result = specificFilter;
			
			return result;

		}
	
			public List<accExpenseMatchInEx> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  params object[] extraParams)
        {
			return GetBy(filter, pageSize, page, orderBy, orderDir,  null, extraParams);
		}
           public List<accExpenseMatchInEx> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir, string usemode, params object[] extraParams)
            { 
                return GetBy(filter, pageSize, page, orderBy, orderDir, usemode, null, extraParams);
            }


		public List<accExpenseMatchInEx> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  string usemode, ContextRequest context, params object[] extraParams)

        {

            // string freetext = null;
            //if (filter.Contains("|"))
            //{
            //    int parts = filter.Split(char.Parse("|")).Count();
            //    if (parts > 1)
            //    {

            //        freetext = filter.Split(char.Parse("|"))[1];
            //    }
            //}
		
            //string specificFilter = "";
            //if (!string.IsNullOrEmpty(filter))
            //  specificFilter=  GetSpecificFilter(filter);
            if (string.IsNullOrEmpty(orderBy))
            {
			                orderBy = "UpdatedDate";
            }
			//orderDir = "desc";
			SFSdotNet.Framework.Data.SortDirection direction = SFSdotNet.Framework.Data.SortDirection.Ascending;
            if (!string.IsNullOrEmpty(orderDir))
            {
                if (orderDir == "desc")
                    direction = SFSdotNet.Framework.Data.SortDirection.Descending;
            }
            if (context == null)
                context = new ContextRequest();
			else
                context.CustomQuery = new CustomQuery();
             //context.FreeText = freetext;
             context.UseMode = usemode;
             context.CustomQuery =new SFSdotNet.Framework.My.CustomQuery()
 
                {
                    ExtraParams = extraParams,

                    OrderBy = orderBy,
                    SortDirection = direction,
                    Page = page,
                    PageSize = pageSize
               };
            

            if (!preventSecurityRestrictions) {
			 if (context.CurrentContext == null)
                {
					if (SFSdotNet.Framework.My.Context.CurrentContext != null &&  SFSdotNet.Framework.My.Context.CurrentContext.Company != null && SFSdotNet.Framework.My.Context.CurrentContext.User != null)
					{
						context.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
						context.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

					}
					else {
						throw new Exception("The security rule require a specific user and company");
					}
				}
            }
            return GetBy(filter, context);
  
        }


        public List<accExpenseMatchInEx> GetBy(string strWhere, ContextRequest contextRequest)
        {
        	#region old code
				
				 //Expression<Func<tvsReservationTransport, bool>> predicate = null;
				string strWhereClean = strWhere.Replace("*extraFreeText*", "").Replace("()", "");
                //if (!string.IsNullOrEmpty(strWhereClean)){

                //    object[] extraParams = null;
                //    //if (contextRequest != null )
                //    //    if (contextRequest.CustomQuery != null )
                //    //        extraParams = contextRequest.CustomQuery.ExtraParams;
                //    //predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<tvsReservationTransport, bool>(strWhereClean, extraParams != null? extraParams.Cast<Guid>(): null);				
                //}
				 if (contextRequest == null)
                {
                    contextRequest = new ContextRequest();
                    if (contextRequest.CustomQuery == null)
                        contextRequest.CustomQuery = new CustomQuery();
                }
                  if (!preventSecurityRestrictions) {
					if (contextRequest.User == null || contextRequest.Company == null)
                      {
                     if (SFSdotNet.Framework.My.Context.CurrentContext.Company != null && SFSdotNet.Framework.My.Context.CurrentContext.User != null)
                     {
                         contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                         contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

                     }
                     else {
                         throw new Exception("The security rule require a specific User and Company ");
                     }
					 }
                 }
            contextRequest.CustomQuery.FilterExpressionString = strWhere;
				//return GetBy(predicate, contextRequest);  

			#endregion				
				
                    return GetBy(strWhere, contextRequest, "");  


        }
       public List<accExpenseMatchInEx> GetBy(string strWhere)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
			
            return GetBy(strWhere, context, null);
        }

        public List<accExpenseMatchInEx> GetBy(string strWhere, string includes)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
            return GetBy(strWhere, context, includes);
        }

        #endregion
        #endregion
		
		  #region SaveOrUpdate
        private accExpenseMatchInEx Save(accExpenseMatchInEx entity, bool saveChanges, EFPocoContext con)
        {
				ObjectContext context = null;
            return Update(entity, saveChanges,null, out context);

			
        }
		 public  accExpenseMatchInEx Create( accExpenseMatchInEx entity, params Expression<Func< accExpenseMatchInEx, object>>[] paths)
         {
             return Create(entity, null, paths);

         }
 		 public accExpenseMatchInEx Create(accExpenseMatchInEx entity)
        {
				ObjectContext context = null;
				    if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: Create");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

				return this.Create(entity, true, contextRequest, out context);


        }
        public accExpenseMatchInEx Create(accExpenseMatchInEx entity, ContextRequest contextRequest)
         {
             ObjectContext context = null;
             return this.Create(entity, true, contextRequest,out context);

         }
         public accExpenseMatchInEx Create(accExpenseMatchInEx entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext context)
        {
                    return Create(entity, saveChanges , contextRequest , out context, null);
        }
         public accExpenseMatchInEx Create(accExpenseMatchInEx entity, ContextRequest contextRequest, params Expression<Func<accExpenseMatchInEx,object>>[] paths)
        {
            ObjectContext context = null;
            if(paths != null)
				return Create(entity, true,contextRequest, out context, paths);
			else 
				return Create(entity, true,contextRequest, out context);
        }
        public accExpenseMatchInEx Create(accExpenseMatchInEx entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext context, params Expression<Func<accExpenseMatchInEx,object>>[] pocopaths)
        {
			using (EFPocoContext con = new EFPocoContext())
			{
				accExpenseMatchInEx itemResult = null;
#region Autos


			entity.CreatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.CreatedBy = contextRequest.User.GuidUser;
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.UpdatedBy = contextRequest.User.GuidUser;
	
			if (contextRequest != null)
				if(contextRequest.User != null)
					if (contextRequest.Company != null)
						entity.GuidCompany = contextRequest.Company.GuidCompany;
	

#endregion
                e = null;
                OnCreating(this,e = new BusinessRulesEventArgs<accExpenseMatchInEx>() { ContextRequest = contextRequest, Item=entity, PathExpressions = pocopaths, SaveChanges =saveChanges });
				   if (e != null) {
						if (e.Cancel)
						{
							context = null;
							return e.Item;

						}
					}

                    if (entity.GuidIncomeMatchInEx == Guid.Empty)
                   {
                       entity.GuidIncomeMatchInEx = Guid.NewGuid();

                   }



				accExpenseMatchInExAdapter adapter = con.GetAdapterObject<accExpenseMatchInExAdapter>(entity);;
				List<Expression<Func<accExpenseMatchInExAdapter, object>>> paths = new List<Expression<Func<accExpenseMatchInExAdapter,object>>>();
                
			    if (pocopaths != null && pocopaths.Length > 0)
                {
					// Translate
                    foreach (var pocopath in pocopaths)
                    {
                        var param = Expression.Parameter(typeof(accExpenseMatchInExAdapter), "p");
                        var member = MemberExpression.PropertyOrField(param, ((System.Linq.Expressions.MemberExpression)(((System.Linq.Expressions.LambdaExpression)(pocopath)).Body)).Member.Name);
                        Expression<Func<accExpenseMatchInExAdapter, object>> path  = null;
                        switch(member.Member.Name){
							
							default:
								path = p => member;
							break;
                        }

                        
                       paths.Add(path.Expand());
                    }
                }
                object aux = null;
					paths.Add(p => p.accExpensePending.WithoutUpdate());

					paths.Add(p => p.accIncomeExpens.WithoutUpdate());

					//paths = pathBuilder.ToArray();

				if (adapter.accExpensePending != null ){
					if(adapter.accExpensePending.EntityKey == null) adapter.accExpensePending.EntityKey = con.WrappedContext.CreateEntityKey("accExpensePendings", adapter.accExpensePending);
				}
				if (adapter.accIncomeExpens != null ){
					if(adapter.accIncomeExpens.EntityKey == null) adapter.accIncomeExpens.EntityKey = con.WrappedContext.CreateEntityKey("accIncomeExpenses", adapter.accIncomeExpens);
				}



                //con.WrappedContext.AttachObjectGraph<accExpenseMatchInExAdapter>(adapter, p=>p.accExpensePending, p=>p.accIncomeExpens);
                con.WrappedContext.AttachObjectGraph<accExpenseMatchInExAdapter>(adapter, paths.ToArray());
              	if (saveChanges){
                    con.WrappedContext.SaveChanges(SaveOptions.AcceptAllChangesAfterSave);
					 
				}
                else
                    con.WrappedContext.SaveChanges(SaveOptions.None);
                if (!saveChanges)
                    context = con.WrappedContext;
                else
                    context = null;
				itemResult = adapter.PocoEntity;
                if (e != null)
                {
                    e.Item = itemResult;
                }
                OnCreated(this, e == null ? e = new BusinessRulesEventArgs<accExpenseMatchInEx>() { ContextRequest = contextRequest, Item = itemResult, PathExpressions = pocopaths, SaveChanges = saveChanges } : e);



                if (e != null)
                {
                    itemResult = e.Item;
                }
                              return itemResult;
            }
        }
        BusinessRulesEventArgs<accExpenseMatchInEx> e = null;
        public void Create(List<accExpenseMatchInEx> entities)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            Create(entities, contextRequest, null);
        }
        public void Create(List<accExpenseMatchInEx> entities, ContextRequest contextRequest)
        
        {
			ObjectContext context = null;
            	foreach (accExpenseMatchInEx entity in entities)
				{
					this.Create(entity, true, contextRequest, out context);
				}
        }
         public accExpenseMatchInEx Update(accExpenseMatchInEx entity)
        {
            if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return Update(entity, contextRequest);
        }
        public accExpenseMatchInEx Update(accExpenseMatchInEx entity, ContextRequest requestContext)
        {
			  ObjectContext context = null;
            return Update(entity, true,requestContext, out context);
         }
		public  accExpenseMatchInEx Update(accExpenseMatchInEx entity, params Expression<Func<accExpenseMatchInEx, object>>[] pocopaths)
        {
			  ObjectContext context = null;
              return Update(entity, true, null, out context, pocopaths);
         }
        public accExpenseMatchInEx Update(accExpenseMatchInEx entity, ContextRequest requestContext, bool saveChanges, out ObjectContext outcontext)
        {
			return Update(entity, saveChanges,requestContext, out outcontext, null);
		}
         public accExpenseMatchInEx Update(accExpenseMatchInEx entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext outcontext, params Expression<Func<accExpenseMatchInEx,object>>[] pocopaths)
        {
		 if ((System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null) && contextRequest == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Update");
            }
            if (contextRequest == null)
            {
                contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            }

			using (EFPocoContext con = new EFPocoContext())
			{
				accExpenseMatchInEx  itemResult = null;

	
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
			if(contextRequest.User != null)
				entity.UpdatedBy = contextRequest.User.GuidUser;

	    var oldentity = GetBy(p => p.GuidIncomeMatchInEx == entity.GuidIncomeMatchInEx, contextRequest).FirstOrDefault();
		if (oldentity != null) {
		
            entity.CreatedDate = oldentity.CreatedDate;
            entity.CreatedBy = oldentity.CreatedBy;
	
            entity.GuidCompany = oldentity.GuidCompany;
	
			

		}

				e = null;
                OnUpdating(this,e = new BusinessRulesEventArgs<accExpenseMatchInEx>() { ContextRequest = contextRequest, Item=entity, PathExpressions = pocopaths, SaveChanges =saveChanges });
				   if (e != null) {
						if (e.Cancel)
						{
							outcontext = null;
							return e.Item;

						}
					}

                accExpenseMatchInExAdapter adapter = con.GetAdapterObject<accExpenseMatchInExAdapter>(entity);
                adapter.EntityKey = con.WrappedContext.CreateEntityKey("accExpenseMatchInExes", adapter);
				    var es = con.accExpenseMatchInExes;
				List<Expression<Func<accExpenseMatchInExAdapter, object>>> paths = new List<Expression<Func<accExpenseMatchInExAdapter,object>>>();
                /* if (pocopaths != null)
                    if (pocopaths.Length == 0)
                        pocopaths = null;*/

			    if (pocopaths != null && pocopaths.Length > 0)
                {
					// Translate
                    foreach (var pocopath in pocopaths)
                    {
                        var param = Expression.Parameter(typeof(accExpenseMatchInExAdapter), "p");
                        var member = MemberExpression.PropertyOrField(param, ((System.Linq.Expressions.MemberExpression)(((System.Linq.Expressions.LambdaExpression)(pocopath)).Body)).Member.Name);
                        Expression<Func<accExpenseMatchInExAdapter, object>> path  = null;
                        switch(member.Member.Name){
							
							default:
								path = p => member;
							break;
                        }

                        paths.Add(path.Expand());
 					}
                }
                else {
                  paths = new List<Expression<Func<accExpenseMatchInExAdapter, object>>>();

					//List<Expression<Func<accExpenseMatchInExAdapter,object>>> pathBuilder = new List<Expression<Func<accExpenseMatchInExAdapter,object>>>();
					paths.Add(p => p.accExpensePending.WithoutUpdate());

					paths.Add(p => p.accIncomeExpens.WithoutUpdate());

		
					//paths = pathBuilder.ToArray();		
			}
			object aux = null;
				if (adapter.accExpensePending != null ){
					if(adapter.accExpensePending.EntityKey == null) adapter.accExpensePending.EntityKey = con.WrappedContext.CreateEntityKey("accExpensePendings", adapter.accExpensePending);
				}

                
				if (adapter.accIncomeExpens != null ){
					if(adapter.accIncomeExpens.EntityKey == null) adapter.accIncomeExpens.EntityKey = con.WrappedContext.CreateEntityKey("accIncomeExpenses", adapter.accIncomeExpens);
				}

                



                //con.AttachObjectGraph<accExpenseMatchInEx>(adapter, p=>p.accExpensePending, p=>p.accIncomeExpens);
                con.WrappedContext.AttachObjectGraph<accExpenseMatchInExAdapter>(adapter, paths.ToArray());
				if (saveChanges){
                	con.WrappedContext.SaveChanges();
					 
					}
                if(!saveChanges)
					outcontext = con.WrappedContext;
				else
					outcontext = null;
				itemResult = adapter.PocoEntity;
				OnUpdated(this, e = new BusinessRulesEventArgs<accExpenseMatchInEx>() { ContextRequest = contextRequest, Item=itemResult, PathExpressions = pocopaths, SaveChanges =saveChanges });

              	return itemResult;

			  }
        }
        public accExpenseMatchInEx Save(accExpenseMatchInEx entity)
        {
			return Save(entity, true, null);
        }
        public int Save(List<accExpenseMatchInEx> entities)
        {
			using (EFPocoContext con = new EFPocoContext())
			{
			
            int n = 0;
            foreach (accExpenseMatchInEx item in entities)
            {
                try
                {
                    this.Save(item, false, con);
                    n++;
                }catch (Exception ex){
                    SFSdotNet.Framework.My.EventLog.Exception(ex);
                }
            }
            con.SaveChanges();
            return n;
            }
        }
        #endregion
        #region Delete
        public void Delete(accExpenseMatchInEx entity)
        {
				this.Delete(entity, null);
			
        }
		 public void Delete(accExpenseMatchInEx entity, ContextRequest contextRequest)
        {
				ObjectContext context = null;
				this.Delete(entity, true, out context, contextRequest);
			
        }

        
        public void Delete(accExpenseMatchInEx entity, bool saveChanges, out  ObjectContext context, ContextRequest contextRequest, BusinessRulesEventArgs<accExpenseMatchInEx> e = null)
        {
			using (EFPocoContext _con = new EFPocoContext())
			{
				int result = 0;
				
               	BusinessRulesEventArgs<accExpenseMatchInEx> _e = null;
               List<accExpenseMatchInEx> _items = new List<accExpenseMatchInEx>();
                _items.Add(entity);
                if (e == null || e.PreventPartialPropagate == false)
                {
                    OnDeleting(this, _e = (e == null ? new BusinessRulesEventArgs<accExpenseMatchInEx>() { ContextRequest = contextRequest, Item = entity, Items = _items, SaveChanges = saveChanges } : e));
                }
                if (_e != null)
                {
                    if (_e.Cancel)
						{
							context = null;
							return;

						}
					}


				accExpenseMatchInExAdapter adapter = _con.GetAdapterObject<accExpenseMatchInExAdapter>(entity);
                adapter.EntityKey = _con.WrappedContext.CreateEntityKey("accExpenseMatchInExes", adapter);
                
	            //adapter = _con.WrappedContext.AttachObjectGraph<accExpenseMatchInExAdapter>(adapter);
				try{
					_con.WrappedContext.AttachTo("accExpenseMatchInExes", adapter);
                }catch{
					
				}
									//IsDeleted
					bool logicDelete = true;
					if (adapter.IsDeleted != null)
					{
						if (adapter.IsDeleted.Value)
							logicDelete = false;
					}
					if (logicDelete)
					{
											entity = GetBy(p => p.GuidIncomeMatchInEx == entity.GuidIncomeMatchInEx, contextRequest).FirstOrDefault();
						entity.IsDeleted = true;
						Update(entity, contextRequest);
					}
					else {
						_con.WrappedContext.DeleteObject(adapter);
					}
								
				if (!saveChanges)
                    context = _con.WrappedContext;
                else
                    context = null;
				 SaveOptions saveOption = SaveOptions.None;
                if (saveChanges)
                    saveOption = SaveOptions.AcceptAllChangesAfterSave;

				result = _con.WrappedContext.SaveChanges(saveOption);
				if (saveChanges){
					
					}
			if (e == null || e.PreventPartialPropagate == false)
                {

                    if (_e == null)
                        _e = new BusinessRulesEventArgs<accExpenseMatchInEx>() { ContextRequest = contextRequest, Item = entity, Items = _items };

                    OnDeleted(this, _e);
                }

				//return null;
			}            
        }
        public void Delete(List<accExpenseMatchInEx> entities,  ContextRequest contextRequest = null )
        {
				ObjectContext context = null;
			 BusinessRulesEventArgs<accExpenseMatchInEx> _e = null;

                OnDeleting(this, _e = new BusinessRulesEventArgs<accExpenseMatchInEx>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities });
                if (_e != null)
                {
                    if (_e.Cancel)
                    {
                        context = null;
                        return;

                    }
                }
                bool allSucced = true;
                BusinessRulesEventArgs<accExpenseMatchInEx> eToChilds = new BusinessRulesEventArgs<accExpenseMatchInEx>();
                if (_e != null)
                {
                    eToChilds = _e;
                }
                else
                {
                    eToChilds = new BusinessRulesEventArgs<accExpenseMatchInEx>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                }
				foreach (accExpenseMatchInEx item in entities)
				{
					try
                    {
                        this.Delete(item, true, out context, contextRequest, e: eToChilds);
                    }
                    catch (Exception ex)
                    {
                        SFSdotNet.Framework.My.EventLog.Error(ex);
                        allSucced = false;
                    }
				}
				if (_e == null)
                    _e = new BusinessRulesEventArgs<accExpenseMatchInEx>() { ContextRequest = contextRequest, CountResult = entities.Count, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                OnDeleted(this, _e);

			
        }
        #endregion
 
        #region GetCount
		 public int GetCount(Expression<Func<accExpenseMatchInEx, bool>> predicate)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

			return GetCount(predicate, contextRequest);
		}
        public int GetCount(Expression<Func<accExpenseMatchInEx, bool>> predicate, ContextRequest contextRequest)
        {


		
			using (EFPocoContext con = new EFPocoContext())
			{


				if (predicate == null) predicate = PredicateBuilder.True<accExpenseMatchInEx>();
           		predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted == null);
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    		if (contextRequest.User !=null )
                        		if (contextRequest.Company != null )
                        			predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				
				return con.accExpenseMatchInExes.Count(predicate);
			}

        }
		  public int GetCount(string predicate,  ContextRequest contextRequest)
         {
             return GetCount(predicate, null, contextRequest);
         }

         public int GetCount(string predicate)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return GetCount(predicate, contextRequest);
        }
		 public int GetCount(string predicate, string usemode){
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
				return GetCount( predicate,  usemode,  contextRequest);
		 }
        public int GetCount(string predicate, string usemode, ContextRequest contextRequest){
			  string freetext = null;
            Filter filter = new Filter();

              if (predicate.Contains("|"))
              {
                 
                  filter.SetFilterPart("ft", GetSpecificFilter(predicate));
                 
                  filter.ProcessText(predicate.Split(char.Parse("|"))[0]);
                  freetext = predicate.Split(char.Parse("|"))[1];
              }
              else {
                  filter.ProcessText(predicate);
              }
           
			e = null;
			contextRequest.FreeText = freetext;
			contextRequest.UseMode = usemode;
            OnCounting(this, e = new BusinessRulesEventArgs<accExpenseMatchInEx>() {  Filter =filter, ContextRequest = contextRequest });
            if (e != null)
            {
                if (e.Cancel)
                {
                    context = null;
                    return e.CountResult;

                }

            

            }
			 predicate = filter.GetFilterComplete();
			StringBuilder sbQuerySystem = new StringBuilder();
		
					
                    filter.SetFilterPart("de","(IsDeleted != true OR IsDeleted == null)");
			
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    	if (contextRequest.User !=null )
                        	if (contextRequest.Company != null ){
                        		

								filter.SetFilterPart("co", @"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
						
						
							}
							
							}
							if (preventSecurityRestrictions) preventSecurityRestrictions= false;
			using (EFContext con = new EFContext())
			{
				   
                 filter.CleanAndProcess("");
				//string predicateWithFKAndComputed = SFSdotNet.Framework.Linq.Utils.ExtractSpecificProperties("", ref predicate );               
				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed();
               string predicateWithManyRelations = filter.GetFilterChildren();
			   ///QueryUtils.BreakeQuery1(predicate, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
			   predicate = filter.GetFilterComplete();
               if (!string.IsNullOrEmpty(predicate))
               {
				
					
                    return con.accExpenseMatchInExes.Count(System.Linq.Dynamic.DynamicExpression.ParseLambda<accExpenseMatchInEx, bool>(predicate));
					
                }else
                    return con.accExpenseMatchInExes.Count();

			}

		}
         public int GetCount()
        {
            return GetCount(p => true);
        }
        #endregion
        
         public accExpenseMatchInEx Update(accExpenseMatchInEx entity, string paths)
        {
            return Update(entity, paths.Split(char.Parse(",")));
            
        }

        public accExpenseMatchInEx Update(accExpenseMatchInEx entity, string[] paths)
        {
            // Translate
            List<Expression<Func<accExpenseMatchInEx, object>>> pathList = new List<Expression<Func<accExpenseMatchInEx, object>>>();
            for (int i = 0; i <= paths.Length -1; i++)
            {
                var param = Expression.Parameter(typeof(accExpenseMatchInEx), "p");
                var member = MemberExpression.PropertyOrField(param, paths[i]);

                Expression<Func<accExpenseMatchInEx, object>> path = p => member;
                pathList.Add(path.Expand());
            }
			ObjectContext context = null;
			 return Update(entity, true,null, out context,  pathList.ToArray());
           //return Update(entity, pathList.ToArray());
        }

        public void Update(List<accExpenseMatchInEx> entities, string paths)
        {
            foreach (var entity in entities )
            {
                Update(entity, paths);
            }
        }
		public accExpenseMatchInEx Create(accExpenseMatchInEx entity, ContextRequest contextRequest, string paths)
        {
          

            if (string.IsNullOrEmpty(paths))
                return Create(entity, contextRequest);

            return Create(entity, contextRequest, paths.Split(char.Parse(",")));
        }
        public accExpenseMatchInEx Create(accExpenseMatchInEx entity, string paths)
        {
			 if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return Create(entity, contextRequest, paths);

        }

        public  void Create(List<accExpenseMatchInEx> entities, ContextRequest requestContext, string paths)
        {
            foreach (var entity in entities)
            {
                Create(entity,requestContext, paths);
            }
        }

        public void Create(List<accExpenseMatchInEx> entities, string[] paths)
        {
            foreach (var entity in entities)
            {
                Create(entity, null, paths);
            }
        }
        
        public accExpenseMatchInEx  Create(accExpenseMatchInEx entity, ContextRequest contextRequest, string[] paths)
        {
            List<Expression<Func<accExpenseMatchInEx, object>>> pathList = new List<Expression<Func<accExpenseMatchInEx, object>>>();
            for (int i = 0; i < paths.Length - 1; i++)
            {
                var param = Expression.Parameter(typeof(accExpenseMatchInEx), "p");
                var member = MemberExpression.PropertyOrField(param, paths[i]);

                Expression<Func<accExpenseMatchInEx, object>> path = p => member;
                pathList.Add(path.Expand());
            }
            return Create(entity, contextRequest, pathList.ToArray());
        }
        public void Delete(List<accExpenseMatchInEx.CompositeKey> entityKeys)
        {

            List<accExpenseMatchInEx> items = new List<accExpenseMatchInEx>();
            foreach (var itemKey in entityKeys)
            {
                items.Add(GetByKey(itemKey.GuidIncomeMatchInEx));
            }

            Delete(items);

        }
		
		
	}
		public partial class accExpensePendingsBR{
	 	
           
		 #region Partial methods

           partial void OnUpdating(object sender, BusinessRulesEventArgs<accExpensePending> e);

            partial void OnUpdated(object sender, BusinessRulesEventArgs<accExpensePending> e);

            partial void OnCreating(object sender, BusinessRulesEventArgs<accExpensePending> e);
            partial void OnCreated(object sender, BusinessRulesEventArgs<accExpensePending> e);

            partial void OnDeleting(object sender, BusinessRulesEventArgs<accExpensePending> e);
            partial void OnDeleted(object sender, BusinessRulesEventArgs<accExpensePending> e);

            partial void OnGetting(object sender, BusinessRulesEventArgs<accExpensePending> e);
            partial void OnTaken(object sender, BusinessRulesEventArgs<accExpensePending> e);
            partial void OnCounting(object sender, BusinessRulesEventArgs<accExpensePending> e);
 
 
            #endregion
			
		private static accExpensePendingsBR singlenton =null;
				public static accExpensePendingsBR NewInstance(){
					return  new accExpensePendingsBR();
					
				}
		public static accExpensePendingsBR Instance{
			get{
				if (singlenton == null)
					singlenton = new accExpensePendingsBR();
				return singlenton;
			}
		}
		private bool preventSecurityRestrictions = false;
		 public bool PreventAuditTrail { get; set;  }
		#region Fields
        EFPocoContext context = null;
        #endregion
        #region Constructor
        public accExpensePendingsBR()
        {
            context = new EFPocoContext();
        }
		 public accExpensePendingsBR(bool preventSecurity)
            {
                this.preventSecurityRestrictions = preventSecurity;
				context = new EFPocoContext();
            }
        #endregion
		
		#region Get

 		public IQueryable<accExpensePending> Get()
        {
            //using (EFContext con = new EFContext())
            //{
				EFContext con = new EFContext();
                var query = con.accExpensePendings.AsQueryable();
                con.ContextOptions.ProxyCreationEnabled = false;

                //query = ContextQueryBuilder<Nutrient>.ApplyContextQuery(query, contextRequest);

                return query;




            //}

        }
		
		public List<accExpensePending> GetAll()
        {
            return this.GetBy(p => true);
        }
        public List<accExpensePending> GetAll(string includes)
        {
            return this.GetBy(p => true, includes);
        }
        public accExpensePending GetByKey(Guid guidExpensePending)
        {
            return GetByKey(guidExpensePending, true);
        }
        public accExpensePending GetByKey(Guid guidExpensePending, bool loadIncludes)
        {
            accExpensePending item = null;
			var query = PredicateBuilder.True<accExpensePending>();
                    
			string strWhere = @"GuidExpensePending = Guid(""" + guidExpensePending.ToString()+@""")";
            Expression<Func<accExpensePending, bool>> predicate = null;
            if (!string.IsNullOrEmpty(strWhere))
                predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<accExpensePending, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
			 ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();
            contextRequest.CustomQuery.FilterExpressionString = strWhere;

			//item = GetBy(predicate, loadIncludes, contextRequest).FirstOrDefault();
			item = GetBy(strWhere,loadIncludes,contextRequest).FirstOrDefault();
            return item;
        }
         public List<accExpensePending> GetBy(string strWhere, bool loadRelations, ContextRequest contextRequest)
        {
            if (!loadRelations)
                return GetBy(strWhere, contextRequest);
            else
                return GetBy(strWhere, contextRequest, "");

        }
		  public List<accExpensePending> GetBy(string strWhere, bool loadRelations)
        {
              if (!loadRelations)
                return GetBy(strWhere, new ContextRequest());
            else
                return GetBy(strWhere, new ContextRequest(), "");

        }
         public accExpensePending GetByKey(Guid guidExpensePending, params Expression<Func<accExpensePending, object>>[] includes)
        {
            accExpensePending item = null;
			string strWhere = @"GuidExpensePending = Guid(""" + guidExpensePending.ToString()+@""")";
          Expression<Func<accExpensePending, bool>> predicate = null;
            if (!string.IsNullOrEmpty(strWhere))
                predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<accExpensePending, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
        item = GetBy(predicate, includes).FirstOrDefault();
         ////   item = GetBy(strWhere,includes).FirstOrDefault();
			return item;

        }
        public accExpensePending GetByKey(Guid guidExpensePending, string includes)
        {
            accExpensePending item = null;
			string strWhere = @"GuidExpensePending = Guid(""" + guidExpensePending.ToString()+@""")";
            
			
            item = GetBy(strWhere, includes).FirstOrDefault();
            return item;

        }
		 public accExpensePending GetByKey(Guid guidExpensePending, string usemode, string includes)
		{
			return GetByKey(guidExpensePending, usemode, null, includes);

		 }
		 public accExpensePending GetByKey(Guid guidExpensePending, string usemode, ContextRequest context,  string includes)
        {
            accExpensePending item = null;
			string strWhere = @"GuidExpensePending = Guid(""" + guidExpensePending.ToString()+@""")";
			if (context == null)
				context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
			context.CustomQuery.IsByKey = true;
            context.CustomQuery.FilterExpressionString = strWhere;
            context.UseMode = usemode;
            item = GetBy(strWhere,context , includes).FirstOrDefault();
            return item;

        }

        #region Dynamic Predicate
        public List<accExpensePending> GetBy(Expression<Func<accExpensePending, bool>> predicate, int? pageSize, int? page)
        {
            return this.GetBy(predicate, pageSize, page, null, null);
        }
        public List<accExpensePending> GetBy(Expression<Func<accExpensePending, bool>> predicate, ContextRequest contextRequest)
        {

            return GetBy(predicate, contextRequest,"");
        }
        
        public List<accExpensePending> GetBy(Expression<Func<accExpensePending, bool>> predicate, ContextRequest contextRequest, params Expression<Func<accExpensePending, object>>[] includes)
        {
            StringBuilder sb = new StringBuilder();
           if (includes != null)
            {
                foreach (var path in includes)
                {

						if (sb.Length > 0) sb.Append(",");
						sb.Append(SFSdotNet.Framework.Linq.Utils.IncludeToString<accExpensePending>(path));

               }
            }
            return GetBy(predicate, contextRequest, sb.ToString());
        }
        
        
        public List<accExpensePending> GetBy(Expression<Func<accExpensePending, bool>> predicate, string includes)
        {
			ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";

            return GetBy(predicate, context, includes);
        }

        public List<accExpensePending> GetBy(Expression<Func<accExpensePending, bool>> predicate, params Expression<Func<accExpensePending, object>>[] includes)
        {
			if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }
			ContextRequest context = new ContextRequest();
			            context.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            context.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";
            return GetBy(predicate, context, includes);
        }

      
		public bool DisableCache { get; set; }
		 public List<accExpensePending> GetBy(Expression<Func<accExpensePending, bool>> predicate, ContextRequest contextRequest, string includes)
        {
            using (EFPocoContext con = new EFPocoContext())
            {
				if (DisableCache) 
                	con.CachingPolicy = EFCachingProvider.Caching.CachingPolicy.NoCaching;

				List<accExpensePending> result = null;
                 e = null;
	
				OnGetting(con, e = new BusinessRulesEventArgs<accExpensePending>() {  FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null) });

               // OnGetting(con,e = new BusinessRulesEventArgs<accExpensePending>() { FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = contextRequest.CustomQuery.FilterExpressionString});
				   if (e != null) {
				    predicate = e.FilterExpression;
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				con.EnableChangeTrackingUsingProxies = false;
				con.WrappedContext.accExpensePendings.MergeOption = MergeOption.NoTracking;
                con.WrappedContext.ContextOptions.ProxyCreationEnabled = false;
                if (predicate == null) predicate = PredicateBuilder.True<accExpensePending>();
                
                var es = con.accExpensePendings;

                IQueryable<accExpensePending> query = es.AsQueryable();

                                if (!string.IsNullOrEmpty(includes))
                {
                    foreach (string include in includes.Split(char.Parse(",")))
                    {
						if (!string.IsNullOrEmpty(include))
                            query = query.Include(include);
                    }
                }
                    predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
					 	if (!preventSecurityRestrictions)
						{
							if (contextRequest != null )
		                    	if (contextRequest.User !=null )
		                        	if (contextRequest.Company != null)
		                        		predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				query =query.Where(predicate);
                query = ContextQueryBuilder<accExpensePending>.ApplyContextQuery(query, contextRequest);

                result = query.ToList<accExpensePending>();
				  
                if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e =  new BusinessRulesEventArgs<accExpensePending>() { Items= result, IncludingComputedLinq = false, ContextRequest = contextRequest,  FilterExpression = predicate } :  e);
  
			

                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
            }
        }
		public void UpdateAgile(accExpensePending item, params string[] fields)
         {
             List<accExpensePending> list = new List<accExpensePending>();
             list.Add(item);
             this.UpdateBulk(list, fields);
         }
		public void UpdateBulk(List<accExpensePending>  items, params string[] fields)
         {
             SFSdotNet.Framework.My.ContextRequest req = new SFSdotNet.Framework.My.ContextRequest();
             req.CustomQuery = new SFSdotNet.Framework.My.CustomQuery();
             foreach (var field in fields)
             {
                 req.CustomQuery.SpecificProperties.Add(field);
             }
             UpdateBulk(items, req);

         }
        public void UpdateBulk(List<accExpensePending> items, ContextRequest req)
        {
            using (EFContext con = new EFContext())
            {



                foreach (var item in items)
                {
                    var setT = con.CreateObjectSet<accExpensePending>("accExpensePendings");


                    var itemForAttach = new accExpensePending();
			itemForAttach.GuidExpensePending = item.GuidExpensePending;
					
                    itemForAttach = SFSdotNet.Framework.Entities.ConvertEntity.SetProperties<accExpensePending>(item, itemForAttach, null, req.CustomQuery.SpecificProperties.ToArray());
                    setT.Attach(itemForAttach);


                    foreach (var property in req.CustomQuery.SpecificProperties)
                    {
						
                        if (property != "GuidExpensePending")
                            con.ObjectStateManager.GetObjectStateEntry(itemForAttach).SetModifiedProperty(property);

                    }

                }
                con.SaveChanges();


            }
        }
		/*public int Update(List<accExpensePending> items, ContextRequest contextRequest)
            {
                int result = 0;
                using (EFContext con = new EFContext())
                {
                   
                

                    foreach (var item in items)
                    {
                        //secMessageToUser messageToUser = new secMessageToUser();
                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            item.GetType().GetProperty(prop).SetValue(item, item.GetType().GetProperty(prop).GetValue(item));
                        }
                        //messageToUser.GuidMessageToUser = (Guid)item.GetType().GetProperty("GuidMessageToUser").GetValue(item);

                        var setObject = con.CreateObjectSet<accExpensePending>("accExpensePendings");
                        //messageToUser.Readed = DateTime.UtcNow;
                        setObject.Attach(item);
                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            con.ObjectStateManager.GetObjectStateEntry(item).SetModifiedProperty(prop);
                        }
                       
                    }
                    result = con.SaveChanges();

                    


                }
                return result;
            }
           */
        public List<accExpensePending> GetBy(string predicateString, ContextRequest contextRequest, string includes)
        {
            using (EFContext con = new EFContext())
            {
				if (DisableCache) 
                	con.CachingPolicy = EFCachingProvider.Caching.CachingPolicy.NoCaching;

				Filter filter = new Filter();
                if (predicateString.Contains("|"))
                {
                    string ft = GetSpecificFilter(predicateString);
                    if (!string.IsNullOrEmpty(ft))
                        filter.SetFilterPart("ft", ft);
                   
                    contextRequest.FreeText = predicateString.Split(char.Parse("|"))[1];
                    var q1 = predicateString.Split(char.Parse("|"))[0];
                    if (!string.IsNullOrEmpty(q1))
                    {
                        filter.ProcessText(q1);
                    }
                }
                else {
                    filter.ProcessText(predicateString);
                }

				List<accExpensePending> result = null;
                 e = null;
					OnGetting(con, e = new BusinessRulesEventArgs<accExpensePending>() { Filter = filter, ContextRequest = contextRequest /*, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null)*/ });

                  //OnGetting(con,e = new BusinessRulesEventArgs<accExpensePending>() {  ContextRequest = contextRequest, FilterExpressionString = predicateString });
			   	if (e != null) {
				    //predicateString = e.GetQueryString();
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				//	 else {
                //      predicateString = predicateString.Replace("*extraFreeText*", "").Replace("()","");
                //  }
				//con.EnableChangeTrackingUsingProxies = false;
				con.accExpensePendings.MergeOption = MergeOption.NoTracking;
                con.ContextOptions.ProxyCreationEnabled = false;
                //if (predicate == null) predicate = PredicateBuilder.True<accExpensePending>();
                
                var es = con.accExpensePendings;
				IQueryable<accExpensePending> query = es.AsQueryable();
		
				// include relations FK
				if(string.IsNullOrEmpty(includes) ){
					includes ="";
				}
				StringBuilder sbQuerySystem = new StringBuilder();
                    //predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				

				//if (!string.IsNullOrEmpty(predicateString))
                //      sbQuerySystem.Append(" And ");
                //sbQuerySystem.Append(" (IsDeleted != true Or IsDeleted = null) ");
				 filter.SetFilterPart("de", "(IsDeleted != true OR IsDeleted = null)");


					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
	                    	if (contextRequest.User !=null )
	                        	if (contextRequest.Company != null ){
	                        		//if (sbQuerySystem.Length > 0)
	                        		//	    			sbQuerySystem.Append( " And ");	
									//sbQuerySystem.Append(@" (GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
									filter.SetFilterPart("co",@"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @"""))");
								}
						}	
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				//string predicateString = predicate.ToDynamicLinq<accExpensePending>();
				//predicateString += sbQuerySystem.ToString();
				filter.CleanAndProcess("");

				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed(); //SFSdotNet.Framework.Linq.Utils.ExtractSpecificProperties("", ref predicateString );               
                string predicateWithManyRelations = filter.GetFilterChildren(); //SFSdotNet.Framework.Linq.Utils.CleanPartExpression(predicateString);

                //QueryUtils.BreakeQuery1(predicateString, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
                var _queryable = query.AsQueryable();
                if (!string.IsNullOrEmpty(predicateWithManyRelations))
                    _queryable = _queryable.Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams);
				if (contextRequest.CustomQuery.SpecificProperties.Count > 0)
                {

                    StringBuilder sbProps = new StringBuilder();
                    contextRequest.CustomQuery.SpecificProperties.Add("GuidExpensePending");
                    
					foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                    {
						if(sbProps.Length > 0)
							sbProps.Append(",");
                        sbProps.Append(prop);
                    }
					    IQueryable  queryableSelective = null ;
					  
					  if (!string.IsNullOrEmpty(predicateWithManyRelations))
							queryableSelective = con.accExpensePendings.AsQueryable().Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams).Select(string.Format("new({0})", sbProps.ToString()));
					else
						queryableSelective = con.accExpensePendings.AsQueryable().Select(string.Format("new({0})", sbProps.ToString()));


                    //if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
					//	queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

                    QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
                    
					if (!string.IsNullOrEmpty(queryOps.OrderByAndSort))
                        queryableSelective = queryableSelective.OrderBy(queryOps.OrderByAndSort);
                    if (queryOps.Skip != null)
                    {
                        queryableSelective = queryableSelective.Skip(queryOps.Skip.Value);
                    }
                    if (queryOps.PageSize != null)
                    {
                        queryableSelective = queryableSelective.Take(queryOps.PageSize.Value);
                    }
                    //var results = queryableSelective.ToList();
                    result = new List<accExpensePending>();
                    accExpensePending itemDef = null;
                    foreach (var item in queryableSelective)
                    {
                        itemDef = new accExpensePending();

                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            if (!prop.Contains("."))
                            {
                                itemDef.GetType().GetProperty(prop).SetValue(itemDef, item.GetType().GetProperty(prop).GetValue(item));
                            }
                            else {
                                throw new Exception("La seleccion de relaciones aún no esta soportada");
                            }

                        }

                        result.Add(itemDef);
                    }

                }
                else
                {
				var  queryable = _queryable.Select(                    
				p => 
                        new
                    {
					GuidExpensePending = p.GuidExpensePending
,Amount = p.Amount
,CreatedDate = p.CreatedDate
,UpdatedDate = p.UpdatedDate
,CreatedBy = p.CreatedBy
,UpdatedBy = p.UpdatedBy
,IsDeleted = p.IsDeleted
,GuidCompany = p.GuidCompany
,IsFact = p.IsFact

,

	
                    }
                    
                    );
					
				
                 if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
                    queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

				QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
            	if (!string.IsNullOrEmpty(queryOps.OrderByAndSort))
					queryable = queryable.OrderBy(queryOps.OrderByAndSort);
               	if (queryOps.Skip != null)
                {
                    queryable = queryable.Skip(queryOps.Skip.Value);
                }
                if (queryOps.PageSize != null)
                {
                    queryable = queryable.Take (queryOps.PageSize.Value);
                }
                result = queryable.AsEnumerable().
                    Select(
                    p =>  new accExpensePending()
                    {
					GuidExpensePending = p.GuidExpensePending
,Amount = p.Amount
,CreatedDate = p.CreatedDate
,UpdatedDate = p.UpdatedDate
,CreatedBy = p.CreatedBy
,UpdatedBy = p.UpdatedBy
,IsDeleted = p.IsDeleted
,GuidCompany = p.GuidCompany
,IsFact = p.IsFact

                    }
                     ).ToList();
				}


			 if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e = new BusinessRulesEventArgs<accExpensePending>() { Items= result, IncludingComputedLinq = true, ContextRequest = contextRequest, FilterExpressionString  = predicateString } :  e);
  
			
  
                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
            }
        }
		public List<accExpensePending> GetBy(Expression<Func<accExpensePending, bool>> predicate, bool loadRelations, ContextRequest contextRequest)
        {
			if(!loadRelations)
				return GetBy(predicate, contextRequest);
			else
				return GetBy(predicate, contextRequest, "accExpenseMatchInExes");

        }

        public List<accExpensePending> GetBy(Expression<Func<accExpensePending, bool>> predicate, int? pageSize, int? page, string orderBy, SFSdotNet.Framework.Data.SortDirection? sortDirection)
        {
            return GetBy(predicate, new ContextRequest() { CustomQuery = new CustomQuery() { Page = page, PageSize = pageSize, OrderBy = orderBy, SortDirection = sortDirection } });
        }
        public List<accExpensePending> GetBy(Expression<Func<accExpensePending, bool>> predicate)
        {

			if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }
			ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();

			contextRequest.CurrentContext = SFSdotNet.Framework.My.Context.CurrentContext;
			            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

            contextRequest.CustomQuery.FilterExpressionString = null;
            return this.GetBy(predicate, contextRequest, "");
        }
        #endregion
        #region Dynamic String
		private string GetSpecificFilter(string filter) {
            string result = "";
		    //string linqFilter = String.Empty;
            string freeTextFilter = String.Empty;
            if (filter.Contains("|"))
            {
               // linqFilter = filter.Split(char.Parse("|"))[0];
                freeTextFilter = filter.Split(char.Parse("|"))[1];
            }
            //else {
            //    freeTextFilter = filter;
            //}
            //else {
            //    linqFilter = filter;
            //}
			// linqFilter = SFSdotNet.Framework.Linq.Utils.ReplaceCustomDateFilters(linqFilter);
            //string specificFilter = linqFilter;
            if (!string.IsNullOrEmpty(freeTextFilter))
            {
                System.Text.StringBuilder sbCont = new System.Text.StringBuilder();
                /*if (specificFilter.Length > 0)
                {
                    sbCont.Append(" AND ");
                    sbCont.Append(" ({0})");
                }
                else
                {
                    sbCont.Append("{0}");
                }*/
                //var words = freeTextFilter.Split(char.Parse(" "));
				var word = freeTextFilter;
                System.Text.StringBuilder sbSpec = new System.Text.StringBuilder();
                 int nWords = 1;
				/*foreach (var word in words)
                {
					if (word.Length > 0){
                    if (sbSpec.Length > 0) sbSpec.Append(" AND ");
					if (words.Length > 1) sbSpec.Append("("); */
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
								 //sbSpec.Append("*extraFreeText*");

                    /*if (words.Length > 1) sbSpec.Append(")");
					
					nWords++;

					}

                }*/
                //specificFilter = string.Format("{0}{1}", specificFilter, string.Format(sbCont.ToString(), sbSpec.ToString()));
                                 result = sbSpec.ToString();  
            }
			//result = specificFilter;
			
			return result;

		}
	
			public List<accExpensePending> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  params object[] extraParams)
        {
			return GetBy(filter, pageSize, page, orderBy, orderDir,  null, extraParams);
		}
           public List<accExpensePending> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir, string usemode, params object[] extraParams)
            { 
                return GetBy(filter, pageSize, page, orderBy, orderDir, usemode, null, extraParams);
            }


		public List<accExpensePending> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  string usemode, ContextRequest context, params object[] extraParams)

        {

            // string freetext = null;
            //if (filter.Contains("|"))
            //{
            //    int parts = filter.Split(char.Parse("|")).Count();
            //    if (parts > 1)
            //    {

            //        freetext = filter.Split(char.Parse("|"))[1];
            //    }
            //}
		
            //string specificFilter = "";
            //if (!string.IsNullOrEmpty(filter))
            //  specificFilter=  GetSpecificFilter(filter);
            if (string.IsNullOrEmpty(orderBy))
            {
			                orderBy = "UpdatedDate";
            }
			//orderDir = "desc";
			SFSdotNet.Framework.Data.SortDirection direction = SFSdotNet.Framework.Data.SortDirection.Ascending;
            if (!string.IsNullOrEmpty(orderDir))
            {
                if (orderDir == "desc")
                    direction = SFSdotNet.Framework.Data.SortDirection.Descending;
            }
            if (context == null)
                context = new ContextRequest();
			else
                context.CustomQuery = new CustomQuery();
             //context.FreeText = freetext;
             context.UseMode = usemode;
             context.CustomQuery =new SFSdotNet.Framework.My.CustomQuery()
 
                {
                    ExtraParams = extraParams,

                    OrderBy = orderBy,
                    SortDirection = direction,
                    Page = page,
                    PageSize = pageSize
               };
            

            if (!preventSecurityRestrictions) {
			 if (context.CurrentContext == null)
                {
					if (SFSdotNet.Framework.My.Context.CurrentContext != null &&  SFSdotNet.Framework.My.Context.CurrentContext.Company != null && SFSdotNet.Framework.My.Context.CurrentContext.User != null)
					{
						context.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
						context.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

					}
					else {
						throw new Exception("The security rule require a specific user and company");
					}
				}
            }
            return GetBy(filter, context);
  
        }


        public List<accExpensePending> GetBy(string strWhere, ContextRequest contextRequest)
        {
        	#region old code
				
				 //Expression<Func<tvsReservationTransport, bool>> predicate = null;
				string strWhereClean = strWhere.Replace("*extraFreeText*", "").Replace("()", "");
                //if (!string.IsNullOrEmpty(strWhereClean)){

                //    object[] extraParams = null;
                //    //if (contextRequest != null )
                //    //    if (contextRequest.CustomQuery != null )
                //    //        extraParams = contextRequest.CustomQuery.ExtraParams;
                //    //predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<tvsReservationTransport, bool>(strWhereClean, extraParams != null? extraParams.Cast<Guid>(): null);				
                //}
				 if (contextRequest == null)
                {
                    contextRequest = new ContextRequest();
                    if (contextRequest.CustomQuery == null)
                        contextRequest.CustomQuery = new CustomQuery();
                }
                  if (!preventSecurityRestrictions) {
					if (contextRequest.User == null || contextRequest.Company == null)
                      {
                     if (SFSdotNet.Framework.My.Context.CurrentContext.Company != null && SFSdotNet.Framework.My.Context.CurrentContext.User != null)
                     {
                         contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                         contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

                     }
                     else {
                         throw new Exception("The security rule require a specific User and Company ");
                     }
					 }
                 }
            contextRequest.CustomQuery.FilterExpressionString = strWhere;
				//return GetBy(predicate, contextRequest);  

			#endregion				
				
                    return GetBy(strWhere, contextRequest, "");  


        }
       public List<accExpensePending> GetBy(string strWhere)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
			
            return GetBy(strWhere, context, null);
        }

        public List<accExpensePending> GetBy(string strWhere, string includes)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
            return GetBy(strWhere, context, includes);
        }

        #endregion
        #endregion
		
		  #region SaveOrUpdate
        private accExpensePending Save(accExpensePending entity, bool saveChanges, EFPocoContext con)
        {
				ObjectContext context = null;
            return Update(entity, saveChanges,null, out context);

			
        }
		 public  accExpensePending Create( accExpensePending entity, params Expression<Func< accExpensePending, object>>[] paths)
         {
             return Create(entity, null, paths);

         }
 		 public accExpensePending Create(accExpensePending entity)
        {
				ObjectContext context = null;
				    if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: Create");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

				return this.Create(entity, true, contextRequest, out context);


        }
        public accExpensePending Create(accExpensePending entity, ContextRequest contextRequest)
         {
             ObjectContext context = null;
             return this.Create(entity, true, contextRequest,out context);

         }
         public accExpensePending Create(accExpensePending entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext context)
        {
                    return Create(entity, saveChanges , contextRequest , out context, null);
        }
         public accExpensePending Create(accExpensePending entity, ContextRequest contextRequest, params Expression<Func<accExpensePending,object>>[] paths)
        {
            ObjectContext context = null;
            if(paths != null)
				return Create(entity, true,contextRequest, out context, paths);
			else 
				return Create(entity, true,contextRequest, out context);
        }
        public accExpensePending Create(accExpensePending entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext context, params Expression<Func<accExpensePending,object>>[] pocopaths)
        {
			using (EFPocoContext con = new EFPocoContext())
			{
				accExpensePending itemResult = null;
#region Autos


			entity.CreatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.CreatedBy = contextRequest.User.GuidUser;
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.UpdatedBy = contextRequest.User.GuidUser;
	
			if (contextRequest != null)
				if(contextRequest.User != null)
					if (contextRequest.Company != null)
						entity.GuidCompany = contextRequest.Company.GuidCompany;
	

#endregion
                e = null;
                OnCreating(this,e = new BusinessRulesEventArgs<accExpensePending>() { ContextRequest = contextRequest, Item=entity, PathExpressions = pocopaths, SaveChanges =saveChanges });
				   if (e != null) {
						if (e.Cancel)
						{
							context = null;
							return e.Item;

						}
					}

                    if (entity.GuidExpensePending == Guid.Empty)
                   {
                       entity.GuidExpensePending = Guid.NewGuid();

                   }



				accExpensePendingAdapter adapter = con.GetAdapterObject<accExpensePendingAdapter>(entity);;
				List<Expression<Func<accExpensePendingAdapter, object>>> paths = new List<Expression<Func<accExpensePendingAdapter,object>>>();
                
			    if (pocopaths != null && pocopaths.Length > 0)
                {
					// Translate
                    foreach (var pocopath in pocopaths)
                    {
                        var param = Expression.Parameter(typeof(accExpensePendingAdapter), "p");
                        var member = MemberExpression.PropertyOrField(param, ((System.Linq.Expressions.MemberExpression)(((System.Linq.Expressions.LambdaExpression)(pocopath)).Body)).Member.Name);
                        Expression<Func<accExpensePendingAdapter, object>> path  = null;
                        switch(member.Member.Name){
                        
							case "accExpenseMatchInExes":
								path = p => p.accExpenseMatchInExes.First().WithoutUpdate();

								//path = p => member;
								//path = p => p.accExpenseMatchInExes.First().accIncomeExpens.WithoutUpdate();											
							break;
							
							default:
								path = p => member;
							break;
                        }

                        
                       paths.Add(path.Expand());
                    }
                }
                object aux = null;
					//paths = pathBuilder.ToArray();

#region Childs accExpenseMatchInExes 
				if (adapter.accExpenseMatchInExes != null)
                {
                    foreach (var item in adapter.accExpenseMatchInExes)
                    {
						
							if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accExpenseMatchInExes", item);
							if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)){ 
								//paths.Add(p => p.accExpenseMatchInExes.First().WithoutUpdate());
								
							if (item.accExpensePending == null)
								item.accExpensePending = adapter;

						if (item.accIncomeExpens != null){
							item.accIncomeExpens.EntityKey = con.WrappedContext.CreateEntityKey("accIncomeExpenses", item.accIncomeExpens);
                            
             
						}								
								item.EntityKey = null;
							}

                    }
					if (adapter.accExpenseMatchInExes.Count > 0){
						paths.Add(p => p.accExpenseMatchInExes.First().WithoutUpdate());
						paths.Add(p => p.accExpenseMatchInExes.First().accIncomeExpens.WithoutUpdate());
					
					}
                }
#endregion 




                //con.WrappedContext.AttachObjectGraph<accExpensePendingAdapter>(adapter, p=>p.accExpenseMatchInExes);
                con.WrappedContext.AttachObjectGraph<accExpensePendingAdapter>(adapter, paths.ToArray());
              	if (saveChanges){
                    con.WrappedContext.SaveChanges(SaveOptions.AcceptAllChangesAfterSave);
					 
				}
                else
                    con.WrappedContext.SaveChanges(SaveOptions.None);
                if (!saveChanges)
                    context = con.WrappedContext;
                else
                    context = null;
				itemResult = adapter.PocoEntity;
                if (e != null)
                {
                    e.Item = itemResult;
                }
                OnCreated(this, e == null ? e = new BusinessRulesEventArgs<accExpensePending>() { ContextRequest = contextRequest, Item = itemResult, PathExpressions = pocopaths, SaveChanges = saveChanges } : e);



                if (e != null)
                {
                    itemResult = e.Item;
                }
                              return itemResult;
            }
        }
        BusinessRulesEventArgs<accExpensePending> e = null;
        public void Create(List<accExpensePending> entities)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            Create(entities, contextRequest, null);
        }
        public void Create(List<accExpensePending> entities, ContextRequest contextRequest)
        
        {
			ObjectContext context = null;
            	foreach (accExpensePending entity in entities)
				{
					this.Create(entity, true, contextRequest, out context);
				}
        }
         public accExpensePending Update(accExpensePending entity)
        {
            if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return Update(entity, contextRequest);
        }
        public accExpensePending Update(accExpensePending entity, ContextRequest requestContext)
        {
			  ObjectContext context = null;
            return Update(entity, true,requestContext, out context);
         }
		public  accExpensePending Update(accExpensePending entity, params Expression<Func<accExpensePending, object>>[] pocopaths)
        {
			  ObjectContext context = null;
              return Update(entity, true, null, out context, pocopaths);
         }
        public accExpensePending Update(accExpensePending entity, ContextRequest requestContext, bool saveChanges, out ObjectContext outcontext)
        {
			return Update(entity, saveChanges,requestContext, out outcontext, null);
		}
         public accExpensePending Update(accExpensePending entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext outcontext, params Expression<Func<accExpensePending,object>>[] pocopaths)
        {
		 if ((System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null) && contextRequest == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Update");
            }
            if (contextRequest == null)
            {
                contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            }

			using (EFPocoContext con = new EFPocoContext())
			{
				accExpensePending  itemResult = null;

	
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
			if(contextRequest.User != null)
				entity.UpdatedBy = contextRequest.User.GuidUser;

	    var oldentity = GetBy(p => p.GuidExpensePending == entity.GuidExpensePending, contextRequest).FirstOrDefault();
		if (oldentity != null) {
		
            entity.CreatedDate = oldentity.CreatedDate;
            entity.CreatedBy = oldentity.CreatedBy;
	
            entity.GuidCompany = oldentity.GuidCompany;
	
			

		}

				e = null;
                OnUpdating(this,e = new BusinessRulesEventArgs<accExpensePending>() { ContextRequest = contextRequest, Item=entity, PathExpressions = pocopaths, SaveChanges =saveChanges });
				   if (e != null) {
						if (e.Cancel)
						{
							outcontext = null;
							return e.Item;

						}
					}

                accExpensePendingAdapter adapter = con.GetAdapterObject<accExpensePendingAdapter>(entity);
                adapter.EntityKey = con.WrappedContext.CreateEntityKey("accExpensePendings", adapter);
				    var es = con.accExpensePendings;
				List<Expression<Func<accExpensePendingAdapter, object>>> paths = new List<Expression<Func<accExpensePendingAdapter,object>>>();
                /* if (pocopaths != null)
                    if (pocopaths.Length == 0)
                        pocopaths = null;*/

			    if (pocopaths != null && pocopaths.Length > 0)
                {
					// Translate
                    foreach (var pocopath in pocopaths)
                    {
                        var param = Expression.Parameter(typeof(accExpensePendingAdapter), "p");
                        var member = MemberExpression.PropertyOrField(param, ((System.Linq.Expressions.MemberExpression)(((System.Linq.Expressions.LambdaExpression)(pocopath)).Body)).Member.Name);
                        Expression<Func<accExpensePendingAdapter, object>> path  = null;
                        switch(member.Member.Name){
                        
							case "accExpenseMatchInExes":
								//path = p => member;
								path = p => p.accExpenseMatchInExes.First().WithoutUpdate();
				//				path = p => p.accExpenseMatchInExes.First().accIncomeExpens.WithoutUpdate();											
							break;
							
							default:
								path = p => member;
							break;
                        }

                        paths.Add(path.Expand());
 					}
                }
                else {
                  paths = new List<Expression<Func<accExpensePendingAdapter, object>>>();

					//List<Expression<Func<accExpensePendingAdapter,object>>> pathBuilder = new List<Expression<Func<accExpensePendingAdapter,object>>>();
		
					//paths = pathBuilder.ToArray();		
			}
			object aux = null;
				if (adapter.accExpenseMatchInExes != null)
                {
                    foreach (var item in adapter.accExpenseMatchInExes)
                    {


                        if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accExpenseMatchInExes", item);
						if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)) item.EntityKey = null;
                        
                    }
					
                    if (adapter.accExpenseMatchInExes.Count > 0)
                    {
                        paths.Add(p => p.accExpenseMatchInExes.First().WithoutUpdate());

                    }

                }



                //con.AttachObjectGraph<accExpensePending>(adapter, p=>p.accExpenseMatchInExes);
                con.WrappedContext.AttachObjectGraph<accExpensePendingAdapter>(adapter, paths.ToArray());
				if (saveChanges){
                	con.WrappedContext.SaveChanges();
					 
					}
                if(!saveChanges)
					outcontext = con.WrappedContext;
				else
					outcontext = null;
				itemResult = adapter.PocoEntity;
				OnUpdated(this, e = new BusinessRulesEventArgs<accExpensePending>() { ContextRequest = contextRequest, Item=itemResult, PathExpressions = pocopaths, SaveChanges =saveChanges });

              	return itemResult;

			  }
        }
        public accExpensePending Save(accExpensePending entity)
        {
			return Save(entity, true, null);
        }
        public int Save(List<accExpensePending> entities)
        {
			using (EFPocoContext con = new EFPocoContext())
			{
			
            int n = 0;
            foreach (accExpensePending item in entities)
            {
                try
                {
                    this.Save(item, false, con);
                    n++;
                }catch (Exception ex){
                    SFSdotNet.Framework.My.EventLog.Exception(ex);
                }
            }
            con.SaveChanges();
            return n;
            }
        }
        #endregion
        #region Delete
        public void Delete(accExpensePending entity)
        {
				this.Delete(entity, null);
			
        }
		 public void Delete(accExpensePending entity, ContextRequest contextRequest)
        {
				ObjectContext context = null;
				this.Delete(entity, true, out context, contextRequest);
			
        }

        
        public void Delete(accExpensePending entity, bool saveChanges, out  ObjectContext context, ContextRequest contextRequest, BusinessRulesEventArgs<accExpensePending> e = null)
        {
			using (EFPocoContext _con = new EFPocoContext())
			{
				int result = 0;
				
               	BusinessRulesEventArgs<accExpensePending> _e = null;
               List<accExpensePending> _items = new List<accExpensePending>();
                _items.Add(entity);
                if (e == null || e.PreventPartialPropagate == false)
                {
                    OnDeleting(this, _e = (e == null ? new BusinessRulesEventArgs<accExpensePending>() { ContextRequest = contextRequest, Item = entity, Items = _items, SaveChanges = saveChanges } : e));
                }
                if (_e != null)
                {
                    if (_e.Cancel)
						{
							context = null;
							return;

						}
					}


				accExpensePendingAdapter adapter = _con.GetAdapterObject<accExpensePendingAdapter>(entity);
                adapter.EntityKey = _con.WrappedContext.CreateEntityKey("accExpensePendings", adapter);
                
	            //adapter = _con.WrappedContext.AttachObjectGraph<accExpensePendingAdapter>(adapter);
				try{
					_con.WrappedContext.AttachTo("accExpensePendings", adapter);
                }catch{
					
				}
									//IsDeleted
					bool logicDelete = true;
					if (adapter.IsDeleted != null)
					{
						if (adapter.IsDeleted.Value)
							logicDelete = false;
					}
					if (logicDelete)
					{
											entity = GetBy(p => p.GuidExpensePending == entity.GuidExpensePending, contextRequest).FirstOrDefault();
						entity.IsDeleted = true;
						Update(entity, contextRequest);
					}
					else {
						_con.WrappedContext.DeleteObject(adapter);
					}
								
				if (!saveChanges)
                    context = _con.WrappedContext;
                else
                    context = null;
				 SaveOptions saveOption = SaveOptions.None;
                if (saveChanges)
                    saveOption = SaveOptions.AcceptAllChangesAfterSave;

				result = _con.WrappedContext.SaveChanges(saveOption);
				if (saveChanges){
					
					}
			if (e == null || e.PreventPartialPropagate == false)
                {

                    if (_e == null)
                        _e = new BusinessRulesEventArgs<accExpensePending>() { ContextRequest = contextRequest, Item = entity, Items = _items };

                    OnDeleted(this, _e);
                }

				//return null;
			}            
        }
        public void Delete(List<accExpensePending> entities,  ContextRequest contextRequest = null )
        {
				ObjectContext context = null;
			 BusinessRulesEventArgs<accExpensePending> _e = null;

                OnDeleting(this, _e = new BusinessRulesEventArgs<accExpensePending>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities });
                if (_e != null)
                {
                    if (_e.Cancel)
                    {
                        context = null;
                        return;

                    }
                }
                bool allSucced = true;
                BusinessRulesEventArgs<accExpensePending> eToChilds = new BusinessRulesEventArgs<accExpensePending>();
                if (_e != null)
                {
                    eToChilds = _e;
                }
                else
                {
                    eToChilds = new BusinessRulesEventArgs<accExpensePending>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                }
				foreach (accExpensePending item in entities)
				{
					try
                    {
                        this.Delete(item, true, out context, contextRequest, e: eToChilds);
                    }
                    catch (Exception ex)
                    {
                        SFSdotNet.Framework.My.EventLog.Error(ex);
                        allSucced = false;
                    }
				}
				if (_e == null)
                    _e = new BusinessRulesEventArgs<accExpensePending>() { ContextRequest = contextRequest, CountResult = entities.Count, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                OnDeleted(this, _e);

			
        }
        #endregion
 
        #region GetCount
		 public int GetCount(Expression<Func<accExpensePending, bool>> predicate)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

			return GetCount(predicate, contextRequest);
		}
        public int GetCount(Expression<Func<accExpensePending, bool>> predicate, ContextRequest contextRequest)
        {


		
			using (EFPocoContext con = new EFPocoContext())
			{


				if (predicate == null) predicate = PredicateBuilder.True<accExpensePending>();
           		predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted == null);
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    		if (contextRequest.User !=null )
                        		if (contextRequest.Company != null )
                        			predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				
				return con.accExpensePendings.Count(predicate);
			}

        }
		  public int GetCount(string predicate,  ContextRequest contextRequest)
         {
             return GetCount(predicate, null, contextRequest);
         }

         public int GetCount(string predicate)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return GetCount(predicate, contextRequest);
        }
		 public int GetCount(string predicate, string usemode){
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
				return GetCount( predicate,  usemode,  contextRequest);
		 }
        public int GetCount(string predicate, string usemode, ContextRequest contextRequest){
			  string freetext = null;
            Filter filter = new Filter();

              if (predicate.Contains("|"))
              {
                 
                  filter.SetFilterPart("ft", GetSpecificFilter(predicate));
                 
                  filter.ProcessText(predicate.Split(char.Parse("|"))[0]);
                  freetext = predicate.Split(char.Parse("|"))[1];
              }
              else {
                  filter.ProcessText(predicate);
              }
           
			e = null;
			contextRequest.FreeText = freetext;
			contextRequest.UseMode = usemode;
            OnCounting(this, e = new BusinessRulesEventArgs<accExpensePending>() {  Filter =filter, ContextRequest = contextRequest });
            if (e != null)
            {
                if (e.Cancel)
                {
                    context = null;
                    return e.CountResult;

                }

            

            }
			 predicate = filter.GetFilterComplete();
			StringBuilder sbQuerySystem = new StringBuilder();
		
					
                    filter.SetFilterPart("de","(IsDeleted != true OR IsDeleted == null)");
			
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    	if (contextRequest.User !=null )
                        	if (contextRequest.Company != null ){
                        		

								filter.SetFilterPart("co", @"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
						
						
							}
							
							}
							if (preventSecurityRestrictions) preventSecurityRestrictions= false;
			using (EFContext con = new EFContext())
			{
				   
                 filter.CleanAndProcess("");
				//string predicateWithFKAndComputed = SFSdotNet.Framework.Linq.Utils.ExtractSpecificProperties("", ref predicate );               
				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed();
               string predicateWithManyRelations = filter.GetFilterChildren();
			   ///QueryUtils.BreakeQuery1(predicate, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
			   predicate = filter.GetFilterComplete();
               if (!string.IsNullOrEmpty(predicate))
               {
				
					
                    return con.accExpensePendings.Count(System.Linq.Dynamic.DynamicExpression.ParseLambda<accExpensePending, bool>(predicate));
					
                }else
                    return con.accExpensePendings.Count();

			}

		}
         public int GetCount()
        {
            return GetCount(p => true);
        }
        #endregion
        
         public accExpensePending Update(accExpensePending entity, string paths)
        {
            return Update(entity, paths.Split(char.Parse(",")));
            
        }

        public accExpensePending Update(accExpensePending entity, string[] paths)
        {
            // Translate
            List<Expression<Func<accExpensePending, object>>> pathList = new List<Expression<Func<accExpensePending, object>>>();
            for (int i = 0; i <= paths.Length -1; i++)
            {
                var param = Expression.Parameter(typeof(accExpensePending), "p");
                var member = MemberExpression.PropertyOrField(param, paths[i]);

                Expression<Func<accExpensePending, object>> path = p => member;
                pathList.Add(path.Expand());
            }
			ObjectContext context = null;
			 return Update(entity, true,null, out context,  pathList.ToArray());
           //return Update(entity, pathList.ToArray());
        }

        public void Update(List<accExpensePending> entities, string paths)
        {
            foreach (var entity in entities )
            {
                Update(entity, paths);
            }
        }
		public accExpensePending Create(accExpensePending entity, ContextRequest contextRequest, string paths)
        {
          

            if (string.IsNullOrEmpty(paths))
                return Create(entity, contextRequest);

            return Create(entity, contextRequest, paths.Split(char.Parse(",")));
        }
        public accExpensePending Create(accExpensePending entity, string paths)
        {
			 if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return Create(entity, contextRequest, paths);

        }

        public  void Create(List<accExpensePending> entities, ContextRequest requestContext, string paths)
        {
            foreach (var entity in entities)
            {
                Create(entity,requestContext, paths);
            }
        }

        public void Create(List<accExpensePending> entities, string[] paths)
        {
            foreach (var entity in entities)
            {
                Create(entity, null, paths);
            }
        }
        
        public accExpensePending  Create(accExpensePending entity, ContextRequest contextRequest, string[] paths)
        {
            List<Expression<Func<accExpensePending, object>>> pathList = new List<Expression<Func<accExpensePending, object>>>();
            for (int i = 0; i < paths.Length - 1; i++)
            {
                var param = Expression.Parameter(typeof(accExpensePending), "p");
                var member = MemberExpression.PropertyOrField(param, paths[i]);

                Expression<Func<accExpensePending, object>> path = p => member;
                pathList.Add(path.Expand());
            }
            return Create(entity, contextRequest, pathList.ToArray());
        }
        public void Delete(List<accExpensePending.CompositeKey> entityKeys)
        {

            List<accExpensePending> items = new List<accExpensePending>();
            foreach (var itemKey in entityKeys)
            {
                items.Add(GetByKey(itemKey.GuidExpensePending));
            }

            Delete(items);

        }
		
		
	}
		public partial class accIncomeMatchInExesBR{
	 	
           
		 #region Partial methods

           partial void OnUpdating(object sender, BusinessRulesEventArgs<accIncomeMatchInEx> e);

            partial void OnUpdated(object sender, BusinessRulesEventArgs<accIncomeMatchInEx> e);

            partial void OnCreating(object sender, BusinessRulesEventArgs<accIncomeMatchInEx> e);
            partial void OnCreated(object sender, BusinessRulesEventArgs<accIncomeMatchInEx> e);

            partial void OnDeleting(object sender, BusinessRulesEventArgs<accIncomeMatchInEx> e);
            partial void OnDeleted(object sender, BusinessRulesEventArgs<accIncomeMatchInEx> e);

            partial void OnGetting(object sender, BusinessRulesEventArgs<accIncomeMatchInEx> e);
            partial void OnTaken(object sender, BusinessRulesEventArgs<accIncomeMatchInEx> e);
            partial void OnCounting(object sender, BusinessRulesEventArgs<accIncomeMatchInEx> e);
 
 
            #endregion
			
		private static accIncomeMatchInExesBR singlenton =null;
				public static accIncomeMatchInExesBR NewInstance(){
					return  new accIncomeMatchInExesBR();
					
				}
		public static accIncomeMatchInExesBR Instance{
			get{
				if (singlenton == null)
					singlenton = new accIncomeMatchInExesBR();
				return singlenton;
			}
		}
		private bool preventSecurityRestrictions = false;
		 public bool PreventAuditTrail { get; set;  }
		#region Fields
        EFPocoContext context = null;
        #endregion
        #region Constructor
        public accIncomeMatchInExesBR()
        {
            context = new EFPocoContext();
        }
		 public accIncomeMatchInExesBR(bool preventSecurity)
            {
                this.preventSecurityRestrictions = preventSecurity;
				context = new EFPocoContext();
            }
        #endregion
		
		#region Get

 		public IQueryable<accIncomeMatchInEx> Get()
        {
            //using (EFContext con = new EFContext())
            //{
				EFContext con = new EFContext();
                var query = con.accIncomeMatchInExes.AsQueryable();
                con.ContextOptions.ProxyCreationEnabled = false;

                //query = ContextQueryBuilder<Nutrient>.ApplyContextQuery(query, contextRequest);

                return query;




            //}

        }
		
		public List<accIncomeMatchInEx> GetAll()
        {
            return this.GetBy(p => true);
        }
        public List<accIncomeMatchInEx> GetAll(string includes)
        {
            return this.GetBy(p => true, includes);
        }
        public accIncomeMatchInEx GetByKey(Guid guidIncomeMatchInEx)
        {
            return GetByKey(guidIncomeMatchInEx, true);
        }
        public accIncomeMatchInEx GetByKey(Guid guidIncomeMatchInEx, bool loadIncludes)
        {
            accIncomeMatchInEx item = null;
			var query = PredicateBuilder.True<accIncomeMatchInEx>();
                    
			string strWhere = @"GuidIncomeMatchInEx = Guid(""" + guidIncomeMatchInEx.ToString()+@""")";
            Expression<Func<accIncomeMatchInEx, bool>> predicate = null;
            if (!string.IsNullOrEmpty(strWhere))
                predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<accIncomeMatchInEx, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
			 ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();
            contextRequest.CustomQuery.FilterExpressionString = strWhere;

			//item = GetBy(predicate, loadIncludes, contextRequest).FirstOrDefault();
			item = GetBy(strWhere,loadIncludes,contextRequest).FirstOrDefault();
            return item;
        }
         public List<accIncomeMatchInEx> GetBy(string strWhere, bool loadRelations, ContextRequest contextRequest)
        {
            if (!loadRelations)
                return GetBy(strWhere, contextRequest);
            else
                return GetBy(strWhere, contextRequest, "");

        }
		  public List<accIncomeMatchInEx> GetBy(string strWhere, bool loadRelations)
        {
              if (!loadRelations)
                return GetBy(strWhere, new ContextRequest());
            else
                return GetBy(strWhere, new ContextRequest(), "");

        }
         public accIncomeMatchInEx GetByKey(Guid guidIncomeMatchInEx, params Expression<Func<accIncomeMatchInEx, object>>[] includes)
        {
            accIncomeMatchInEx item = null;
			string strWhere = @"GuidIncomeMatchInEx = Guid(""" + guidIncomeMatchInEx.ToString()+@""")";
          Expression<Func<accIncomeMatchInEx, bool>> predicate = null;
            if (!string.IsNullOrEmpty(strWhere))
                predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<accIncomeMatchInEx, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
        item = GetBy(predicate, includes).FirstOrDefault();
         ////   item = GetBy(strWhere,includes).FirstOrDefault();
			return item;

        }
        public accIncomeMatchInEx GetByKey(Guid guidIncomeMatchInEx, string includes)
        {
            accIncomeMatchInEx item = null;
			string strWhere = @"GuidIncomeMatchInEx = Guid(""" + guidIncomeMatchInEx.ToString()+@""")";
            
			
            item = GetBy(strWhere, includes).FirstOrDefault();
            return item;

        }
		 public accIncomeMatchInEx GetByKey(Guid guidIncomeMatchInEx, string usemode, string includes)
		{
			return GetByKey(guidIncomeMatchInEx, usemode, null, includes);

		 }
		 public accIncomeMatchInEx GetByKey(Guid guidIncomeMatchInEx, string usemode, ContextRequest context,  string includes)
        {
            accIncomeMatchInEx item = null;
			string strWhere = @"GuidIncomeMatchInEx = Guid(""" + guidIncomeMatchInEx.ToString()+@""")";
			if (context == null)
				context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
			context.CustomQuery.IsByKey = true;
            context.CustomQuery.FilterExpressionString = strWhere;
            context.UseMode = usemode;
            item = GetBy(strWhere,context , includes).FirstOrDefault();
            return item;

        }

        #region Dynamic Predicate
        public List<accIncomeMatchInEx> GetBy(Expression<Func<accIncomeMatchInEx, bool>> predicate, int? pageSize, int? page)
        {
            return this.GetBy(predicate, pageSize, page, null, null);
        }
        public List<accIncomeMatchInEx> GetBy(Expression<Func<accIncomeMatchInEx, bool>> predicate, ContextRequest contextRequest)
        {

            return GetBy(predicate, contextRequest,"");
        }
        
        public List<accIncomeMatchInEx> GetBy(Expression<Func<accIncomeMatchInEx, bool>> predicate, ContextRequest contextRequest, params Expression<Func<accIncomeMatchInEx, object>>[] includes)
        {
            StringBuilder sb = new StringBuilder();
           if (includes != null)
            {
                foreach (var path in includes)
                {

						if (sb.Length > 0) sb.Append(",");
						sb.Append(SFSdotNet.Framework.Linq.Utils.IncludeToString<accIncomeMatchInEx>(path));

               }
            }
            return GetBy(predicate, contextRequest, sb.ToString());
        }
        
        
        public List<accIncomeMatchInEx> GetBy(Expression<Func<accIncomeMatchInEx, bool>> predicate, string includes)
        {
			ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";

            return GetBy(predicate, context, includes);
        }

        public List<accIncomeMatchInEx> GetBy(Expression<Func<accIncomeMatchInEx, bool>> predicate, params Expression<Func<accIncomeMatchInEx, object>>[] includes)
        {
			if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }
			ContextRequest context = new ContextRequest();
			            context.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            context.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";
            return GetBy(predicate, context, includes);
        }

      
		public bool DisableCache { get; set; }
		 public List<accIncomeMatchInEx> GetBy(Expression<Func<accIncomeMatchInEx, bool>> predicate, ContextRequest contextRequest, string includes)
        {
            using (EFPocoContext con = new EFPocoContext())
            {
				if (DisableCache) 
                	con.CachingPolicy = EFCachingProvider.Caching.CachingPolicy.NoCaching;

				List<accIncomeMatchInEx> result = null;
                 e = null;
	
				OnGetting(con, e = new BusinessRulesEventArgs<accIncomeMatchInEx>() {  FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null) });

               // OnGetting(con,e = new BusinessRulesEventArgs<accIncomeMatchInEx>() { FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = contextRequest.CustomQuery.FilterExpressionString});
				   if (e != null) {
				    predicate = e.FilterExpression;
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				con.EnableChangeTrackingUsingProxies = false;
				con.WrappedContext.accIncomeMatchInExes.MergeOption = MergeOption.NoTracking;
                con.WrappedContext.ContextOptions.ProxyCreationEnabled = false;
                if (predicate == null) predicate = PredicateBuilder.True<accIncomeMatchInEx>();
 				string fkIncludes = "accIncomePending,accIncomeExpens";
                if(contextRequest!=null){
					if (contextRequest.CustomQuery != null)
					{
						if (contextRequest.CustomQuery.IncludeForeignKeyPaths != null) {
							if (contextRequest.CustomQuery.IncludeForeignKeyPaths.Value == false)
								fkIncludes = "";
						}
					}
				}
				if (!string.IsNullOrEmpty(includes))
					includes = includes + "," + fkIncludes;
				else
					includes = fkIncludes;
                
                var es = con.accIncomeMatchInExes;

                IQueryable<accIncomeMatchInEx> query = es.AsQueryable();

                                if (!string.IsNullOrEmpty(includes))
                {
                    foreach (string include in includes.Split(char.Parse(",")))
                    {
						if (!string.IsNullOrEmpty(include))
                            query = query.Include(include);
                    }
                }
                    predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
					 	if (!preventSecurityRestrictions)
						{
							if (contextRequest != null )
		                    	if (contextRequest.User !=null )
		                        	if (contextRequest.Company != null)
		                        		predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				query =query.Where(predicate);
                query = ContextQueryBuilder<accIncomeMatchInEx>.ApplyContextQuery(query, contextRequest);

                result = query.ToList<accIncomeMatchInEx>();
				  
                if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e =  new BusinessRulesEventArgs<accIncomeMatchInEx>() { Items= result, IncludingComputedLinq = false, ContextRequest = contextRequest,  FilterExpression = predicate } :  e);
  
			

                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
            }
        }
		public void UpdateAgile(accIncomeMatchInEx item, params string[] fields)
         {
             List<accIncomeMatchInEx> list = new List<accIncomeMatchInEx>();
             list.Add(item);
             this.UpdateBulk(list, fields);
         }
		public void UpdateBulk(List<accIncomeMatchInEx>  items, params string[] fields)
         {
             SFSdotNet.Framework.My.ContextRequest req = new SFSdotNet.Framework.My.ContextRequest();
             req.CustomQuery = new SFSdotNet.Framework.My.CustomQuery();
             foreach (var field in fields)
             {
                 req.CustomQuery.SpecificProperties.Add(field);
             }
             UpdateBulk(items, req);

         }
        public void UpdateBulk(List<accIncomeMatchInEx> items, ContextRequest req)
        {
            using (EFContext con = new EFContext())
            {



                foreach (var item in items)
                {
                    var setT = con.CreateObjectSet<accIncomeMatchInEx>("accIncomeMatchInExes");


                    var itemForAttach = new accIncomeMatchInEx();
			itemForAttach.GuidIncomeMatchInEx = item.GuidIncomeMatchInEx;
					
                    itemForAttach = SFSdotNet.Framework.Entities.ConvertEntity.SetProperties<accIncomeMatchInEx>(item, itemForAttach, null, req.CustomQuery.SpecificProperties.ToArray());
                    setT.Attach(itemForAttach);


                    foreach (var property in req.CustomQuery.SpecificProperties)
                    {
						
                        if (property != "GuidIncomeMatchInEx")
                            con.ObjectStateManager.GetObjectStateEntry(itemForAttach).SetModifiedProperty(property);

                    }

                }
                con.SaveChanges();


            }
        }
		/*public int Update(List<accIncomeMatchInEx> items, ContextRequest contextRequest)
            {
                int result = 0;
                using (EFContext con = new EFContext())
                {
                   
                

                    foreach (var item in items)
                    {
                        //secMessageToUser messageToUser = new secMessageToUser();
                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            item.GetType().GetProperty(prop).SetValue(item, item.GetType().GetProperty(prop).GetValue(item));
                        }
                        //messageToUser.GuidMessageToUser = (Guid)item.GetType().GetProperty("GuidMessageToUser").GetValue(item);

                        var setObject = con.CreateObjectSet<accIncomeMatchInEx>("accIncomeMatchInExes");
                        //messageToUser.Readed = DateTime.UtcNow;
                        setObject.Attach(item);
                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            con.ObjectStateManager.GetObjectStateEntry(item).SetModifiedProperty(prop);
                        }
                       
                    }
                    result = con.SaveChanges();

                    


                }
                return result;
            }
           */
        public List<accIncomeMatchInEx> GetBy(string predicateString, ContextRequest contextRequest, string includes)
        {
            using (EFContext con = new EFContext())
            {
				if (DisableCache) 
                	con.CachingPolicy = EFCachingProvider.Caching.CachingPolicy.NoCaching;

				Filter filter = new Filter();
                if (predicateString.Contains("|"))
                {
                    string ft = GetSpecificFilter(predicateString);
                    if (!string.IsNullOrEmpty(ft))
                        filter.SetFilterPart("ft", ft);
                   
                    contextRequest.FreeText = predicateString.Split(char.Parse("|"))[1];
                    var q1 = predicateString.Split(char.Parse("|"))[0];
                    if (!string.IsNullOrEmpty(q1))
                    {
                        filter.ProcessText(q1);
                    }
                }
                else {
                    filter.ProcessText(predicateString);
                }

				List<accIncomeMatchInEx> result = null;
                 e = null;
					OnGetting(con, e = new BusinessRulesEventArgs<accIncomeMatchInEx>() { Filter = filter, ContextRequest = contextRequest /*, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null)*/ });

                  //OnGetting(con,e = new BusinessRulesEventArgs<accIncomeMatchInEx>() {  ContextRequest = contextRequest, FilterExpressionString = predicateString });
			   	if (e != null) {
				    //predicateString = e.GetQueryString();
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				//	 else {
                //      predicateString = predicateString.Replace("*extraFreeText*", "").Replace("()","");
                //  }
				//con.EnableChangeTrackingUsingProxies = false;
				con.accIncomeMatchInExes.MergeOption = MergeOption.NoTracking;
                con.ContextOptions.ProxyCreationEnabled = false;
                //if (predicate == null) predicate = PredicateBuilder.True<accIncomeMatchInEx>();
 				string fkIncludes = "accIncomePending,accIncomeExpens";
                if(contextRequest!=null){
					if (contextRequest.CustomQuery != null)
					{
						if (contextRequest.CustomQuery.IncludeForeignKeyPaths != null) {
							if (contextRequest.CustomQuery.IncludeForeignKeyPaths.Value == false)
								fkIncludes = "";
						}
					}
				}else{
                    contextRequest = new ContextRequest();
                    contextRequest.CustomQuery = new CustomQuery();

                }
				if (!string.IsNullOrEmpty(includes))
					includes = includes + "," + fkIncludes;
				else
					includes = fkIncludes;
                
                var es = con.accIncomeMatchInExes;
				IQueryable<accIncomeMatchInEx> query = es.AsQueryable();
		
				// include relations FK
				if(string.IsNullOrEmpty(includes) ){
					includes ="";
				}
				bool includeaccIncomePending = includes.Split(char.Parse(",")).Contains("accIncomePending");

				bool includeaccIncomeExpens = includes.Split(char.Parse(",")).Contains("accIncomeExpens");

				StringBuilder sbQuerySystem = new StringBuilder();
                    //predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				

				//if (!string.IsNullOrEmpty(predicateString))
                //      sbQuerySystem.Append(" And ");
                //sbQuerySystem.Append(" (IsDeleted != true Or IsDeleted = null) ");
				 filter.SetFilterPart("de", "(IsDeleted != true OR IsDeleted = null)");


					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
	                    	if (contextRequest.User !=null )
	                        	if (contextRequest.Company != null ){
	                        		//if (sbQuerySystem.Length > 0)
	                        		//	    			sbQuerySystem.Append( " And ");	
									//sbQuerySystem.Append(@" (GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
									filter.SetFilterPart("co",@"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @"""))");
								}
						}	
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				//string predicateString = predicate.ToDynamicLinq<accIncomeMatchInEx>();
				//predicateString += sbQuerySystem.ToString();
				filter.CleanAndProcess("");

				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed(); //SFSdotNet.Framework.Linq.Utils.ExtractSpecificProperties("", ref predicateString );               
                string predicateWithManyRelations = filter.GetFilterChildren(); //SFSdotNet.Framework.Linq.Utils.CleanPartExpression(predicateString);

                //QueryUtils.BreakeQuery1(predicateString, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
                var _queryable = query.AsQueryable();
                if (!string.IsNullOrEmpty(predicateWithManyRelations))
                    _queryable = _queryable.Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams);
				if (contextRequest.CustomQuery.SpecificProperties.Count > 0)
                {

                    StringBuilder sbProps = new StringBuilder();
                    contextRequest.CustomQuery.SpecificProperties.Add("GuidIncomeMatchInEx");
                    
					foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                    {
						if(sbProps.Length > 0)
							sbProps.Append(",");
                        sbProps.Append(prop);
                    }
					    IQueryable  queryableSelective = null ;
					  
					  if (!string.IsNullOrEmpty(predicateWithManyRelations))
							queryableSelective = con.accIncomeMatchInExes.AsQueryable().Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams).Select(string.Format("new({0})", sbProps.ToString()));
					else
						queryableSelective = con.accIncomeMatchInExes.AsQueryable().Select(string.Format("new({0})", sbProps.ToString()));


                    //if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
					//	queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

                    QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
                    
					if (!string.IsNullOrEmpty(queryOps.OrderByAndSort))
                        queryableSelective = queryableSelective.OrderBy(queryOps.OrderByAndSort);
                    if (queryOps.Skip != null)
                    {
                        queryableSelective = queryableSelective.Skip(queryOps.Skip.Value);
                    }
                    if (queryOps.PageSize != null)
                    {
                        queryableSelective = queryableSelective.Take(queryOps.PageSize.Value);
                    }
                    //var results = queryableSelective.ToList();
                    result = new List<accIncomeMatchInEx>();
                    accIncomeMatchInEx itemDef = null;
                    foreach (var item in queryableSelective)
                    {
                        itemDef = new accIncomeMatchInEx();

                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            if (!prop.Contains("."))
                            {
                                itemDef.GetType().GetProperty(prop).SetValue(itemDef, item.GetType().GetProperty(prop).GetValue(item));
                            }
                            else {
                                throw new Exception("La seleccion de relaciones aún no esta soportada");
                            }

                        }

                        result.Add(itemDef);
                    }

                }
                else
                {
				var  queryable = _queryable.Select(                    
				p => 
                        new
                    {
					GuidIncomeMatchInEx = p.GuidIncomeMatchInEx
,CreatedDate = p.CreatedDate
,UpdatedDate = p.UpdatedDate
,CreatedBy = p.CreatedBy
,UpdatedBy = p.UpdatedBy
,IsDeleted = p.IsDeleted
,GuidCompany = p.GuidCompany

,accIncomePending = includeaccIncomePending ? p.accIncomePending:null
,accIncomeExpens = includeaccIncomeExpens ? p.accIncomeExpens:null


	
                    }
                    
                    );
					
				
                 if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
                    queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

				QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
            	if (!string.IsNullOrEmpty(queryOps.OrderByAndSort))
					queryable = queryable.OrderBy(queryOps.OrderByAndSort);
               	if (queryOps.Skip != null)
                {
                    queryable = queryable.Skip(queryOps.Skip.Value);
                }
                if (queryOps.PageSize != null)
                {
                    queryable = queryable.Take (queryOps.PageSize.Value);
                }
                result = queryable.AsEnumerable().
                    Select(
                    p =>  new accIncomeMatchInEx()
                    {
					GuidIncomeMatchInEx = p.GuidIncomeMatchInEx
,CreatedDate = p.CreatedDate
,UpdatedDate = p.UpdatedDate
,CreatedBy = p.CreatedBy
,UpdatedBy = p.UpdatedBy
,IsDeleted = p.IsDeleted
,GuidCompany = p.GuidCompany
,accIncomePending = p.accIncomePending
,accIncomeExpens = p.accIncomeExpens

                    }
                     ).ToList();
				}


			 if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e = new BusinessRulesEventArgs<accIncomeMatchInEx>() { Items= result, IncludingComputedLinq = true, ContextRequest = contextRequest, FilterExpressionString  = predicateString } :  e);
  
			
  
                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
            }
        }
		public List<accIncomeMatchInEx> GetBy(Expression<Func<accIncomeMatchInEx, bool>> predicate, bool loadRelations, ContextRequest contextRequest)
        {
			if(!loadRelations)
				return GetBy(predicate, contextRequest);
			else
				return GetBy(predicate, contextRequest, "");

        }

        public List<accIncomeMatchInEx> GetBy(Expression<Func<accIncomeMatchInEx, bool>> predicate, int? pageSize, int? page, string orderBy, SFSdotNet.Framework.Data.SortDirection? sortDirection)
        {
            return GetBy(predicate, new ContextRequest() { CustomQuery = new CustomQuery() { Page = page, PageSize = pageSize, OrderBy = orderBy, SortDirection = sortDirection } });
        }
        public List<accIncomeMatchInEx> GetBy(Expression<Func<accIncomeMatchInEx, bool>> predicate)
        {

			if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }
			ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();

			contextRequest.CurrentContext = SFSdotNet.Framework.My.Context.CurrentContext;
			            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

            contextRequest.CustomQuery.FilterExpressionString = null;
            return this.GetBy(predicate, contextRequest, "");
        }
        #endregion
        #region Dynamic String
		private string GetSpecificFilter(string filter) {
            string result = "";
		    //string linqFilter = String.Empty;
            string freeTextFilter = String.Empty;
            if (filter.Contains("|"))
            {
               // linqFilter = filter.Split(char.Parse("|"))[0];
                freeTextFilter = filter.Split(char.Parse("|"))[1];
            }
            //else {
            //    freeTextFilter = filter;
            //}
            //else {
            //    linqFilter = filter;
            //}
			// linqFilter = SFSdotNet.Framework.Linq.Utils.ReplaceCustomDateFilters(linqFilter);
            //string specificFilter = linqFilter;
            if (!string.IsNullOrEmpty(freeTextFilter))
            {
                System.Text.StringBuilder sbCont = new System.Text.StringBuilder();
                /*if (specificFilter.Length > 0)
                {
                    sbCont.Append(" AND ");
                    sbCont.Append(" ({0})");
                }
                else
                {
                    sbCont.Append("{0}");
                }*/
                //var words = freeTextFilter.Split(char.Parse(" "));
				var word = freeTextFilter;
                System.Text.StringBuilder sbSpec = new System.Text.StringBuilder();
                 int nWords = 1;
				/*foreach (var word in words)
                {
					if (word.Length > 0){
                    if (sbSpec.Length > 0) sbSpec.Append(" AND ");
					if (words.Length > 1) sbSpec.Append("("); */
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
								
					//if (sbSpec.Length > 2)
					//	sbSpec.Append(" OR "); // test
					sbSpec.Append(string.Format(@"accIncomeExpens.Comments.Contains(""{0}"")", word));
								 //sbSpec.Append("*extraFreeText*");

                    /*if (words.Length > 1) sbSpec.Append(")");
					
					nWords++;

					}

                }*/
                //specificFilter = string.Format("{0}{1}", specificFilter, string.Format(sbCont.ToString(), sbSpec.ToString()));
                                 result = sbSpec.ToString();  
            }
			//result = specificFilter;
			
			return result;

		}
	
			public List<accIncomeMatchInEx> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  params object[] extraParams)
        {
			return GetBy(filter, pageSize, page, orderBy, orderDir,  null, extraParams);
		}
           public List<accIncomeMatchInEx> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir, string usemode, params object[] extraParams)
            { 
                return GetBy(filter, pageSize, page, orderBy, orderDir, usemode, null, extraParams);
            }


		public List<accIncomeMatchInEx> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  string usemode, ContextRequest context, params object[] extraParams)

        {

            // string freetext = null;
            //if (filter.Contains("|"))
            //{
            //    int parts = filter.Split(char.Parse("|")).Count();
            //    if (parts > 1)
            //    {

            //        freetext = filter.Split(char.Parse("|"))[1];
            //    }
            //}
		
            //string specificFilter = "";
            //if (!string.IsNullOrEmpty(filter))
            //  specificFilter=  GetSpecificFilter(filter);
            if (string.IsNullOrEmpty(orderBy))
            {
			                orderBy = "UpdatedDate";
            }
			//orderDir = "desc";
			SFSdotNet.Framework.Data.SortDirection direction = SFSdotNet.Framework.Data.SortDirection.Ascending;
            if (!string.IsNullOrEmpty(orderDir))
            {
                if (orderDir == "desc")
                    direction = SFSdotNet.Framework.Data.SortDirection.Descending;
            }
            if (context == null)
                context = new ContextRequest();
			else
                context.CustomQuery = new CustomQuery();
             //context.FreeText = freetext;
             context.UseMode = usemode;
             context.CustomQuery =new SFSdotNet.Framework.My.CustomQuery()
 
                {
                    ExtraParams = extraParams,

                    OrderBy = orderBy,
                    SortDirection = direction,
                    Page = page,
                    PageSize = pageSize
               };
            

            if (!preventSecurityRestrictions) {
			 if (context.CurrentContext == null)
                {
					if (SFSdotNet.Framework.My.Context.CurrentContext != null &&  SFSdotNet.Framework.My.Context.CurrentContext.Company != null && SFSdotNet.Framework.My.Context.CurrentContext.User != null)
					{
						context.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
						context.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

					}
					else {
						throw new Exception("The security rule require a specific user and company");
					}
				}
            }
            return GetBy(filter, context);
  
        }


        public List<accIncomeMatchInEx> GetBy(string strWhere, ContextRequest contextRequest)
        {
        	#region old code
				
				 //Expression<Func<tvsReservationTransport, bool>> predicate = null;
				string strWhereClean = strWhere.Replace("*extraFreeText*", "").Replace("()", "");
                //if (!string.IsNullOrEmpty(strWhereClean)){

                //    object[] extraParams = null;
                //    //if (contextRequest != null )
                //    //    if (contextRequest.CustomQuery != null )
                //    //        extraParams = contextRequest.CustomQuery.ExtraParams;
                //    //predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<tvsReservationTransport, bool>(strWhereClean, extraParams != null? extraParams.Cast<Guid>(): null);				
                //}
				 if (contextRequest == null)
                {
                    contextRequest = new ContextRequest();
                    if (contextRequest.CustomQuery == null)
                        contextRequest.CustomQuery = new CustomQuery();
                }
                  if (!preventSecurityRestrictions) {
					if (contextRequest.User == null || contextRequest.Company == null)
                      {
                     if (SFSdotNet.Framework.My.Context.CurrentContext.Company != null && SFSdotNet.Framework.My.Context.CurrentContext.User != null)
                     {
                         contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                         contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

                     }
                     else {
                         throw new Exception("The security rule require a specific User and Company ");
                     }
					 }
                 }
            contextRequest.CustomQuery.FilterExpressionString = strWhere;
				//return GetBy(predicate, contextRequest);  

			#endregion				
				
                    return GetBy(strWhere, contextRequest, "");  


        }
       public List<accIncomeMatchInEx> GetBy(string strWhere)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
			
            return GetBy(strWhere, context, null);
        }

        public List<accIncomeMatchInEx> GetBy(string strWhere, string includes)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
            return GetBy(strWhere, context, includes);
        }

        #endregion
        #endregion
		
		  #region SaveOrUpdate
        private accIncomeMatchInEx Save(accIncomeMatchInEx entity, bool saveChanges, EFPocoContext con)
        {
				ObjectContext context = null;
            return Update(entity, saveChanges,null, out context);

			
        }
		 public  accIncomeMatchInEx Create( accIncomeMatchInEx entity, params Expression<Func< accIncomeMatchInEx, object>>[] paths)
         {
             return Create(entity, null, paths);

         }
 		 public accIncomeMatchInEx Create(accIncomeMatchInEx entity)
        {
				ObjectContext context = null;
				    if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: Create");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

				return this.Create(entity, true, contextRequest, out context);


        }
        public accIncomeMatchInEx Create(accIncomeMatchInEx entity, ContextRequest contextRequest)
         {
             ObjectContext context = null;
             return this.Create(entity, true, contextRequest,out context);

         }
         public accIncomeMatchInEx Create(accIncomeMatchInEx entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext context)
        {
                    return Create(entity, saveChanges , contextRequest , out context, null);
        }
         public accIncomeMatchInEx Create(accIncomeMatchInEx entity, ContextRequest contextRequest, params Expression<Func<accIncomeMatchInEx,object>>[] paths)
        {
            ObjectContext context = null;
            if(paths != null)
				return Create(entity, true,contextRequest, out context, paths);
			else 
				return Create(entity, true,contextRequest, out context);
        }
        public accIncomeMatchInEx Create(accIncomeMatchInEx entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext context, params Expression<Func<accIncomeMatchInEx,object>>[] pocopaths)
        {
			using (EFPocoContext con = new EFPocoContext())
			{
				accIncomeMatchInEx itemResult = null;
#region Autos


			entity.CreatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.CreatedBy = contextRequest.User.GuidUser;
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.UpdatedBy = contextRequest.User.GuidUser;
	
			if (contextRequest != null)
				if(contextRequest.User != null)
					if (contextRequest.Company != null)
						entity.GuidCompany = contextRequest.Company.GuidCompany;
	

#endregion
                e = null;
                OnCreating(this,e = new BusinessRulesEventArgs<accIncomeMatchInEx>() { ContextRequest = contextRequest, Item=entity, PathExpressions = pocopaths, SaveChanges =saveChanges });
				   if (e != null) {
						if (e.Cancel)
						{
							context = null;
							return e.Item;

						}
					}

                    if (entity.GuidIncomeMatchInEx == Guid.Empty)
                   {
                       entity.GuidIncomeMatchInEx = Guid.NewGuid();

                   }



				accIncomeMatchInExAdapter adapter = con.GetAdapterObject<accIncomeMatchInExAdapter>(entity);;
				List<Expression<Func<accIncomeMatchInExAdapter, object>>> paths = new List<Expression<Func<accIncomeMatchInExAdapter,object>>>();
                
			    if (pocopaths != null && pocopaths.Length > 0)
                {
					// Translate
                    foreach (var pocopath in pocopaths)
                    {
                        var param = Expression.Parameter(typeof(accIncomeMatchInExAdapter), "p");
                        var member = MemberExpression.PropertyOrField(param, ((System.Linq.Expressions.MemberExpression)(((System.Linq.Expressions.LambdaExpression)(pocopath)).Body)).Member.Name);
                        Expression<Func<accIncomeMatchInExAdapter, object>> path  = null;
                        switch(member.Member.Name){
							
							default:
								path = p => member;
							break;
                        }

                        
                       paths.Add(path.Expand());
                    }
                }
                object aux = null;
					paths.Add(p => p.accIncomePending.WithoutUpdate());

					paths.Add(p => p.accIncomeExpens.WithoutUpdate());

					//paths = pathBuilder.ToArray();

				if (adapter.accIncomePending != null ){
					if(adapter.accIncomePending.EntityKey == null) adapter.accIncomePending.EntityKey = con.WrappedContext.CreateEntityKey("accIncomePendings", adapter.accIncomePending);
				}
				if (adapter.accIncomeExpens != null ){
					if(adapter.accIncomeExpens.EntityKey == null) adapter.accIncomeExpens.EntityKey = con.WrappedContext.CreateEntityKey("accIncomeExpenses", adapter.accIncomeExpens);
				}



                //con.WrappedContext.AttachObjectGraph<accIncomeMatchInExAdapter>(adapter, p=>p.accIncomePending, p=>p.accIncomeExpens);
                con.WrappedContext.AttachObjectGraph<accIncomeMatchInExAdapter>(adapter, paths.ToArray());
              	if (saveChanges){
                    con.WrappedContext.SaveChanges(SaveOptions.AcceptAllChangesAfterSave);
					 
				}
                else
                    con.WrappedContext.SaveChanges(SaveOptions.None);
                if (!saveChanges)
                    context = con.WrappedContext;
                else
                    context = null;
				itemResult = adapter.PocoEntity;
                if (e != null)
                {
                    e.Item = itemResult;
                }
                OnCreated(this, e == null ? e = new BusinessRulesEventArgs<accIncomeMatchInEx>() { ContextRequest = contextRequest, Item = itemResult, PathExpressions = pocopaths, SaveChanges = saveChanges } : e);



                if (e != null)
                {
                    itemResult = e.Item;
                }
                              return itemResult;
            }
        }
        BusinessRulesEventArgs<accIncomeMatchInEx> e = null;
        public void Create(List<accIncomeMatchInEx> entities)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            Create(entities, contextRequest, null);
        }
        public void Create(List<accIncomeMatchInEx> entities, ContextRequest contextRequest)
        
        {
			ObjectContext context = null;
            	foreach (accIncomeMatchInEx entity in entities)
				{
					this.Create(entity, true, contextRequest, out context);
				}
        }
         public accIncomeMatchInEx Update(accIncomeMatchInEx entity)
        {
            if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return Update(entity, contextRequest);
        }
        public accIncomeMatchInEx Update(accIncomeMatchInEx entity, ContextRequest requestContext)
        {
			  ObjectContext context = null;
            return Update(entity, true,requestContext, out context);
         }
		public  accIncomeMatchInEx Update(accIncomeMatchInEx entity, params Expression<Func<accIncomeMatchInEx, object>>[] pocopaths)
        {
			  ObjectContext context = null;
              return Update(entity, true, null, out context, pocopaths);
         }
        public accIncomeMatchInEx Update(accIncomeMatchInEx entity, ContextRequest requestContext, bool saveChanges, out ObjectContext outcontext)
        {
			return Update(entity, saveChanges,requestContext, out outcontext, null);
		}
         public accIncomeMatchInEx Update(accIncomeMatchInEx entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext outcontext, params Expression<Func<accIncomeMatchInEx,object>>[] pocopaths)
        {
		 if ((System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null) && contextRequest == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Update");
            }
            if (contextRequest == null)
            {
                contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            }

			using (EFPocoContext con = new EFPocoContext())
			{
				accIncomeMatchInEx  itemResult = null;

	
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
			if(contextRequest.User != null)
				entity.UpdatedBy = contextRequest.User.GuidUser;

	    var oldentity = GetBy(p => p.GuidIncomeMatchInEx == entity.GuidIncomeMatchInEx, contextRequest).FirstOrDefault();
		if (oldentity != null) {
		
            entity.CreatedDate = oldentity.CreatedDate;
            entity.CreatedBy = oldentity.CreatedBy;
	
            entity.GuidCompany = oldentity.GuidCompany;
	
			

		}

				e = null;
                OnUpdating(this,e = new BusinessRulesEventArgs<accIncomeMatchInEx>() { ContextRequest = contextRequest, Item=entity, PathExpressions = pocopaths, SaveChanges =saveChanges });
				   if (e != null) {
						if (e.Cancel)
						{
							outcontext = null;
							return e.Item;

						}
					}

                accIncomeMatchInExAdapter adapter = con.GetAdapterObject<accIncomeMatchInExAdapter>(entity);
                adapter.EntityKey = con.WrappedContext.CreateEntityKey("accIncomeMatchInExes", adapter);
				    var es = con.accIncomeMatchInExes;
				List<Expression<Func<accIncomeMatchInExAdapter, object>>> paths = new List<Expression<Func<accIncomeMatchInExAdapter,object>>>();
                /* if (pocopaths != null)
                    if (pocopaths.Length == 0)
                        pocopaths = null;*/

			    if (pocopaths != null && pocopaths.Length > 0)
                {
					// Translate
                    foreach (var pocopath in pocopaths)
                    {
                        var param = Expression.Parameter(typeof(accIncomeMatchInExAdapter), "p");
                        var member = MemberExpression.PropertyOrField(param, ((System.Linq.Expressions.MemberExpression)(((System.Linq.Expressions.LambdaExpression)(pocopath)).Body)).Member.Name);
                        Expression<Func<accIncomeMatchInExAdapter, object>> path  = null;
                        switch(member.Member.Name){
							
							default:
								path = p => member;
							break;
                        }

                        paths.Add(path.Expand());
 					}
                }
                else {
                  paths = new List<Expression<Func<accIncomeMatchInExAdapter, object>>>();

					//List<Expression<Func<accIncomeMatchInExAdapter,object>>> pathBuilder = new List<Expression<Func<accIncomeMatchInExAdapter,object>>>();
					paths.Add(p => p.accIncomePending.WithoutUpdate());

					paths.Add(p => p.accIncomeExpens.WithoutUpdate());

		
					//paths = pathBuilder.ToArray();		
			}
			object aux = null;
				if (adapter.accIncomePending != null ){
					if(adapter.accIncomePending.EntityKey == null) adapter.accIncomePending.EntityKey = con.WrappedContext.CreateEntityKey("accIncomePendings", adapter.accIncomePending);
				}

                
				if (adapter.accIncomeExpens != null ){
					if(adapter.accIncomeExpens.EntityKey == null) adapter.accIncomeExpens.EntityKey = con.WrappedContext.CreateEntityKey("accIncomeExpenses", adapter.accIncomeExpens);
				}

                



                //con.AttachObjectGraph<accIncomeMatchInEx>(adapter, p=>p.accIncomePending, p=>p.accIncomeExpens);
                con.WrappedContext.AttachObjectGraph<accIncomeMatchInExAdapter>(adapter, paths.ToArray());
				if (saveChanges){
                	con.WrappedContext.SaveChanges();
					 
					}
                if(!saveChanges)
					outcontext = con.WrappedContext;
				else
					outcontext = null;
				itemResult = adapter.PocoEntity;
				OnUpdated(this, e = new BusinessRulesEventArgs<accIncomeMatchInEx>() { ContextRequest = contextRequest, Item=itemResult, PathExpressions = pocopaths, SaveChanges =saveChanges });

              	return itemResult;

			  }
        }
        public accIncomeMatchInEx Save(accIncomeMatchInEx entity)
        {
			return Save(entity, true, null);
        }
        public int Save(List<accIncomeMatchInEx> entities)
        {
			using (EFPocoContext con = new EFPocoContext())
			{
			
            int n = 0;
            foreach (accIncomeMatchInEx item in entities)
            {
                try
                {
                    this.Save(item, false, con);
                    n++;
                }catch (Exception ex){
                    SFSdotNet.Framework.My.EventLog.Exception(ex);
                }
            }
            con.SaveChanges();
            return n;
            }
        }
        #endregion
        #region Delete
        public void Delete(accIncomeMatchInEx entity)
        {
				this.Delete(entity, null);
			
        }
		 public void Delete(accIncomeMatchInEx entity, ContextRequest contextRequest)
        {
				ObjectContext context = null;
				this.Delete(entity, true, out context, contextRequest);
			
        }

        
        public void Delete(accIncomeMatchInEx entity, bool saveChanges, out  ObjectContext context, ContextRequest contextRequest, BusinessRulesEventArgs<accIncomeMatchInEx> e = null)
        {
			using (EFPocoContext _con = new EFPocoContext())
			{
				int result = 0;
				
               	BusinessRulesEventArgs<accIncomeMatchInEx> _e = null;
               List<accIncomeMatchInEx> _items = new List<accIncomeMatchInEx>();
                _items.Add(entity);
                if (e == null || e.PreventPartialPropagate == false)
                {
                    OnDeleting(this, _e = (e == null ? new BusinessRulesEventArgs<accIncomeMatchInEx>() { ContextRequest = contextRequest, Item = entity, Items = _items, SaveChanges = saveChanges } : e));
                }
                if (_e != null)
                {
                    if (_e.Cancel)
						{
							context = null;
							return;

						}
					}


				accIncomeMatchInExAdapter adapter = _con.GetAdapterObject<accIncomeMatchInExAdapter>(entity);
                adapter.EntityKey = _con.WrappedContext.CreateEntityKey("accIncomeMatchInExes", adapter);
                
	            //adapter = _con.WrappedContext.AttachObjectGraph<accIncomeMatchInExAdapter>(adapter);
				try{
					_con.WrappedContext.AttachTo("accIncomeMatchInExes", adapter);
                }catch{
					
				}
									//IsDeleted
					bool logicDelete = true;
					if (adapter.IsDeleted != null)
					{
						if (adapter.IsDeleted.Value)
							logicDelete = false;
					}
					if (logicDelete)
					{
											entity = GetBy(p => p.GuidIncomeMatchInEx == entity.GuidIncomeMatchInEx, contextRequest).FirstOrDefault();
						entity.IsDeleted = true;
						Update(entity, contextRequest);
					}
					else {
						_con.WrappedContext.DeleteObject(adapter);
					}
								
				if (!saveChanges)
                    context = _con.WrappedContext;
                else
                    context = null;
				 SaveOptions saveOption = SaveOptions.None;
                if (saveChanges)
                    saveOption = SaveOptions.AcceptAllChangesAfterSave;

				result = _con.WrappedContext.SaveChanges(saveOption);
				if (saveChanges){
					
					}
			if (e == null || e.PreventPartialPropagate == false)
                {

                    if (_e == null)
                        _e = new BusinessRulesEventArgs<accIncomeMatchInEx>() { ContextRequest = contextRequest, Item = entity, Items = _items };

                    OnDeleted(this, _e);
                }

				//return null;
			}            
        }
        public void Delete(List<accIncomeMatchInEx> entities,  ContextRequest contextRequest = null )
        {
				ObjectContext context = null;
			 BusinessRulesEventArgs<accIncomeMatchInEx> _e = null;

                OnDeleting(this, _e = new BusinessRulesEventArgs<accIncomeMatchInEx>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities });
                if (_e != null)
                {
                    if (_e.Cancel)
                    {
                        context = null;
                        return;

                    }
                }
                bool allSucced = true;
                BusinessRulesEventArgs<accIncomeMatchInEx> eToChilds = new BusinessRulesEventArgs<accIncomeMatchInEx>();
                if (_e != null)
                {
                    eToChilds = _e;
                }
                else
                {
                    eToChilds = new BusinessRulesEventArgs<accIncomeMatchInEx>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                }
				foreach (accIncomeMatchInEx item in entities)
				{
					try
                    {
                        this.Delete(item, true, out context, contextRequest, e: eToChilds);
                    }
                    catch (Exception ex)
                    {
                        SFSdotNet.Framework.My.EventLog.Error(ex);
                        allSucced = false;
                    }
				}
				if (_e == null)
                    _e = new BusinessRulesEventArgs<accIncomeMatchInEx>() { ContextRequest = contextRequest, CountResult = entities.Count, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                OnDeleted(this, _e);

			
        }
        #endregion
 
        #region GetCount
		 public int GetCount(Expression<Func<accIncomeMatchInEx, bool>> predicate)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

			return GetCount(predicate, contextRequest);
		}
        public int GetCount(Expression<Func<accIncomeMatchInEx, bool>> predicate, ContextRequest contextRequest)
        {


		
			using (EFPocoContext con = new EFPocoContext())
			{


				if (predicate == null) predicate = PredicateBuilder.True<accIncomeMatchInEx>();
           		predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted == null);
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    		if (contextRequest.User !=null )
                        		if (contextRequest.Company != null )
                        			predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				
				return con.accIncomeMatchInExes.Count(predicate);
			}

        }
		  public int GetCount(string predicate,  ContextRequest contextRequest)
         {
             return GetCount(predicate, null, contextRequest);
         }

         public int GetCount(string predicate)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return GetCount(predicate, contextRequest);
        }
		 public int GetCount(string predicate, string usemode){
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
				return GetCount( predicate,  usemode,  contextRequest);
		 }
        public int GetCount(string predicate, string usemode, ContextRequest contextRequest){
			  string freetext = null;
            Filter filter = new Filter();

              if (predicate.Contains("|"))
              {
                 
                  filter.SetFilterPart("ft", GetSpecificFilter(predicate));
                 
                  filter.ProcessText(predicate.Split(char.Parse("|"))[0]);
                  freetext = predicate.Split(char.Parse("|"))[1];
              }
              else {
                  filter.ProcessText(predicate);
              }
           
			e = null;
			contextRequest.FreeText = freetext;
			contextRequest.UseMode = usemode;
            OnCounting(this, e = new BusinessRulesEventArgs<accIncomeMatchInEx>() {  Filter =filter, ContextRequest = contextRequest });
            if (e != null)
            {
                if (e.Cancel)
                {
                    context = null;
                    return e.CountResult;

                }

            

            }
			 predicate = filter.GetFilterComplete();
			StringBuilder sbQuerySystem = new StringBuilder();
		
					
                    filter.SetFilterPart("de","(IsDeleted != true OR IsDeleted == null)");
			
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    	if (contextRequest.User !=null )
                        	if (contextRequest.Company != null ){
                        		

								filter.SetFilterPart("co", @"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
						
						
							}
							
							}
							if (preventSecurityRestrictions) preventSecurityRestrictions= false;
			using (EFContext con = new EFContext())
			{
				   
                 filter.CleanAndProcess("");
				//string predicateWithFKAndComputed = SFSdotNet.Framework.Linq.Utils.ExtractSpecificProperties("", ref predicate );               
				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed();
               string predicateWithManyRelations = filter.GetFilterChildren();
			   ///QueryUtils.BreakeQuery1(predicate, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
			   predicate = filter.GetFilterComplete();
               if (!string.IsNullOrEmpty(predicate))
               {
				
					
                    return con.accIncomeMatchInExes.Count(System.Linq.Dynamic.DynamicExpression.ParseLambda<accIncomeMatchInEx, bool>(predicate));
					
                }else
                    return con.accIncomeMatchInExes.Count();

			}

		}
         public int GetCount()
        {
            return GetCount(p => true);
        }
        #endregion
        
         public accIncomeMatchInEx Update(accIncomeMatchInEx entity, string paths)
        {
            return Update(entity, paths.Split(char.Parse(",")));
            
        }

        public accIncomeMatchInEx Update(accIncomeMatchInEx entity, string[] paths)
        {
            // Translate
            List<Expression<Func<accIncomeMatchInEx, object>>> pathList = new List<Expression<Func<accIncomeMatchInEx, object>>>();
            for (int i = 0; i <= paths.Length -1; i++)
            {
                var param = Expression.Parameter(typeof(accIncomeMatchInEx), "p");
                var member = MemberExpression.PropertyOrField(param, paths[i]);

                Expression<Func<accIncomeMatchInEx, object>> path = p => member;
                pathList.Add(path.Expand());
            }
			ObjectContext context = null;
			 return Update(entity, true,null, out context,  pathList.ToArray());
           //return Update(entity, pathList.ToArray());
        }

        public void Update(List<accIncomeMatchInEx> entities, string paths)
        {
            foreach (var entity in entities )
            {
                Update(entity, paths);
            }
        }
		public accIncomeMatchInEx Create(accIncomeMatchInEx entity, ContextRequest contextRequest, string paths)
        {
          

            if (string.IsNullOrEmpty(paths))
                return Create(entity, contextRequest);

            return Create(entity, contextRequest, paths.Split(char.Parse(",")));
        }
        public accIncomeMatchInEx Create(accIncomeMatchInEx entity, string paths)
        {
			 if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return Create(entity, contextRequest, paths);

        }

        public  void Create(List<accIncomeMatchInEx> entities, ContextRequest requestContext, string paths)
        {
            foreach (var entity in entities)
            {
                Create(entity,requestContext, paths);
            }
        }

        public void Create(List<accIncomeMatchInEx> entities, string[] paths)
        {
            foreach (var entity in entities)
            {
                Create(entity, null, paths);
            }
        }
        
        public accIncomeMatchInEx  Create(accIncomeMatchInEx entity, ContextRequest contextRequest, string[] paths)
        {
            List<Expression<Func<accIncomeMatchInEx, object>>> pathList = new List<Expression<Func<accIncomeMatchInEx, object>>>();
            for (int i = 0; i < paths.Length - 1; i++)
            {
                var param = Expression.Parameter(typeof(accIncomeMatchInEx), "p");
                var member = MemberExpression.PropertyOrField(param, paths[i]);

                Expression<Func<accIncomeMatchInEx, object>> path = p => member;
                pathList.Add(path.Expand());
            }
            return Create(entity, contextRequest, pathList.ToArray());
        }
        public void Delete(List<accIncomeMatchInEx.CompositeKey> entityKeys)
        {

            List<accIncomeMatchInEx> items = new List<accIncomeMatchInEx>();
            foreach (var itemKey in entityKeys)
            {
                items.Add(GetByKey(itemKey.GuidIncomeMatchInEx));
            }

            Delete(items);

        }
		
		
	}
		public partial class accIncomePendingsBR{
	 	
           
		 #region Partial methods

           partial void OnUpdating(object sender, BusinessRulesEventArgs<accIncomePending> e);

            partial void OnUpdated(object sender, BusinessRulesEventArgs<accIncomePending> e);

            partial void OnCreating(object sender, BusinessRulesEventArgs<accIncomePending> e);
            partial void OnCreated(object sender, BusinessRulesEventArgs<accIncomePending> e);

            partial void OnDeleting(object sender, BusinessRulesEventArgs<accIncomePending> e);
            partial void OnDeleted(object sender, BusinessRulesEventArgs<accIncomePending> e);

            partial void OnGetting(object sender, BusinessRulesEventArgs<accIncomePending> e);
            partial void OnTaken(object sender, BusinessRulesEventArgs<accIncomePending> e);
            partial void OnCounting(object sender, BusinessRulesEventArgs<accIncomePending> e);
 
 
            #endregion
			
		private static accIncomePendingsBR singlenton =null;
				public static accIncomePendingsBR NewInstance(){
					return  new accIncomePendingsBR();
					
				}
		public static accIncomePendingsBR Instance{
			get{
				if (singlenton == null)
					singlenton = new accIncomePendingsBR();
				return singlenton;
			}
		}
		private bool preventSecurityRestrictions = false;
		 public bool PreventAuditTrail { get; set;  }
		#region Fields
        EFPocoContext context = null;
        #endregion
        #region Constructor
        public accIncomePendingsBR()
        {
            context = new EFPocoContext();
        }
		 public accIncomePendingsBR(bool preventSecurity)
            {
                this.preventSecurityRestrictions = preventSecurity;
				context = new EFPocoContext();
            }
        #endregion
		
		#region Get

 		public IQueryable<accIncomePending> Get()
        {
            //using (EFContext con = new EFContext())
            //{
				EFContext con = new EFContext();
                var query = con.accIncomePendings.AsQueryable();
                con.ContextOptions.ProxyCreationEnabled = false;

                //query = ContextQueryBuilder<Nutrient>.ApplyContextQuery(query, contextRequest);

                return query;




            //}

        }
		
		public List<accIncomePending> GetAll()
        {
            return this.GetBy(p => true);
        }
        public List<accIncomePending> GetAll(string includes)
        {
            return this.GetBy(p => true, includes);
        }
        public accIncomePending GetByKey(Guid guidIncomePending)
        {
            return GetByKey(guidIncomePending, true);
        }
        public accIncomePending GetByKey(Guid guidIncomePending, bool loadIncludes)
        {
            accIncomePending item = null;
			var query = PredicateBuilder.True<accIncomePending>();
                    
			string strWhere = @"GuidIncomePending = Guid(""" + guidIncomePending.ToString()+@""")";
            Expression<Func<accIncomePending, bool>> predicate = null;
            if (!string.IsNullOrEmpty(strWhere))
                predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<accIncomePending, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
			 ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();
            contextRequest.CustomQuery.FilterExpressionString = strWhere;

			//item = GetBy(predicate, loadIncludes, contextRequest).FirstOrDefault();
			item = GetBy(strWhere,loadIncludes,contextRequest).FirstOrDefault();
            return item;
        }
         public List<accIncomePending> GetBy(string strWhere, bool loadRelations, ContextRequest contextRequest)
        {
            if (!loadRelations)
                return GetBy(strWhere, contextRequest);
            else
                return GetBy(strWhere, contextRequest, "");

        }
		  public List<accIncomePending> GetBy(string strWhere, bool loadRelations)
        {
              if (!loadRelations)
                return GetBy(strWhere, new ContextRequest());
            else
                return GetBy(strWhere, new ContextRequest(), "");

        }
         public accIncomePending GetByKey(Guid guidIncomePending, params Expression<Func<accIncomePending, object>>[] includes)
        {
            accIncomePending item = null;
			string strWhere = @"GuidIncomePending = Guid(""" + guidIncomePending.ToString()+@""")";
          Expression<Func<accIncomePending, bool>> predicate = null;
            if (!string.IsNullOrEmpty(strWhere))
                predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<accIncomePending, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
        item = GetBy(predicate, includes).FirstOrDefault();
         ////   item = GetBy(strWhere,includes).FirstOrDefault();
			return item;

        }
        public accIncomePending GetByKey(Guid guidIncomePending, string includes)
        {
            accIncomePending item = null;
			string strWhere = @"GuidIncomePending = Guid(""" + guidIncomePending.ToString()+@""")";
            
			
            item = GetBy(strWhere, includes).FirstOrDefault();
            return item;

        }
		 public accIncomePending GetByKey(Guid guidIncomePending, string usemode, string includes)
		{
			return GetByKey(guidIncomePending, usemode, null, includes);

		 }
		 public accIncomePending GetByKey(Guid guidIncomePending, string usemode, ContextRequest context,  string includes)
        {
            accIncomePending item = null;
			string strWhere = @"GuidIncomePending = Guid(""" + guidIncomePending.ToString()+@""")";
			if (context == null)
				context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
			context.CustomQuery.IsByKey = true;
            context.CustomQuery.FilterExpressionString = strWhere;
            context.UseMode = usemode;
            item = GetBy(strWhere,context , includes).FirstOrDefault();
            return item;

        }

        #region Dynamic Predicate
        public List<accIncomePending> GetBy(Expression<Func<accIncomePending, bool>> predicate, int? pageSize, int? page)
        {
            return this.GetBy(predicate, pageSize, page, null, null);
        }
        public List<accIncomePending> GetBy(Expression<Func<accIncomePending, bool>> predicate, ContextRequest contextRequest)
        {

            return GetBy(predicate, contextRequest,"");
        }
        
        public List<accIncomePending> GetBy(Expression<Func<accIncomePending, bool>> predicate, ContextRequest contextRequest, params Expression<Func<accIncomePending, object>>[] includes)
        {
            StringBuilder sb = new StringBuilder();
           if (includes != null)
            {
                foreach (var path in includes)
                {

						if (sb.Length > 0) sb.Append(",");
						sb.Append(SFSdotNet.Framework.Linq.Utils.IncludeToString<accIncomePending>(path));

               }
            }
            return GetBy(predicate, contextRequest, sb.ToString());
        }
        
        
        public List<accIncomePending> GetBy(Expression<Func<accIncomePending, bool>> predicate, string includes)
        {
			ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";

            return GetBy(predicate, context, includes);
        }

        public List<accIncomePending> GetBy(Expression<Func<accIncomePending, bool>> predicate, params Expression<Func<accIncomePending, object>>[] includes)
        {
			if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }
			ContextRequest context = new ContextRequest();
			            context.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            context.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";
            return GetBy(predicate, context, includes);
        }

      
		public bool DisableCache { get; set; }
		 public List<accIncomePending> GetBy(Expression<Func<accIncomePending, bool>> predicate, ContextRequest contextRequest, string includes)
        {
            using (EFPocoContext con = new EFPocoContext())
            {
				if (DisableCache) 
                	con.CachingPolicy = EFCachingProvider.Caching.CachingPolicy.NoCaching;

				List<accIncomePending> result = null;
                 e = null;
	
				OnGetting(con, e = new BusinessRulesEventArgs<accIncomePending>() {  FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null) });

               // OnGetting(con,e = new BusinessRulesEventArgs<accIncomePending>() { FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = contextRequest.CustomQuery.FilterExpressionString});
				   if (e != null) {
				    predicate = e.FilterExpression;
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				con.EnableChangeTrackingUsingProxies = false;
				con.WrappedContext.accIncomePendings.MergeOption = MergeOption.NoTracking;
                con.WrappedContext.ContextOptions.ProxyCreationEnabled = false;
                if (predicate == null) predicate = PredicateBuilder.True<accIncomePending>();
                
                var es = con.accIncomePendings;

                IQueryable<accIncomePending> query = es.AsQueryable();

                                if (!string.IsNullOrEmpty(includes))
                {
                    foreach (string include in includes.Split(char.Parse(",")))
                    {
						if (!string.IsNullOrEmpty(include))
                            query = query.Include(include);
                    }
                }
                    predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
					 	if (!preventSecurityRestrictions)
						{
							if (contextRequest != null )
		                    	if (contextRequest.User !=null )
		                        	if (contextRequest.Company != null)
		                        		predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				query =query.Where(predicate);
                query = ContextQueryBuilder<accIncomePending>.ApplyContextQuery(query, contextRequest);

                result = query.ToList<accIncomePending>();
				  
                if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e =  new BusinessRulesEventArgs<accIncomePending>() { Items= result, IncludingComputedLinq = false, ContextRequest = contextRequest,  FilterExpression = predicate } :  e);
  
			

                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
            }
        }
		public void UpdateAgile(accIncomePending item, params string[] fields)
         {
             List<accIncomePending> list = new List<accIncomePending>();
             list.Add(item);
             this.UpdateBulk(list, fields);
         }
		public void UpdateBulk(List<accIncomePending>  items, params string[] fields)
         {
             SFSdotNet.Framework.My.ContextRequest req = new SFSdotNet.Framework.My.ContextRequest();
             req.CustomQuery = new SFSdotNet.Framework.My.CustomQuery();
             foreach (var field in fields)
             {
                 req.CustomQuery.SpecificProperties.Add(field);
             }
             UpdateBulk(items, req);

         }
        public void UpdateBulk(List<accIncomePending> items, ContextRequest req)
        {
            using (EFContext con = new EFContext())
            {



                foreach (var item in items)
                {
                    var setT = con.CreateObjectSet<accIncomePending>("accIncomePendings");


                    var itemForAttach = new accIncomePending();
			itemForAttach.GuidIncomePending = item.GuidIncomePending;
					
                    itemForAttach = SFSdotNet.Framework.Entities.ConvertEntity.SetProperties<accIncomePending>(item, itemForAttach, null, req.CustomQuery.SpecificProperties.ToArray());
                    setT.Attach(itemForAttach);


                    foreach (var property in req.CustomQuery.SpecificProperties)
                    {
						
                        if (property != "GuidIncomePending")
                            con.ObjectStateManager.GetObjectStateEntry(itemForAttach).SetModifiedProperty(property);

                    }

                }
                con.SaveChanges();


            }
        }
		/*public int Update(List<accIncomePending> items, ContextRequest contextRequest)
            {
                int result = 0;
                using (EFContext con = new EFContext())
                {
                   
                

                    foreach (var item in items)
                    {
                        //secMessageToUser messageToUser = new secMessageToUser();
                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            item.GetType().GetProperty(prop).SetValue(item, item.GetType().GetProperty(prop).GetValue(item));
                        }
                        //messageToUser.GuidMessageToUser = (Guid)item.GetType().GetProperty("GuidMessageToUser").GetValue(item);

                        var setObject = con.CreateObjectSet<accIncomePending>("accIncomePendings");
                        //messageToUser.Readed = DateTime.UtcNow;
                        setObject.Attach(item);
                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            con.ObjectStateManager.GetObjectStateEntry(item).SetModifiedProperty(prop);
                        }
                       
                    }
                    result = con.SaveChanges();

                    


                }
                return result;
            }
           */
        public List<accIncomePending> GetBy(string predicateString, ContextRequest contextRequest, string includes)
        {
            using (EFContext con = new EFContext())
            {
				if (DisableCache) 
                	con.CachingPolicy = EFCachingProvider.Caching.CachingPolicy.NoCaching;

				Filter filter = new Filter();
                if (predicateString.Contains("|"))
                {
                    string ft = GetSpecificFilter(predicateString);
                    if (!string.IsNullOrEmpty(ft))
                        filter.SetFilterPart("ft", ft);
                   
                    contextRequest.FreeText = predicateString.Split(char.Parse("|"))[1];
                    var q1 = predicateString.Split(char.Parse("|"))[0];
                    if (!string.IsNullOrEmpty(q1))
                    {
                        filter.ProcessText(q1);
                    }
                }
                else {
                    filter.ProcessText(predicateString);
                }

				List<accIncomePending> result = null;
                 e = null;
					OnGetting(con, e = new BusinessRulesEventArgs<accIncomePending>() { Filter = filter, ContextRequest = contextRequest /*, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null)*/ });

                  //OnGetting(con,e = new BusinessRulesEventArgs<accIncomePending>() {  ContextRequest = contextRequest, FilterExpressionString = predicateString });
			   	if (e != null) {
				    //predicateString = e.GetQueryString();
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				//	 else {
                //      predicateString = predicateString.Replace("*extraFreeText*", "").Replace("()","");
                //  }
				//con.EnableChangeTrackingUsingProxies = false;
				con.accIncomePendings.MergeOption = MergeOption.NoTracking;
                con.ContextOptions.ProxyCreationEnabled = false;
                //if (predicate == null) predicate = PredicateBuilder.True<accIncomePending>();
                
                var es = con.accIncomePendings;
				IQueryable<accIncomePending> query = es.AsQueryable();
		
				// include relations FK
				if(string.IsNullOrEmpty(includes) ){
					includes ="";
				}
				StringBuilder sbQuerySystem = new StringBuilder();
                    //predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				

				//if (!string.IsNullOrEmpty(predicateString))
                //      sbQuerySystem.Append(" And ");
                //sbQuerySystem.Append(" (IsDeleted != true Or IsDeleted = null) ");
				 filter.SetFilterPart("de", "(IsDeleted != true OR IsDeleted = null)");


					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
	                    	if (contextRequest.User !=null )
	                        	if (contextRequest.Company != null ){
	                        		//if (sbQuerySystem.Length > 0)
	                        		//	    			sbQuerySystem.Append( " And ");	
									//sbQuerySystem.Append(@" (GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
									filter.SetFilterPart("co",@"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @"""))");
								}
						}	
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				//string predicateString = predicate.ToDynamicLinq<accIncomePending>();
				//predicateString += sbQuerySystem.ToString();
				filter.CleanAndProcess("");

				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed(); //SFSdotNet.Framework.Linq.Utils.ExtractSpecificProperties("", ref predicateString );               
                string predicateWithManyRelations = filter.GetFilterChildren(); //SFSdotNet.Framework.Linq.Utils.CleanPartExpression(predicateString);

                //QueryUtils.BreakeQuery1(predicateString, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
                var _queryable = query.AsQueryable();
                if (!string.IsNullOrEmpty(predicateWithManyRelations))
                    _queryable = _queryable.Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams);
				if (contextRequest.CustomQuery.SpecificProperties.Count > 0)
                {

                    StringBuilder sbProps = new StringBuilder();
                    contextRequest.CustomQuery.SpecificProperties.Add("GuidIncomePending");
                    
					foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                    {
						if(sbProps.Length > 0)
							sbProps.Append(",");
                        sbProps.Append(prop);
                    }
					    IQueryable  queryableSelective = null ;
					  
					  if (!string.IsNullOrEmpty(predicateWithManyRelations))
							queryableSelective = con.accIncomePendings.AsQueryable().Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams).Select(string.Format("new({0})", sbProps.ToString()));
					else
						queryableSelective = con.accIncomePendings.AsQueryable().Select(string.Format("new({0})", sbProps.ToString()));


                    //if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
					//	queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

                    QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
                    
					if (!string.IsNullOrEmpty(queryOps.OrderByAndSort))
                        queryableSelective = queryableSelective.OrderBy(queryOps.OrderByAndSort);
                    if (queryOps.Skip != null)
                    {
                        queryableSelective = queryableSelective.Skip(queryOps.Skip.Value);
                    }
                    if (queryOps.PageSize != null)
                    {
                        queryableSelective = queryableSelective.Take(queryOps.PageSize.Value);
                    }
                    //var results = queryableSelective.ToList();
                    result = new List<accIncomePending>();
                    accIncomePending itemDef = null;
                    foreach (var item in queryableSelective)
                    {
                        itemDef = new accIncomePending();

                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            if (!prop.Contains("."))
                            {
                                itemDef.GetType().GetProperty(prop).SetValue(itemDef, item.GetType().GetProperty(prop).GetValue(item));
                            }
                            else {
                                throw new Exception("La seleccion de relaciones aún no esta soportada");
                            }

                        }

                        result.Add(itemDef);
                    }

                }
                else
                {
				var  queryable = _queryable.Select(                    
				p => 
                        new
                    {
					GuidIncomePending = p.GuidIncomePending
,Amount = p.Amount
,CreatedDate = p.CreatedDate
,UpdatedDate = p.UpdatedDate
,CreatedBy = p.CreatedBy
,UpdatedBy = p.UpdatedBy
,IsDeleted = p.IsDeleted
,GuidCompany = p.GuidCompany
,IsFact = p.IsFact

,

	
                    }
                    
                    );
					
				
                 if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
                    queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

				QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
            	if (!string.IsNullOrEmpty(queryOps.OrderByAndSort))
					queryable = queryable.OrderBy(queryOps.OrderByAndSort);
               	if (queryOps.Skip != null)
                {
                    queryable = queryable.Skip(queryOps.Skip.Value);
                }
                if (queryOps.PageSize != null)
                {
                    queryable = queryable.Take (queryOps.PageSize.Value);
                }
                result = queryable.AsEnumerable().
                    Select(
                    p =>  new accIncomePending()
                    {
					GuidIncomePending = p.GuidIncomePending
,Amount = p.Amount
,CreatedDate = p.CreatedDate
,UpdatedDate = p.UpdatedDate
,CreatedBy = p.CreatedBy
,UpdatedBy = p.UpdatedBy
,IsDeleted = p.IsDeleted
,GuidCompany = p.GuidCompany
,IsFact = p.IsFact

                    }
                     ).ToList();
				}


			 if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e = new BusinessRulesEventArgs<accIncomePending>() { Items= result, IncludingComputedLinq = true, ContextRequest = contextRequest, FilterExpressionString  = predicateString } :  e);
  
			
  
                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
            }
        }
		public List<accIncomePending> GetBy(Expression<Func<accIncomePending, bool>> predicate, bool loadRelations, ContextRequest contextRequest)
        {
			if(!loadRelations)
				return GetBy(predicate, contextRequest);
			else
				return GetBy(predicate, contextRequest, "accIncomeMatchInExes");

        }

        public List<accIncomePending> GetBy(Expression<Func<accIncomePending, bool>> predicate, int? pageSize, int? page, string orderBy, SFSdotNet.Framework.Data.SortDirection? sortDirection)
        {
            return GetBy(predicate, new ContextRequest() { CustomQuery = new CustomQuery() { Page = page, PageSize = pageSize, OrderBy = orderBy, SortDirection = sortDirection } });
        }
        public List<accIncomePending> GetBy(Expression<Func<accIncomePending, bool>> predicate)
        {

			if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }
			ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();

			contextRequest.CurrentContext = SFSdotNet.Framework.My.Context.CurrentContext;
			            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

            contextRequest.CustomQuery.FilterExpressionString = null;
            return this.GetBy(predicate, contextRequest, "");
        }
        #endregion
        #region Dynamic String
		private string GetSpecificFilter(string filter) {
            string result = "";
		    //string linqFilter = String.Empty;
            string freeTextFilter = String.Empty;
            if (filter.Contains("|"))
            {
               // linqFilter = filter.Split(char.Parse("|"))[0];
                freeTextFilter = filter.Split(char.Parse("|"))[1];
            }
            //else {
            //    freeTextFilter = filter;
            //}
            //else {
            //    linqFilter = filter;
            //}
			// linqFilter = SFSdotNet.Framework.Linq.Utils.ReplaceCustomDateFilters(linqFilter);
            //string specificFilter = linqFilter;
            if (!string.IsNullOrEmpty(freeTextFilter))
            {
                System.Text.StringBuilder sbCont = new System.Text.StringBuilder();
                /*if (specificFilter.Length > 0)
                {
                    sbCont.Append(" AND ");
                    sbCont.Append(" ({0})");
                }
                else
                {
                    sbCont.Append("{0}");
                }*/
                //var words = freeTextFilter.Split(char.Parse(" "));
				var word = freeTextFilter;
                System.Text.StringBuilder sbSpec = new System.Text.StringBuilder();
                 int nWords = 1;
				/*foreach (var word in words)
                {
					if (word.Length > 0){
                    if (sbSpec.Length > 0) sbSpec.Append(" AND ");
					if (words.Length > 1) sbSpec.Append("("); */
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
								 //sbSpec.Append("*extraFreeText*");

                    /*if (words.Length > 1) sbSpec.Append(")");
					
					nWords++;

					}

                }*/
                //specificFilter = string.Format("{0}{1}", specificFilter, string.Format(sbCont.ToString(), sbSpec.ToString()));
                                 result = sbSpec.ToString();  
            }
			//result = specificFilter;
			
			return result;

		}
	
			public List<accIncomePending> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  params object[] extraParams)
        {
			return GetBy(filter, pageSize, page, orderBy, orderDir,  null, extraParams);
		}
           public List<accIncomePending> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir, string usemode, params object[] extraParams)
            { 
                return GetBy(filter, pageSize, page, orderBy, orderDir, usemode, null, extraParams);
            }


		public List<accIncomePending> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  string usemode, ContextRequest context, params object[] extraParams)

        {

            // string freetext = null;
            //if (filter.Contains("|"))
            //{
            //    int parts = filter.Split(char.Parse("|")).Count();
            //    if (parts > 1)
            //    {

            //        freetext = filter.Split(char.Parse("|"))[1];
            //    }
            //}
		
            //string specificFilter = "";
            //if (!string.IsNullOrEmpty(filter))
            //  specificFilter=  GetSpecificFilter(filter);
            if (string.IsNullOrEmpty(orderBy))
            {
			                orderBy = "UpdatedDate";
            }
			//orderDir = "desc";
			SFSdotNet.Framework.Data.SortDirection direction = SFSdotNet.Framework.Data.SortDirection.Ascending;
            if (!string.IsNullOrEmpty(orderDir))
            {
                if (orderDir == "desc")
                    direction = SFSdotNet.Framework.Data.SortDirection.Descending;
            }
            if (context == null)
                context = new ContextRequest();
			else
                context.CustomQuery = new CustomQuery();
             //context.FreeText = freetext;
             context.UseMode = usemode;
             context.CustomQuery =new SFSdotNet.Framework.My.CustomQuery()
 
                {
                    ExtraParams = extraParams,

                    OrderBy = orderBy,
                    SortDirection = direction,
                    Page = page,
                    PageSize = pageSize
               };
            

            if (!preventSecurityRestrictions) {
			 if (context.CurrentContext == null)
                {
					if (SFSdotNet.Framework.My.Context.CurrentContext != null &&  SFSdotNet.Framework.My.Context.CurrentContext.Company != null && SFSdotNet.Framework.My.Context.CurrentContext.User != null)
					{
						context.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
						context.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

					}
					else {
						throw new Exception("The security rule require a specific user and company");
					}
				}
            }
            return GetBy(filter, context);
  
        }


        public List<accIncomePending> GetBy(string strWhere, ContextRequest contextRequest)
        {
        	#region old code
				
				 //Expression<Func<tvsReservationTransport, bool>> predicate = null;
				string strWhereClean = strWhere.Replace("*extraFreeText*", "").Replace("()", "");
                //if (!string.IsNullOrEmpty(strWhereClean)){

                //    object[] extraParams = null;
                //    //if (contextRequest != null )
                //    //    if (contextRequest.CustomQuery != null )
                //    //        extraParams = contextRequest.CustomQuery.ExtraParams;
                //    //predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<tvsReservationTransport, bool>(strWhereClean, extraParams != null? extraParams.Cast<Guid>(): null);				
                //}
				 if (contextRequest == null)
                {
                    contextRequest = new ContextRequest();
                    if (contextRequest.CustomQuery == null)
                        contextRequest.CustomQuery = new CustomQuery();
                }
                  if (!preventSecurityRestrictions) {
					if (contextRequest.User == null || contextRequest.Company == null)
                      {
                     if (SFSdotNet.Framework.My.Context.CurrentContext.Company != null && SFSdotNet.Framework.My.Context.CurrentContext.User != null)
                     {
                         contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                         contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

                     }
                     else {
                         throw new Exception("The security rule require a specific User and Company ");
                     }
					 }
                 }
            contextRequest.CustomQuery.FilterExpressionString = strWhere;
				//return GetBy(predicate, contextRequest);  

			#endregion				
				
                    return GetBy(strWhere, contextRequest, "");  


        }
       public List<accIncomePending> GetBy(string strWhere)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
			
            return GetBy(strWhere, context, null);
        }

        public List<accIncomePending> GetBy(string strWhere, string includes)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
            return GetBy(strWhere, context, includes);
        }

        #endregion
        #endregion
		
		  #region SaveOrUpdate
        private accIncomePending Save(accIncomePending entity, bool saveChanges, EFPocoContext con)
        {
				ObjectContext context = null;
            return Update(entity, saveChanges,null, out context);

			
        }
		 public  accIncomePending Create( accIncomePending entity, params Expression<Func< accIncomePending, object>>[] paths)
         {
             return Create(entity, null, paths);

         }
 		 public accIncomePending Create(accIncomePending entity)
        {
				ObjectContext context = null;
				    if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: Create");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

				return this.Create(entity, true, contextRequest, out context);


        }
        public accIncomePending Create(accIncomePending entity, ContextRequest contextRequest)
         {
             ObjectContext context = null;
             return this.Create(entity, true, contextRequest,out context);

         }
         public accIncomePending Create(accIncomePending entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext context)
        {
                    return Create(entity, saveChanges , contextRequest , out context, null);
        }
         public accIncomePending Create(accIncomePending entity, ContextRequest contextRequest, params Expression<Func<accIncomePending,object>>[] paths)
        {
            ObjectContext context = null;
            if(paths != null)
				return Create(entity, true,contextRequest, out context, paths);
			else 
				return Create(entity, true,contextRequest, out context);
        }
        public accIncomePending Create(accIncomePending entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext context, params Expression<Func<accIncomePending,object>>[] pocopaths)
        {
			using (EFPocoContext con = new EFPocoContext())
			{
				accIncomePending itemResult = null;
#region Autos


			entity.CreatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.CreatedBy = contextRequest.User.GuidUser;
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.UpdatedBy = contextRequest.User.GuidUser;
	
			if (contextRequest != null)
				if(contextRequest.User != null)
					if (contextRequest.Company != null)
						entity.GuidCompany = contextRequest.Company.GuidCompany;
	

#endregion
                e = null;
                OnCreating(this,e = new BusinessRulesEventArgs<accIncomePending>() { ContextRequest = contextRequest, Item=entity, PathExpressions = pocopaths, SaveChanges =saveChanges });
				   if (e != null) {
						if (e.Cancel)
						{
							context = null;
							return e.Item;

						}
					}

                    if (entity.GuidIncomePending == Guid.Empty)
                   {
                       entity.GuidIncomePending = Guid.NewGuid();

                   }



				accIncomePendingAdapter adapter = con.GetAdapterObject<accIncomePendingAdapter>(entity);;
				List<Expression<Func<accIncomePendingAdapter, object>>> paths = new List<Expression<Func<accIncomePendingAdapter,object>>>();
                
			    if (pocopaths != null && pocopaths.Length > 0)
                {
					// Translate
                    foreach (var pocopath in pocopaths)
                    {
                        var param = Expression.Parameter(typeof(accIncomePendingAdapter), "p");
                        var member = MemberExpression.PropertyOrField(param, ((System.Linq.Expressions.MemberExpression)(((System.Linq.Expressions.LambdaExpression)(pocopath)).Body)).Member.Name);
                        Expression<Func<accIncomePendingAdapter, object>> path  = null;
                        switch(member.Member.Name){
                        
							case "accIncomeMatchInExes":
								path = p => p.accIncomeMatchInExes.First().WithoutUpdate();

								//path = p => member;
								//path = p => p.accIncomeMatchInExes.First().accIncomeExpens.WithoutUpdate();											
							break;
							
							default:
								path = p => member;
							break;
                        }

                        
                       paths.Add(path.Expand());
                    }
                }
                object aux = null;
					//paths = pathBuilder.ToArray();

#region Childs accIncomeMatchInExes 
				if (adapter.accIncomeMatchInExes != null)
                {
                    foreach (var item in adapter.accIncomeMatchInExes)
                    {
						
							if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accIncomeMatchInExes", item);
							if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)){ 
								//paths.Add(p => p.accIncomeMatchInExes.First().WithoutUpdate());
								
							if (item.accIncomePending == null)
								item.accIncomePending = adapter;

						if (item.accIncomeExpens != null){
							item.accIncomeExpens.EntityKey = con.WrappedContext.CreateEntityKey("accIncomeExpenses", item.accIncomeExpens);
                            
             
						}								
								item.EntityKey = null;
							}

                    }
					if (adapter.accIncomeMatchInExes.Count > 0){
						paths.Add(p => p.accIncomeMatchInExes.First().WithoutUpdate());
						paths.Add(p => p.accIncomeMatchInExes.First().accIncomeExpens.WithoutUpdate());
					
					}
                }
#endregion 




                //con.WrappedContext.AttachObjectGraph<accIncomePendingAdapter>(adapter, p=>p.accIncomeMatchInExes);
                con.WrappedContext.AttachObjectGraph<accIncomePendingAdapter>(adapter, paths.ToArray());
              	if (saveChanges){
                    con.WrappedContext.SaveChanges(SaveOptions.AcceptAllChangesAfterSave);
					 
				}
                else
                    con.WrappedContext.SaveChanges(SaveOptions.None);
                if (!saveChanges)
                    context = con.WrappedContext;
                else
                    context = null;
				itemResult = adapter.PocoEntity;
                if (e != null)
                {
                    e.Item = itemResult;
                }
                OnCreated(this, e == null ? e = new BusinessRulesEventArgs<accIncomePending>() { ContextRequest = contextRequest, Item = itemResult, PathExpressions = pocopaths, SaveChanges = saveChanges } : e);



                if (e != null)
                {
                    itemResult = e.Item;
                }
                              return itemResult;
            }
        }
        BusinessRulesEventArgs<accIncomePending> e = null;
        public void Create(List<accIncomePending> entities)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            Create(entities, contextRequest, null);
        }
        public void Create(List<accIncomePending> entities, ContextRequest contextRequest)
        
        {
			ObjectContext context = null;
            	foreach (accIncomePending entity in entities)
				{
					this.Create(entity, true, contextRequest, out context);
				}
        }
         public accIncomePending Update(accIncomePending entity)
        {
            if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return Update(entity, contextRequest);
        }
        public accIncomePending Update(accIncomePending entity, ContextRequest requestContext)
        {
			  ObjectContext context = null;
            return Update(entity, true,requestContext, out context);
         }
		public  accIncomePending Update(accIncomePending entity, params Expression<Func<accIncomePending, object>>[] pocopaths)
        {
			  ObjectContext context = null;
              return Update(entity, true, null, out context, pocopaths);
         }
        public accIncomePending Update(accIncomePending entity, ContextRequest requestContext, bool saveChanges, out ObjectContext outcontext)
        {
			return Update(entity, saveChanges,requestContext, out outcontext, null);
		}
         public accIncomePending Update(accIncomePending entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext outcontext, params Expression<Func<accIncomePending,object>>[] pocopaths)
        {
		 if ((System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null) && contextRequest == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Update");
            }
            if (contextRequest == null)
            {
                contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            }

			using (EFPocoContext con = new EFPocoContext())
			{
				accIncomePending  itemResult = null;

	
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
			if(contextRequest.User != null)
				entity.UpdatedBy = contextRequest.User.GuidUser;

	    var oldentity = GetBy(p => p.GuidIncomePending == entity.GuidIncomePending, contextRequest).FirstOrDefault();
		if (oldentity != null) {
		
            entity.CreatedDate = oldentity.CreatedDate;
            entity.CreatedBy = oldentity.CreatedBy;
	
            entity.GuidCompany = oldentity.GuidCompany;
	
			

		}

				e = null;
                OnUpdating(this,e = new BusinessRulesEventArgs<accIncomePending>() { ContextRequest = contextRequest, Item=entity, PathExpressions = pocopaths, SaveChanges =saveChanges });
				   if (e != null) {
						if (e.Cancel)
						{
							outcontext = null;
							return e.Item;

						}
					}

                accIncomePendingAdapter adapter = con.GetAdapterObject<accIncomePendingAdapter>(entity);
                adapter.EntityKey = con.WrappedContext.CreateEntityKey("accIncomePendings", adapter);
				    var es = con.accIncomePendings;
				List<Expression<Func<accIncomePendingAdapter, object>>> paths = new List<Expression<Func<accIncomePendingAdapter,object>>>();
                /* if (pocopaths != null)
                    if (pocopaths.Length == 0)
                        pocopaths = null;*/

			    if (pocopaths != null && pocopaths.Length > 0)
                {
					// Translate
                    foreach (var pocopath in pocopaths)
                    {
                        var param = Expression.Parameter(typeof(accIncomePendingAdapter), "p");
                        var member = MemberExpression.PropertyOrField(param, ((System.Linq.Expressions.MemberExpression)(((System.Linq.Expressions.LambdaExpression)(pocopath)).Body)).Member.Name);
                        Expression<Func<accIncomePendingAdapter, object>> path  = null;
                        switch(member.Member.Name){
                        
							case "accIncomeMatchInExes":
								//path = p => member;
								path = p => p.accIncomeMatchInExes.First().WithoutUpdate();
				//				path = p => p.accIncomeMatchInExes.First().accIncomeExpens.WithoutUpdate();											
							break;
							
							default:
								path = p => member;
							break;
                        }

                        paths.Add(path.Expand());
 					}
                }
                else {
                  paths = new List<Expression<Func<accIncomePendingAdapter, object>>>();

					//List<Expression<Func<accIncomePendingAdapter,object>>> pathBuilder = new List<Expression<Func<accIncomePendingAdapter,object>>>();
		
					//paths = pathBuilder.ToArray();		
			}
			object aux = null;
				if (adapter.accIncomeMatchInExes != null)
                {
                    foreach (var item in adapter.accIncomeMatchInExes)
                    {


                        if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accIncomeMatchInExes", item);
						if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)) item.EntityKey = null;
                        
                    }
					
                    if (adapter.accIncomeMatchInExes.Count > 0)
                    {
                        paths.Add(p => p.accIncomeMatchInExes.First().WithoutUpdate());

                    }

                }



                //con.AttachObjectGraph<accIncomePending>(adapter, p=>p.accIncomeMatchInExes);
                con.WrappedContext.AttachObjectGraph<accIncomePendingAdapter>(adapter, paths.ToArray());
				if (saveChanges){
                	con.WrappedContext.SaveChanges();
					 
					}
                if(!saveChanges)
					outcontext = con.WrappedContext;
				else
					outcontext = null;
				itemResult = adapter.PocoEntity;
				OnUpdated(this, e = new BusinessRulesEventArgs<accIncomePending>() { ContextRequest = contextRequest, Item=itemResult, PathExpressions = pocopaths, SaveChanges =saveChanges });

              	return itemResult;

			  }
        }
        public accIncomePending Save(accIncomePending entity)
        {
			return Save(entity, true, null);
        }
        public int Save(List<accIncomePending> entities)
        {
			using (EFPocoContext con = new EFPocoContext())
			{
			
            int n = 0;
            foreach (accIncomePending item in entities)
            {
                try
                {
                    this.Save(item, false, con);
                    n++;
                }catch (Exception ex){
                    SFSdotNet.Framework.My.EventLog.Exception(ex);
                }
            }
            con.SaveChanges();
            return n;
            }
        }
        #endregion
        #region Delete
        public void Delete(accIncomePending entity)
        {
				this.Delete(entity, null);
			
        }
		 public void Delete(accIncomePending entity, ContextRequest contextRequest)
        {
				ObjectContext context = null;
				this.Delete(entity, true, out context, contextRequest);
			
        }

        
        public void Delete(accIncomePending entity, bool saveChanges, out  ObjectContext context, ContextRequest contextRequest, BusinessRulesEventArgs<accIncomePending> e = null)
        {
			using (EFPocoContext _con = new EFPocoContext())
			{
				int result = 0;
				
               	BusinessRulesEventArgs<accIncomePending> _e = null;
               List<accIncomePending> _items = new List<accIncomePending>();
                _items.Add(entity);
                if (e == null || e.PreventPartialPropagate == false)
                {
                    OnDeleting(this, _e = (e == null ? new BusinessRulesEventArgs<accIncomePending>() { ContextRequest = contextRequest, Item = entity, Items = _items, SaveChanges = saveChanges } : e));
                }
                if (_e != null)
                {
                    if (_e.Cancel)
						{
							context = null;
							return;

						}
					}


				accIncomePendingAdapter adapter = _con.GetAdapterObject<accIncomePendingAdapter>(entity);
                adapter.EntityKey = _con.WrappedContext.CreateEntityKey("accIncomePendings", adapter);
                
	            //adapter = _con.WrappedContext.AttachObjectGraph<accIncomePendingAdapter>(adapter);
				try{
					_con.WrappedContext.AttachTo("accIncomePendings", adapter);
                }catch{
					
				}
									//IsDeleted
					bool logicDelete = true;
					if (adapter.IsDeleted != null)
					{
						if (adapter.IsDeleted.Value)
							logicDelete = false;
					}
					if (logicDelete)
					{
											entity = GetBy(p => p.GuidIncomePending == entity.GuidIncomePending, contextRequest).FirstOrDefault();
						entity.IsDeleted = true;
						Update(entity, contextRequest);
					}
					else {
						_con.WrappedContext.DeleteObject(adapter);
					}
								
				if (!saveChanges)
                    context = _con.WrappedContext;
                else
                    context = null;
				 SaveOptions saveOption = SaveOptions.None;
                if (saveChanges)
                    saveOption = SaveOptions.AcceptAllChangesAfterSave;

				result = _con.WrappedContext.SaveChanges(saveOption);
				if (saveChanges){
					
					}
			if (e == null || e.PreventPartialPropagate == false)
                {

                    if (_e == null)
                        _e = new BusinessRulesEventArgs<accIncomePending>() { ContextRequest = contextRequest, Item = entity, Items = _items };

                    OnDeleted(this, _e);
                }

				//return null;
			}            
        }
        public void Delete(List<accIncomePending> entities,  ContextRequest contextRequest = null )
        {
				ObjectContext context = null;
			 BusinessRulesEventArgs<accIncomePending> _e = null;

                OnDeleting(this, _e = new BusinessRulesEventArgs<accIncomePending>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities });
                if (_e != null)
                {
                    if (_e.Cancel)
                    {
                        context = null;
                        return;

                    }
                }
                bool allSucced = true;
                BusinessRulesEventArgs<accIncomePending> eToChilds = new BusinessRulesEventArgs<accIncomePending>();
                if (_e != null)
                {
                    eToChilds = _e;
                }
                else
                {
                    eToChilds = new BusinessRulesEventArgs<accIncomePending>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                }
				foreach (accIncomePending item in entities)
				{
					try
                    {
                        this.Delete(item, true, out context, contextRequest, e: eToChilds);
                    }
                    catch (Exception ex)
                    {
                        SFSdotNet.Framework.My.EventLog.Error(ex);
                        allSucced = false;
                    }
				}
				if (_e == null)
                    _e = new BusinessRulesEventArgs<accIncomePending>() { ContextRequest = contextRequest, CountResult = entities.Count, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                OnDeleted(this, _e);

			
        }
        #endregion
 
        #region GetCount
		 public int GetCount(Expression<Func<accIncomePending, bool>> predicate)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

			return GetCount(predicate, contextRequest);
		}
        public int GetCount(Expression<Func<accIncomePending, bool>> predicate, ContextRequest contextRequest)
        {


		
			using (EFPocoContext con = new EFPocoContext())
			{


				if (predicate == null) predicate = PredicateBuilder.True<accIncomePending>();
           		predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted == null);
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    		if (contextRequest.User !=null )
                        		if (contextRequest.Company != null )
                        			predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				
				return con.accIncomePendings.Count(predicate);
			}

        }
		  public int GetCount(string predicate,  ContextRequest contextRequest)
         {
             return GetCount(predicate, null, contextRequest);
         }

         public int GetCount(string predicate)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return GetCount(predicate, contextRequest);
        }
		 public int GetCount(string predicate, string usemode){
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
				return GetCount( predicate,  usemode,  contextRequest);
		 }
        public int GetCount(string predicate, string usemode, ContextRequest contextRequest){
			  string freetext = null;
            Filter filter = new Filter();

              if (predicate.Contains("|"))
              {
                 
                  filter.SetFilterPart("ft", GetSpecificFilter(predicate));
                 
                  filter.ProcessText(predicate.Split(char.Parse("|"))[0]);
                  freetext = predicate.Split(char.Parse("|"))[1];
              }
              else {
                  filter.ProcessText(predicate);
              }
           
			e = null;
			contextRequest.FreeText = freetext;
			contextRequest.UseMode = usemode;
            OnCounting(this, e = new BusinessRulesEventArgs<accIncomePending>() {  Filter =filter, ContextRequest = contextRequest });
            if (e != null)
            {
                if (e.Cancel)
                {
                    context = null;
                    return e.CountResult;

                }

            

            }
			 predicate = filter.GetFilterComplete();
			StringBuilder sbQuerySystem = new StringBuilder();
		
					
                    filter.SetFilterPart("de","(IsDeleted != true OR IsDeleted == null)");
			
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    	if (contextRequest.User !=null )
                        	if (contextRequest.Company != null ){
                        		

								filter.SetFilterPart("co", @"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
						
						
							}
							
							}
							if (preventSecurityRestrictions) preventSecurityRestrictions= false;
			using (EFContext con = new EFContext())
			{
				   
                 filter.CleanAndProcess("");
				//string predicateWithFKAndComputed = SFSdotNet.Framework.Linq.Utils.ExtractSpecificProperties("", ref predicate );               
				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed();
               string predicateWithManyRelations = filter.GetFilterChildren();
			   ///QueryUtils.BreakeQuery1(predicate, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
			   predicate = filter.GetFilterComplete();
               if (!string.IsNullOrEmpty(predicate))
               {
				
					
                    return con.accIncomePendings.Count(System.Linq.Dynamic.DynamicExpression.ParseLambda<accIncomePending, bool>(predicate));
					
                }else
                    return con.accIncomePendings.Count();

			}

		}
         public int GetCount()
        {
            return GetCount(p => true);
        }
        #endregion
        
         public accIncomePending Update(accIncomePending entity, string paths)
        {
            return Update(entity, paths.Split(char.Parse(",")));
            
        }

        public accIncomePending Update(accIncomePending entity, string[] paths)
        {
            // Translate
            List<Expression<Func<accIncomePending, object>>> pathList = new List<Expression<Func<accIncomePending, object>>>();
            for (int i = 0; i <= paths.Length -1; i++)
            {
                var param = Expression.Parameter(typeof(accIncomePending), "p");
                var member = MemberExpression.PropertyOrField(param, paths[i]);

                Expression<Func<accIncomePending, object>> path = p => member;
                pathList.Add(path.Expand());
            }
			ObjectContext context = null;
			 return Update(entity, true,null, out context,  pathList.ToArray());
           //return Update(entity, pathList.ToArray());
        }

        public void Update(List<accIncomePending> entities, string paths)
        {
            foreach (var entity in entities )
            {
                Update(entity, paths);
            }
        }
		public accIncomePending Create(accIncomePending entity, ContextRequest contextRequest, string paths)
        {
          

            if (string.IsNullOrEmpty(paths))
                return Create(entity, contextRequest);

            return Create(entity, contextRequest, paths.Split(char.Parse(",")));
        }
        public accIncomePending Create(accIncomePending entity, string paths)
        {
			 if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return Create(entity, contextRequest, paths);

        }

        public  void Create(List<accIncomePending> entities, ContextRequest requestContext, string paths)
        {
            foreach (var entity in entities)
            {
                Create(entity,requestContext, paths);
            }
        }

        public void Create(List<accIncomePending> entities, string[] paths)
        {
            foreach (var entity in entities)
            {
                Create(entity, null, paths);
            }
        }
        
        public accIncomePending  Create(accIncomePending entity, ContextRequest contextRequest, string[] paths)
        {
            List<Expression<Func<accIncomePending, object>>> pathList = new List<Expression<Func<accIncomePending, object>>>();
            for (int i = 0; i < paths.Length - 1; i++)
            {
                var param = Expression.Parameter(typeof(accIncomePending), "p");
                var member = MemberExpression.PropertyOrField(param, paths[i]);

                Expression<Func<accIncomePending, object>> path = p => member;
                pathList.Add(path.Expand());
            }
            return Create(entity, contextRequest, pathList.ToArray());
        }
        public void Delete(List<accIncomePending.CompositeKey> entityKeys)
        {

            List<accIncomePending> items = new List<accIncomePending>();
            foreach (var itemKey in entityKeys)
            {
                items.Add(GetByKey(itemKey.GuidIncomePending));
            }

            Delete(items);

        }
		
		
	}
		public partial class accInExCategoriesBR{
	 	
           
		 #region Partial methods

           partial void OnUpdating(object sender, BusinessRulesEventArgs<accInExCategory> e);

            partial void OnUpdated(object sender, BusinessRulesEventArgs<accInExCategory> e);

            partial void OnCreating(object sender, BusinessRulesEventArgs<accInExCategory> e);
            partial void OnCreated(object sender, BusinessRulesEventArgs<accInExCategory> e);

            partial void OnDeleting(object sender, BusinessRulesEventArgs<accInExCategory> e);
            partial void OnDeleted(object sender, BusinessRulesEventArgs<accInExCategory> e);

            partial void OnGetting(object sender, BusinessRulesEventArgs<accInExCategory> e);
            partial void OnTaken(object sender, BusinessRulesEventArgs<accInExCategory> e);
            partial void OnCounting(object sender, BusinessRulesEventArgs<accInExCategory> e);
 
 
            #endregion
			
		private static accInExCategoriesBR singlenton =null;
				public static accInExCategoriesBR NewInstance(){
					return  new accInExCategoriesBR();
					
				}
		public static accInExCategoriesBR Instance{
			get{
				if (singlenton == null)
					singlenton = new accInExCategoriesBR();
				return singlenton;
			}
		}
		private bool preventSecurityRestrictions = false;
		 public bool PreventAuditTrail { get; set;  }
		#region Fields
        EFPocoContext context = null;
        #endregion
        #region Constructor
        public accInExCategoriesBR()
        {
            context = new EFPocoContext();
        }
		 public accInExCategoriesBR(bool preventSecurity)
            {
                this.preventSecurityRestrictions = preventSecurity;
				context = new EFPocoContext();
            }
        #endregion
		
		#region Get

 		public IQueryable<accInExCategory> Get()
        {
            //using (EFContext con = new EFContext())
            //{
				EFContext con = new EFContext();
                var query = con.accInExCategories.AsQueryable();
                con.ContextOptions.ProxyCreationEnabled = false;

                //query = ContextQueryBuilder<Nutrient>.ApplyContextQuery(query, contextRequest);

                return query;




            //}

        }
		
		public List<accInExCategory> GetAll()
        {
            return this.GetBy(p => true);
        }
        public List<accInExCategory> GetAll(string includes)
        {
            return this.GetBy(p => true, includes);
        }
        public accInExCategory GetByKey(Guid guidInExCategory)
        {
            return GetByKey(guidInExCategory, true);
        }
        public accInExCategory GetByKey(Guid guidInExCategory, bool loadIncludes)
        {
            accInExCategory item = null;
			var query = PredicateBuilder.True<accInExCategory>();
                    
			string strWhere = @"GuidInExCategory = Guid(""" + guidInExCategory.ToString()+@""")";
            Expression<Func<accInExCategory, bool>> predicate = null;
            if (!string.IsNullOrEmpty(strWhere))
                predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<accInExCategory, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
			 ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();
            contextRequest.CustomQuery.FilterExpressionString = strWhere;

			//item = GetBy(predicate, loadIncludes, contextRequest).FirstOrDefault();
			item = GetBy(strWhere,loadIncludes,contextRequest).FirstOrDefault();
            return item;
        }
         public List<accInExCategory> GetBy(string strWhere, bool loadRelations, ContextRequest contextRequest)
        {
            if (!loadRelations)
                return GetBy(strWhere, contextRequest);
            else
                return GetBy(strWhere, contextRequest, "");

        }
		  public List<accInExCategory> GetBy(string strWhere, bool loadRelations)
        {
              if (!loadRelations)
                return GetBy(strWhere, new ContextRequest());
            else
                return GetBy(strWhere, new ContextRequest(), "");

        }
         public accInExCategory GetByKey(Guid guidInExCategory, params Expression<Func<accInExCategory, object>>[] includes)
        {
            accInExCategory item = null;
			string strWhere = @"GuidInExCategory = Guid(""" + guidInExCategory.ToString()+@""")";
          Expression<Func<accInExCategory, bool>> predicate = null;
            if (!string.IsNullOrEmpty(strWhere))
                predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<accInExCategory, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
        item = GetBy(predicate, includes).FirstOrDefault();
         ////   item = GetBy(strWhere,includes).FirstOrDefault();
			return item;

        }
        public accInExCategory GetByKey(Guid guidInExCategory, string includes)
        {
            accInExCategory item = null;
			string strWhere = @"GuidInExCategory = Guid(""" + guidInExCategory.ToString()+@""")";
            
			
            item = GetBy(strWhere, includes).FirstOrDefault();
            return item;

        }
		 public accInExCategory GetByKey(Guid guidInExCategory, string usemode, string includes)
		{
			return GetByKey(guidInExCategory, usemode, null, includes);

		 }
		 public accInExCategory GetByKey(Guid guidInExCategory, string usemode, ContextRequest context,  string includes)
        {
            accInExCategory item = null;
			string strWhere = @"GuidInExCategory = Guid(""" + guidInExCategory.ToString()+@""")";
			if (context == null)
				context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
			context.CustomQuery.IsByKey = true;
            context.CustomQuery.FilterExpressionString = strWhere;
            context.UseMode = usemode;
            item = GetBy(strWhere,context , includes).FirstOrDefault();
            return item;

        }

        #region Dynamic Predicate
        public List<accInExCategory> GetBy(Expression<Func<accInExCategory, bool>> predicate, int? pageSize, int? page)
        {
            return this.GetBy(predicate, pageSize, page, null, null);
        }
        public List<accInExCategory> GetBy(Expression<Func<accInExCategory, bool>> predicate, ContextRequest contextRequest)
        {

            return GetBy(predicate, contextRequest,"");
        }
        
        public List<accInExCategory> GetBy(Expression<Func<accInExCategory, bool>> predicate, ContextRequest contextRequest, params Expression<Func<accInExCategory, object>>[] includes)
        {
            StringBuilder sb = new StringBuilder();
           if (includes != null)
            {
                foreach (var path in includes)
                {

						if (sb.Length > 0) sb.Append(",");
						sb.Append(SFSdotNet.Framework.Linq.Utils.IncludeToString<accInExCategory>(path));

               }
            }
            return GetBy(predicate, contextRequest, sb.ToString());
        }
        
        
        public List<accInExCategory> GetBy(Expression<Func<accInExCategory, bool>> predicate, string includes)
        {
			ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";

            return GetBy(predicate, context, includes);
        }

        public List<accInExCategory> GetBy(Expression<Func<accInExCategory, bool>> predicate, params Expression<Func<accInExCategory, object>>[] includes)
        {
			if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }
			ContextRequest context = new ContextRequest();
			            context.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            context.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";
            return GetBy(predicate, context, includes);
        }

      
		public bool DisableCache { get; set; }
		 public List<accInExCategory> GetBy(Expression<Func<accInExCategory, bool>> predicate, ContextRequest contextRequest, string includes)
        {
            using (EFPocoContext con = new EFPocoContext())
            {
				if (DisableCache) 
                	con.CachingPolicy = EFCachingProvider.Caching.CachingPolicy.NoCaching;

				List<accInExCategory> result = null;
                 e = null;
	
				OnGetting(con, e = new BusinessRulesEventArgs<accInExCategory>() {  FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null) });

               // OnGetting(con,e = new BusinessRulesEventArgs<accInExCategory>() { FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = contextRequest.CustomQuery.FilterExpressionString});
				   if (e != null) {
				    predicate = e.FilterExpression;
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				con.EnableChangeTrackingUsingProxies = false;
				con.WrappedContext.accInExCategories.MergeOption = MergeOption.NoTracking;
                con.WrappedContext.ContextOptions.ProxyCreationEnabled = false;
                if (predicate == null) predicate = PredicateBuilder.True<accInExCategory>();
                
                var es = con.accInExCategories;

                IQueryable<accInExCategory> query = es.AsQueryable();

                                if (!string.IsNullOrEmpty(includes))
                {
                    foreach (string include in includes.Split(char.Parse(",")))
                    {
						if (!string.IsNullOrEmpty(include))
                            query = query.Include(include);
                    }
                }
                    predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
					 	if (!preventSecurityRestrictions)
						{
							if (contextRequest != null )
		                    	if (contextRequest.User !=null )
		                        	if (contextRequest.Company != null)
		                        		predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				query =query.Where(predicate);
                query = ContextQueryBuilder<accInExCategory>.ApplyContextQuery(query, contextRequest);

                result = query.ToList<accInExCategory>();
				  
                if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e =  new BusinessRulesEventArgs<accInExCategory>() { Items= result, IncludingComputedLinq = false, ContextRequest = contextRequest,  FilterExpression = predicate } :  e);
  
			

                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
            }
        }
		public void UpdateAgile(accInExCategory item, params string[] fields)
         {
             List<accInExCategory> list = new List<accInExCategory>();
             list.Add(item);
             this.UpdateBulk(list, fields);
         }
		public void UpdateBulk(List<accInExCategory>  items, params string[] fields)
         {
             SFSdotNet.Framework.My.ContextRequest req = new SFSdotNet.Framework.My.ContextRequest();
             req.CustomQuery = new SFSdotNet.Framework.My.CustomQuery();
             foreach (var field in fields)
             {
                 req.CustomQuery.SpecificProperties.Add(field);
             }
             UpdateBulk(items, req);

         }
        public void UpdateBulk(List<accInExCategory> items, ContextRequest req)
        {
            using (EFContext con = new EFContext())
            {



                foreach (var item in items)
                {
                    var setT = con.CreateObjectSet<accInExCategory>("accInExCategories");


                    var itemForAttach = new accInExCategory();
			itemForAttach.GuidInExCategory = item.GuidInExCategory;
					
                    itemForAttach = SFSdotNet.Framework.Entities.ConvertEntity.SetProperties<accInExCategory>(item, itemForAttach, null, req.CustomQuery.SpecificProperties.ToArray());
                    setT.Attach(itemForAttach);


                    foreach (var property in req.CustomQuery.SpecificProperties)
                    {
						
                        if (property != "GuidInExCategory")
                            con.ObjectStateManager.GetObjectStateEntry(itemForAttach).SetModifiedProperty(property);

                    }

                }
                con.SaveChanges();


            }
        }
		/*public int Update(List<accInExCategory> items, ContextRequest contextRequest)
            {
                int result = 0;
                using (EFContext con = new EFContext())
                {
                   
                

                    foreach (var item in items)
                    {
                        //secMessageToUser messageToUser = new secMessageToUser();
                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            item.GetType().GetProperty(prop).SetValue(item, item.GetType().GetProperty(prop).GetValue(item));
                        }
                        //messageToUser.GuidMessageToUser = (Guid)item.GetType().GetProperty("GuidMessageToUser").GetValue(item);

                        var setObject = con.CreateObjectSet<accInExCategory>("accInExCategories");
                        //messageToUser.Readed = DateTime.UtcNow;
                        setObject.Attach(item);
                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            con.ObjectStateManager.GetObjectStateEntry(item).SetModifiedProperty(prop);
                        }
                       
                    }
                    result = con.SaveChanges();

                    


                }
                return result;
            }
           */
        public List<accInExCategory> GetBy(string predicateString, ContextRequest contextRequest, string includes)
        {
            using (EFContext con = new EFContext())
            {
				if (DisableCache) 
                	con.CachingPolicy = EFCachingProvider.Caching.CachingPolicy.NoCaching;

				Filter filter = new Filter();
                if (predicateString.Contains("|"))
                {
                    string ft = GetSpecificFilter(predicateString);
                    if (!string.IsNullOrEmpty(ft))
                        filter.SetFilterPart("ft", ft);
                   
                    contextRequest.FreeText = predicateString.Split(char.Parse("|"))[1];
                    var q1 = predicateString.Split(char.Parse("|"))[0];
                    if (!string.IsNullOrEmpty(q1))
                    {
                        filter.ProcessText(q1);
                    }
                }
                else {
                    filter.ProcessText(predicateString);
                }

				List<accInExCategory> result = null;
                 e = null;
					OnGetting(con, e = new BusinessRulesEventArgs<accInExCategory>() { Filter = filter, ContextRequest = contextRequest /*, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null)*/ });

                  //OnGetting(con,e = new BusinessRulesEventArgs<accInExCategory>() {  ContextRequest = contextRequest, FilterExpressionString = predicateString });
			   	if (e != null) {
				    //predicateString = e.GetQueryString();
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				//	 else {
                //      predicateString = predicateString.Replace("*extraFreeText*", "").Replace("()","");
                //  }
				//con.EnableChangeTrackingUsingProxies = false;
				con.accInExCategories.MergeOption = MergeOption.NoTracking;
                con.ContextOptions.ProxyCreationEnabled = false;
                //if (predicate == null) predicate = PredicateBuilder.True<accInExCategory>();
                
                var es = con.accInExCategories;
				IQueryable<accInExCategory> query = es.AsQueryable();
		
				// include relations FK
				if(string.IsNullOrEmpty(includes) ){
					includes ="";
				}
				StringBuilder sbQuerySystem = new StringBuilder();
                    //predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				

				//if (!string.IsNullOrEmpty(predicateString))
                //      sbQuerySystem.Append(" And ");
                //sbQuerySystem.Append(" (IsDeleted != true Or IsDeleted = null) ");
				 filter.SetFilterPart("de", "(IsDeleted != true OR IsDeleted = null)");


					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
	                    	if (contextRequest.User !=null )
	                        	if (contextRequest.Company != null ){
	                        		//if (sbQuerySystem.Length > 0)
	                        		//	    			sbQuerySystem.Append( " And ");	
									//sbQuerySystem.Append(@" (GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
									filter.SetFilterPart("co",@"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @"""))");
								}
						}	
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				//string predicateString = predicate.ToDynamicLinq<accInExCategory>();
				//predicateString += sbQuerySystem.ToString();
				filter.CleanAndProcess("");

				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed(); //SFSdotNet.Framework.Linq.Utils.ExtractSpecificProperties("", ref predicateString );               
                string predicateWithManyRelations = filter.GetFilterChildren(); //SFSdotNet.Framework.Linq.Utils.CleanPartExpression(predicateString);

                //QueryUtils.BreakeQuery1(predicateString, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
                var _queryable = query.AsQueryable();
                if (!string.IsNullOrEmpty(predicateWithManyRelations))
                    _queryable = _queryable.Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams);
				if (contextRequest.CustomQuery.SpecificProperties.Count > 0)
                {

                    StringBuilder sbProps = new StringBuilder();
                    contextRequest.CustomQuery.SpecificProperties.Add("GuidInExCategory");
                    
					foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                    {
						if(sbProps.Length > 0)
							sbProps.Append(",");
                        sbProps.Append(prop);
                    }
					    IQueryable  queryableSelective = null ;
					  
					  if (!string.IsNullOrEmpty(predicateWithManyRelations))
							queryableSelective = con.accInExCategories.AsQueryable().Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams).Select(string.Format("new({0})", sbProps.ToString()));
					else
						queryableSelective = con.accInExCategories.AsQueryable().Select(string.Format("new({0})", sbProps.ToString()));


                    //if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
					//	queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

                    QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
                    
					if (!string.IsNullOrEmpty(queryOps.OrderByAndSort))
                        queryableSelective = queryableSelective.OrderBy(queryOps.OrderByAndSort);
                    if (queryOps.Skip != null)
                    {
                        queryableSelective = queryableSelective.Skip(queryOps.Skip.Value);
                    }
                    if (queryOps.PageSize != null)
                    {
                        queryableSelective = queryableSelective.Take(queryOps.PageSize.Value);
                    }
                    //var results = queryableSelective.ToList();
                    result = new List<accInExCategory>();
                    accInExCategory itemDef = null;
                    foreach (var item in queryableSelective)
                    {
                        itemDef = new accInExCategory();

                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            if (!prop.Contains("."))
                            {
                                itemDef.GetType().GetProperty(prop).SetValue(itemDef, item.GetType().GetProperty(prop).GetValue(item));
                            }
                            else {
                                throw new Exception("La seleccion de relaciones aún no esta soportada");
                            }

                        }

                        result.Add(itemDef);
                    }

                }
                else
                {
				var  queryable = _queryable.Select(                    
				p => 
                        new
                    {
					GuidInExCategory = p.GuidInExCategory
,CreatedDate = p.CreatedDate
,UpdatedDate = p.UpdatedDate
,CreatedBy = p.CreatedBy
,UpdatedBy = p.UpdatedBy
,IsDeleted = p.IsDeleted
,GuidCompany = p.GuidCompany
,Description = p.Description
,Title = p.Title

,

	
                    }
                    
                    );
					
				
                 if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
                    queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

				QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
            	if (!string.IsNullOrEmpty(queryOps.OrderByAndSort))
					queryable = queryable.OrderBy(queryOps.OrderByAndSort);
               	if (queryOps.Skip != null)
                {
                    queryable = queryable.Skip(queryOps.Skip.Value);
                }
                if (queryOps.PageSize != null)
                {
                    queryable = queryable.Take (queryOps.PageSize.Value);
                }
                result = queryable.AsEnumerable().
                    Select(
                    p =>  new accInExCategory()
                    {
					GuidInExCategory = p.GuidInExCategory
,CreatedDate = p.CreatedDate
,UpdatedDate = p.UpdatedDate
,CreatedBy = p.CreatedBy
,UpdatedBy = p.UpdatedBy
,IsDeleted = p.IsDeleted
,GuidCompany = p.GuidCompany
,Description = p.Description
,Title = p.Title

                    }
                     ).ToList();
				}


			 if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e = new BusinessRulesEventArgs<accInExCategory>() { Items= result, IncludingComputedLinq = true, ContextRequest = contextRequest, FilterExpressionString  = predicateString } :  e);
  
			
  
                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
            }
        }
		public List<accInExCategory> GetBy(Expression<Func<accInExCategory, bool>> predicate, bool loadRelations, ContextRequest contextRequest)
        {
			if(!loadRelations)
				return GetBy(predicate, contextRequest);
			else
				return GetBy(predicate, contextRequest, "accMoneyInOutConcepts");

        }

        public List<accInExCategory> GetBy(Expression<Func<accInExCategory, bool>> predicate, int? pageSize, int? page, string orderBy, SFSdotNet.Framework.Data.SortDirection? sortDirection)
        {
            return GetBy(predicate, new ContextRequest() { CustomQuery = new CustomQuery() { Page = page, PageSize = pageSize, OrderBy = orderBy, SortDirection = sortDirection } });
        }
        public List<accInExCategory> GetBy(Expression<Func<accInExCategory, bool>> predicate)
        {

			if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }
			ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();

			contextRequest.CurrentContext = SFSdotNet.Framework.My.Context.CurrentContext;
			            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

            contextRequest.CustomQuery.FilterExpressionString = null;
            return this.GetBy(predicate, contextRequest, "");
        }
        #endregion
        #region Dynamic String
		private string GetSpecificFilter(string filter) {
            string result = "";
		    //string linqFilter = String.Empty;
            string freeTextFilter = String.Empty;
            if (filter.Contains("|"))
            {
               // linqFilter = filter.Split(char.Parse("|"))[0];
                freeTextFilter = filter.Split(char.Parse("|"))[1];
            }
            //else {
            //    freeTextFilter = filter;
            //}
            //else {
            //    linqFilter = filter;
            //}
			// linqFilter = SFSdotNet.Framework.Linq.Utils.ReplaceCustomDateFilters(linqFilter);
            //string specificFilter = linqFilter;
            if (!string.IsNullOrEmpty(freeTextFilter))
            {
                System.Text.StringBuilder sbCont = new System.Text.StringBuilder();
                /*if (specificFilter.Length > 0)
                {
                    sbCont.Append(" AND ");
                    sbCont.Append(" ({0})");
                }
                else
                {
                    sbCont.Append("{0}");
                }*/
                //var words = freeTextFilter.Split(char.Parse(" "));
				var word = freeTextFilter;
                System.Text.StringBuilder sbSpec = new System.Text.StringBuilder();
                 int nWords = 1;
				/*foreach (var word in words)
                {
					if (word.Length > 0){
                    if (sbSpec.Length > 0) sbSpec.Append(" AND ");
					if (words.Length > 1) sbSpec.Append("("); */
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
											
					sbSpec.Append(string.Format(@"Description.Contains(""{0}"")", word));

					
											sbSpec.Append(" OR ");
										
					sbSpec.Append(string.Format(@"Title.Contains(""{0}"")", word));

					
								 //sbSpec.Append("*extraFreeText*");

                    /*if (words.Length > 1) sbSpec.Append(")");
					
					nWords++;

					}

                }*/
                //specificFilter = string.Format("{0}{1}", specificFilter, string.Format(sbCont.ToString(), sbSpec.ToString()));
                                 result = sbSpec.ToString();  
            }
			//result = specificFilter;
			
			return result;

		}
	
			public List<accInExCategory> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  params object[] extraParams)
        {
			return GetBy(filter, pageSize, page, orderBy, orderDir,  null, extraParams);
		}
           public List<accInExCategory> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir, string usemode, params object[] extraParams)
            { 
                return GetBy(filter, pageSize, page, orderBy, orderDir, usemode, null, extraParams);
            }


		public List<accInExCategory> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  string usemode, ContextRequest context, params object[] extraParams)

        {

            // string freetext = null;
            //if (filter.Contains("|"))
            //{
            //    int parts = filter.Split(char.Parse("|")).Count();
            //    if (parts > 1)
            //    {

            //        freetext = filter.Split(char.Parse("|"))[1];
            //    }
            //}
		
            //string specificFilter = "";
            //if (!string.IsNullOrEmpty(filter))
            //  specificFilter=  GetSpecificFilter(filter);
            if (string.IsNullOrEmpty(orderBy))
            {
			                orderBy = "UpdatedDate";
            }
			//orderDir = "desc";
			SFSdotNet.Framework.Data.SortDirection direction = SFSdotNet.Framework.Data.SortDirection.Ascending;
            if (!string.IsNullOrEmpty(orderDir))
            {
                if (orderDir == "desc")
                    direction = SFSdotNet.Framework.Data.SortDirection.Descending;
            }
            if (context == null)
                context = new ContextRequest();
			else
                context.CustomQuery = new CustomQuery();
             //context.FreeText = freetext;
             context.UseMode = usemode;
             context.CustomQuery =new SFSdotNet.Framework.My.CustomQuery()
 
                {
                    ExtraParams = extraParams,

                    OrderBy = orderBy,
                    SortDirection = direction,
                    Page = page,
                    PageSize = pageSize
               };
            

            if (!preventSecurityRestrictions) {
			 if (context.CurrentContext == null)
                {
					if (SFSdotNet.Framework.My.Context.CurrentContext != null &&  SFSdotNet.Framework.My.Context.CurrentContext.Company != null && SFSdotNet.Framework.My.Context.CurrentContext.User != null)
					{
						context.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
						context.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

					}
					else {
						throw new Exception("The security rule require a specific user and company");
					}
				}
            }
            return GetBy(filter, context);
  
        }


        public List<accInExCategory> GetBy(string strWhere, ContextRequest contextRequest)
        {
        	#region old code
				
				 //Expression<Func<tvsReservationTransport, bool>> predicate = null;
				string strWhereClean = strWhere.Replace("*extraFreeText*", "").Replace("()", "");
                //if (!string.IsNullOrEmpty(strWhereClean)){

                //    object[] extraParams = null;
                //    //if (contextRequest != null )
                //    //    if (contextRequest.CustomQuery != null )
                //    //        extraParams = contextRequest.CustomQuery.ExtraParams;
                //    //predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<tvsReservationTransport, bool>(strWhereClean, extraParams != null? extraParams.Cast<Guid>(): null);				
                //}
				 if (contextRequest == null)
                {
                    contextRequest = new ContextRequest();
                    if (contextRequest.CustomQuery == null)
                        contextRequest.CustomQuery = new CustomQuery();
                }
                  if (!preventSecurityRestrictions) {
					if (contextRequest.User == null || contextRequest.Company == null)
                      {
                     if (SFSdotNet.Framework.My.Context.CurrentContext.Company != null && SFSdotNet.Framework.My.Context.CurrentContext.User != null)
                     {
                         contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                         contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

                     }
                     else {
                         throw new Exception("The security rule require a specific User and Company ");
                     }
					 }
                 }
            contextRequest.CustomQuery.FilterExpressionString = strWhere;
				//return GetBy(predicate, contextRequest);  

			#endregion				
				
                    return GetBy(strWhere, contextRequest, "");  


        }
       public List<accInExCategory> GetBy(string strWhere)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
			
            return GetBy(strWhere, context, null);
        }

        public List<accInExCategory> GetBy(string strWhere, string includes)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
            return GetBy(strWhere, context, includes);
        }

        #endregion
        #endregion
		
		  #region SaveOrUpdate
        private accInExCategory Save(accInExCategory entity, bool saveChanges, EFPocoContext con)
        {
				ObjectContext context = null;
            return Update(entity, saveChanges,null, out context);

			
        }
		 public  accInExCategory Create( accInExCategory entity, params Expression<Func< accInExCategory, object>>[] paths)
         {
             return Create(entity, null, paths);

         }
 		 public accInExCategory Create(accInExCategory entity)
        {
				ObjectContext context = null;
				    if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: Create");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

				return this.Create(entity, true, contextRequest, out context);


        }
        public accInExCategory Create(accInExCategory entity, ContextRequest contextRequest)
         {
             ObjectContext context = null;
             return this.Create(entity, true, contextRequest,out context);

         }
         public accInExCategory Create(accInExCategory entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext context)
        {
                    return Create(entity, saveChanges , contextRequest , out context, null);
        }
         public accInExCategory Create(accInExCategory entity, ContextRequest contextRequest, params Expression<Func<accInExCategory,object>>[] paths)
        {
            ObjectContext context = null;
            if(paths != null)
				return Create(entity, true,contextRequest, out context, paths);
			else 
				return Create(entity, true,contextRequest, out context);
        }
        public accInExCategory Create(accInExCategory entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext context, params Expression<Func<accInExCategory,object>>[] pocopaths)
        {
			using (EFPocoContext con = new EFPocoContext())
			{
				accInExCategory itemResult = null;
#region Autos


			entity.CreatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.CreatedBy = contextRequest.User.GuidUser;
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.UpdatedBy = contextRequest.User.GuidUser;
	
			if (contextRequest != null)
				if(contextRequest.User != null)
					if (contextRequest.Company != null)
						entity.GuidCompany = contextRequest.Company.GuidCompany;
	

#endregion
                e = null;
                OnCreating(this,e = new BusinessRulesEventArgs<accInExCategory>() { ContextRequest = contextRequest, Item=entity, PathExpressions = pocopaths, SaveChanges =saveChanges });
				   if (e != null) {
						if (e.Cancel)
						{
							context = null;
							return e.Item;

						}
					}

                    if (entity.GuidInExCategory == Guid.Empty)
                   {
                       entity.GuidInExCategory = Guid.NewGuid();

                   }



				accInExCategoryAdapter adapter = con.GetAdapterObject<accInExCategoryAdapter>(entity);;
				List<Expression<Func<accInExCategoryAdapter, object>>> paths = new List<Expression<Func<accInExCategoryAdapter,object>>>();
                
			    if (pocopaths != null && pocopaths.Length > 0)
                {
					// Translate
                    foreach (var pocopath in pocopaths)
                    {
                        var param = Expression.Parameter(typeof(accInExCategoryAdapter), "p");
                        var member = MemberExpression.PropertyOrField(param, ((System.Linq.Expressions.MemberExpression)(((System.Linq.Expressions.LambdaExpression)(pocopath)).Body)).Member.Name);
                        Expression<Func<accInExCategoryAdapter, object>> path  = null;
                        switch(member.Member.Name){
                        
							case "accMoneyInOutConcepts":
								path = p => p.accMoneyInOutConcepts.First().WithoutUpdate();

								//path = p => member;
								//path = p => p.accMoneyInOutConcepts.First().accReusableCatalogValue.WithoutUpdate();											
							break;
							
							default:
								path = p => member;
							break;
                        }

                        
                       paths.Add(path.Expand());
                    }
                }
                object aux = null;
					//paths = pathBuilder.ToArray();

#region Childs accMoneyInOutConcepts 
				if (adapter.accMoneyInOutConcepts != null)
                {
                    foreach (var item in adapter.accMoneyInOutConcepts)
                    {
						
							if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accMoneyInOutConcepts", item);
							if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)){ 
								//paths.Add(p => p.accMoneyInOutConcepts.First().WithoutUpdate());
								
						if (item.accReusableCatalogValue != null){
							item.accReusableCatalogValue.EntityKey = con.WrappedContext.CreateEntityKey("accReusableCatalogValues", item.accReusableCatalogValue);
                            
             
						}								
							if (item.accInExCategory == null)
								item.accInExCategory = adapter;

								item.EntityKey = null;
							}

                    }
					if (adapter.accMoneyInOutConcepts.Count > 0){
						paths.Add(p => p.accMoneyInOutConcepts.First().WithoutUpdate());
						paths.Add(p => p.accMoneyInOutConcepts.First().accReusableCatalogValue.WithoutUpdate());
					
					}
                }
#endregion 




                //con.WrappedContext.AttachObjectGraph<accInExCategoryAdapter>(adapter, p=>p.accMoneyInOutConcepts);
                con.WrappedContext.AttachObjectGraph<accInExCategoryAdapter>(adapter, paths.ToArray());
              	if (saveChanges){
                    con.WrappedContext.SaveChanges(SaveOptions.AcceptAllChangesAfterSave);
					 
				}
                else
                    con.WrappedContext.SaveChanges(SaveOptions.None);
                if (!saveChanges)
                    context = con.WrappedContext;
                else
                    context = null;
				itemResult = adapter.PocoEntity;
                if (e != null)
                {
                    e.Item = itemResult;
                }
                OnCreated(this, e == null ? e = new BusinessRulesEventArgs<accInExCategory>() { ContextRequest = contextRequest, Item = itemResult, PathExpressions = pocopaths, SaveChanges = saveChanges } : e);



                if (e != null)
                {
                    itemResult = e.Item;
                }
                              return itemResult;
            }
        }
        BusinessRulesEventArgs<accInExCategory> e = null;
        public void Create(List<accInExCategory> entities)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            Create(entities, contextRequest, null);
        }
        public void Create(List<accInExCategory> entities, ContextRequest contextRequest)
        
        {
			ObjectContext context = null;
            	foreach (accInExCategory entity in entities)
				{
					this.Create(entity, true, contextRequest, out context);
				}
        }
         public accInExCategory Update(accInExCategory entity)
        {
            if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return Update(entity, contextRequest);
        }
        public accInExCategory Update(accInExCategory entity, ContextRequest requestContext)
        {
			  ObjectContext context = null;
            return Update(entity, true,requestContext, out context);
         }
		public  accInExCategory Update(accInExCategory entity, params Expression<Func<accInExCategory, object>>[] pocopaths)
        {
			  ObjectContext context = null;
              return Update(entity, true, null, out context, pocopaths);
         }
        public accInExCategory Update(accInExCategory entity, ContextRequest requestContext, bool saveChanges, out ObjectContext outcontext)
        {
			return Update(entity, saveChanges,requestContext, out outcontext, null);
		}
         public accInExCategory Update(accInExCategory entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext outcontext, params Expression<Func<accInExCategory,object>>[] pocopaths)
        {
		 if ((System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null) && contextRequest == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Update");
            }
            if (contextRequest == null)
            {
                contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            }

			using (EFPocoContext con = new EFPocoContext())
			{
				accInExCategory  itemResult = null;

	
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
			if(contextRequest.User != null)
				entity.UpdatedBy = contextRequest.User.GuidUser;

	    var oldentity = GetBy(p => p.GuidInExCategory == entity.GuidInExCategory, contextRequest).FirstOrDefault();
		if (oldentity != null) {
		
            entity.CreatedDate = oldentity.CreatedDate;
            entity.CreatedBy = oldentity.CreatedBy;
	
            entity.GuidCompany = oldentity.GuidCompany;
	
			

		}

				e = null;
                OnUpdating(this,e = new BusinessRulesEventArgs<accInExCategory>() { ContextRequest = contextRequest, Item=entity, PathExpressions = pocopaths, SaveChanges =saveChanges });
				   if (e != null) {
						if (e.Cancel)
						{
							outcontext = null;
							return e.Item;

						}
					}

                accInExCategoryAdapter adapter = con.GetAdapterObject<accInExCategoryAdapter>(entity);
                adapter.EntityKey = con.WrappedContext.CreateEntityKey("accInExCategories", adapter);
				    var es = con.accInExCategories;
				List<Expression<Func<accInExCategoryAdapter, object>>> paths = new List<Expression<Func<accInExCategoryAdapter,object>>>();
                /* if (pocopaths != null)
                    if (pocopaths.Length == 0)
                        pocopaths = null;*/

			    if (pocopaths != null && pocopaths.Length > 0)
                {
					// Translate
                    foreach (var pocopath in pocopaths)
                    {
                        var param = Expression.Parameter(typeof(accInExCategoryAdapter), "p");
                        var member = MemberExpression.PropertyOrField(param, ((System.Linq.Expressions.MemberExpression)(((System.Linq.Expressions.LambdaExpression)(pocopath)).Body)).Member.Name);
                        Expression<Func<accInExCategoryAdapter, object>> path  = null;
                        switch(member.Member.Name){
                        
							case "accMoneyInOutConcepts":
								//path = p => member;
								path = p => p.accMoneyInOutConcepts.First().WithoutUpdate();
				//				path = p => p.accMoneyInOutConcepts.First().accReusableCatalogValue.WithoutUpdate();											
							break;
							
							default:
								path = p => member;
							break;
                        }

                        paths.Add(path.Expand());
 					}
                }
                else {
                  paths = new List<Expression<Func<accInExCategoryAdapter, object>>>();

					//List<Expression<Func<accInExCategoryAdapter,object>>> pathBuilder = new List<Expression<Func<accInExCategoryAdapter,object>>>();
		
					//paths = pathBuilder.ToArray();		
			}
			object aux = null;
				if (adapter.accMoneyInOutConcepts != null)
                {
                    foreach (var item in adapter.accMoneyInOutConcepts)
                    {


                        if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accMoneyInOutConcepts", item);
						if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)) item.EntityKey = null;
                        
                    }
					
                    if (adapter.accMoneyInOutConcepts.Count > 0)
                    {
                        paths.Add(p => p.accMoneyInOutConcepts.First().WithoutUpdate());

                    }

                }



                //con.AttachObjectGraph<accInExCategory>(adapter, p=>p.accMoneyInOutConcepts);
                con.WrappedContext.AttachObjectGraph<accInExCategoryAdapter>(adapter, paths.ToArray());
				if (saveChanges){
                	con.WrappedContext.SaveChanges();
					 
					}
                if(!saveChanges)
					outcontext = con.WrappedContext;
				else
					outcontext = null;
				itemResult = adapter.PocoEntity;
				OnUpdated(this, e = new BusinessRulesEventArgs<accInExCategory>() { ContextRequest = contextRequest, Item=itemResult, PathExpressions = pocopaths, SaveChanges =saveChanges });

              	return itemResult;

			  }
        }
        public accInExCategory Save(accInExCategory entity)
        {
			return Save(entity, true, null);
        }
        public int Save(List<accInExCategory> entities)
        {
			using (EFPocoContext con = new EFPocoContext())
			{
			
            int n = 0;
            foreach (accInExCategory item in entities)
            {
                try
                {
                    this.Save(item, false, con);
                    n++;
                }catch (Exception ex){
                    SFSdotNet.Framework.My.EventLog.Exception(ex);
                }
            }
            con.SaveChanges();
            return n;
            }
        }
        #endregion
        #region Delete
        public void Delete(accInExCategory entity)
        {
				this.Delete(entity, null);
			
        }
		 public void Delete(accInExCategory entity, ContextRequest contextRequest)
        {
				ObjectContext context = null;
				this.Delete(entity, true, out context, contextRequest);
			
        }

        
        public void Delete(accInExCategory entity, bool saveChanges, out  ObjectContext context, ContextRequest contextRequest, BusinessRulesEventArgs<accInExCategory> e = null)
        {
			using (EFPocoContext _con = new EFPocoContext())
			{
				int result = 0;
				
               	BusinessRulesEventArgs<accInExCategory> _e = null;
               List<accInExCategory> _items = new List<accInExCategory>();
                _items.Add(entity);
                if (e == null || e.PreventPartialPropagate == false)
                {
                    OnDeleting(this, _e = (e == null ? new BusinessRulesEventArgs<accInExCategory>() { ContextRequest = contextRequest, Item = entity, Items = _items, SaveChanges = saveChanges } : e));
                }
                if (_e != null)
                {
                    if (_e.Cancel)
						{
							context = null;
							return;

						}
					}


				accInExCategoryAdapter adapter = _con.GetAdapterObject<accInExCategoryAdapter>(entity);
                adapter.EntityKey = _con.WrappedContext.CreateEntityKey("accInExCategories", adapter);
                
	            //adapter = _con.WrappedContext.AttachObjectGraph<accInExCategoryAdapter>(adapter);
				try{
					_con.WrappedContext.AttachTo("accInExCategories", adapter);
                }catch{
					
				}
									//IsDeleted
					bool logicDelete = true;
					if (adapter.IsDeleted != null)
					{
						if (adapter.IsDeleted.Value)
							logicDelete = false;
					}
					if (logicDelete)
					{
											entity = GetBy(p => p.GuidInExCategory == entity.GuidInExCategory, contextRequest).FirstOrDefault();
						entity.IsDeleted = true;
						Update(entity, contextRequest);
					}
					else {
						_con.WrappedContext.DeleteObject(adapter);
					}
								
				if (!saveChanges)
                    context = _con.WrappedContext;
                else
                    context = null;
				 SaveOptions saveOption = SaveOptions.None;
                if (saveChanges)
                    saveOption = SaveOptions.AcceptAllChangesAfterSave;

				result = _con.WrappedContext.SaveChanges(saveOption);
				if (saveChanges){
					
					}
			if (e == null || e.PreventPartialPropagate == false)
                {

                    if (_e == null)
                        _e = new BusinessRulesEventArgs<accInExCategory>() { ContextRequest = contextRequest, Item = entity, Items = _items };

                    OnDeleted(this, _e);
                }

				//return null;
			}            
        }
        public void Delete(List<accInExCategory> entities,  ContextRequest contextRequest = null )
        {
				ObjectContext context = null;
			 BusinessRulesEventArgs<accInExCategory> _e = null;

                OnDeleting(this, _e = new BusinessRulesEventArgs<accInExCategory>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities });
                if (_e != null)
                {
                    if (_e.Cancel)
                    {
                        context = null;
                        return;

                    }
                }
                bool allSucced = true;
                BusinessRulesEventArgs<accInExCategory> eToChilds = new BusinessRulesEventArgs<accInExCategory>();
                if (_e != null)
                {
                    eToChilds = _e;
                }
                else
                {
                    eToChilds = new BusinessRulesEventArgs<accInExCategory>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                }
				foreach (accInExCategory item in entities)
				{
					try
                    {
                        this.Delete(item, true, out context, contextRequest, e: eToChilds);
                    }
                    catch (Exception ex)
                    {
                        SFSdotNet.Framework.My.EventLog.Error(ex);
                        allSucced = false;
                    }
				}
				if (_e == null)
                    _e = new BusinessRulesEventArgs<accInExCategory>() { ContextRequest = contextRequest, CountResult = entities.Count, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                OnDeleted(this, _e);

			
        }
        #endregion
 
        #region GetCount
		 public int GetCount(Expression<Func<accInExCategory, bool>> predicate)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

			return GetCount(predicate, contextRequest);
		}
        public int GetCount(Expression<Func<accInExCategory, bool>> predicate, ContextRequest contextRequest)
        {


		
			using (EFPocoContext con = new EFPocoContext())
			{


				if (predicate == null) predicate = PredicateBuilder.True<accInExCategory>();
           		predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted == null);
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    		if (contextRequest.User !=null )
                        		if (contextRequest.Company != null )
                        			predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				
				return con.accInExCategories.Count(predicate);
			}

        }
		  public int GetCount(string predicate,  ContextRequest contextRequest)
         {
             return GetCount(predicate, null, contextRequest);
         }

         public int GetCount(string predicate)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return GetCount(predicate, contextRequest);
        }
		 public int GetCount(string predicate, string usemode){
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
				return GetCount( predicate,  usemode,  contextRequest);
		 }
        public int GetCount(string predicate, string usemode, ContextRequest contextRequest){
			  string freetext = null;
            Filter filter = new Filter();

              if (predicate.Contains("|"))
              {
                 
                  filter.SetFilterPart("ft", GetSpecificFilter(predicate));
                 
                  filter.ProcessText(predicate.Split(char.Parse("|"))[0]);
                  freetext = predicate.Split(char.Parse("|"))[1];
              }
              else {
                  filter.ProcessText(predicate);
              }
           
			e = null;
			contextRequest.FreeText = freetext;
			contextRequest.UseMode = usemode;
            OnCounting(this, e = new BusinessRulesEventArgs<accInExCategory>() {  Filter =filter, ContextRequest = contextRequest });
            if (e != null)
            {
                if (e.Cancel)
                {
                    context = null;
                    return e.CountResult;

                }

            

            }
			 predicate = filter.GetFilterComplete();
			StringBuilder sbQuerySystem = new StringBuilder();
		
					
                    filter.SetFilterPart("de","(IsDeleted != true OR IsDeleted == null)");
			
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    	if (contextRequest.User !=null )
                        	if (contextRequest.Company != null ){
                        		

								filter.SetFilterPart("co", @"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
						
						
							}
							
							}
							if (preventSecurityRestrictions) preventSecurityRestrictions= false;
			using (EFContext con = new EFContext())
			{
				   
                 filter.CleanAndProcess("");
				//string predicateWithFKAndComputed = SFSdotNet.Framework.Linq.Utils.ExtractSpecificProperties("", ref predicate );               
				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed();
               string predicateWithManyRelations = filter.GetFilterChildren();
			   ///QueryUtils.BreakeQuery1(predicate, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
			   predicate = filter.GetFilterComplete();
               if (!string.IsNullOrEmpty(predicate))
               {
				
					
                    return con.accInExCategories.Count(System.Linq.Dynamic.DynamicExpression.ParseLambda<accInExCategory, bool>(predicate));
					
                }else
                    return con.accInExCategories.Count();

			}

		}
         public int GetCount()
        {
            return GetCount(p => true);
        }
        #endregion
        
         public accInExCategory Update(accInExCategory entity, string paths)
        {
            return Update(entity, paths.Split(char.Parse(",")));
            
        }

        public accInExCategory Update(accInExCategory entity, string[] paths)
        {
            // Translate
            List<Expression<Func<accInExCategory, object>>> pathList = new List<Expression<Func<accInExCategory, object>>>();
            for (int i = 0; i <= paths.Length -1; i++)
            {
                var param = Expression.Parameter(typeof(accInExCategory), "p");
                var member = MemberExpression.PropertyOrField(param, paths[i]);

                Expression<Func<accInExCategory, object>> path = p => member;
                pathList.Add(path.Expand());
            }
			ObjectContext context = null;
			 return Update(entity, true,null, out context,  pathList.ToArray());
           //return Update(entity, pathList.ToArray());
        }

        public void Update(List<accInExCategory> entities, string paths)
        {
            foreach (var entity in entities )
            {
                Update(entity, paths);
            }
        }
		public accInExCategory Create(accInExCategory entity, ContextRequest contextRequest, string paths)
        {
          

            if (string.IsNullOrEmpty(paths))
                return Create(entity, contextRequest);

            return Create(entity, contextRequest, paths.Split(char.Parse(",")));
        }
        public accInExCategory Create(accInExCategory entity, string paths)
        {
			 if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return Create(entity, contextRequest, paths);

        }

        public  void Create(List<accInExCategory> entities, ContextRequest requestContext, string paths)
        {
            foreach (var entity in entities)
            {
                Create(entity,requestContext, paths);
            }
        }

        public void Create(List<accInExCategory> entities, string[] paths)
        {
            foreach (var entity in entities)
            {
                Create(entity, null, paths);
            }
        }
        
        public accInExCategory  Create(accInExCategory entity, ContextRequest contextRequest, string[] paths)
        {
            List<Expression<Func<accInExCategory, object>>> pathList = new List<Expression<Func<accInExCategory, object>>>();
            for (int i = 0; i < paths.Length - 1; i++)
            {
                var param = Expression.Parameter(typeof(accInExCategory), "p");
                var member = MemberExpression.PropertyOrField(param, paths[i]);

                Expression<Func<accInExCategory, object>> path = p => member;
                pathList.Add(path.Expand());
            }
            return Create(entity, contextRequest, pathList.ToArray());
        }
        public void Delete(List<accInExCategory.CompositeKey> entityKeys)
        {

            List<accInExCategory> items = new List<accInExCategory>();
            foreach (var itemKey in entityKeys)
            {
                items.Add(GetByKey(itemKey.GuidInExCategory));
            }

            Delete(items);

        }
		
		
	}
		public partial class accIncomeExpensesBR{
	 	
           
		 #region Partial methods

           partial void OnUpdating(object sender, BusinessRulesEventArgs<accIncomeExpens> e);

            partial void OnUpdated(object sender, BusinessRulesEventArgs<accIncomeExpens> e);

            partial void OnCreating(object sender, BusinessRulesEventArgs<accIncomeExpens> e);
            partial void OnCreated(object sender, BusinessRulesEventArgs<accIncomeExpens> e);

            partial void OnDeleting(object sender, BusinessRulesEventArgs<accIncomeExpens> e);
            partial void OnDeleted(object sender, BusinessRulesEventArgs<accIncomeExpens> e);

            partial void OnGetting(object sender, BusinessRulesEventArgs<accIncomeExpens> e);
            partial void OnTaken(object sender, BusinessRulesEventArgs<accIncomeExpens> e);
            partial void OnCounting(object sender, BusinessRulesEventArgs<accIncomeExpens> e);
 
 
            #endregion
			
		private static accIncomeExpensesBR singlenton =null;
				public static accIncomeExpensesBR NewInstance(){
					return  new accIncomeExpensesBR();
					
				}
		public static accIncomeExpensesBR Instance{
			get{
				if (singlenton == null)
					singlenton = new accIncomeExpensesBR();
				return singlenton;
			}
		}
		private bool preventSecurityRestrictions = false;
		 public bool PreventAuditTrail { get; set;  }
		#region Fields
        EFPocoContext context = null;
        #endregion
        #region Constructor
        public accIncomeExpensesBR()
        {
            context = new EFPocoContext();
        }
		 public accIncomeExpensesBR(bool preventSecurity)
            {
                this.preventSecurityRestrictions = preventSecurity;
				context = new EFPocoContext();
            }
        #endregion
		
		#region Get

 		public IQueryable<accIncomeExpens> Get()
        {
            //using (EFContext con = new EFContext())
            //{
				EFContext con = new EFContext();
                var query = con.accIncomeExpenses.AsQueryable();
                con.ContextOptions.ProxyCreationEnabled = false;

                //query = ContextQueryBuilder<Nutrient>.ApplyContextQuery(query, contextRequest);

                return query;




            //}

        }
		
		public List<accIncomeExpens> GetAll()
        {
            return this.GetBy(p => true);
        }
        public List<accIncomeExpens> GetAll(string includes)
        {
            return this.GetBy(p => true, includes);
        }
        public accIncomeExpens GetByKey(Guid guidIncomecExpense)
        {
            return GetByKey(guidIncomecExpense, true);
        }
        public accIncomeExpens GetByKey(Guid guidIncomecExpense, bool loadIncludes)
        {
            accIncomeExpens item = null;
			var query = PredicateBuilder.True<accIncomeExpens>();
                    
			string strWhere = @"GuidIncomecExpense = Guid(""" + guidIncomecExpense.ToString()+@""")";
            Expression<Func<accIncomeExpens, bool>> predicate = null;
            if (!string.IsNullOrEmpty(strWhere))
                predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<accIncomeExpens, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
			 ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();
            contextRequest.CustomQuery.FilterExpressionString = strWhere;

			//item = GetBy(predicate, loadIncludes, contextRequest).FirstOrDefault();
			item = GetBy(strWhere,loadIncludes,contextRequest).FirstOrDefault();
            return item;
        }
         public List<accIncomeExpens> GetBy(string strWhere, bool loadRelations, ContextRequest contextRequest)
        {
            if (!loadRelations)
                return GetBy(strWhere, contextRequest);
            else
                return GetBy(strWhere, contextRequest, "");

        }
		  public List<accIncomeExpens> GetBy(string strWhere, bool loadRelations)
        {
              if (!loadRelations)
                return GetBy(strWhere, new ContextRequest());
            else
                return GetBy(strWhere, new ContextRequest(), "");

        }
         public accIncomeExpens GetByKey(Guid guidIncomecExpense, params Expression<Func<accIncomeExpens, object>>[] includes)
        {
            accIncomeExpens item = null;
			string strWhere = @"GuidIncomecExpense = Guid(""" + guidIncomecExpense.ToString()+@""")";
          Expression<Func<accIncomeExpens, bool>> predicate = null;
            if (!string.IsNullOrEmpty(strWhere))
                predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<accIncomeExpens, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
        item = GetBy(predicate, includes).FirstOrDefault();
         ////   item = GetBy(strWhere,includes).FirstOrDefault();
			return item;

        }
        public accIncomeExpens GetByKey(Guid guidIncomecExpense, string includes)
        {
            accIncomeExpens item = null;
			string strWhere = @"GuidIncomecExpense = Guid(""" + guidIncomecExpense.ToString()+@""")";
            
			
            item = GetBy(strWhere, includes).FirstOrDefault();
            return item;

        }
		 public accIncomeExpens GetByKey(Guid guidIncomecExpense, string usemode, string includes)
		{
			return GetByKey(guidIncomecExpense, usemode, null, includes);

		 }
		 public accIncomeExpens GetByKey(Guid guidIncomecExpense, string usemode, ContextRequest context,  string includes)
        {
            accIncomeExpens item = null;
			string strWhere = @"GuidIncomecExpense = Guid(""" + guidIncomecExpense.ToString()+@""")";
			if (context == null)
				context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
			context.CustomQuery.IsByKey = true;
            context.CustomQuery.FilterExpressionString = strWhere;
            context.UseMode = usemode;
            item = GetBy(strWhere,context , includes).FirstOrDefault();
            return item;

        }

        #region Dynamic Predicate
        public List<accIncomeExpens> GetBy(Expression<Func<accIncomeExpens, bool>> predicate, int? pageSize, int? page)
        {
            return this.GetBy(predicate, pageSize, page, null, null);
        }
        public List<accIncomeExpens> GetBy(Expression<Func<accIncomeExpens, bool>> predicate, ContextRequest contextRequest)
        {

            return GetBy(predicate, contextRequest,"");
        }
        
        public List<accIncomeExpens> GetBy(Expression<Func<accIncomeExpens, bool>> predicate, ContextRequest contextRequest, params Expression<Func<accIncomeExpens, object>>[] includes)
        {
            StringBuilder sb = new StringBuilder();
           if (includes != null)
            {
                foreach (var path in includes)
                {

						if (sb.Length > 0) sb.Append(",");
						sb.Append(SFSdotNet.Framework.Linq.Utils.IncludeToString<accIncomeExpens>(path));

               }
            }
            return GetBy(predicate, contextRequest, sb.ToString());
        }
        
        
        public List<accIncomeExpens> GetBy(Expression<Func<accIncomeExpens, bool>> predicate, string includes)
        {
			ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";

            return GetBy(predicate, context, includes);
        }

        public List<accIncomeExpens> GetBy(Expression<Func<accIncomeExpens, bool>> predicate, params Expression<Func<accIncomeExpens, object>>[] includes)
        {
			if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }
			ContextRequest context = new ContextRequest();
			            context.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            context.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";
            return GetBy(predicate, context, includes);
        }

      
		public bool DisableCache { get; set; }
		 public List<accIncomeExpens> GetBy(Expression<Func<accIncomeExpens, bool>> predicate, ContextRequest contextRequest, string includes)
        {
            using (EFPocoContext con = new EFPocoContext())
            {
				if (DisableCache) 
                	con.CachingPolicy = EFCachingProvider.Caching.CachingPolicy.NoCaching;

				List<accIncomeExpens> result = null;
                 e = null;
	
				OnGetting(con, e = new BusinessRulesEventArgs<accIncomeExpens>() {  FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null) });

               // OnGetting(con,e = new BusinessRulesEventArgs<accIncomeExpens>() { FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = contextRequest.CustomQuery.FilterExpressionString});
				   if (e != null) {
				    predicate = e.FilterExpression;
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				con.EnableChangeTrackingUsingProxies = false;
				con.WrappedContext.accIncomeExpenses.MergeOption = MergeOption.NoTracking;
                con.WrappedContext.ContextOptions.ProxyCreationEnabled = false;
                if (predicate == null) predicate = PredicateBuilder.True<accIncomeExpens>();
 				string fkIncludes = "accMoneyInOutConcept,accMoneyPlace,accProvider,accReusableCatalogValue,accReusableStatusAuthorization,accCompanyArea,accParent,accReusable_PaymentType";
                if(contextRequest!=null){
					if (contextRequest.CustomQuery != null)
					{
						if (contextRequest.CustomQuery.IncludeForeignKeyPaths != null) {
							if (contextRequest.CustomQuery.IncludeForeignKeyPaths.Value == false)
								fkIncludes = "";
						}
					}
				}
				if (!string.IsNullOrEmpty(includes))
					includes = includes + "," + fkIncludes;
				else
					includes = fkIncludes;
                
                var es = con.accIncomeExpenses;

                IQueryable<accIncomeExpens> query = es.AsQueryable();

                                if (!string.IsNullOrEmpty(includes))
                {
                    foreach (string include in includes.Split(char.Parse(",")))
                    {
						if (!string.IsNullOrEmpty(include))
                            query = query.Include(include);
                    }
                }
                    predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
					 	if (!preventSecurityRestrictions)
						{
							if (contextRequest != null )
		                    	if (contextRequest.User !=null )
		                        	if (contextRequest.Company != null)
		                        		predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				query =query.Where(predicate);
                query = ContextQueryBuilder<accIncomeExpens>.ApplyContextQuery(query, contextRequest);

                result = query.ToList<accIncomeExpens>();
				  
                if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e =  new BusinessRulesEventArgs<accIncomeExpens>() { Items= result, IncludingComputedLinq = false, ContextRequest = contextRequest,  FilterExpression = predicate } :  e);
  
			

                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
            }
        }
		public void UpdateAgile(accIncomeExpens item, params string[] fields)
         {
             List<accIncomeExpens> list = new List<accIncomeExpens>();
             list.Add(item);
             this.UpdateBulk(list, fields);
         }
		public void UpdateBulk(List<accIncomeExpens>  items, params string[] fields)
         {
             SFSdotNet.Framework.My.ContextRequest req = new SFSdotNet.Framework.My.ContextRequest();
             req.CustomQuery = new SFSdotNet.Framework.My.CustomQuery();
             foreach (var field in fields)
             {
                 req.CustomQuery.SpecificProperties.Add(field);
             }
             UpdateBulk(items, req);

         }
        public void UpdateBulk(List<accIncomeExpens> items, ContextRequest req)
        {
            using (EFContext con = new EFContext())
            {



                foreach (var item in items)
                {
                    var setT = con.CreateObjectSet<accIncomeExpens>("accIncomeExpenses");


                    var itemForAttach = new accIncomeExpens();
			itemForAttach.GuidIncomecExpense = item.GuidIncomecExpense;
					
                    itemForAttach = SFSdotNet.Framework.Entities.ConvertEntity.SetProperties<accIncomeExpens>(item, itemForAttach, null, req.CustomQuery.SpecificProperties.ToArray());
                    setT.Attach(itemForAttach);


                    foreach (var property in req.CustomQuery.SpecificProperties)
                    {
						
                        if (property != "GuidIncomecExpense")
                            con.ObjectStateManager.GetObjectStateEntry(itemForAttach).SetModifiedProperty(property);

                    }

                }
                con.SaveChanges();


            }
        }
		/*public int Update(List<accIncomeExpens> items, ContextRequest contextRequest)
            {
                int result = 0;
                using (EFContext con = new EFContext())
                {
                   
                

                    foreach (var item in items)
                    {
                        //secMessageToUser messageToUser = new secMessageToUser();
                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            item.GetType().GetProperty(prop).SetValue(item, item.GetType().GetProperty(prop).GetValue(item));
                        }
                        //messageToUser.GuidMessageToUser = (Guid)item.GetType().GetProperty("GuidMessageToUser").GetValue(item);

                        var setObject = con.CreateObjectSet<accIncomeExpens>("accIncomeExpenses");
                        //messageToUser.Readed = DateTime.UtcNow;
                        setObject.Attach(item);
                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            con.ObjectStateManager.GetObjectStateEntry(item).SetModifiedProperty(prop);
                        }
                       
                    }
                    result = con.SaveChanges();

                    


                }
                return result;
            }
           */
        public List<accIncomeExpens> GetBy(string predicateString, ContextRequest contextRequest, string includes)
        {
            using (EFContext con = new EFContext())
            {
				if (DisableCache) 
                	con.CachingPolicy = EFCachingProvider.Caching.CachingPolicy.NoCaching;

				Filter filter = new Filter();
                if (predicateString.Contains("|"))
                {
                    string ft = GetSpecificFilter(predicateString);
                    if (!string.IsNullOrEmpty(ft))
                        filter.SetFilterPart("ft", ft);
                   
                    contextRequest.FreeText = predicateString.Split(char.Parse("|"))[1];
                    var q1 = predicateString.Split(char.Parse("|"))[0];
                    if (!string.IsNullOrEmpty(q1))
                    {
                        filter.ProcessText(q1);
                    }
                }
                else {
                    filter.ProcessText(predicateString);
                }

				List<accIncomeExpens> result = null;
                 e = null;
					OnGetting(con, e = new BusinessRulesEventArgs<accIncomeExpens>() { Filter = filter, ContextRequest = contextRequest /*, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null)*/ });

                  //OnGetting(con,e = new BusinessRulesEventArgs<accIncomeExpens>() {  ContextRequest = contextRequest, FilterExpressionString = predicateString });
			   	if (e != null) {
				    //predicateString = e.GetQueryString();
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				//	 else {
                //      predicateString = predicateString.Replace("*extraFreeText*", "").Replace("()","");
                //  }
				//con.EnableChangeTrackingUsingProxies = false;
				con.accIncomeExpenses.MergeOption = MergeOption.NoTracking;
                con.ContextOptions.ProxyCreationEnabled = false;
                //if (predicate == null) predicate = PredicateBuilder.True<accIncomeExpens>();
 				string fkIncludes = "accMoneyInOutConcept,accMoneyPlace,accProvider,accReusableCatalogValue,accReusableStatusAuthorization,accCompanyArea,accParent,accReusable_PaymentType";
                if(contextRequest!=null){
					if (contextRequest.CustomQuery != null)
					{
						if (contextRequest.CustomQuery.IncludeForeignKeyPaths != null) {
							if (contextRequest.CustomQuery.IncludeForeignKeyPaths.Value == false)
								fkIncludes = "";
						}
					}
				}else{
                    contextRequest = new ContextRequest();
                    contextRequest.CustomQuery = new CustomQuery();

                }
				if (!string.IsNullOrEmpty(includes))
					includes = includes + "," + fkIncludes;
				else
					includes = fkIncludes;
                
                var es = con.accIncomeExpenses;
				IQueryable<accIncomeExpens> query = es.AsQueryable();
		
				// include relations FK
				if(string.IsNullOrEmpty(includes) ){
					includes ="";
				}
				bool includeaccMoneyInOutConcept = includes.Split(char.Parse(",")).Contains("accMoneyInOutConcept");

				bool includeaccMoneyPlace = includes.Split(char.Parse(",")).Contains("accMoneyPlace");

				bool includeaccProvider = includes.Split(char.Parse(",")).Contains("accProvider");

				bool includeaccReusableCatalogValue = includes.Split(char.Parse(",")).Contains("accReusableCatalogValue");

				bool includeaccReusableStatusAuthorization = includes.Split(char.Parse(",")).Contains("accReusableStatusAuthorization");

				bool includeaccCompanyArea = includes.Split(char.Parse(",")).Contains("accCompanyArea");

				bool includeaccParent = includes.Split(char.Parse(",")).Contains("accParent");

				bool includeaccReusable_PaymentType = includes.Split(char.Parse(",")).Contains("accReusable_PaymentType");

				StringBuilder sbQuerySystem = new StringBuilder();
                    //predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				

				//if (!string.IsNullOrEmpty(predicateString))
                //      sbQuerySystem.Append(" And ");
                //sbQuerySystem.Append(" (IsDeleted != true Or IsDeleted = null) ");
				 filter.SetFilterPart("de", "(IsDeleted != true OR IsDeleted = null)");


					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
	                    	if (contextRequest.User !=null )
	                        	if (contextRequest.Company != null ){
	                        		//if (sbQuerySystem.Length > 0)
	                        		//	    			sbQuerySystem.Append( " And ");	
									//sbQuerySystem.Append(@" (GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
									filter.SetFilterPart("co",@"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @"""))");
								}
						}	
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				//string predicateString = predicate.ToDynamicLinq<accIncomeExpens>();
				//predicateString += sbQuerySystem.ToString();
				filter.CleanAndProcess("Remaining");

				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed(); //SFSdotNet.Framework.Linq.Utils.ExtractSpecificProperties("Remaining", ref predicateString );               
                string predicateWithManyRelations = filter.GetFilterChildren(); //SFSdotNet.Framework.Linq.Utils.CleanPartExpression(predicateString);

                //QueryUtils.BreakeQuery1(predicateString, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
                var _queryable = query.AsQueryable();
                if (!string.IsNullOrEmpty(predicateWithManyRelations))
                    _queryable = _queryable.Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams);
				if (contextRequest.CustomQuery.SpecificProperties.Count > 0)
                {

                    StringBuilder sbProps = new StringBuilder();
                    contextRequest.CustomQuery.SpecificProperties.Add("GuidIncomecExpense");
                    
					foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                    {
						if(sbProps.Length > 0)
							sbProps.Append(",");
                        sbProps.Append(prop);
                    }
					    IQueryable  queryableSelective = null ;
					  
					  if (!string.IsNullOrEmpty(predicateWithManyRelations))
							queryableSelective = con.accIncomeExpenses.AsQueryable().Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams).Select(string.Format("new({0})", sbProps.ToString()));
					else
						queryableSelective = con.accIncomeExpenses.AsQueryable().Select(string.Format("new({0})", sbProps.ToString()));


                    //if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
					//	queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

                    QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
                    
					if (!string.IsNullOrEmpty(queryOps.OrderByAndSort))
                        queryableSelective = queryableSelective.OrderBy(queryOps.OrderByAndSort);
                    if (queryOps.Skip != null)
                    {
                        queryableSelective = queryableSelective.Skip(queryOps.Skip.Value);
                    }
                    if (queryOps.PageSize != null)
                    {
                        queryableSelective = queryableSelective.Take(queryOps.PageSize.Value);
                    }
                    //var results = queryableSelective.ToList();
                    result = new List<accIncomeExpens>();
                    accIncomeExpens itemDef = null;
                    foreach (var item in queryableSelective)
                    {
                        itemDef = new accIncomeExpens();

                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            if (!prop.Contains("."))
                            {
                                itemDef.GetType().GetProperty(prop).SetValue(itemDef, item.GetType().GetProperty(prop).GetValue(item));
                            }
                            else {
                                throw new Exception("La seleccion de relaciones aún no esta soportada");
                            }

                        }

                        result.Add(itemDef);
                    }

                }
                else
                {
				var  queryable = _queryable.Select(                    
				p => 
                        new
                    {
					GuidIncomecExpense = p.GuidIncomecExpense
,CreatedDate = p.CreatedDate
,UpdatedDate = p.UpdatedDate
,CreatedBy = p.CreatedBy
,UpdatedBy = p.UpdatedBy
,IsDeleted = p.IsDeleted
,GuidCompany = p.GuidCompany
,Comments = p.Comments
,DateApply = p.DateApply
,ControlCode = p.ControlCode
,MovIndex = p.MovIndex
,GuidWFState_Request = p.GuidWFState_Request
,Authorized = p.Authorized
,GuidUserWaiting = p.GuidUserWaiting
,AmountIn = p.AmountIn
,AmountOut = p.AmountOut

,accMoneyInOutConcept = includeaccMoneyInOutConcept ? p.accMoneyInOutConcept:null
,accMoneyPlace = includeaccMoneyPlace ? p.accMoneyPlace:null
,accProvider = includeaccProvider ? p.accProvider:null
,accReusableCatalogValue = includeaccReusableCatalogValue ? p.accReusableCatalogValue:null
,accReusableStatusAuthorization = includeaccReusableStatusAuthorization ? p.accReusableStatusAuthorization:null
,accCompanyArea = includeaccCompanyArea ? p.accCompanyArea:null
,accParent = includeaccParent ? p.accParent:null
,accReusable_PaymentType = includeaccReusable_PaymentType ? p.accReusable_PaymentType:null

,Remaining = p.accReusableCatalogValue.ValueString == "money-out-request" ? p.AmountOut - p.accChilds.Where(deleted => deleted.IsDeleted != true || deleted.IsDeleted == null).Sum(x=>x.AmountOut)  : p.AmountOut 

	
                    }
                    
                    );
					
				
                 if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
                    queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

				QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
            	if (!string.IsNullOrEmpty(queryOps.OrderByAndSort))
					queryable = queryable.OrderBy(queryOps.OrderByAndSort);
               	if (queryOps.Skip != null)
                {
                    queryable = queryable.Skip(queryOps.Skip.Value);
                }
                if (queryOps.PageSize != null)
                {
                    queryable = queryable.Take (queryOps.PageSize.Value);
                }
                result = queryable.AsEnumerable().
                    Select(
                    p =>  new accIncomeExpens()
                    {
					GuidIncomecExpense = p.GuidIncomecExpense
,CreatedDate = p.CreatedDate
,UpdatedDate = p.UpdatedDate
,CreatedBy = p.CreatedBy
,UpdatedBy = p.UpdatedBy
,IsDeleted = p.IsDeleted
,GuidCompany = p.GuidCompany
,Comments = p.Comments
,DateApply = p.DateApply
,ControlCode = p.ControlCode
,MovIndex = p.MovIndex
,GuidWFState_Request = p.GuidWFState_Request
,Authorized = p.Authorized
,GuidUserWaiting = p.GuidUserWaiting
,AmountIn = p.AmountIn
,AmountOut = p.AmountOut
,accMoneyInOutConcept = p.accMoneyInOutConcept
,accMoneyPlace = p.accMoneyPlace
,accProvider = p.accProvider
,accReusableCatalogValue = p.accReusableCatalogValue
,accReusableStatusAuthorization = p.accReusableStatusAuthorization
,accCompanyArea = p.accCompanyArea
,accParent = p.accParent
,accReusable_PaymentType = p.accReusable_PaymentType
,Remaining = p.Remaining

                    }
                     ).ToList();
				}


			 if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e = new BusinessRulesEventArgs<accIncomeExpens>() { Items= result, IncludingComputedLinq = true, ContextRequest = contextRequest, FilterExpressionString  = predicateString } :  e);
  
			
  
                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
            }
        }
		public accIncomeExpens GetSummaryOperation(string function, string filter)
        {
			if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetSummaryOperation");
            }

            ContextRequest contextRequest = new ContextRequest();
			            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            //return GetSummaryOperation(function, filter, usemode, contextRequest);
            return GetSummaryOperation(function, filter, contextRequest);
		}

		public accIncomeExpens GetSummaryOperation(string function, string filter, ContextRequest contextRequest)
        {
			return  GetSummaryOperation(function, filter, null, contextRequest);
		}

		 public accIncomeExpens GetSummaryOperation(string function, string filter, string usemode)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetSummaryOperation");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
				return GetSummaryOperation(function, filter, usemode, contextRequest);

		}
        public accIncomeExpens GetSummaryOperation(string function, string filterString, string usemode, ContextRequest contextRequest)
        {
			  string freetext = null;

		    string predicate = "";
			 Filter filter = new Filter();
            if (filterString.Contains("|"))
            {
				freetext = filterString.Split(char.Parse("|"))[1];
                filter.ProcessText(filterString.Split(char.Parse("|"))[0]);
            }
			else {
                filter.ProcessText(filterString);
            }
            if (!string.IsNullOrEmpty(filterString))
                filter.SetFilterPart("ft", GetSpecificFilter(filterString));//predicate = GetSpecificFilter(filter);
				  e = null;
			contextRequest.FreeText = freetext;
			contextRequest.UseMode = usemode;
            OnCounting(this, e = new BusinessRulesEventArgs<accIncomeExpens>() { Filter = filter, ContextRequest = contextRequest });
            if (e != null)
            {
                if (e.Cancel)
                {
                    context = null;
                    return e.Item;

                }
                //predicate = e.GetQueryString();

            }
            //else
            //{
			predicate = filter.GetFilterComplete();//    predicate = predicate.Replace("*extraFreeText*", "").Replace("()", "");
            //}
			StringBuilder sbQuerySystem = new StringBuilder();
					 
					 //if (!string.IsNullOrEmpty(predicate)) {
                    //    sbQuerySystem.Append(" AND ");
                    //}
                    //sbQuerySystem.Append(" (IsDeleted != true OR IsDeleted == null)");
            filter.SetFilterPart("de", "(IsDeleted != true OR IsDeleted == null)");

			
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    	if (contextRequest.User !=null )
                        	if (contextRequest.Company != null ){
                        		//           if (sbQuerySystem.Length > 0)
                                //{
                                //    sbQuerySystem.Append(" AND ");
                    			//}
                                //sbQuerySystem.Append (@" (GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
								filter.SetFilterPart("co", @"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @"""))");
								
								
							}
							
							}
							if (preventSecurityRestrictions) preventSecurityRestrictions= false;
           
            accIncomeExpens result = new accIncomeExpens();
            using (EFContext con = new EFContext())
            {
                var es = con.accIncomeExpenses;
                IQueryable<accIncomeExpens> query = es.AsQueryable();
                // if (string.IsNullOrEmpty(predicate))
                //    predicate = "";
				filter.CleanAndProcess("Remaining");
				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed(); //SFSdotNet.Framework.Linq.Utils.ExtractSpecificProperties("Remaining", ref predicate);               
                //predicate  += sbQuerySystem.ToString();
                string predicateWithManyRelations = filter.GetFilterChildren();//SFSdotNet.Framework.Linq.Utils.CleanPartExpression(predicate);
       
                //QueryUtils.BreakeQuery1(predicate, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
				bool includeaccMoneyInOutConcept = predicate.Contains("accMoneyInOutConcept");

				bool includeaccMoneyPlace = predicate.Contains("accMoneyPlace");

				bool includeaccProvider = predicate.Contains("accProvider");

				bool includeaccReusableCatalogValue = predicate.Contains("accReusableCatalogValue");

				bool includeaccReusableStatusAuthorization = predicate.Contains("accReusableStatusAuthorization");

				bool includeaccCompanyArea = predicate.Contains("accCompanyArea");

				bool includeaccParent = predicate.Contains("accParent");

				bool includeaccReusable_PaymentType = predicate.Contains("accReusable_PaymentType");

                var _queryable = query.AsQueryable();
                if (!string.IsNullOrEmpty(predicateWithManyRelations))
                    _queryable = _queryable.Where(predicateWithManyRelations);

				var queryable = _queryable.Select(
                    p =>
                        new
                        {
						GuidIncomecExpense = p.GuidIncomecExpense
,CreatedDate = p.CreatedDate
,UpdatedDate = p.UpdatedDate
,CreatedBy = p.CreatedBy
,UpdatedBy = p.UpdatedBy
,IsDeleted = p.IsDeleted
,GuidCompany = p.GuidCompany
,Comments = p.Comments
,DateApply = p.DateApply
,ControlCode = p.ControlCode
,MovIndex = p.MovIndex
,GuidWFState_Request = p.GuidWFState_Request
,Authorized = p.Authorized
,GuidUserWaiting = p.GuidUserWaiting
,AmountIn = p.AmountIn
,AmountOut = p.AmountOut

,accMoneyInOutConcept = includeaccMoneyInOutConcept ? p.accMoneyInOutConcept:null
,accMoneyPlace = includeaccMoneyPlace ? p.accMoneyPlace:null
,accProvider = includeaccProvider ? p.accProvider:null
,accReusableCatalogValue = includeaccReusableCatalogValue ? p.accReusableCatalogValue:null
,accReusableStatusAuthorization = includeaccReusableStatusAuthorization ? p.accReusableStatusAuthorization:null
,accCompanyArea = includeaccCompanyArea ? p.accCompanyArea:null
,accParent = includeaccParent ? p.accParent:null
,accReusable_PaymentType = includeaccReusable_PaymentType ? p.accReusable_PaymentType:null

,Remaining = p.accReusableCatalogValue.ValueString == "money-out-request" ? p.AmountOut - p.accChilds.Where(deleted => deleted.IsDeleted != true || deleted.IsDeleted == null).Sum(x=>x.AmountOut)  : p.AmountOut 


						   
                        }

                    );

 				if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
						queryable = queryable.Where(predicateWithFKAndComputed);
                 var q1 = (from c in queryable group c by 1 into g select new  {
						
						
        
				AmountIn = g.Sum(p=>p.AmountIn)
,AmountOut = g.Sum(p=>p.AmountOut)

                 });
                 result = q1.AsEnumerable().Select(
                     p => new accIncomeExpens() { 
					
					
                AmountIn = p.AmountIn
,AmountOut = p.AmountOut
      
						}).FirstOrDefault();

            }
            return result;
        }
		public List<accIncomeExpens> GetBy(Expression<Func<accIncomeExpens, bool>> predicate, bool loadRelations, ContextRequest contextRequest)
        {
			if(!loadRelations)
				return GetBy(predicate, contextRequest);
			else
				return GetBy(predicate, contextRequest, "accExpenseMatchInExes,accIncomeMatchInExes,accInvoices,accChilds,accIncomeExpensFiles");

        }

        public List<accIncomeExpens> GetBy(Expression<Func<accIncomeExpens, bool>> predicate, int? pageSize, int? page, string orderBy, SFSdotNet.Framework.Data.SortDirection? sortDirection)
        {
            return GetBy(predicate, new ContextRequest() { CustomQuery = new CustomQuery() { Page = page, PageSize = pageSize, OrderBy = orderBy, SortDirection = sortDirection } });
        }
        public List<accIncomeExpens> GetBy(Expression<Func<accIncomeExpens, bool>> predicate)
        {

			if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }
			ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();

			contextRequest.CurrentContext = SFSdotNet.Framework.My.Context.CurrentContext;
			            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

            contextRequest.CustomQuery.FilterExpressionString = null;
            return this.GetBy(predicate, contextRequest, "");
        }
        #endregion
        #region Dynamic String
		private string GetSpecificFilter(string filter) {
            string result = "";
		    //string linqFilter = String.Empty;
            string freeTextFilter = String.Empty;
            if (filter.Contains("|"))
            {
               // linqFilter = filter.Split(char.Parse("|"))[0];
                freeTextFilter = filter.Split(char.Parse("|"))[1];
            }
            //else {
            //    freeTextFilter = filter;
            //}
            //else {
            //    linqFilter = filter;
            //}
			// linqFilter = SFSdotNet.Framework.Linq.Utils.ReplaceCustomDateFilters(linqFilter);
            //string specificFilter = linqFilter;
            if (!string.IsNullOrEmpty(freeTextFilter))
            {
                System.Text.StringBuilder sbCont = new System.Text.StringBuilder();
                /*if (specificFilter.Length > 0)
                {
                    sbCont.Append(" AND ");
                    sbCont.Append(" ({0})");
                }
                else
                {
                    sbCont.Append("{0}");
                }*/
                //var words = freeTextFilter.Split(char.Parse(" "));
				var word = freeTextFilter;
                System.Text.StringBuilder sbSpec = new System.Text.StringBuilder();
                 int nWords = 1;
				/*foreach (var word in words)
                {
					if (word.Length > 0){
                    if (sbSpec.Length > 0) sbSpec.Append(" AND ");
					if (words.Length > 1) sbSpec.Append("("); */
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
											
					sbSpec.Append(string.Format(@"Comments.Contains(""{0}"")", word));

					
	
					
											sbSpec.Append(" OR ");
										
					sbSpec.Append(string.Format(@"ControlCode.Contains(""{0}"")", word));

					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
								sbSpec.Append(" OR ");
					
					//if (sbSpec.Length > 2)
					//	sbSpec.Append(" OR "); // test
					sbSpec.Append(string.Format(@"accMoneyInOutConcept.Title.Contains(""{0}"")", word)+" OR "+string.Format(@"accMoneyPlace.Name.Contains(""{0}"")", word)+" OR "+string.Format(@"accProvider.Name.Contains(""{0}"")", word)+" OR "+string.Format(@"accReusableCatalogValue.Title.Contains(""{0}"")", word)+" OR "+string.Format(@"accReusableStatusAuthorization.Title.Contains(""{0}"")", word)+" OR "+string.Format(@"accCompanyArea.Title.Contains(""{0}"")", word)+" OR "+string.Format(@"accParent.Comments.Contains(""{0}"")", word)+" OR "+string.Format(@"accReusable_PaymentType.Title.Contains(""{0}"")", word));
								 //sbSpec.Append("*extraFreeText*");

                    /*if (words.Length > 1) sbSpec.Append(")");
					
					nWords++;

					}

                }*/
                //specificFilter = string.Format("{0}{1}", specificFilter, string.Format(sbCont.ToString(), sbSpec.ToString()));
                                 result = sbSpec.ToString();  
            }
			//result = specificFilter;
			
			return result;

		}
	
			public List<accIncomeExpens> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  params object[] extraParams)
        {
			return GetBy(filter, pageSize, page, orderBy, orderDir,  null, extraParams);
		}
           public List<accIncomeExpens> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir, string usemode, params object[] extraParams)
            { 
                return GetBy(filter, pageSize, page, orderBy, orderDir, usemode, null, extraParams);
            }


		public List<accIncomeExpens> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  string usemode, ContextRequest context, params object[] extraParams)

        {

            // string freetext = null;
            //if (filter.Contains("|"))
            //{
            //    int parts = filter.Split(char.Parse("|")).Count();
            //    if (parts > 1)
            //    {

            //        freetext = filter.Split(char.Parse("|"))[1];
            //    }
            //}
		
            //string specificFilter = "";
            //if (!string.IsNullOrEmpty(filter))
            //  specificFilter=  GetSpecificFilter(filter);
            if (string.IsNullOrEmpty(orderBy))
            {
			                orderBy = "UpdatedDate";
            }
			//orderDir = "desc";
			SFSdotNet.Framework.Data.SortDirection direction = SFSdotNet.Framework.Data.SortDirection.Ascending;
            if (!string.IsNullOrEmpty(orderDir))
            {
                if (orderDir == "desc")
                    direction = SFSdotNet.Framework.Data.SortDirection.Descending;
            }
            if (context == null)
                context = new ContextRequest();
			else
                context.CustomQuery = new CustomQuery();
             //context.FreeText = freetext;
             context.UseMode = usemode;
             context.CustomQuery =new SFSdotNet.Framework.My.CustomQuery()
 
                {
                    ExtraParams = extraParams,

                    OrderBy = orderBy,
                    SortDirection = direction,
                    Page = page,
                    PageSize = pageSize
               };
            

            if (!preventSecurityRestrictions) {
			 if (context.CurrentContext == null)
                {
					if (SFSdotNet.Framework.My.Context.CurrentContext != null &&  SFSdotNet.Framework.My.Context.CurrentContext.Company != null && SFSdotNet.Framework.My.Context.CurrentContext.User != null)
					{
						context.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
						context.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

					}
					else {
						throw new Exception("The security rule require a specific user and company");
					}
				}
            }
            return GetBy(filter, context);
  
        }


        public List<accIncomeExpens> GetBy(string strWhere, ContextRequest contextRequest)
        {
        	#region old code
				
				 //Expression<Func<tvsReservationTransport, bool>> predicate = null;
				string strWhereClean = strWhere.Replace("*extraFreeText*", "").Replace("()", "");
                //if (!string.IsNullOrEmpty(strWhereClean)){

                //    object[] extraParams = null;
                //    //if (contextRequest != null )
                //    //    if (contextRequest.CustomQuery != null )
                //    //        extraParams = contextRequest.CustomQuery.ExtraParams;
                //    //predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<tvsReservationTransport, bool>(strWhereClean, extraParams != null? extraParams.Cast<Guid>(): null);				
                //}
				 if (contextRequest == null)
                {
                    contextRequest = new ContextRequest();
                    if (contextRequest.CustomQuery == null)
                        contextRequest.CustomQuery = new CustomQuery();
                }
                  if (!preventSecurityRestrictions) {
					if (contextRequest.User == null || contextRequest.Company == null)
                      {
                     if (SFSdotNet.Framework.My.Context.CurrentContext.Company != null && SFSdotNet.Framework.My.Context.CurrentContext.User != null)
                     {
                         contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                         contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

                     }
                     else {
                         throw new Exception("The security rule require a specific User and Company ");
                     }
					 }
                 }
            contextRequest.CustomQuery.FilterExpressionString = strWhere;
				//return GetBy(predicate, contextRequest);  

			#endregion				
				
                    return GetBy(strWhere, contextRequest, "");  


        }
       public List<accIncomeExpens> GetBy(string strWhere)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
			
            return GetBy(strWhere, context, null);
        }

        public List<accIncomeExpens> GetBy(string strWhere, string includes)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
            return GetBy(strWhere, context, includes);
        }

        #endregion
        #endregion
		
		  #region SaveOrUpdate
        private accIncomeExpens Save(accIncomeExpens entity, bool saveChanges, EFPocoContext con)
        {
				ObjectContext context = null;
            return Update(entity, saveChanges,null, out context);

			
        }
		 public  accIncomeExpens Create( accIncomeExpens entity, params Expression<Func< accIncomeExpens, object>>[] paths)
         {
             return Create(entity, null, paths);

         }
 		 public accIncomeExpens Create(accIncomeExpens entity)
        {
				ObjectContext context = null;
				    if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: Create");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

				return this.Create(entity, true, contextRequest, out context);


        }
        public accIncomeExpens Create(accIncomeExpens entity, ContextRequest contextRequest)
         {
             ObjectContext context = null;
             return this.Create(entity, true, contextRequest,out context);

         }
         public accIncomeExpens Create(accIncomeExpens entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext context)
        {
                    return Create(entity, saveChanges , contextRequest , out context, null);
        }
         public accIncomeExpens Create(accIncomeExpens entity, ContextRequest contextRequest, params Expression<Func<accIncomeExpens,object>>[] paths)
        {
            ObjectContext context = null;
            if(paths != null)
				return Create(entity, true,contextRequest, out context, paths);
			else 
				return Create(entity, true,contextRequest, out context);
        }
        public accIncomeExpens Create(accIncomeExpens entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext context, params Expression<Func<accIncomeExpens,object>>[] pocopaths)
        {
			using (EFPocoContext con = new EFPocoContext())
			{
				accIncomeExpens itemResult = null;
#region Autos


			entity.CreatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.CreatedBy = contextRequest.User.GuidUser;
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.UpdatedBy = contextRequest.User.GuidUser;
	
			if (contextRequest != null)
				if(contextRequest.User != null)
					if (contextRequest.Company != null)
						entity.GuidCompany = contextRequest.Company.GuidCompany;
	

#endregion
                e = null;
                OnCreating(this,e = new BusinessRulesEventArgs<accIncomeExpens>() { ContextRequest = contextRequest, Item=entity, PathExpressions = pocopaths, SaveChanges =saveChanges });
				   if (e != null) {
						if (e.Cancel)
						{
							context = null;
							return e.Item;

						}
					}

                    if (entity.GuidIncomecExpense == Guid.Empty)
                   {
                       entity.GuidIncomecExpense = Guid.NewGuid();

                   }



				accIncomeExpensAdapter adapter = con.GetAdapterObject<accIncomeExpensAdapter>(entity);;
				List<Expression<Func<accIncomeExpensAdapter, object>>> paths = new List<Expression<Func<accIncomeExpensAdapter,object>>>();
                
			    if (pocopaths != null && pocopaths.Length > 0)
                {
					// Translate
                    foreach (var pocopath in pocopaths)
                    {
                        var param = Expression.Parameter(typeof(accIncomeExpensAdapter), "p");
                        var member = MemberExpression.PropertyOrField(param, ((System.Linq.Expressions.MemberExpression)(((System.Linq.Expressions.LambdaExpression)(pocopath)).Body)).Member.Name);
                        Expression<Func<accIncomeExpensAdapter, object>> path  = null;
                        switch(member.Member.Name){
                        
							case "accExpenseMatchInExes":
								path = p => p.accExpenseMatchInExes.First().WithoutUpdate();

								//path = p => member;
								//path = p => p.accExpenseMatchInExes.First().accExpensePending.WithoutUpdate();											
							break;
                        
							case "accIncomeMatchInExes":
								path = p => p.accIncomeMatchInExes.First().WithoutUpdate();

								//path = p => member;
								//path = p => p.accIncomeMatchInExes.First().accIncomePending.WithoutUpdate();											
							break;
                        
							case "accInvoices":
								path = p => p.accInvoices.First().WithoutUpdate();

								//path = p => member;
								//path = p => p.accInvoices.First().accCustomer.WithoutUpdate();											
							break;
                        
							case "accChilds":
								path = p => p.accChilds.First().WithoutUpdate();

								//path = p => member;
								//path = p => p.accChilds.First().accMoneyInOutConcept.WithoutUpdate();											
								//path = p => p.accChilds.First().accMoneyPlace.WithoutUpdate();											
								//path = p => p.accChilds.First().accProvider.WithoutUpdate();											
								//path = p => p.accChilds.First().accReusableCatalogValue.WithoutUpdate();											
								//path = p => p.accChilds.First().accReusableStatusAuthorization.WithoutUpdate();											
								//path = p => p.accChilds.First().accCompanyArea.WithoutUpdate();											
								//path = p => p.accChilds.First().accReusable_PaymentType.WithoutUpdate();											
							break;
                        
							case "accIncomeExpensFiles":
								path = p => p.accIncomeExpensFiles.First().WithoutUpdate();

								//path = p => member;
								//path = p => p.accIncomeExpensFiles.First().accFile.WithoutUpdate();											
							break;
							
							default:
								path = p => member;
							break;
                        }

                        
                       paths.Add(path.Expand());
                    }
                }
                object aux = null;
					paths.Add(p => p.accMoneyInOutConcept.WithoutUpdate());

					paths.Add(p => p.accMoneyPlace.WithoutUpdate());

					paths.Add(p => p.accProvider.WithoutUpdate());

					paths.Add(p => p.accReusableCatalogValue.WithoutUpdate());

					paths.Add(p => p.accReusableStatusAuthorization.WithoutUpdate());

					paths.Add(p => p.accCompanyArea.WithoutUpdate());

					paths.Add(p => p.accParent.WithoutUpdate());

					paths.Add(p => p.accReusable_PaymentType.WithoutUpdate());

					//paths = pathBuilder.ToArray();

#region Childs accExpenseMatchInExes 
				if (adapter.accExpenseMatchInExes != null)
                {
                    foreach (var item in adapter.accExpenseMatchInExes)
                    {
						
							if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accExpenseMatchInExes", item);
							if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)){ 
								//paths.Add(p => p.accExpenseMatchInExes.First().WithoutUpdate());
								
						if (item.accExpensePending != null){
							item.accExpensePending.EntityKey = con.WrappedContext.CreateEntityKey("accExpensePendings", item.accExpensePending);
                            
             
						}								
							if (item.accIncomeExpens == null)
								item.accIncomeExpens = adapter;

								item.EntityKey = null;
							}

                    }
					if (adapter.accExpenseMatchInExes.Count > 0){
						paths.Add(p => p.accExpenseMatchInExes.First().WithoutUpdate());
						paths.Add(p => p.accExpenseMatchInExes.First().accExpensePending.WithoutUpdate());
					
					}
                }
#endregion 

				if (adapter.accMoneyInOutConcept != null ){
					if(adapter.accMoneyInOutConcept.EntityKey == null) adapter.accMoneyInOutConcept.EntityKey = con.WrappedContext.CreateEntityKey("accMoneyInOutConcepts", adapter.accMoneyInOutConcept);
				}
				if (adapter.accMoneyPlace != null ){
					if(adapter.accMoneyPlace.EntityKey == null) adapter.accMoneyPlace.EntityKey = con.WrappedContext.CreateEntityKey("accMoneyPlaces", adapter.accMoneyPlace);
				}
				if (adapter.accProvider != null ){
					if(adapter.accProvider.EntityKey == null) adapter.accProvider.EntityKey = con.WrappedContext.CreateEntityKey("accProviders", adapter.accProvider);
				}
#region Childs accIncomeMatchInExes 
				if (adapter.accIncomeMatchInExes != null)
                {
                    foreach (var item in adapter.accIncomeMatchInExes)
                    {
						
							if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accIncomeMatchInExes", item);
							if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)){ 
								//paths.Add(p => p.accIncomeMatchInExes.First().WithoutUpdate());
								
						if (item.accIncomePending != null){
							item.accIncomePending.EntityKey = con.WrappedContext.CreateEntityKey("accIncomePendings", item.accIncomePending);
                            
             
						}								
							if (item.accIncomeExpens == null)
								item.accIncomeExpens = adapter;

								item.EntityKey = null;
							}

                    }
					if (adapter.accIncomeMatchInExes.Count > 0){
						paths.Add(p => p.accIncomeMatchInExes.First().WithoutUpdate());
						paths.Add(p => p.accIncomeMatchInExes.First().accIncomePending.WithoutUpdate());
					
					}
                }
#endregion 

				if (adapter.accReusableCatalogValue != null ){
					if(adapter.accReusableCatalogValue.EntityKey == null) adapter.accReusableCatalogValue.EntityKey = con.WrappedContext.CreateEntityKey("accReusableCatalogValues", adapter.accReusableCatalogValue);
				}
#region Childs accInvoices 
				if (adapter.accInvoices != null)
                {
                    foreach (var item in adapter.accInvoices)
                    {
						
							if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accInvoices", item);
							if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)){ 
								//paths.Add(p => p.accInvoices.First().WithoutUpdate());
								
						if (item.accCustomer != null){
							item.accCustomer.EntityKey = con.WrappedContext.CreateEntityKey("accCustomers", item.accCustomer);
                            
             
						}								
								item.EntityKey = null;
							}

                    }
					if (adapter.accInvoices.Count > 0){
						paths.Add(p => p.accInvoices.First().WithoutUpdate());
						paths.Add(p => p.accInvoices.First().accCustomer.WithoutUpdate());
					
					}
                }
#endregion 

				if (adapter.accReusableStatusAuthorization != null ){
					if(adapter.accReusableStatusAuthorization.EntityKey == null) adapter.accReusableStatusAuthorization.EntityKey = con.WrappedContext.CreateEntityKey("accReusableCatalogValues", adapter.accReusableStatusAuthorization);
				}
				if (adapter.accCompanyArea != null ){
					if(adapter.accCompanyArea.EntityKey == null) adapter.accCompanyArea.EntityKey = con.WrappedContext.CreateEntityKey("accCompanyAreas", adapter.accCompanyArea);
				}
#region Childs accChilds 
				if (adapter.accChilds != null)
                {
                    foreach (var item in adapter.accChilds)
                    {
						
							if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accIncomeExpenses", item);
							if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)){ 
								//paths.Add(p => p.accChilds.First().WithoutUpdate());
								
						if (item.accMoneyInOutConcept != null){
							item.accMoneyInOutConcept.EntityKey = con.WrappedContext.CreateEntityKey("accMoneyInOutConcepts", item.accMoneyInOutConcept);
                            
             
						}								
						if (item.accMoneyPlace != null){
							item.accMoneyPlace.EntityKey = con.WrappedContext.CreateEntityKey("accMoneyPlaces", item.accMoneyPlace);
                            
             
						}								
						if (item.accProvider != null){
							item.accProvider.EntityKey = con.WrappedContext.CreateEntityKey("accProviders", item.accProvider);
                            
             
						}								
						if (item.accReusableCatalogValue != null){
							item.accReusableCatalogValue.EntityKey = con.WrappedContext.CreateEntityKey("accReusableCatalogValues", item.accReusableCatalogValue);
                            
             
						}								
						if (item.accReusableStatusAuthorization != null){
							item.accReusableStatusAuthorization.EntityKey = con.WrappedContext.CreateEntityKey("accReusableCatalogValues", item.accReusableStatusAuthorization);
                            
             
						}								
						if (item.accCompanyArea != null){
							item.accCompanyArea.EntityKey = con.WrappedContext.CreateEntityKey("accCompanyAreas", item.accCompanyArea);
                            
             
						}								
							if (item.accParent == null)
								item.accParent = adapter;

						if (item.accReusable_PaymentType != null){
							item.accReusable_PaymentType.EntityKey = con.WrappedContext.CreateEntityKey("accReusableCatalogValues", item.accReusable_PaymentType);
                            
             
						}								
								item.EntityKey = null;
							}

                    }
					if (adapter.accChilds.Count > 0){
						paths.Add(p => p.accChilds.First().WithoutUpdate());
						paths.Add(p => p.accChilds.First().accMoneyInOutConcept.WithoutUpdate());
paths.Add(p => p.accChilds.First().accMoneyPlace.WithoutUpdate());
paths.Add(p => p.accChilds.First().accProvider.WithoutUpdate());
paths.Add(p => p.accChilds.First().accReusableCatalogValue.WithoutUpdate());
paths.Add(p => p.accChilds.First().accReusableStatusAuthorization.WithoutUpdate());
paths.Add(p => p.accChilds.First().accCompanyArea.WithoutUpdate());
paths.Add(p => p.accChilds.First().accReusable_PaymentType.WithoutUpdate());
					
					}
                }
#endregion 

				if (adapter.accParent != null ){
					if(adapter.accParent.EntityKey == null) adapter.accParent.EntityKey = con.WrappedContext.CreateEntityKey("accIncomeExpenses", adapter.accParent);
				}
#region Childs accIncomeExpensFiles 
				if (adapter.accIncomeExpensFiles != null)
                {
                    foreach (var item in adapter.accIncomeExpensFiles)
                    {
						
							if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accIncomeExpensFiles", item);
							if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)){ 
								//paths.Add(p => p.accIncomeExpensFiles.First().WithoutUpdate());
								
						if (item.accFile != null){
							item.accFile.EntityKey = con.WrappedContext.CreateEntityKey("accFiles", item.accFile);
                            
             
						}								
							if (item.accIncomeExpens == null)
								item.accIncomeExpens = adapter;

								item.EntityKey = null;
							}

                    }
					if (adapter.accIncomeExpensFiles.Count > 0){
						paths.Add(p => p.accIncomeExpensFiles.First().WithoutUpdate());
						paths.Add(p => p.accIncomeExpensFiles.First().accFile.WithoutUpdate());
					
					}
                }
#endregion 

				if (adapter.accReusable_PaymentType != null ){
					if(adapter.accReusable_PaymentType.EntityKey == null) adapter.accReusable_PaymentType.EntityKey = con.WrappedContext.CreateEntityKey("accReusableCatalogValues", adapter.accReusable_PaymentType);
				}



                //con.WrappedContext.AttachObjectGraph<accIncomeExpensAdapter>(adapter, p=>p.accExpenseMatchInExes, p=>p.accMoneyInOutConcept, p=>p.accMoneyPlace, p=>p.accProvider, p=>p.accIncomeMatchInExes, p=>p.accReusableCatalogValue, p=>p.accInvoices, p=>p.accReusableStatusAuthorization, p=>p.accCompanyArea, p=>p.accChilds, p=>p.accParent, p=>p.accIncomeExpensFiles, p=>p.accReusable_PaymentType);
                con.WrappedContext.AttachObjectGraph<accIncomeExpensAdapter>(adapter, paths.ToArray());
              	if (saveChanges){
                    con.WrappedContext.SaveChanges(SaveOptions.AcceptAllChangesAfterSave);
					 
				}
                else
                    con.WrappedContext.SaveChanges(SaveOptions.None);
                if (!saveChanges)
                    context = con.WrappedContext;
                else
                    context = null;
				itemResult = adapter.PocoEntity;
				SFSdotNet.Framework.WF.WorkFlow.SetInProcess("MBKTime", accIncomeExpens.EntityName, contextRequest.UseMode, itemResult, contextRequest );
			
				//OnCreated(this, e = new BusinessRulesEventArgs<accIncomeExpens>() { ContextRequest = contextRequest, Item=itemResult, PathExpressions = pocopaths, SaveChanges =saveChanges });
                if (e != null)
                {
                    e.Item = itemResult;
                }
                OnCreated(this, e == null ? e = new BusinessRulesEventArgs<accIncomeExpens>() { ContextRequest = contextRequest, Item = itemResult, PathExpressions = pocopaths, SaveChanges = saveChanges } : e);



                if (e != null)
                {
                    itemResult = e.Item;
                }
                              return itemResult;
            }
        }
        BusinessRulesEventArgs<accIncomeExpens> e = null;
        public void Create(List<accIncomeExpens> entities)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            Create(entities, contextRequest, null);
        }
        public void Create(List<accIncomeExpens> entities, ContextRequest contextRequest)
        
        {
			ObjectContext context = null;
            	foreach (accIncomeExpens entity in entities)
				{
					this.Create(entity, true, contextRequest, out context);
				}
        }
         public accIncomeExpens Update(accIncomeExpens entity)
        {
            if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return Update(entity, contextRequest);
        }
        public accIncomeExpens Update(accIncomeExpens entity, ContextRequest requestContext)
        {
			  ObjectContext context = null;
            return Update(entity, true,requestContext, out context);
         }
		public  accIncomeExpens Update(accIncomeExpens entity, params Expression<Func<accIncomeExpens, object>>[] pocopaths)
        {
			  ObjectContext context = null;
              return Update(entity, true, null, out context, pocopaths);
         }
        public accIncomeExpens Update(accIncomeExpens entity, ContextRequest requestContext, bool saveChanges, out ObjectContext outcontext)
        {
			return Update(entity, saveChanges,requestContext, out outcontext, null);
		}
         public accIncomeExpens Update(accIncomeExpens entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext outcontext, params Expression<Func<accIncomeExpens,object>>[] pocopaths)
        {
		 if ((System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null) && contextRequest == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Update");
            }
            if (contextRequest == null)
            {
                contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            }

			using (EFPocoContext con = new EFPocoContext())
			{
				accIncomeExpens  itemResult = null;

	
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
			if(contextRequest.User != null)
				entity.UpdatedBy = contextRequest.User.GuidUser;

	    var oldentity = GetBy(p => p.GuidIncomecExpense == entity.GuidIncomecExpense, contextRequest).FirstOrDefault();
		if (oldentity != null) {
		
            entity.CreatedDate = oldentity.CreatedDate;
            entity.CreatedBy = oldentity.CreatedBy;
	
            entity.GuidCompany = oldentity.GuidCompany;
	
			

		}

				e = null;
                OnUpdating(this,e = new BusinessRulesEventArgs<accIncomeExpens>() { ContextRequest = contextRequest, Item=entity, PathExpressions = pocopaths, SaveChanges =saveChanges });
				   if (e != null) {
						if (e.Cancel)
						{
							outcontext = null;
							return e.Item;

						}
					}

                accIncomeExpensAdapter adapter = con.GetAdapterObject<accIncomeExpensAdapter>(entity);
                adapter.EntityKey = con.WrappedContext.CreateEntityKey("accIncomeExpenses", adapter);
				    var es = con.accIncomeExpenses;
				List<Expression<Func<accIncomeExpensAdapter, object>>> paths = new List<Expression<Func<accIncomeExpensAdapter,object>>>();
                /* if (pocopaths != null)
                    if (pocopaths.Length == 0)
                        pocopaths = null;*/

			    if (pocopaths != null && pocopaths.Length > 0)
                {
					// Translate
                    foreach (var pocopath in pocopaths)
                    {
                        var param = Expression.Parameter(typeof(accIncomeExpensAdapter), "p");
                        var member = MemberExpression.PropertyOrField(param, ((System.Linq.Expressions.MemberExpression)(((System.Linq.Expressions.LambdaExpression)(pocopath)).Body)).Member.Name);
                        Expression<Func<accIncomeExpensAdapter, object>> path  = null;
                        switch(member.Member.Name){
                        
							case "accExpenseMatchInExes":
								//path = p => member;
								path = p => p.accExpenseMatchInExes.First().WithoutUpdate();
				//				path = p => p.accExpenseMatchInExes.First().accExpensePending.WithoutUpdate();											
							break;
                        
							case "accIncomeMatchInExes":
								//path = p => member;
								path = p => p.accIncomeMatchInExes.First().WithoutUpdate();
				//				path = p => p.accIncomeMatchInExes.First().accIncomePending.WithoutUpdate();											
							break;
                        
							case "accInvoices":
								//path = p => member;
								path = p => p.accInvoices.First().WithoutUpdate();
				//				path = p => p.accInvoices.First().accCustomer.WithoutUpdate();											
							break;
                        
							case "accChilds":
								//path = p => member;
								path = p => p.accChilds.First().WithoutUpdate();
				//				path = p => p.accChilds.First().accMoneyInOutConcept.WithoutUpdate();											
				//				path = p => p.accChilds.First().accMoneyPlace.WithoutUpdate();											
				//				path = p => p.accChilds.First().accProvider.WithoutUpdate();											
				//				path = p => p.accChilds.First().accReusableCatalogValue.WithoutUpdate();											
				//				path = p => p.accChilds.First().accReusableStatusAuthorization.WithoutUpdate();											
				//				path = p => p.accChilds.First().accCompanyArea.WithoutUpdate();											
				//				path = p => p.accChilds.First().accReusable_PaymentType.WithoutUpdate();											
							break;
                        
							case "accIncomeExpensFiles":
								//path = p => member;
								path = p => p.accIncomeExpensFiles.First().WithoutUpdate();
				//				path = p => p.accIncomeExpensFiles.First().accFile.WithoutUpdate();											
							break;
							
							default:
								path = p => member;
							break;
                        }

                        paths.Add(path.Expand());
 					}
                }
                else {
                  paths = new List<Expression<Func<accIncomeExpensAdapter, object>>>();

					//List<Expression<Func<accIncomeExpensAdapter,object>>> pathBuilder = new List<Expression<Func<accIncomeExpensAdapter,object>>>();
					paths.Add(p => p.accMoneyInOutConcept.WithoutUpdate());

					paths.Add(p => p.accMoneyPlace.WithoutUpdate());

					paths.Add(p => p.accProvider.WithoutUpdate());

					paths.Add(p => p.accReusableCatalogValue.WithoutUpdate());

					paths.Add(p => p.accReusableStatusAuthorization.WithoutUpdate());

					paths.Add(p => p.accCompanyArea.WithoutUpdate());

					paths.Add(p => p.accParent.WithoutUpdate());

					paths.Add(p => p.accReusable_PaymentType.WithoutUpdate());

		
					//paths = pathBuilder.ToArray();		
			}
			object aux = null;
				if (adapter.accExpenseMatchInExes != null)
                {
                    foreach (var item in adapter.accExpenseMatchInExes)
                    {


                        if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accExpenseMatchInExes", item);
						if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)) item.EntityKey = null;
                        
                    }
					
                    if (adapter.accExpenseMatchInExes.Count > 0)
                    {
                        paths.Add(p => p.accExpenseMatchInExes.First().WithoutUpdate());

                    }

                }
				if (adapter.accMoneyInOutConcept != null ){
					if(adapter.accMoneyInOutConcept.EntityKey == null) adapter.accMoneyInOutConcept.EntityKey = con.WrappedContext.CreateEntityKey("accMoneyInOutConcepts", adapter.accMoneyInOutConcept);
				}

                
				if (adapter.accMoneyPlace != null ){
					if(adapter.accMoneyPlace.EntityKey == null) adapter.accMoneyPlace.EntityKey = con.WrappedContext.CreateEntityKey("accMoneyPlaces", adapter.accMoneyPlace);
				}

                
				if (adapter.accProvider != null ){
					if(adapter.accProvider.EntityKey == null) adapter.accProvider.EntityKey = con.WrappedContext.CreateEntityKey("accProviders", adapter.accProvider);
				}

                
				if (adapter.accIncomeMatchInExes != null)
                {
                    foreach (var item in adapter.accIncomeMatchInExes)
                    {


                        if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accIncomeMatchInExes", item);
						if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)) item.EntityKey = null;
                        
                    }
					
                    if (adapter.accIncomeMatchInExes.Count > 0)
                    {
                        paths.Add(p => p.accIncomeMatchInExes.First().WithoutUpdate());

                    }

                }
				if (adapter.accReusableCatalogValue != null ){
					if(adapter.accReusableCatalogValue.EntityKey == null) adapter.accReusableCatalogValue.EntityKey = con.WrappedContext.CreateEntityKey("accReusableCatalogValues", adapter.accReusableCatalogValue);
				}

                
				if (adapter.accInvoices != null)
                {
                    foreach (var item in adapter.accInvoices)
                    {


                        if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accInvoices", item);
						if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)) item.EntityKey = null;
                        
                    }
					
                    if (adapter.accInvoices.Count > 0)
                    {
                        paths.Add(p => p.accInvoices.First().WithoutUpdate());

                    }

                }
				if (adapter.accReusableStatusAuthorization != null ){
					if(adapter.accReusableStatusAuthorization.EntityKey == null) adapter.accReusableStatusAuthorization.EntityKey = con.WrappedContext.CreateEntityKey("accReusableCatalogValues", adapter.accReusableStatusAuthorization);
				}

                
				if (adapter.accCompanyArea != null ){
					if(adapter.accCompanyArea.EntityKey == null) adapter.accCompanyArea.EntityKey = con.WrappedContext.CreateEntityKey("accCompanyAreas", adapter.accCompanyArea);
				}

                
				if (adapter.accChilds != null)
                {
                    foreach (var item in adapter.accChilds)
                    {


                        if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accIncomeExpenses", item);
						if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)) item.EntityKey = null;
                        
                    }
					
                    if (adapter.accChilds.Count > 0)
                    {
                        paths.Add(p => p.accChilds.First().WithoutUpdate());

                    }

                }
				if (adapter.accParent != null ){
					if(adapter.accParent.EntityKey == null) adapter.accParent.EntityKey = con.WrappedContext.CreateEntityKey("accIncomeExpenses", adapter.accParent);
				}

                
				if (adapter.accIncomeExpensFiles != null)
                {
                    foreach (var item in adapter.accIncomeExpensFiles)
                    {


                        if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accIncomeExpensFiles", item);
						if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)) item.EntityKey = null;
                        
                    }
					
                    if (adapter.accIncomeExpensFiles.Count > 0)
                    {
                        paths.Add(p => p.accIncomeExpensFiles.First().WithoutUpdate());

                    }

                }
				if (adapter.accReusable_PaymentType != null ){
					if(adapter.accReusable_PaymentType.EntityKey == null) adapter.accReusable_PaymentType.EntityKey = con.WrappedContext.CreateEntityKey("accReusableCatalogValues", adapter.accReusable_PaymentType);
				}

                



                //con.AttachObjectGraph<accIncomeExpens>(adapter, p=>p.accExpenseMatchInExes, p=>p.accMoneyInOutConcept, p=>p.accMoneyPlace, p=>p.accProvider, p=>p.accIncomeMatchInExes, p=>p.accReusableCatalogValue, p=>p.accInvoices, p=>p.accReusableStatusAuthorization, p=>p.accCompanyArea, p=>p.accChilds, p=>p.accParent, p=>p.accIncomeExpensFiles, p=>p.accReusable_PaymentType);
                con.WrappedContext.AttachObjectGraph<accIncomeExpensAdapter>(adapter, paths.ToArray());
				if (saveChanges){
                	con.WrappedContext.SaveChanges();
					 
					}
                if(!saveChanges)
					outcontext = con.WrappedContext;
				else
					outcontext = null;
				itemResult = adapter.PocoEntity;
				OnUpdated(this, e = new BusinessRulesEventArgs<accIncomeExpens>() { ContextRequest = contextRequest, Item=itemResult, PathExpressions = pocopaths, SaveChanges =saveChanges });

              	return itemResult;

			  }
        }
        public accIncomeExpens Save(accIncomeExpens entity)
        {
			return Save(entity, true, null);
        }
        public int Save(List<accIncomeExpens> entities)
        {
			using (EFPocoContext con = new EFPocoContext())
			{
			
            int n = 0;
            foreach (accIncomeExpens item in entities)
            {
                try
                {
                    this.Save(item, false, con);
                    n++;
                }catch (Exception ex){
                    SFSdotNet.Framework.My.EventLog.Exception(ex);
                }
            }
            con.SaveChanges();
            return n;
            }
        }
        #endregion
        #region Delete
        public void Delete(accIncomeExpens entity)
        {
				this.Delete(entity, null);
			
        }
		 public void Delete(accIncomeExpens entity, ContextRequest contextRequest)
        {
				ObjectContext context = null;
				this.Delete(entity, true, out context, contextRequest);
			
        }

        
        public void Delete(accIncomeExpens entity, bool saveChanges, out  ObjectContext context, ContextRequest contextRequest, BusinessRulesEventArgs<accIncomeExpens> e = null)
        {
			using (EFPocoContext _con = new EFPocoContext())
			{
				int result = 0;
				
               	BusinessRulesEventArgs<accIncomeExpens> _e = null;
               List<accIncomeExpens> _items = new List<accIncomeExpens>();
                _items.Add(entity);
                if (e == null || e.PreventPartialPropagate == false)
                {
                    OnDeleting(this, _e = (e == null ? new BusinessRulesEventArgs<accIncomeExpens>() { ContextRequest = contextRequest, Item = entity, Items = _items, SaveChanges = saveChanges } : e));
                }
                if (_e != null)
                {
                    if (_e.Cancel)
						{
							context = null;
							return;

						}
					}


				accIncomeExpensAdapter adapter = _con.GetAdapterObject<accIncomeExpensAdapter>(entity);
                adapter.EntityKey = _con.WrappedContext.CreateEntityKey("accIncomeExpenses", adapter);
                
	            //adapter = _con.WrappedContext.AttachObjectGraph<accIncomeExpensAdapter>(adapter);
				try{
					_con.WrappedContext.AttachTo("accIncomeExpenses", adapter);
                }catch{
					
				}
									//IsDeleted
					bool logicDelete = true;
					if (adapter.IsDeleted != null)
					{
						if (adapter.IsDeleted.Value)
							logicDelete = false;
					}
					if (logicDelete)
					{
											entity = GetBy(p => p.GuidIncomecExpense == entity.GuidIncomecExpense, contextRequest).FirstOrDefault();
						entity.IsDeleted = true;
						Update(entity, contextRequest);
					}
					else {
						_con.WrappedContext.DeleteObject(adapter);
					}
								
				if (!saveChanges)
                    context = _con.WrappedContext;
                else
                    context = null;
				 SaveOptions saveOption = SaveOptions.None;
                if (saveChanges)
                    saveOption = SaveOptions.AcceptAllChangesAfterSave;

				result = _con.WrappedContext.SaveChanges(saveOption);
				if (saveChanges){
					
					}
			if (e == null || e.PreventPartialPropagate == false)
                {

                    if (_e == null)
                        _e = new BusinessRulesEventArgs<accIncomeExpens>() { ContextRequest = contextRequest, Item = entity, Items = _items };

                    OnDeleted(this, _e);
                }

				//return null;
			}            
        }
        public void Delete(List<accIncomeExpens> entities,  ContextRequest contextRequest = null )
        {
				ObjectContext context = null;
			 BusinessRulesEventArgs<accIncomeExpens> _e = null;

                OnDeleting(this, _e = new BusinessRulesEventArgs<accIncomeExpens>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities });
                if (_e != null)
                {
                    if (_e.Cancel)
                    {
                        context = null;
                        return;

                    }
                }
                bool allSucced = true;
                BusinessRulesEventArgs<accIncomeExpens> eToChilds = new BusinessRulesEventArgs<accIncomeExpens>();
                if (_e != null)
                {
                    eToChilds = _e;
                }
                else
                {
                    eToChilds = new BusinessRulesEventArgs<accIncomeExpens>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                }
				foreach (accIncomeExpens item in entities)
				{
					try
                    {
                        this.Delete(item, true, out context, contextRequest, e: eToChilds);
                    }
                    catch (Exception ex)
                    {
                        SFSdotNet.Framework.My.EventLog.Error(ex);
                        allSucced = false;
                    }
				}
				if (_e == null)
                    _e = new BusinessRulesEventArgs<accIncomeExpens>() { ContextRequest = contextRequest, CountResult = entities.Count, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                OnDeleted(this, _e);

			
        }
        #endregion
 
        #region GetCount
		 public int GetCount(Expression<Func<accIncomeExpens, bool>> predicate)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

			return GetCount(predicate, contextRequest);
		}
        public int GetCount(Expression<Func<accIncomeExpens, bool>> predicate, ContextRequest contextRequest)
        {


		
			using (EFPocoContext con = new EFPocoContext())
			{


				if (predicate == null) predicate = PredicateBuilder.True<accIncomeExpens>();
           		predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted == null);
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    		if (contextRequest.User !=null )
                        		if (contextRequest.Company != null )
                        			predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				
				return con.accIncomeExpenses.Count(predicate);
			}

        }
		  public int GetCount(string predicate,  ContextRequest contextRequest)
         {
             return GetCount(predicate, null, contextRequest);
         }

         public int GetCount(string predicate)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return GetCount(predicate, contextRequest);
        }
		 public int GetCount(string predicate, string usemode){
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
				return GetCount( predicate,  usemode,  contextRequest);
		 }
        public int GetCount(string predicate, string usemode, ContextRequest contextRequest){
			  string freetext = null;
            Filter filter = new Filter();

              if (predicate.Contains("|"))
              {
                 
                  filter.SetFilterPart("ft", GetSpecificFilter(predicate));
                 
                  filter.ProcessText(predicate.Split(char.Parse("|"))[0]);
                  freetext = predicate.Split(char.Parse("|"))[1];
              }
              else {
                  filter.ProcessText(predicate);
              }
           
			e = null;
			contextRequest.FreeText = freetext;
			contextRequest.UseMode = usemode;
            OnCounting(this, e = new BusinessRulesEventArgs<accIncomeExpens>() {  Filter =filter, ContextRequest = contextRequest });
            if (e != null)
            {
                if (e.Cancel)
                {
                    context = null;
                    return e.CountResult;

                }

            

            }
			 predicate = filter.GetFilterComplete();
			StringBuilder sbQuerySystem = new StringBuilder();
		
					
                    filter.SetFilterPart("de","(IsDeleted != true OR IsDeleted == null)");
			
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    	if (contextRequest.User !=null )
                        	if (contextRequest.Company != null ){
                        		

								filter.SetFilterPart("co", @"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
						
						
							}
							
							}
							if (preventSecurityRestrictions) preventSecurityRestrictions= false;
			using (EFContext con = new EFContext())
			{
				   
                 filter.CleanAndProcess("Remaining");
				//string predicateWithFKAndComputed = SFSdotNet.Framework.Linq.Utils.ExtractSpecificProperties("Remaining", ref predicate );               
				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed();
               string predicateWithManyRelations = filter.GetFilterChildren();
			   ///QueryUtils.BreakeQuery1(predicate, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
			   predicate = filter.GetFilterComplete();
               if (!string.IsNullOrEmpty(predicate))
               {
							bool includeaccMoneyInOutConcept = predicate.Contains("accMoneyInOutConcept");

							bool includeaccMoneyPlace = predicate.Contains("accMoneyPlace");

							bool includeaccProvider = predicate.Contains("accProvider");

							bool includeaccReusableCatalogValue = predicate.Contains("accReusableCatalogValue");

							bool includeaccReusableStatusAuthorization = predicate.Contains("accReusableStatusAuthorization");

							bool includeaccCompanyArea = predicate.Contains("accCompanyArea");

							bool includeaccParent = predicate.Contains("accParent");

							bool includeaccReusable_PaymentType = predicate.Contains("accReusable_PaymentType");

			 				var query = con.accIncomeExpenses.AsQueryable();
                    var _queryable = query.AsQueryable();
                   if (!string.IsNullOrEmpty(predicateWithManyRelations))
					 	_queryable = _queryable.Where(predicateWithManyRelations);
                            
                    var queryable = _queryable.Select(
                          p =>
                              new
                              {			
			GuidIncomecExpense = p.GuidIncomecExpense
,CreatedDate = p.CreatedDate
,UpdatedDate = p.UpdatedDate
,CreatedBy = p.CreatedBy
,UpdatedBy = p.UpdatedBy
,IsDeleted = p.IsDeleted
,GuidCompany = p.GuidCompany
,Comments = p.Comments
,DateApply = p.DateApply
,ControlCode = p.ControlCode
,MovIndex = p.MovIndex
,GuidWFState_Request = p.GuidWFState_Request
,Authorized = p.Authorized
,GuidUserWaiting = p.GuidUserWaiting
,AmountIn = p.AmountIn
,AmountOut = p.AmountOut

,accMoneyInOutConcept = includeaccMoneyInOutConcept ? p.accMoneyInOutConcept:null
,accMoneyPlace = includeaccMoneyPlace ? p.accMoneyPlace:null
,accProvider = includeaccProvider ? p.accProvider:null
,accReusableCatalogValue = includeaccReusableCatalogValue ? p.accReusableCatalogValue:null
,accReusableStatusAuthorization = includeaccReusableStatusAuthorization ? p.accReusableStatusAuthorization:null
,accCompanyArea = includeaccCompanyArea ? p.accCompanyArea:null
,accParent = includeaccParent ? p.accParent:null
,accReusable_PaymentType = includeaccReusable_PaymentType ? p.accReusable_PaymentType:null

,Remaining = p.accReusableCatalogValue.ValueString == "money-out-request" ? p.AmountOut - p.accChilds.Where(deleted => deleted.IsDeleted != true || deleted.IsDeleted == null).Sum(x=>x.AmountOut)  : p.AmountOut 


							}

                          );

					if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
                        queryable = queryable.Where(predicateWithFKAndComputed);

					
                    return queryable.Count();
			
					
                }else
                    return con.accIncomeExpenses.Count();

			}

		}
         public int GetCount()
        {
            return GetCount(p => true);
        }
        #endregion
        
         public accIncomeExpens Update(accIncomeExpens entity, string paths)
        {
            return Update(entity, paths.Split(char.Parse(",")));
            
        }

        public accIncomeExpens Update(accIncomeExpens entity, string[] paths)
        {
            // Translate
            List<Expression<Func<accIncomeExpens, object>>> pathList = new List<Expression<Func<accIncomeExpens, object>>>();
            for (int i = 0; i <= paths.Length -1; i++)
            {
                var param = Expression.Parameter(typeof(accIncomeExpens), "p");
                var member = MemberExpression.PropertyOrField(param, paths[i]);

                Expression<Func<accIncomeExpens, object>> path = p => member;
                pathList.Add(path.Expand());
            }
			ObjectContext context = null;
			 return Update(entity, true,null, out context,  pathList.ToArray());
           //return Update(entity, pathList.ToArray());
        }

        public void Update(List<accIncomeExpens> entities, string paths)
        {
            foreach (var entity in entities )
            {
                Update(entity, paths);
            }
        }
		public accIncomeExpens Create(accIncomeExpens entity, ContextRequest contextRequest, string paths)
        {
          

            if (string.IsNullOrEmpty(paths))
                return Create(entity, contextRequest);

            return Create(entity, contextRequest, paths.Split(char.Parse(",")));
        }
        public accIncomeExpens Create(accIncomeExpens entity, string paths)
        {
			 if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return Create(entity, contextRequest, paths);

        }

        public  void Create(List<accIncomeExpens> entities, ContextRequest requestContext, string paths)
        {
            foreach (var entity in entities)
            {
                Create(entity,requestContext, paths);
            }
        }

        public void Create(List<accIncomeExpens> entities, string[] paths)
        {
            foreach (var entity in entities)
            {
                Create(entity, null, paths);
            }
        }
        
        public accIncomeExpens  Create(accIncomeExpens entity, ContextRequest contextRequest, string[] paths)
        {
            List<Expression<Func<accIncomeExpens, object>>> pathList = new List<Expression<Func<accIncomeExpens, object>>>();
            for (int i = 0; i < paths.Length - 1; i++)
            {
                var param = Expression.Parameter(typeof(accIncomeExpens), "p");
                var member = MemberExpression.PropertyOrField(param, paths[i]);

                Expression<Func<accIncomeExpens, object>> path = p => member;
                pathList.Add(path.Expand());
            }
            return Create(entity, contextRequest, pathList.ToArray());
        }
        public void Delete(List<accIncomeExpens.CompositeKey> entityKeys)
        {

            List<accIncomeExpens> items = new List<accIncomeExpens>();
            foreach (var itemKey in entityKeys)
            {
                items.Add(GetByKey(itemKey.GuidIncomecExpense));
            }

            Delete(items);

        }
		
	
		partial void OnRelationAdded(accIncomeExpens item, accInvoice itemRel);
		partial void OnRelationsAdded(accInvoice itemRel, SFSdotNet.Framework.BR.BusinessRulesEventArgs<accIncomeExpens> e);

		public void AddRelation(accIncomeExpens item, accInvoice itemRel)
        {
            using (EFContext  con = new EFContext())
            {
                
                con.ContextOptions.LazyLoadingEnabled = false;
                con.ContextOptions.ProxyCreationEnabled = false; 
                con.accIncomeExpenses.First(p => p.GuidIncomecExpense == item.GuidIncomecExpense).accInvoices.Add(con.accInvoices.First(x=>x.GuidInvoice == itemRel.GuidInvoice));
                con.SaveChanges();
            }
			OnRelationAdded(item,  itemRel);
        }
		public void AddRelations(List<accIncomeExpens> items, accInvoice itemRel)
        {
            SFSdotNet.Framework.BR.BusinessRulesEventArgs<accIncomeExpens> e = new BusinessRulesEventArgs<accIncomeExpens>();
            e.Items = items;
            AddRelations(itemRel, e);
        }
        public void AddRelations(accInvoice itemRel, SFSdotNet.Framework.BR.BusinessRulesEventArgs<accIncomeExpens> e)
        {
            using (EFContext con = new EFContext())
            {
                foreach (var item in e.Items)
                {
                    con.ContextOptions.LazyLoadingEnabled = false;
                    con.ContextOptions.ProxyCreationEnabled = false;
                    con.accIncomeExpenses.First(p => p.GuidIncomecExpense == item.GuidIncomecExpense).accInvoices.Add(con.accInvoices.First(x => x.GuidInvoice == itemRel.GuidInvoice));

                }
                con.SaveChanges();
            }
            OnRelationsAdded(itemRel, e);
        }

		partial void OnRelationRemoved(accIncomeExpens item, accInvoice itemRel);
		partial void OnRelationsRemoved(accInvoice itemRel, SFSdotNet.Framework.BR.BusinessRulesEventArgs<accIncomeExpens> e);

        public void RemoveRelation(accIncomeExpens item, accInvoice itemRel)
        {
            using (EFContext con = new EFContext())
            {
                item = con.accIncomeExpenses.Include("accInvoices").FirstOrDefault(p => p.GuidIncomecExpense == item.GuidIncomecExpense);
                if (item != null) {
                    if (item.accInvoices.FirstOrDefault(x =>x.GuidInvoice == itemRel.GuidInvoice) != null ) {
                        item.accInvoices.Remove(item.accInvoices.FirstOrDefault(x => x.GuidInvoice == itemRel.GuidInvoice));
                    }
                }
                con.SaveChanges();
            }
			OnRelationRemoved(item,  itemRel);

        }
		public void RemoveRelations(List<accIncomeExpens> objs, accInvoice itemRel)
        {
            using (EFContext con = new EFContext())
            {
                foreach (var item in objs)
                {
                    var _item = con.accIncomeExpenses.Include("accInvoices").FirstOrDefault(p => p.GuidIncomecExpense == item.GuidIncomecExpense);
                    if (_item != null)
                    {
                        if (_item.accInvoices.FirstOrDefault(x => x.GuidInvoice == itemRel.GuidInvoice) != null)
                        {
                            _item.accInvoices.Remove(_item.accInvoices.FirstOrDefault(x => x.GuidInvoice == itemRel.GuidInvoice));
                        }
                    }
					
                }
                con.SaveChanges();
            }

            OnRelationsRemoved(itemRel, new SFSdotNet.Framework.BR.BusinessRulesEventArgs<accIncomeExpens>() { Items = objs });

        }
		
	}
		public partial class accProxyUsersBR{
	 	
           
		 #region Partial methods

           partial void OnUpdating(object sender, BusinessRulesEventArgs<accProxyUser> e);

            partial void OnUpdated(object sender, BusinessRulesEventArgs<accProxyUser> e);

            partial void OnCreating(object sender, BusinessRulesEventArgs<accProxyUser> e);
            partial void OnCreated(object sender, BusinessRulesEventArgs<accProxyUser> e);

            partial void OnDeleting(object sender, BusinessRulesEventArgs<accProxyUser> e);
            partial void OnDeleted(object sender, BusinessRulesEventArgs<accProxyUser> e);

            partial void OnGetting(object sender, BusinessRulesEventArgs<accProxyUser> e);
            partial void OnTaken(object sender, BusinessRulesEventArgs<accProxyUser> e);
            partial void OnCounting(object sender, BusinessRulesEventArgs<accProxyUser> e);
 
 
            #endregion
			
		private static accProxyUsersBR singlenton =null;
				public static accProxyUsersBR NewInstance(){
					return  new accProxyUsersBR();
					
				}
		public static accProxyUsersBR Instance{
			get{
				if (singlenton == null)
					singlenton = new accProxyUsersBR();
				return singlenton;
			}
		}
		private bool preventSecurityRestrictions = false;
		 public bool PreventAuditTrail { get; set;  }
		#region Fields
        EFPocoContext context = null;
        #endregion
        #region Constructor
        public accProxyUsersBR()
        {
            context = new EFPocoContext();
        }
		 public accProxyUsersBR(bool preventSecurity)
            {
                this.preventSecurityRestrictions = preventSecurity;
				context = new EFPocoContext();
            }
        #endregion
		
		#region Get

 		public IQueryable<accProxyUser> Get()
        {
            //using (EFContext con = new EFContext())
            //{
				EFContext con = new EFContext();
                var query = con.accProxyUsers.AsQueryable();
                con.ContextOptions.ProxyCreationEnabled = false;

                //query = ContextQueryBuilder<Nutrient>.ApplyContextQuery(query, contextRequest);

                return query;




            //}

        }
		
		public List<accProxyUser> GetAll()
        {
            return this.GetBy(p => true);
        }
        public List<accProxyUser> GetAll(string includes)
        {
            return this.GetBy(p => true, includes);
        }
        public accProxyUser GetByKey(Guid guidUser)
        {
            return GetByKey(guidUser, true);
        }
        public accProxyUser GetByKey(Guid guidUser, bool loadIncludes)
        {
            accProxyUser item = null;
			var query = PredicateBuilder.True<accProxyUser>();
                    
			string strWhere = @"GuidUser = Guid(""" + guidUser.ToString()+@""")";
            Expression<Func<accProxyUser, bool>> predicate = null;
            if (!string.IsNullOrEmpty(strWhere))
                predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<accProxyUser, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
			 ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();
            contextRequest.CustomQuery.FilterExpressionString = strWhere;

			//item = GetBy(predicate, loadIncludes, contextRequest).FirstOrDefault();
			item = GetBy(strWhere,loadIncludes,contextRequest).FirstOrDefault();
            return item;
        }
         public List<accProxyUser> GetBy(string strWhere, bool loadRelations, ContextRequest contextRequest)
        {
            if (!loadRelations)
                return GetBy(strWhere, contextRequest);
            else
                return GetBy(strWhere, contextRequest, "");

        }
		  public List<accProxyUser> GetBy(string strWhere, bool loadRelations)
        {
              if (!loadRelations)
                return GetBy(strWhere, new ContextRequest());
            else
                return GetBy(strWhere, new ContextRequest(), "");

        }
         public accProxyUser GetByKey(Guid guidUser, params Expression<Func<accProxyUser, object>>[] includes)
        {
            accProxyUser item = null;
			string strWhere = @"GuidUser = Guid(""" + guidUser.ToString()+@""")";
          Expression<Func<accProxyUser, bool>> predicate = null;
            if (!string.IsNullOrEmpty(strWhere))
                predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<accProxyUser, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
        item = GetBy(predicate, includes).FirstOrDefault();
         ////   item = GetBy(strWhere,includes).FirstOrDefault();
			return item;

        }
        public accProxyUser GetByKey(Guid guidUser, string includes)
        {
            accProxyUser item = null;
			string strWhere = @"GuidUser = Guid(""" + guidUser.ToString()+@""")";
            
			
            item = GetBy(strWhere, includes).FirstOrDefault();
            return item;

        }
		 public accProxyUser GetByKey(Guid guidUser, string usemode, string includes)
		{
			return GetByKey(guidUser, usemode, null, includes);

		 }
		 public accProxyUser GetByKey(Guid guidUser, string usemode, ContextRequest context,  string includes)
        {
            accProxyUser item = null;
			string strWhere = @"GuidUser = Guid(""" + guidUser.ToString()+@""")";
			if (context == null)
				context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
			context.CustomQuery.IsByKey = true;
            context.CustomQuery.FilterExpressionString = strWhere;
            context.UseMode = usemode;
            item = GetBy(strWhere,context , includes).FirstOrDefault();
            return item;

        }

        #region Dynamic Predicate
        public List<accProxyUser> GetBy(Expression<Func<accProxyUser, bool>> predicate, int? pageSize, int? page)
        {
            return this.GetBy(predicate, pageSize, page, null, null);
        }
        public List<accProxyUser> GetBy(Expression<Func<accProxyUser, bool>> predicate, ContextRequest contextRequest)
        {

            return GetBy(predicate, contextRequest,"");
        }
        
        public List<accProxyUser> GetBy(Expression<Func<accProxyUser, bool>> predicate, ContextRequest contextRequest, params Expression<Func<accProxyUser, object>>[] includes)
        {
            StringBuilder sb = new StringBuilder();
           if (includes != null)
            {
                foreach (var path in includes)
                {

						if (sb.Length > 0) sb.Append(",");
						sb.Append(SFSdotNet.Framework.Linq.Utils.IncludeToString<accProxyUser>(path));

               }
            }
            return GetBy(predicate, contextRequest, sb.ToString());
        }
        
        
        public List<accProxyUser> GetBy(Expression<Func<accProxyUser, bool>> predicate, string includes)
        {
			ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";

            return GetBy(predicate, context, includes);
        }

        public List<accProxyUser> GetBy(Expression<Func<accProxyUser, bool>> predicate, params Expression<Func<accProxyUser, object>>[] includes)
        {
			if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }
			ContextRequest context = new ContextRequest();
			            context.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            context.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";
            return GetBy(predicate, context, includes);
        }

      
		public bool DisableCache { get; set; }
		 public List<accProxyUser> GetBy(Expression<Func<accProxyUser, bool>> predicate, ContextRequest contextRequest, string includes)
        {
            using (EFPocoContext con = new EFPocoContext())
            {
				if (DisableCache) 
                	con.CachingPolicy = EFCachingProvider.Caching.CachingPolicy.NoCaching;

				List<accProxyUser> result = null;
                 e = null;
	
				OnGetting(con, e = new BusinessRulesEventArgs<accProxyUser>() {  FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null) });

               // OnGetting(con,e = new BusinessRulesEventArgs<accProxyUser>() { FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = contextRequest.CustomQuery.FilterExpressionString});
				   if (e != null) {
				    predicate = e.FilterExpression;
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				con.EnableChangeTrackingUsingProxies = false;
				con.WrappedContext.accProxyUsers.MergeOption = MergeOption.NoTracking;
                con.WrappedContext.ContextOptions.ProxyCreationEnabled = false;
                if (predicate == null) predicate = PredicateBuilder.True<accProxyUser>();
                
                var es = con.accProxyUsers;

                IQueryable<accProxyUser> query = es.AsQueryable();

                                if (!string.IsNullOrEmpty(includes))
                {
                    foreach (string include in includes.Split(char.Parse(",")))
                    {
						if (!string.IsNullOrEmpty(include))
                            query = query.Include(include);
                    }
                }
				query =query.Where(predicate);
                query = ContextQueryBuilder<accProxyUser>.ApplyContextQuery(query, contextRequest);

                result = query.ToList<accProxyUser>();
				  
                if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e =  new BusinessRulesEventArgs<accProxyUser>() { Items= result, IncludingComputedLinq = false, ContextRequest = contextRequest,  FilterExpression = predicate } :  e);
  
			

                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
            }
        }
		public void UpdateAgile(accProxyUser item, params string[] fields)
         {
             List<accProxyUser> list = new List<accProxyUser>();
             list.Add(item);
             this.UpdateBulk(list, fields);
         }
		public void UpdateBulk(List<accProxyUser>  items, params string[] fields)
         {
             SFSdotNet.Framework.My.ContextRequest req = new SFSdotNet.Framework.My.ContextRequest();
             req.CustomQuery = new SFSdotNet.Framework.My.CustomQuery();
             foreach (var field in fields)
             {
                 req.CustomQuery.SpecificProperties.Add(field);
             }
             UpdateBulk(items, req);

         }
        public void UpdateBulk(List<accProxyUser> items, ContextRequest req)
        {
            using (EFContext con = new EFContext())
            {



                foreach (var item in items)
                {
                    var setT = con.CreateObjectSet<accProxyUser>("accProxyUsers");


                    var itemForAttach = new accProxyUser();
			itemForAttach.GuidUser = item.GuidUser;
					
                    itemForAttach = SFSdotNet.Framework.Entities.ConvertEntity.SetProperties<accProxyUser>(item, itemForAttach, null, req.CustomQuery.SpecificProperties.ToArray());
                    setT.Attach(itemForAttach);


                    foreach (var property in req.CustomQuery.SpecificProperties)
                    {
						
                        if (property != "GuidUser")
                            con.ObjectStateManager.GetObjectStateEntry(itemForAttach).SetModifiedProperty(property);

                    }

                }
                con.SaveChanges();


            }
        }
		/*public int Update(List<accProxyUser> items, ContextRequest contextRequest)
            {
                int result = 0;
                using (EFContext con = new EFContext())
                {
                   
                

                    foreach (var item in items)
                    {
                        //secMessageToUser messageToUser = new secMessageToUser();
                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            item.GetType().GetProperty(prop).SetValue(item, item.GetType().GetProperty(prop).GetValue(item));
                        }
                        //messageToUser.GuidMessageToUser = (Guid)item.GetType().GetProperty("GuidMessageToUser").GetValue(item);

                        var setObject = con.CreateObjectSet<accProxyUser>("accProxyUsers");
                        //messageToUser.Readed = DateTime.UtcNow;
                        setObject.Attach(item);
                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            con.ObjectStateManager.GetObjectStateEntry(item).SetModifiedProperty(prop);
                        }
                       
                    }
                    result = con.SaveChanges();

                    


                }
                return result;
            }
           */
        public List<accProxyUser> GetBy(string predicateString, ContextRequest contextRequest, string includes)
        {
            using (EFContext con = new EFContext())
            {
				if (DisableCache) 
                	con.CachingPolicy = EFCachingProvider.Caching.CachingPolicy.NoCaching;

				Filter filter = new Filter();
                if (predicateString.Contains("|"))
                {
                    string ft = GetSpecificFilter(predicateString);
                    if (!string.IsNullOrEmpty(ft))
                        filter.SetFilterPart("ft", ft);
                   
                    contextRequest.FreeText = predicateString.Split(char.Parse("|"))[1];
                    var q1 = predicateString.Split(char.Parse("|"))[0];
                    if (!string.IsNullOrEmpty(q1))
                    {
                        filter.ProcessText(q1);
                    }
                }
                else {
                    filter.ProcessText(predicateString);
                }

				List<accProxyUser> result = null;
                 e = null;
					OnGetting(con, e = new BusinessRulesEventArgs<accProxyUser>() { Filter = filter, ContextRequest = contextRequest /*, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null)*/ });

                  //OnGetting(con,e = new BusinessRulesEventArgs<accProxyUser>() {  ContextRequest = contextRequest, FilterExpressionString = predicateString });
			   	if (e != null) {
				    //predicateString = e.GetQueryString();
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				//	 else {
                //      predicateString = predicateString.Replace("*extraFreeText*", "").Replace("()","");
                //  }
				//con.EnableChangeTrackingUsingProxies = false;
				con.accProxyUsers.MergeOption = MergeOption.NoTracking;
                con.ContextOptions.ProxyCreationEnabled = false;
                //if (predicate == null) predicate = PredicateBuilder.True<accProxyUser>();
                
                var es = con.accProxyUsers;
				IQueryable<accProxyUser> query = es.AsQueryable();
		
				// include relations FK
				if(string.IsNullOrEmpty(includes) ){
					includes ="";
				}
				StringBuilder sbQuerySystem = new StringBuilder();
				//string predicateString = predicate.ToDynamicLinq<accProxyUser>();
				//predicateString += sbQuerySystem.ToString();
				filter.CleanAndProcess("");

				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed(); //SFSdotNet.Framework.Linq.Utils.ExtractSpecificProperties("", ref predicateString );               
                string predicateWithManyRelations = filter.GetFilterChildren(); //SFSdotNet.Framework.Linq.Utils.CleanPartExpression(predicateString);

                //QueryUtils.BreakeQuery1(predicateString, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
                var _queryable = query.AsQueryable();
                if (!string.IsNullOrEmpty(predicateWithManyRelations))
                    _queryable = _queryable.Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams);
				if (contextRequest.CustomQuery.SpecificProperties.Count > 0)
                {

                    StringBuilder sbProps = new StringBuilder();
                    contextRequest.CustomQuery.SpecificProperties.Add("GuidUser");
                    
					foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                    {
						if(sbProps.Length > 0)
							sbProps.Append(",");
                        sbProps.Append(prop);
                    }
					    IQueryable  queryableSelective = null ;
					  
					  if (!string.IsNullOrEmpty(predicateWithManyRelations))
							queryableSelective = con.accProxyUsers.AsQueryable().Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams).Select(string.Format("new({0})", sbProps.ToString()));
					else
						queryableSelective = con.accProxyUsers.AsQueryable().Select(string.Format("new({0})", sbProps.ToString()));


                    //if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
					//	queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

                    QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
                    
					if (!string.IsNullOrEmpty(queryOps.OrderByAndSort))
                        queryableSelective = queryableSelective.OrderBy(queryOps.OrderByAndSort);
                    if (queryOps.Skip != null)
                    {
                        queryableSelective = queryableSelective.Skip(queryOps.Skip.Value);
                    }
                    if (queryOps.PageSize != null)
                    {
                        queryableSelective = queryableSelective.Take(queryOps.PageSize.Value);
                    }
                    //var results = queryableSelective.ToList();
                    result = new List<accProxyUser>();
                    accProxyUser itemDef = null;
                    foreach (var item in queryableSelective)
                    {
                        itemDef = new accProxyUser();

                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            if (!prop.Contains("."))
                            {
                                itemDef.GetType().GetProperty(prop).SetValue(itemDef, item.GetType().GetProperty(prop).GetValue(item));
                            }
                            else {
                                throw new Exception("La seleccion de relaciones aún no esta soportada");
                            }

                        }

                        result.Add(itemDef);
                    }

                }
                else
                {
				var  queryable = _queryable.Select(                    
				p => 
                        new
                    {
					GuidUser = p.GuidUser
,DisplayName = p.DisplayName
,IntegrationID = p.IntegrationID

,

	
                    }
                    
                    );
					
				
                 if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
                    queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

				QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
            	if (!string.IsNullOrEmpty(queryOps.OrderByAndSort))
					queryable = queryable.OrderBy(queryOps.OrderByAndSort);
               	if (queryOps.Skip != null)
                {
                    queryable = queryable.Skip(queryOps.Skip.Value);
                }
                if (queryOps.PageSize != null)
                {
                    queryable = queryable.Take (queryOps.PageSize.Value);
                }
                result = queryable.AsEnumerable().
                    Select(
                    p =>  new accProxyUser()
                    {
					GuidUser = p.GuidUser
,DisplayName = p.DisplayName
,IntegrationID = p.IntegrationID

                    }
                     ).ToList();
				}


			 if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e = new BusinessRulesEventArgs<accProxyUser>() { Items= result, IncludingComputedLinq = true, ContextRequest = contextRequest, FilterExpressionString  = predicateString } :  e);
  
			
  
                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
            }
        }
		public List<accProxyUser> GetBy(Expression<Func<accProxyUser, bool>> predicate, bool loadRelations, ContextRequest contextRequest)
        {
			if(!loadRelations)
				return GetBy(predicate, contextRequest);
			else
				return GetBy(predicate, contextRequest, "");

        }

        public List<accProxyUser> GetBy(Expression<Func<accProxyUser, bool>> predicate, int? pageSize, int? page, string orderBy, SFSdotNet.Framework.Data.SortDirection? sortDirection)
        {
            return GetBy(predicate, new ContextRequest() { CustomQuery = new CustomQuery() { Page = page, PageSize = pageSize, OrderBy = orderBy, SortDirection = sortDirection } });
        }
        public List<accProxyUser> GetBy(Expression<Func<accProxyUser, bool>> predicate)
        {

			if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }
			ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();

			contextRequest.CurrentContext = SFSdotNet.Framework.My.Context.CurrentContext;
			            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

            contextRequest.CustomQuery.FilterExpressionString = null;
            return this.GetBy(predicate, contextRequest, "");
        }
        #endregion
        #region Dynamic String
		private string GetSpecificFilter(string filter) {
            string result = "";
		    //string linqFilter = String.Empty;
            string freeTextFilter = String.Empty;
            if (filter.Contains("|"))
            {
               // linqFilter = filter.Split(char.Parse("|"))[0];
                freeTextFilter = filter.Split(char.Parse("|"))[1];
            }
            //else {
            //    freeTextFilter = filter;
            //}
            //else {
            //    linqFilter = filter;
            //}
			// linqFilter = SFSdotNet.Framework.Linq.Utils.ReplaceCustomDateFilters(linqFilter);
            //string specificFilter = linqFilter;
            if (!string.IsNullOrEmpty(freeTextFilter))
            {
                System.Text.StringBuilder sbCont = new System.Text.StringBuilder();
                /*if (specificFilter.Length > 0)
                {
                    sbCont.Append(" AND ");
                    sbCont.Append(" ({0})");
                }
                else
                {
                    sbCont.Append("{0}");
                }*/
                //var words = freeTextFilter.Split(char.Parse(" "));
				var word = freeTextFilter;
                System.Text.StringBuilder sbSpec = new System.Text.StringBuilder();
                 int nWords = 1;
				/*foreach (var word in words)
                {
					if (word.Length > 0){
                    if (sbSpec.Length > 0) sbSpec.Append(" AND ");
					if (words.Length > 1) sbSpec.Append("("); */
					
	
					
											
					sbSpec.Append(string.Format(@"DisplayName.Contains(""{0}"")", word));

					
	
					
								 //sbSpec.Append("*extraFreeText*");

                    /*if (words.Length > 1) sbSpec.Append(")");
					
					nWords++;

					}

                }*/
                //specificFilter = string.Format("{0}{1}", specificFilter, string.Format(sbCont.ToString(), sbSpec.ToString()));
                                 result = sbSpec.ToString();  
            }
			//result = specificFilter;
			
			return result;

		}
	
			public List<accProxyUser> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  params object[] extraParams)
        {
			return GetBy(filter, pageSize, page, orderBy, orderDir,  null, extraParams);
		}
           public List<accProxyUser> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir, string usemode, params object[] extraParams)
            { 
                return GetBy(filter, pageSize, page, orderBy, orderDir, usemode, null, extraParams);
            }


		public List<accProxyUser> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  string usemode, ContextRequest context, params object[] extraParams)

        {

            // string freetext = null;
            //if (filter.Contains("|"))
            //{
            //    int parts = filter.Split(char.Parse("|")).Count();
            //    if (parts > 1)
            //    {

            //        freetext = filter.Split(char.Parse("|"))[1];
            //    }
            //}
		
            //string specificFilter = "";
            //if (!string.IsNullOrEmpty(filter))
            //  specificFilter=  GetSpecificFilter(filter);
            if (string.IsNullOrEmpty(orderBy))
            {
			                orderBy = "DisplayName";
            }
			//orderDir = "";
			SFSdotNet.Framework.Data.SortDirection direction = SFSdotNet.Framework.Data.SortDirection.Ascending;
            if (!string.IsNullOrEmpty(orderDir))
            {
                if (orderDir == "desc")
                    direction = SFSdotNet.Framework.Data.SortDirection.Descending;
            }
            if (context == null)
                context = new ContextRequest();
			else
                context.CustomQuery = new CustomQuery();
             //context.FreeText = freetext;
             context.UseMode = usemode;
             context.CustomQuery =new SFSdotNet.Framework.My.CustomQuery()
 
                {
                    ExtraParams = extraParams,

                    OrderBy = orderBy,
                    SortDirection = direction,
                    Page = page,
                    PageSize = pageSize
               };
            

            if (!preventSecurityRestrictions) {
			 if (context.CurrentContext == null)
                {
					if (SFSdotNet.Framework.My.Context.CurrentContext != null &&  SFSdotNet.Framework.My.Context.CurrentContext.Company != null && SFSdotNet.Framework.My.Context.CurrentContext.User != null)
					{
						context.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
						context.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

					}
					else {
						throw new Exception("The security rule require a specific user and company");
					}
				}
            }
            return GetBy(filter, context);
  
        }


        public List<accProxyUser> GetBy(string strWhere, ContextRequest contextRequest)
        {
        	#region old code
				
				 //Expression<Func<tvsReservationTransport, bool>> predicate = null;
				string strWhereClean = strWhere.Replace("*extraFreeText*", "").Replace("()", "");
                //if (!string.IsNullOrEmpty(strWhereClean)){

                //    object[] extraParams = null;
                //    //if (contextRequest != null )
                //    //    if (contextRequest.CustomQuery != null )
                //    //        extraParams = contextRequest.CustomQuery.ExtraParams;
                //    //predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<tvsReservationTransport, bool>(strWhereClean, extraParams != null? extraParams.Cast<Guid>(): null);				
                //}
				 if (contextRequest == null)
                {
                    contextRequest = new ContextRequest();
                    if (contextRequest.CustomQuery == null)
                        contextRequest.CustomQuery = new CustomQuery();
                }
                  if (!preventSecurityRestrictions) {
					if (contextRequest.User == null || contextRequest.Company == null)
                      {
                     if (SFSdotNet.Framework.My.Context.CurrentContext.Company != null && SFSdotNet.Framework.My.Context.CurrentContext.User != null)
                     {
                         contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                         contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

                     }
                     else {
                         throw new Exception("The security rule require a specific User and Company ");
                     }
					 }
                 }
            contextRequest.CustomQuery.FilterExpressionString = strWhere;
				//return GetBy(predicate, contextRequest);  

			#endregion				
				
                    return GetBy(strWhere, contextRequest, "");  


        }
       public List<accProxyUser> GetBy(string strWhere)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
			
            return GetBy(strWhere, context, null);
        }

        public List<accProxyUser> GetBy(string strWhere, string includes)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
            return GetBy(strWhere, context, includes);
        }

        #endregion
        #endregion
		
		  #region SaveOrUpdate
        private accProxyUser Save(accProxyUser entity, bool saveChanges, EFPocoContext con)
        {
				ObjectContext context = null;
            return Update(entity, saveChanges,null, out context);

			
        }
		 public  accProxyUser Create( accProxyUser entity, params Expression<Func< accProxyUser, object>>[] paths)
         {
             return Create(entity, null, paths);

         }
 		 public accProxyUser Create(accProxyUser entity)
        {
				ObjectContext context = null;
				    if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: Create");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

				return this.Create(entity, true, contextRequest, out context);


        }
        public accProxyUser Create(accProxyUser entity, ContextRequest contextRequest)
         {
             ObjectContext context = null;
             return this.Create(entity, true, contextRequest,out context);

         }
         public accProxyUser Create(accProxyUser entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext context)
        {
                    return Create(entity, saveChanges , contextRequest , out context, null);
        }
         public accProxyUser Create(accProxyUser entity, ContextRequest contextRequest, params Expression<Func<accProxyUser,object>>[] paths)
        {
            ObjectContext context = null;
            if(paths != null)
				return Create(entity, true,contextRequest, out context, paths);
			else 
				return Create(entity, true,contextRequest, out context);
        }
        public accProxyUser Create(accProxyUser entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext context, params Expression<Func<accProxyUser,object>>[] pocopaths)
        {
			using (EFPocoContext con = new EFPocoContext())
			{
				accProxyUser itemResult = null;
#region Autos


	
	

#endregion
                e = null;
                OnCreating(this,e = new BusinessRulesEventArgs<accProxyUser>() { ContextRequest = contextRequest, Item=entity, PathExpressions = pocopaths, SaveChanges =saveChanges });
				   if (e != null) {
						if (e.Cancel)
						{
							context = null;
							return e.Item;

						}
					}

                    if (entity.GuidUser == Guid.Empty)
                   {
                       entity.GuidUser = Guid.NewGuid();

                   }



				accProxyUserAdapter adapter = con.GetAdapterObject<accProxyUserAdapter>(entity);;
				List<Expression<Func<accProxyUserAdapter, object>>> paths = new List<Expression<Func<accProxyUserAdapter,object>>>();
                
			    if (pocopaths != null && pocopaths.Length > 0)
                {
					// Translate
                    foreach (var pocopath in pocopaths)
                    {
                        var param = Expression.Parameter(typeof(accProxyUserAdapter), "p");
                        var member = MemberExpression.PropertyOrField(param, ((System.Linq.Expressions.MemberExpression)(((System.Linq.Expressions.LambdaExpression)(pocopath)).Body)).Member.Name);
                        Expression<Func<accProxyUserAdapter, object>> path  = null;
                        switch(member.Member.Name){
							
							default:
								path = p => member;
							break;
                        }

                        
                       paths.Add(path.Expand());
                    }
                }
                object aux = null;
					//paths = pathBuilder.ToArray();




                //con.WrappedContext.AttachObjectGraph<accProxyUserAdapter>(adapter);
                con.WrappedContext.AttachObjectGraph<accProxyUserAdapter>(adapter, paths.ToArray());
              	if (saveChanges){
                    con.WrappedContext.SaveChanges(SaveOptions.AcceptAllChangesAfterSave);
					 
				}
                else
                    con.WrappedContext.SaveChanges(SaveOptions.None);
                if (!saveChanges)
                    context = con.WrappedContext;
                else
                    context = null;
				itemResult = adapter.PocoEntity;
				if (contextRequest.CustomParams.Count(p =>  p.Name == "IntDef" || p.Name == "IdItemForIntegrate") == 2)
                {
                    Guid guidObjectIntegration =  Guid.Parse(contextRequest.CustomParams.FirstOrDefault(p=>p.Name == "IntDef").Value.ToString());
                    Guid guidItemForIntegrate = Guid.Parse(contextRequest.CustomParams.FirstOrDefault(p => p.Name == "IdItemForIntegrate").Value.ToString());

                    SFSdotNet.Framework.Apps.Integration.CompleteIntegration(itemResult, accProxyUser.PropertyNames.GuidUser, "accProxyUser", "accProxyUsers", "MBKTime", "MBK.Time", guidObjectIntegration, guidItemForIntegrate, contextRequest); 
                }
                if (e != null)
                {
                    e.Item = itemResult;
                }
                OnCreated(this, e == null ? e = new BusinessRulesEventArgs<accProxyUser>() { ContextRequest = contextRequest, Item = itemResult, PathExpressions = pocopaths, SaveChanges = saveChanges } : e);



                if (e != null)
                {
                    itemResult = e.Item;
                }
                              return itemResult;
            }
        }
        BusinessRulesEventArgs<accProxyUser> e = null;
        public void Create(List<accProxyUser> entities)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            Create(entities, contextRequest, null);
        }
        public void Create(List<accProxyUser> entities, ContextRequest contextRequest)
        
        {
			ObjectContext context = null;
            	foreach (accProxyUser entity in entities)
				{
					this.Create(entity, true, contextRequest, out context);
				}
        }
         public accProxyUser Update(accProxyUser entity)
        {
            if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return Update(entity, contextRequest);
        }
        public accProxyUser Update(accProxyUser entity, ContextRequest requestContext)
        {
			  ObjectContext context = null;
            return Update(entity, true,requestContext, out context);
         }
		public  accProxyUser Update(accProxyUser entity, params Expression<Func<accProxyUser, object>>[] pocopaths)
        {
			  ObjectContext context = null;
              return Update(entity, true, null, out context, pocopaths);
         }
        public accProxyUser Update(accProxyUser entity, ContextRequest requestContext, bool saveChanges, out ObjectContext outcontext)
        {
			return Update(entity, saveChanges,requestContext, out outcontext, null);
		}
         public accProxyUser Update(accProxyUser entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext outcontext, params Expression<Func<accProxyUser,object>>[] pocopaths)
        {
		 if ((System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null) && contextRequest == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Update");
            }
            if (contextRequest == null)
            {
                contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            }

			using (EFPocoContext con = new EFPocoContext())
			{
				accProxyUser  itemResult = null;

	

				e = null;
                OnUpdating(this,e = new BusinessRulesEventArgs<accProxyUser>() { ContextRequest = contextRequest, Item=entity, PathExpressions = pocopaths, SaveChanges =saveChanges });
				   if (e != null) {
						if (e.Cancel)
						{
							outcontext = null;
							return e.Item;

						}
					}

                accProxyUserAdapter adapter = con.GetAdapterObject<accProxyUserAdapter>(entity);
                adapter.EntityKey = con.WrappedContext.CreateEntityKey("accProxyUsers", adapter);
				    var es = con.accProxyUsers;
				List<Expression<Func<accProxyUserAdapter, object>>> paths = new List<Expression<Func<accProxyUserAdapter,object>>>();
                /* if (pocopaths != null)
                    if (pocopaths.Length == 0)
                        pocopaths = null;*/

			    if (pocopaths != null && pocopaths.Length > 0)
                {
					// Translate
                    foreach (var pocopath in pocopaths)
                    {
                        var param = Expression.Parameter(typeof(accProxyUserAdapter), "p");
                        var member = MemberExpression.PropertyOrField(param, ((System.Linq.Expressions.MemberExpression)(((System.Linq.Expressions.LambdaExpression)(pocopath)).Body)).Member.Name);
                        Expression<Func<accProxyUserAdapter, object>> path  = null;
                        switch(member.Member.Name){
							
							default:
								path = p => member;
							break;
                        }

                        paths.Add(path.Expand());
 					}
                }
                else {
                  paths = new List<Expression<Func<accProxyUserAdapter, object>>>();

					//List<Expression<Func<accProxyUserAdapter,object>>> pathBuilder = new List<Expression<Func<accProxyUserAdapter,object>>>();
		
					//paths = pathBuilder.ToArray();		
			}
			object aux = null;



                //con.AttachObjectGraph<accProxyUser>(adapter);
                con.WrappedContext.AttachObjectGraph<accProxyUserAdapter>(adapter, paths.ToArray());
				if (saveChanges){
                	con.WrappedContext.SaveChanges();
					 
					}
					                // is integrated
                SFSdotNet.Framework.Apps.Integration.UpdateIntegratedEntityAsync("accProxyUser", "MBKTime", adapter.PocoEntity, adapter.PocoEntity.GuidUser, contextRequest);
                 if(!saveChanges)
					outcontext = con.WrappedContext;
				else
					outcontext = null;
				itemResult = adapter.PocoEntity;
				OnUpdated(this, e = new BusinessRulesEventArgs<accProxyUser>() { ContextRequest = contextRequest, Item=itemResult, PathExpressions = pocopaths, SaveChanges =saveChanges });

              	return itemResult;

			  }
        }
        public accProxyUser Save(accProxyUser entity)
        {
			return Save(entity, true, null);
        }
        public int Save(List<accProxyUser> entities)
        {
			using (EFPocoContext con = new EFPocoContext())
			{
			
            int n = 0;
            foreach (accProxyUser item in entities)
            {
                try
                {
                    this.Save(item, false, con);
                    n++;
                }catch (Exception ex){
                    SFSdotNet.Framework.My.EventLog.Exception(ex);
                }
            }
            con.SaveChanges();
            return n;
            }
        }
        #endregion
        #region Delete
        public void Delete(accProxyUser entity)
        {
				this.Delete(entity, null);
			
        }
		 public void Delete(accProxyUser entity, ContextRequest contextRequest)
        {
				ObjectContext context = null;
				this.Delete(entity, true, out context, contextRequest);
			
        }

        
        public void Delete(accProxyUser entity, bool saveChanges, out  ObjectContext context, ContextRequest contextRequest, BusinessRulesEventArgs<accProxyUser> e = null)
        {
			using (EFPocoContext _con = new EFPocoContext())
			{
				int result = 0;
				
               	BusinessRulesEventArgs<accProxyUser> _e = null;
               List<accProxyUser> _items = new List<accProxyUser>();
                _items.Add(entity);
                if (e == null || e.PreventPartialPropagate == false)
                {
                    OnDeleting(this, _e = (e == null ? new BusinessRulesEventArgs<accProxyUser>() { ContextRequest = contextRequest, Item = entity, Items = _items, SaveChanges = saveChanges } : e));
                }
                if (_e != null)
                {
                    if (_e.Cancel)
						{
							context = null;
							return;

						}
					}


				accProxyUserAdapter adapter = _con.GetAdapterObject<accProxyUserAdapter>(entity);
                adapter.EntityKey = _con.WrappedContext.CreateEntityKey("accProxyUsers", adapter);
                
	            //adapter = _con.WrappedContext.AttachObjectGraph<accProxyUserAdapter>(adapter);
				try{
					_con.WrappedContext.AttachTo("accProxyUsers", adapter);
                }catch{
					
				}
									_con.WrappedContext.DeleteObject(adapter);
                				
				if (!saveChanges)
                    context = _con.WrappedContext;
                else
                    context = null;
				 SaveOptions saveOption = SaveOptions.None;
                if (saveChanges)
                    saveOption = SaveOptions.AcceptAllChangesAfterSave;

				result = _con.WrappedContext.SaveChanges(saveOption);
				if (saveChanges){
					
					}
			if (e == null || e.PreventPartialPropagate == false)
                {

                    if (_e == null)
                        _e = new BusinessRulesEventArgs<accProxyUser>() { ContextRequest = contextRequest, Item = entity, Items = _items };

                    OnDeleted(this, _e);
                }

				//return null;
			}            
        }
        public void Delete(List<accProxyUser> entities,  ContextRequest contextRequest = null )
        {
				ObjectContext context = null;
			 BusinessRulesEventArgs<accProxyUser> _e = null;

                OnDeleting(this, _e = new BusinessRulesEventArgs<accProxyUser>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities });
                if (_e != null)
                {
                    if (_e.Cancel)
                    {
                        context = null;
                        return;

                    }
                }
                bool allSucced = true;
                BusinessRulesEventArgs<accProxyUser> eToChilds = new BusinessRulesEventArgs<accProxyUser>();
                if (_e != null)
                {
                    eToChilds = _e;
                }
                else
                {
                    eToChilds = new BusinessRulesEventArgs<accProxyUser>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                }
				foreach (accProxyUser item in entities)
				{
					try
                    {
                        this.Delete(item, true, out context, contextRequest, e: eToChilds);
                    }
                    catch (Exception ex)
                    {
                        SFSdotNet.Framework.My.EventLog.Error(ex);
                        allSucced = false;
                    }
				}
				if (_e == null)
                    _e = new BusinessRulesEventArgs<accProxyUser>() { ContextRequest = contextRequest, CountResult = entities.Count, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                OnDeleted(this, _e);

			
        }
        #endregion
 
        #region GetCount
		 public int GetCount(Expression<Func<accProxyUser, bool>> predicate)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

			return GetCount(predicate, contextRequest);
		}
        public int GetCount(Expression<Func<accProxyUser, bool>> predicate, ContextRequest contextRequest)
        {


		
			using (EFPocoContext con = new EFPocoContext())
			{


				if (predicate == null) predicate = PredicateBuilder.True<accProxyUser>();
				
				return con.accProxyUsers.Count(predicate);
			}

        }
		  public int GetCount(string predicate,  ContextRequest contextRequest)
         {
             return GetCount(predicate, null, contextRequest);
         }

         public int GetCount(string predicate)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return GetCount(predicate, contextRequest);
        }
		 public int GetCount(string predicate, string usemode){
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
				return GetCount( predicate,  usemode,  contextRequest);
		 }
        public int GetCount(string predicate, string usemode, ContextRequest contextRequest){
			  string freetext = null;
            Filter filter = new Filter();

              if (predicate.Contains("|"))
              {
                 
                  filter.SetFilterPart("ft", GetSpecificFilter(predicate));
                 
                  filter.ProcessText(predicate.Split(char.Parse("|"))[0]);
                  freetext = predicate.Split(char.Parse("|"))[1];
              }
              else {
                  filter.ProcessText(predicate);
              }
           
			e = null;
			contextRequest.FreeText = freetext;
			contextRequest.UseMode = usemode;
            OnCounting(this, e = new BusinessRulesEventArgs<accProxyUser>() {  Filter =filter, ContextRequest = contextRequest });
            if (e != null)
            {
                if (e.Cancel)
                {
                    context = null;
                    return e.CountResult;

                }

            

            }
			 predicate = filter.GetFilterComplete();
			StringBuilder sbQuerySystem = new StringBuilder();
		
			using (EFContext con = new EFContext())
			{
				   
                 filter.CleanAndProcess("");
				//string predicateWithFKAndComputed = SFSdotNet.Framework.Linq.Utils.ExtractSpecificProperties("", ref predicate );               
				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed();
               string predicateWithManyRelations = filter.GetFilterChildren();
			   ///QueryUtils.BreakeQuery1(predicate, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
			   predicate = filter.GetFilterComplete();
               if (!string.IsNullOrEmpty(predicate))
               {
				
					
                    return con.accProxyUsers.Count(System.Linq.Dynamic.DynamicExpression.ParseLambda<accProxyUser, bool>(predicate));
					
                }else
                    return con.accProxyUsers.Count();

			}

		}
         public int GetCount()
        {
            return GetCount(p => true);
        }
        #endregion
        
         public accProxyUser Update(accProxyUser entity, string paths)
        {
            return Update(entity, paths.Split(char.Parse(",")));
            
        }

        public accProxyUser Update(accProxyUser entity, string[] paths)
        {
            // Translate
            List<Expression<Func<accProxyUser, object>>> pathList = new List<Expression<Func<accProxyUser, object>>>();
            for (int i = 0; i <= paths.Length -1; i++)
            {
                var param = Expression.Parameter(typeof(accProxyUser), "p");
                var member = MemberExpression.PropertyOrField(param, paths[i]);

                Expression<Func<accProxyUser, object>> path = p => member;
                pathList.Add(path.Expand());
            }
			ObjectContext context = null;
			 return Update(entity, true,null, out context,  pathList.ToArray());
           //return Update(entity, pathList.ToArray());
        }

        public void Update(List<accProxyUser> entities, string paths)
        {
            foreach (var entity in entities )
            {
                Update(entity, paths);
            }
        }
		public accProxyUser Create(accProxyUser entity, ContextRequest contextRequest, string paths)
        {
          

            if (string.IsNullOrEmpty(paths))
                return Create(entity, contextRequest);

            return Create(entity, contextRequest, paths.Split(char.Parse(",")));
        }
        public accProxyUser Create(accProxyUser entity, string paths)
        {
			 if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return Create(entity, contextRequest, paths);

        }

        public  void Create(List<accProxyUser> entities, ContextRequest requestContext, string paths)
        {
            foreach (var entity in entities)
            {
                Create(entity,requestContext, paths);
            }
        }

        public void Create(List<accProxyUser> entities, string[] paths)
        {
            foreach (var entity in entities)
            {
                Create(entity, null, paths);
            }
        }
        
        public accProxyUser  Create(accProxyUser entity, ContextRequest contextRequest, string[] paths)
        {
            List<Expression<Func<accProxyUser, object>>> pathList = new List<Expression<Func<accProxyUser, object>>>();
            for (int i = 0; i < paths.Length - 1; i++)
            {
                var param = Expression.Parameter(typeof(accProxyUser), "p");
                var member = MemberExpression.PropertyOrField(param, paths[i]);

                Expression<Func<accProxyUser, object>> path = p => member;
                pathList.Add(path.Expand());
            }
            return Create(entity, contextRequest, pathList.ToArray());
        }
        public void Delete(List<accProxyUser.CompositeKey> entityKeys)
        {

            List<accProxyUser> items = new List<accProxyUser>();
            foreach (var itemKey in entityKeys)
            {
                items.Add(GetByKey(itemKey.GuidUser));
            }

            Delete(items);

        }
		
		
	}
		public partial class accBankImportsBR{
	 	
           
		 #region Partial methods

           partial void OnUpdating(object sender, BusinessRulesEventArgs<accBankImport> e);

            partial void OnUpdated(object sender, BusinessRulesEventArgs<accBankImport> e);

            partial void OnCreating(object sender, BusinessRulesEventArgs<accBankImport> e);
            partial void OnCreated(object sender, BusinessRulesEventArgs<accBankImport> e);

            partial void OnDeleting(object sender, BusinessRulesEventArgs<accBankImport> e);
            partial void OnDeleted(object sender, BusinessRulesEventArgs<accBankImport> e);

            partial void OnGetting(object sender, BusinessRulesEventArgs<accBankImport> e);
            partial void OnTaken(object sender, BusinessRulesEventArgs<accBankImport> e);
            partial void OnCounting(object sender, BusinessRulesEventArgs<accBankImport> e);
 
 
            #endregion
			
		private static accBankImportsBR singlenton =null;
				public static accBankImportsBR NewInstance(){
					return  new accBankImportsBR();
					
				}
		public static accBankImportsBR Instance{
			get{
				if (singlenton == null)
					singlenton = new accBankImportsBR();
				return singlenton;
			}
		}
		private bool preventSecurityRestrictions = false;
		 public bool PreventAuditTrail { get; set;  }
		#region Fields
        EFPocoContext context = null;
        #endregion
        #region Constructor
        public accBankImportsBR()
        {
            context = new EFPocoContext();
        }
		 public accBankImportsBR(bool preventSecurity)
            {
                this.preventSecurityRestrictions = preventSecurity;
				context = new EFPocoContext();
            }
        #endregion
		
		#region Get

 		public IQueryable<accBankImport> Get()
        {
            //using (EFContext con = new EFContext())
            //{
				EFContext con = new EFContext();
                var query = con.accBankImports.AsQueryable();
                con.ContextOptions.ProxyCreationEnabled = false;

                //query = ContextQueryBuilder<Nutrient>.ApplyContextQuery(query, contextRequest);

                return query;




            //}

        }
		
		public List<accBankImport> GetAll()
        {
            return this.GetBy(p => true);
        }
        public List<accBankImport> GetAll(string includes)
        {
            return this.GetBy(p => true, includes);
        }
        public accBankImport GetByKey(Guid guidBankImport)
        {
            return GetByKey(guidBankImport, true);
        }
        public accBankImport GetByKey(Guid guidBankImport, bool loadIncludes)
        {
            accBankImport item = null;
			var query = PredicateBuilder.True<accBankImport>();
                    
			string strWhere = @"GuidBankImport = Guid(""" + guidBankImport.ToString()+@""")";
            Expression<Func<accBankImport, bool>> predicate = null;
            if (!string.IsNullOrEmpty(strWhere))
                predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<accBankImport, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
			 ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();
            contextRequest.CustomQuery.FilterExpressionString = strWhere;

			//item = GetBy(predicate, loadIncludes, contextRequest).FirstOrDefault();
			item = GetBy(strWhere,loadIncludes,contextRequest).FirstOrDefault();
            return item;
        }
         public List<accBankImport> GetBy(string strWhere, bool loadRelations, ContextRequest contextRequest)
        {
            if (!loadRelations)
                return GetBy(strWhere, contextRequest);
            else
                return GetBy(strWhere, contextRequest, "");

        }
		  public List<accBankImport> GetBy(string strWhere, bool loadRelations)
        {
              if (!loadRelations)
                return GetBy(strWhere, new ContextRequest());
            else
                return GetBy(strWhere, new ContextRequest(), "");

        }
         public accBankImport GetByKey(Guid guidBankImport, params Expression<Func<accBankImport, object>>[] includes)
        {
            accBankImport item = null;
			string strWhere = @"GuidBankImport = Guid(""" + guidBankImport.ToString()+@""")";
          Expression<Func<accBankImport, bool>> predicate = null;
            if (!string.IsNullOrEmpty(strWhere))
                predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<accBankImport, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
        item = GetBy(predicate, includes).FirstOrDefault();
         ////   item = GetBy(strWhere,includes).FirstOrDefault();
			return item;

        }
        public accBankImport GetByKey(Guid guidBankImport, string includes)
        {
            accBankImport item = null;
			string strWhere = @"GuidBankImport = Guid(""" + guidBankImport.ToString()+@""")";
            
			
            item = GetBy(strWhere, includes).FirstOrDefault();
            return item;

        }
		 public accBankImport GetByKey(Guid guidBankImport, string usemode, string includes)
		{
			return GetByKey(guidBankImport, usemode, null, includes);

		 }
		 public accBankImport GetByKey(Guid guidBankImport, string usemode, ContextRequest context,  string includes)
        {
            accBankImport item = null;
			string strWhere = @"GuidBankImport = Guid(""" + guidBankImport.ToString()+@""")";
			if (context == null)
				context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
			context.CustomQuery.IsByKey = true;
            context.CustomQuery.FilterExpressionString = strWhere;
            context.UseMode = usemode;
            item = GetBy(strWhere,context , includes).FirstOrDefault();
            return item;

        }

        #region Dynamic Predicate
        public List<accBankImport> GetBy(Expression<Func<accBankImport, bool>> predicate, int? pageSize, int? page)
        {
            return this.GetBy(predicate, pageSize, page, null, null);
        }
        public List<accBankImport> GetBy(Expression<Func<accBankImport, bool>> predicate, ContextRequest contextRequest)
        {

            return GetBy(predicate, contextRequest,"");
        }
        
        public List<accBankImport> GetBy(Expression<Func<accBankImport, bool>> predicate, ContextRequest contextRequest, params Expression<Func<accBankImport, object>>[] includes)
        {
            StringBuilder sb = new StringBuilder();
           if (includes != null)
            {
                foreach (var path in includes)
                {

						if (sb.Length > 0) sb.Append(",");
						sb.Append(SFSdotNet.Framework.Linq.Utils.IncludeToString<accBankImport>(path));

               }
            }
            return GetBy(predicate, contextRequest, sb.ToString());
        }
        
        
        public List<accBankImport> GetBy(Expression<Func<accBankImport, bool>> predicate, string includes)
        {
			ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";

            return GetBy(predicate, context, includes);
        }

        public List<accBankImport> GetBy(Expression<Func<accBankImport, bool>> predicate, params Expression<Func<accBankImport, object>>[] includes)
        {
			if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }
			ContextRequest context = new ContextRequest();
			            context.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            context.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";
            return GetBy(predicate, context, includes);
        }

      
		public bool DisableCache { get; set; }
		 public List<accBankImport> GetBy(Expression<Func<accBankImport, bool>> predicate, ContextRequest contextRequest, string includes)
        {
            using (EFPocoContext con = new EFPocoContext())
            {
				if (DisableCache) 
                	con.CachingPolicy = EFCachingProvider.Caching.CachingPolicy.NoCaching;

				List<accBankImport> result = null;
                 e = null;
	
				OnGetting(con, e = new BusinessRulesEventArgs<accBankImport>() {  FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null) });

               // OnGetting(con,e = new BusinessRulesEventArgs<accBankImport>() { FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = contextRequest.CustomQuery.FilterExpressionString});
				   if (e != null) {
				    predicate = e.FilterExpression;
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				con.EnableChangeTrackingUsingProxies = false;
				con.WrappedContext.accBankImports.MergeOption = MergeOption.NoTracking;
                con.WrappedContext.ContextOptions.ProxyCreationEnabled = false;
                if (predicate == null) predicate = PredicateBuilder.True<accBankImport>();
 				string fkIncludes = "accBank,accFile";
                if(contextRequest!=null){
					if (contextRequest.CustomQuery != null)
					{
						if (contextRequest.CustomQuery.IncludeForeignKeyPaths != null) {
							if (contextRequest.CustomQuery.IncludeForeignKeyPaths.Value == false)
								fkIncludes = "";
						}
					}
				}
				if (!string.IsNullOrEmpty(includes))
					includes = includes + "," + fkIncludes;
				else
					includes = fkIncludes;
                
                var es = con.accBankImports;

                IQueryable<accBankImport> query = es.AsQueryable();

                                if (!string.IsNullOrEmpty(includes))
                {
                    foreach (string include in includes.Split(char.Parse(",")))
                    {
						if (!string.IsNullOrEmpty(include))
                            query = query.Include(include);
                    }
                }
                    predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
					 	if (!preventSecurityRestrictions)
						{
							if (contextRequest != null )
		                    	if (contextRequest.User !=null )
		                        	if (contextRequest.Company != null)
		                        		predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				query =query.Where(predicate);
                query = ContextQueryBuilder<accBankImport>.ApplyContextQuery(query, contextRequest);

                result = query.ToList<accBankImport>();
				  
                if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e =  new BusinessRulesEventArgs<accBankImport>() { Items= result, IncludingComputedLinq = false, ContextRequest = contextRequest,  FilterExpression = predicate } :  e);
  
			

                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
            }
        }
		public void UpdateAgile(accBankImport item, params string[] fields)
         {
             List<accBankImport> list = new List<accBankImport>();
             list.Add(item);
             this.UpdateBulk(list, fields);
         }
		public void UpdateBulk(List<accBankImport>  items, params string[] fields)
         {
             SFSdotNet.Framework.My.ContextRequest req = new SFSdotNet.Framework.My.ContextRequest();
             req.CustomQuery = new SFSdotNet.Framework.My.CustomQuery();
             foreach (var field in fields)
             {
                 req.CustomQuery.SpecificProperties.Add(field);
             }
             UpdateBulk(items, req);

         }
        public void UpdateBulk(List<accBankImport> items, ContextRequest req)
        {
            using (EFContext con = new EFContext())
            {



                foreach (var item in items)
                {
                    var setT = con.CreateObjectSet<accBankImport>("accBankImports");


                    var itemForAttach = new accBankImport();
			itemForAttach.GuidBankImport = item.GuidBankImport;
					
                    itemForAttach = SFSdotNet.Framework.Entities.ConvertEntity.SetProperties<accBankImport>(item, itemForAttach, null, req.CustomQuery.SpecificProperties.ToArray());
                    setT.Attach(itemForAttach);


                    foreach (var property in req.CustomQuery.SpecificProperties)
                    {
						
                        if (property != "GuidBankImport")
                            con.ObjectStateManager.GetObjectStateEntry(itemForAttach).SetModifiedProperty(property);

                    }

                }
                con.SaveChanges();


            }
        }
		/*public int Update(List<accBankImport> items, ContextRequest contextRequest)
            {
                int result = 0;
                using (EFContext con = new EFContext())
                {
                   
                

                    foreach (var item in items)
                    {
                        //secMessageToUser messageToUser = new secMessageToUser();
                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            item.GetType().GetProperty(prop).SetValue(item, item.GetType().GetProperty(prop).GetValue(item));
                        }
                        //messageToUser.GuidMessageToUser = (Guid)item.GetType().GetProperty("GuidMessageToUser").GetValue(item);

                        var setObject = con.CreateObjectSet<accBankImport>("accBankImports");
                        //messageToUser.Readed = DateTime.UtcNow;
                        setObject.Attach(item);
                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            con.ObjectStateManager.GetObjectStateEntry(item).SetModifiedProperty(prop);
                        }
                       
                    }
                    result = con.SaveChanges();

                    


                }
                return result;
            }
           */
        public List<accBankImport> GetBy(string predicateString, ContextRequest contextRequest, string includes)
        {
            using (EFContext con = new EFContext())
            {
				if (DisableCache) 
                	con.CachingPolicy = EFCachingProvider.Caching.CachingPolicy.NoCaching;

				Filter filter = new Filter();
                if (predicateString.Contains("|"))
                {
                    string ft = GetSpecificFilter(predicateString);
                    if (!string.IsNullOrEmpty(ft))
                        filter.SetFilterPart("ft", ft);
                   
                    contextRequest.FreeText = predicateString.Split(char.Parse("|"))[1];
                    var q1 = predicateString.Split(char.Parse("|"))[0];
                    if (!string.IsNullOrEmpty(q1))
                    {
                        filter.ProcessText(q1);
                    }
                }
                else {
                    filter.ProcessText(predicateString);
                }

				List<accBankImport> result = null;
                 e = null;
					OnGetting(con, e = new BusinessRulesEventArgs<accBankImport>() { Filter = filter, ContextRequest = contextRequest /*, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null)*/ });

                  //OnGetting(con,e = new BusinessRulesEventArgs<accBankImport>() {  ContextRequest = contextRequest, FilterExpressionString = predicateString });
			   	if (e != null) {
				    //predicateString = e.GetQueryString();
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				//	 else {
                //      predicateString = predicateString.Replace("*extraFreeText*", "").Replace("()","");
                //  }
				//con.EnableChangeTrackingUsingProxies = false;
				con.accBankImports.MergeOption = MergeOption.NoTracking;
                con.ContextOptions.ProxyCreationEnabled = false;
                //if (predicate == null) predicate = PredicateBuilder.True<accBankImport>();
 				string fkIncludes = "accBank,accFile";
                if(contextRequest!=null){
					if (contextRequest.CustomQuery != null)
					{
						if (contextRequest.CustomQuery.IncludeForeignKeyPaths != null) {
							if (contextRequest.CustomQuery.IncludeForeignKeyPaths.Value == false)
								fkIncludes = "";
						}
					}
				}else{
                    contextRequest = new ContextRequest();
                    contextRequest.CustomQuery = new CustomQuery();

                }
				if (!string.IsNullOrEmpty(includes))
					includes = includes + "," + fkIncludes;
				else
					includes = fkIncludes;
                
                var es = con.accBankImports;
				IQueryable<accBankImport> query = es.AsQueryable();
		
				// include relations FK
				if(string.IsNullOrEmpty(includes) ){
					includes ="";
				}
				bool includeaccBank = includes.Split(char.Parse(",")).Contains("accBank");

				bool includeaccFile = includes.Split(char.Parse(",")).Contains("accFile");

				StringBuilder sbQuerySystem = new StringBuilder();
                    //predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				

				//if (!string.IsNullOrEmpty(predicateString))
                //      sbQuerySystem.Append(" And ");
                //sbQuerySystem.Append(" (IsDeleted != true Or IsDeleted = null) ");
				 filter.SetFilterPart("de", "(IsDeleted != true OR IsDeleted = null)");


					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
	                    	if (contextRequest.User !=null )
	                        	if (contextRequest.Company != null ){
	                        		//if (sbQuerySystem.Length > 0)
	                        		//	    			sbQuerySystem.Append( " And ");	
									//sbQuerySystem.Append(@" (GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
									filter.SetFilterPart("co",@"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @"""))");
								}
						}	
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				//string predicateString = predicate.ToDynamicLinq<accBankImport>();
				//predicateString += sbQuerySystem.ToString();
				filter.CleanAndProcess("");

				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed(); //SFSdotNet.Framework.Linq.Utils.ExtractSpecificProperties("", ref predicateString );               
                string predicateWithManyRelations = filter.GetFilterChildren(); //SFSdotNet.Framework.Linq.Utils.CleanPartExpression(predicateString);

                //QueryUtils.BreakeQuery1(predicateString, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
                var _queryable = query.AsQueryable();
                if (!string.IsNullOrEmpty(predicateWithManyRelations))
                    _queryable = _queryable.Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams);
				if (contextRequest.CustomQuery.SpecificProperties.Count > 0)
                {

                    StringBuilder sbProps = new StringBuilder();
                    contextRequest.CustomQuery.SpecificProperties.Add("GuidBankImport");
                    
					foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                    {
						if(sbProps.Length > 0)
							sbProps.Append(",");
                        sbProps.Append(prop);
                    }
					    IQueryable  queryableSelective = null ;
					  
					  if (!string.IsNullOrEmpty(predicateWithManyRelations))
							queryableSelective = con.accBankImports.AsQueryable().Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams).Select(string.Format("new({0})", sbProps.ToString()));
					else
						queryableSelective = con.accBankImports.AsQueryable().Select(string.Format("new({0})", sbProps.ToString()));


                    //if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
					//	queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

                    QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
                    
					if (!string.IsNullOrEmpty(queryOps.OrderByAndSort))
                        queryableSelective = queryableSelective.OrderBy(queryOps.OrderByAndSort);
                    if (queryOps.Skip != null)
                    {
                        queryableSelective = queryableSelective.Skip(queryOps.Skip.Value);
                    }
                    if (queryOps.PageSize != null)
                    {
                        queryableSelective = queryableSelective.Take(queryOps.PageSize.Value);
                    }
                    //var results = queryableSelective.ToList();
                    result = new List<accBankImport>();
                    accBankImport itemDef = null;
                    foreach (var item in queryableSelective)
                    {
                        itemDef = new accBankImport();

                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            if (!prop.Contains("."))
                            {
                                itemDef.GetType().GetProperty(prop).SetValue(itemDef, item.GetType().GetProperty(prop).GetValue(item));
                            }
                            else {
                                throw new Exception("La seleccion de relaciones aún no esta soportada");
                            }

                        }

                        result.Add(itemDef);
                    }

                }
                else
                {
				var  queryable = _queryable.Select(                    
				p => 
                        new
                    {
					GuidBankImport = p.GuidBankImport
,FomDate = p.FomDate
,CreatedDate = p.CreatedDate
,UpdatedDate = p.UpdatedDate
,CreatedBy = p.CreatedBy
,UpdatedBy = p.UpdatedBy
,IsDeleted = p.IsDeleted
,GuidCompany = p.GuidCompany
,ToDate = p.ToDate
,Comments = p.Comments

,accBank = includeaccBank ? p.accBank:null
,accFile = includeaccFile ? p.accFile:null


	
                    }
                    
                    );
					
				
                 if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
                    queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

				QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
            	if (!string.IsNullOrEmpty(queryOps.OrderByAndSort))
					queryable = queryable.OrderBy(queryOps.OrderByAndSort);
               	if (queryOps.Skip != null)
                {
                    queryable = queryable.Skip(queryOps.Skip.Value);
                }
                if (queryOps.PageSize != null)
                {
                    queryable = queryable.Take (queryOps.PageSize.Value);
                }
                result = queryable.AsEnumerable().
                    Select(
                    p =>  new accBankImport()
                    {
					GuidBankImport = p.GuidBankImport
,FomDate = p.FomDate
,CreatedDate = p.CreatedDate
,UpdatedDate = p.UpdatedDate
,CreatedBy = p.CreatedBy
,UpdatedBy = p.UpdatedBy
,IsDeleted = p.IsDeleted
,GuidCompany = p.GuidCompany
,ToDate = p.ToDate
,Comments = p.Comments
,accBank = p.accBank
,accFile = p.accFile

                    }
                     ).ToList();
				}


			 if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e = new BusinessRulesEventArgs<accBankImport>() { Items= result, IncludingComputedLinq = true, ContextRequest = contextRequest, FilterExpressionString  = predicateString } :  e);
  
			
  
                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
            }
        }
		public List<accBankImport> GetBy(Expression<Func<accBankImport, bool>> predicate, bool loadRelations, ContextRequest contextRequest)
        {
			if(!loadRelations)
				return GetBy(predicate, contextRequest);
			else
				return GetBy(predicate, contextRequest, "accBankImportMovs");

        }

        public List<accBankImport> GetBy(Expression<Func<accBankImport, bool>> predicate, int? pageSize, int? page, string orderBy, SFSdotNet.Framework.Data.SortDirection? sortDirection)
        {
            return GetBy(predicate, new ContextRequest() { CustomQuery = new CustomQuery() { Page = page, PageSize = pageSize, OrderBy = orderBy, SortDirection = sortDirection } });
        }
        public List<accBankImport> GetBy(Expression<Func<accBankImport, bool>> predicate)
        {

			if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }
			ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();

			contextRequest.CurrentContext = SFSdotNet.Framework.My.Context.CurrentContext;
			            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

            contextRequest.CustomQuery.FilterExpressionString = null;
            return this.GetBy(predicate, contextRequest, "");
        }
        #endregion
        #region Dynamic String
		private string GetSpecificFilter(string filter) {
            string result = "";
		    //string linqFilter = String.Empty;
            string freeTextFilter = String.Empty;
            if (filter.Contains("|"))
            {
               // linqFilter = filter.Split(char.Parse("|"))[0];
                freeTextFilter = filter.Split(char.Parse("|"))[1];
            }
            //else {
            //    freeTextFilter = filter;
            //}
            //else {
            //    linqFilter = filter;
            //}
			// linqFilter = SFSdotNet.Framework.Linq.Utils.ReplaceCustomDateFilters(linqFilter);
            //string specificFilter = linqFilter;
            if (!string.IsNullOrEmpty(freeTextFilter))
            {
                System.Text.StringBuilder sbCont = new System.Text.StringBuilder();
                /*if (specificFilter.Length > 0)
                {
                    sbCont.Append(" AND ");
                    sbCont.Append(" ({0})");
                }
                else
                {
                    sbCont.Append("{0}");
                }*/
                //var words = freeTextFilter.Split(char.Parse(" "));
				var word = freeTextFilter;
                System.Text.StringBuilder sbSpec = new System.Text.StringBuilder();
                 int nWords = 1;
				/*foreach (var word in words)
                {
					if (word.Length > 0){
                    if (sbSpec.Length > 0) sbSpec.Append(" AND ");
					if (words.Length > 1) sbSpec.Append("("); */
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
											
					sbSpec.Append(string.Format(@"Comments.Contains(""{0}"")", word));

					
	
					
	
					
								sbSpec.Append(" OR ");
					
					//if (sbSpec.Length > 2)
					//	sbSpec.Append(" OR "); // test
					sbSpec.Append(string.Format(@"accBank.Name.Contains(""{0}"")", word)+" OR "+string.Format(@"accFile.FileType.Contains(""{0}"")", word));
								 //sbSpec.Append("*extraFreeText*");

                    /*if (words.Length > 1) sbSpec.Append(")");
					
					nWords++;

					}

                }*/
                //specificFilter = string.Format("{0}{1}", specificFilter, string.Format(sbCont.ToString(), sbSpec.ToString()));
                                 result = sbSpec.ToString();  
            }
			//result = specificFilter;
			
			return result;

		}
	
			public List<accBankImport> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  params object[] extraParams)
        {
			return GetBy(filter, pageSize, page, orderBy, orderDir,  null, extraParams);
		}
           public List<accBankImport> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir, string usemode, params object[] extraParams)
            { 
                return GetBy(filter, pageSize, page, orderBy, orderDir, usemode, null, extraParams);
            }


		public List<accBankImport> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  string usemode, ContextRequest context, params object[] extraParams)

        {

            // string freetext = null;
            //if (filter.Contains("|"))
            //{
            //    int parts = filter.Split(char.Parse("|")).Count();
            //    if (parts > 1)
            //    {

            //        freetext = filter.Split(char.Parse("|"))[1];
            //    }
            //}
		
            //string specificFilter = "";
            //if (!string.IsNullOrEmpty(filter))
            //  specificFilter=  GetSpecificFilter(filter);
            if (string.IsNullOrEmpty(orderBy))
            {
			                orderBy = "UpdatedDate";
            }
			//orderDir = "desc";
			SFSdotNet.Framework.Data.SortDirection direction = SFSdotNet.Framework.Data.SortDirection.Ascending;
            if (!string.IsNullOrEmpty(orderDir))
            {
                if (orderDir == "desc")
                    direction = SFSdotNet.Framework.Data.SortDirection.Descending;
            }
            if (context == null)
                context = new ContextRequest();
			else
                context.CustomQuery = new CustomQuery();
             //context.FreeText = freetext;
             context.UseMode = usemode;
             context.CustomQuery =new SFSdotNet.Framework.My.CustomQuery()
 
                {
                    ExtraParams = extraParams,

                    OrderBy = orderBy,
                    SortDirection = direction,
                    Page = page,
                    PageSize = pageSize
               };
            

            if (!preventSecurityRestrictions) {
			 if (context.CurrentContext == null)
                {
					if (SFSdotNet.Framework.My.Context.CurrentContext != null &&  SFSdotNet.Framework.My.Context.CurrentContext.Company != null && SFSdotNet.Framework.My.Context.CurrentContext.User != null)
					{
						context.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
						context.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

					}
					else {
						throw new Exception("The security rule require a specific user and company");
					}
				}
            }
            return GetBy(filter, context);
  
        }


        public List<accBankImport> GetBy(string strWhere, ContextRequest contextRequest)
        {
        	#region old code
				
				 //Expression<Func<tvsReservationTransport, bool>> predicate = null;
				string strWhereClean = strWhere.Replace("*extraFreeText*", "").Replace("()", "");
                //if (!string.IsNullOrEmpty(strWhereClean)){

                //    object[] extraParams = null;
                //    //if (contextRequest != null )
                //    //    if (contextRequest.CustomQuery != null )
                //    //        extraParams = contextRequest.CustomQuery.ExtraParams;
                //    //predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<tvsReservationTransport, bool>(strWhereClean, extraParams != null? extraParams.Cast<Guid>(): null);				
                //}
				 if (contextRequest == null)
                {
                    contextRequest = new ContextRequest();
                    if (contextRequest.CustomQuery == null)
                        contextRequest.CustomQuery = new CustomQuery();
                }
                  if (!preventSecurityRestrictions) {
					if (contextRequest.User == null || contextRequest.Company == null)
                      {
                     if (SFSdotNet.Framework.My.Context.CurrentContext.Company != null && SFSdotNet.Framework.My.Context.CurrentContext.User != null)
                     {
                         contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                         contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

                     }
                     else {
                         throw new Exception("The security rule require a specific User and Company ");
                     }
					 }
                 }
            contextRequest.CustomQuery.FilterExpressionString = strWhere;
				//return GetBy(predicate, contextRequest);  

			#endregion				
				
                    return GetBy(strWhere, contextRequest, "");  


        }
       public List<accBankImport> GetBy(string strWhere)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
			
            return GetBy(strWhere, context, null);
        }

        public List<accBankImport> GetBy(string strWhere, string includes)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
            return GetBy(strWhere, context, includes);
        }

        #endregion
        #endregion
		
		  #region SaveOrUpdate
        private accBankImport Save(accBankImport entity, bool saveChanges, EFPocoContext con)
        {
				ObjectContext context = null;
            return Update(entity, saveChanges,null, out context);

			
        }
		 public  accBankImport Create( accBankImport entity, params Expression<Func< accBankImport, object>>[] paths)
         {
             return Create(entity, null, paths);

         }
 		 public accBankImport Create(accBankImport entity)
        {
				ObjectContext context = null;
				    if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: Create");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

				return this.Create(entity, true, contextRequest, out context);


        }
        public accBankImport Create(accBankImport entity, ContextRequest contextRequest)
         {
             ObjectContext context = null;
             return this.Create(entity, true, contextRequest,out context);

         }
         public accBankImport Create(accBankImport entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext context)
        {
                    return Create(entity, saveChanges , contextRequest , out context, null);
        }
         public accBankImport Create(accBankImport entity, ContextRequest contextRequest, params Expression<Func<accBankImport,object>>[] paths)
        {
            ObjectContext context = null;
            if(paths != null)
				return Create(entity, true,contextRequest, out context, paths);
			else 
				return Create(entity, true,contextRequest, out context);
        }
        public accBankImport Create(accBankImport entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext context, params Expression<Func<accBankImport,object>>[] pocopaths)
        {
			using (EFPocoContext con = new EFPocoContext())
			{
				accBankImport itemResult = null;
#region Autos


			entity.CreatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.CreatedBy = contextRequest.User.GuidUser;
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.UpdatedBy = contextRequest.User.GuidUser;
	
			if (contextRequest != null)
				if(contextRequest.User != null)
					if (contextRequest.Company != null)
						entity.GuidCompany = contextRequest.Company.GuidCompany;
	

#endregion
                e = null;
                OnCreating(this,e = new BusinessRulesEventArgs<accBankImport>() { ContextRequest = contextRequest, Item=entity, PathExpressions = pocopaths, SaveChanges =saveChanges });
				   if (e != null) {
						if (e.Cancel)
						{
							context = null;
							return e.Item;

						}
					}

                    if (entity.GuidBankImport == Guid.Empty)
                   {
                       entity.GuidBankImport = Guid.NewGuid();

                   }



				accBankImportAdapter adapter = con.GetAdapterObject<accBankImportAdapter>(entity);;
				List<Expression<Func<accBankImportAdapter, object>>> paths = new List<Expression<Func<accBankImportAdapter,object>>>();
                
			    if (pocopaths != null && pocopaths.Length > 0)
                {
					// Translate
                    foreach (var pocopath in pocopaths)
                    {
                        var param = Expression.Parameter(typeof(accBankImportAdapter), "p");
                        var member = MemberExpression.PropertyOrField(param, ((System.Linq.Expressions.MemberExpression)(((System.Linq.Expressions.LambdaExpression)(pocopath)).Body)).Member.Name);
                        Expression<Func<accBankImportAdapter, object>> path  = null;
                        switch(member.Member.Name){
                        
							case "accBankImportMovs":
								path = p => p.accBankImportMovs.First().WithoutUpdate();

								//path = p => member;
							break;
							
							default:
								path = p => member;
							break;
                        }

                        
                       paths.Add(path.Expand());
                    }
                }
                object aux = null;
					paths.Add(p => p.accBank.WithoutUpdate());

					paths.Add(p => p.accFile.WithoutUpdate());

					//paths = pathBuilder.ToArray();

				if (adapter.accBank != null ){
					if(adapter.accBank.EntityKey == null) adapter.accBank.EntityKey = con.WrappedContext.CreateEntityKey("accBanks", adapter.accBank);
				}
				if (adapter.accFile != null ){
					if(adapter.accFile.EntityKey == null) adapter.accFile.EntityKey = con.WrappedContext.CreateEntityKey("accFiles", adapter.accFile);
				}
#region Childs accBankImportMovs 
				if (adapter.accBankImportMovs != null)
                {
                    foreach (var item in adapter.accBankImportMovs)
                    {
						
							if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accBankImportMovs", item);
							if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)){ 
								//paths.Add(p => p.accBankImportMovs.First().WithoutUpdate());
								
							if (item.accBankImport == null)
								item.accBankImport = adapter;

								item.EntityKey = null;
							}

                    }
					if (adapter.accBankImportMovs.Count > 0){
						paths.Add(p => p.accBankImportMovs.First().WithoutUpdate());
											
					}
                }
#endregion 




                //con.WrappedContext.AttachObjectGraph<accBankImportAdapter>(adapter, p=>p.accBank, p=>p.accFile, p=>p.accBankImportMovs);
                con.WrappedContext.AttachObjectGraph<accBankImportAdapter>(adapter, paths.ToArray());
              	if (saveChanges){
                    con.WrappedContext.SaveChanges(SaveOptions.AcceptAllChangesAfterSave);
					 
				}
                else
                    con.WrappedContext.SaveChanges(SaveOptions.None);
                if (!saveChanges)
                    context = con.WrappedContext;
                else
                    context = null;
				itemResult = adapter.PocoEntity;
                if (e != null)
                {
                    e.Item = itemResult;
                }
                OnCreated(this, e == null ? e = new BusinessRulesEventArgs<accBankImport>() { ContextRequest = contextRequest, Item = itemResult, PathExpressions = pocopaths, SaveChanges = saveChanges } : e);



                if (e != null)
                {
                    itemResult = e.Item;
                }
                              return itemResult;
            }
        }
        BusinessRulesEventArgs<accBankImport> e = null;
        public void Create(List<accBankImport> entities)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            Create(entities, contextRequest, null);
        }
        public void Create(List<accBankImport> entities, ContextRequest contextRequest)
        
        {
			ObjectContext context = null;
            	foreach (accBankImport entity in entities)
				{
					this.Create(entity, true, contextRequest, out context);
				}
        }
         public accBankImport Update(accBankImport entity)
        {
            if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return Update(entity, contextRequest);
        }
        public accBankImport Update(accBankImport entity, ContextRequest requestContext)
        {
			  ObjectContext context = null;
            return Update(entity, true,requestContext, out context);
         }
		public  accBankImport Update(accBankImport entity, params Expression<Func<accBankImport, object>>[] pocopaths)
        {
			  ObjectContext context = null;
              return Update(entity, true, null, out context, pocopaths);
         }
        public accBankImport Update(accBankImport entity, ContextRequest requestContext, bool saveChanges, out ObjectContext outcontext)
        {
			return Update(entity, saveChanges,requestContext, out outcontext, null);
		}
         public accBankImport Update(accBankImport entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext outcontext, params Expression<Func<accBankImport,object>>[] pocopaths)
        {
		 if ((System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null) && contextRequest == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Update");
            }
            if (contextRequest == null)
            {
                contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            }

			using (EFPocoContext con = new EFPocoContext())
			{
				accBankImport  itemResult = null;

	
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
			if(contextRequest.User != null)
				entity.UpdatedBy = contextRequest.User.GuidUser;

	    var oldentity = GetBy(p => p.GuidBankImport == entity.GuidBankImport, contextRequest).FirstOrDefault();
		if (oldentity != null) {
		
            entity.CreatedDate = oldentity.CreatedDate;
            entity.CreatedBy = oldentity.CreatedBy;
	
            entity.GuidCompany = oldentity.GuidCompany;
	
			

		}

				e = null;
                OnUpdating(this,e = new BusinessRulesEventArgs<accBankImport>() { ContextRequest = contextRequest, Item=entity, PathExpressions = pocopaths, SaveChanges =saveChanges });
				   if (e != null) {
						if (e.Cancel)
						{
							outcontext = null;
							return e.Item;

						}
					}

                accBankImportAdapter adapter = con.GetAdapterObject<accBankImportAdapter>(entity);
                adapter.EntityKey = con.WrappedContext.CreateEntityKey("accBankImports", adapter);
				    var es = con.accBankImports;
				List<Expression<Func<accBankImportAdapter, object>>> paths = new List<Expression<Func<accBankImportAdapter,object>>>();
                /* if (pocopaths != null)
                    if (pocopaths.Length == 0)
                        pocopaths = null;*/

			    if (pocopaths != null && pocopaths.Length > 0)
                {
					// Translate
                    foreach (var pocopath in pocopaths)
                    {
                        var param = Expression.Parameter(typeof(accBankImportAdapter), "p");
                        var member = MemberExpression.PropertyOrField(param, ((System.Linq.Expressions.MemberExpression)(((System.Linq.Expressions.LambdaExpression)(pocopath)).Body)).Member.Name);
                        Expression<Func<accBankImportAdapter, object>> path  = null;
                        switch(member.Member.Name){
                        
							case "accBankImportMovs":
								//path = p => member;
								path = p => p.accBankImportMovs.First().WithoutUpdate();
							break;
							
							default:
								path = p => member;
							break;
                        }

                        paths.Add(path.Expand());
 					}
                }
                else {
                  paths = new List<Expression<Func<accBankImportAdapter, object>>>();

					//List<Expression<Func<accBankImportAdapter,object>>> pathBuilder = new List<Expression<Func<accBankImportAdapter,object>>>();
					paths.Add(p => p.accBank.WithoutUpdate());

					paths.Add(p => p.accFile.WithoutUpdate());

		
					//paths = pathBuilder.ToArray();		
			}
			object aux = null;
				if (adapter.accBank != null ){
					if(adapter.accBank.EntityKey == null) adapter.accBank.EntityKey = con.WrappedContext.CreateEntityKey("accBanks", adapter.accBank);
				}

                
				if (adapter.accFile != null ){
					if(adapter.accFile.EntityKey == null) adapter.accFile.EntityKey = con.WrappedContext.CreateEntityKey("accFiles", adapter.accFile);
				}

                
				if (adapter.accBankImportMovs != null)
                {
                    foreach (var item in adapter.accBankImportMovs)
                    {


                        if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accBankImportMovs", item);
						if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)) item.EntityKey = null;
                        
                    }
					
                    if (adapter.accBankImportMovs.Count > 0)
                    {
                        paths.Add(p => p.accBankImportMovs.First().WithoutUpdate());

                    }

                }



                //con.AttachObjectGraph<accBankImport>(adapter, p=>p.accBank, p=>p.accFile, p=>p.accBankImportMovs);
                con.WrappedContext.AttachObjectGraph<accBankImportAdapter>(adapter, paths.ToArray());
				if (saveChanges){
                	con.WrappedContext.SaveChanges();
					 
					}
                if(!saveChanges)
					outcontext = con.WrappedContext;
				else
					outcontext = null;
				itemResult = adapter.PocoEntity;
				OnUpdated(this, e = new BusinessRulesEventArgs<accBankImport>() { ContextRequest = contextRequest, Item=itemResult, PathExpressions = pocopaths, SaveChanges =saveChanges });

              	return itemResult;

			  }
        }
        public accBankImport Save(accBankImport entity)
        {
			return Save(entity, true, null);
        }
        public int Save(List<accBankImport> entities)
        {
			using (EFPocoContext con = new EFPocoContext())
			{
			
            int n = 0;
            foreach (accBankImport item in entities)
            {
                try
                {
                    this.Save(item, false, con);
                    n++;
                }catch (Exception ex){
                    SFSdotNet.Framework.My.EventLog.Exception(ex);
                }
            }
            con.SaveChanges();
            return n;
            }
        }
        #endregion
        #region Delete
        public void Delete(accBankImport entity)
        {
				this.Delete(entity, null);
			
        }
		 public void Delete(accBankImport entity, ContextRequest contextRequest)
        {
				ObjectContext context = null;
				this.Delete(entity, true, out context, contextRequest);
			
        }

        
        public void Delete(accBankImport entity, bool saveChanges, out  ObjectContext context, ContextRequest contextRequest, BusinessRulesEventArgs<accBankImport> e = null)
        {
			using (EFPocoContext _con = new EFPocoContext())
			{
				int result = 0;
				
               	BusinessRulesEventArgs<accBankImport> _e = null;
               List<accBankImport> _items = new List<accBankImport>();
                _items.Add(entity);
                if (e == null || e.PreventPartialPropagate == false)
                {
                    OnDeleting(this, _e = (e == null ? new BusinessRulesEventArgs<accBankImport>() { ContextRequest = contextRequest, Item = entity, Items = _items, SaveChanges = saveChanges } : e));
                }
                if (_e != null)
                {
                    if (_e.Cancel)
						{
							context = null;
							return;

						}
					}


				accBankImportAdapter adapter = _con.GetAdapterObject<accBankImportAdapter>(entity);
                adapter.EntityKey = _con.WrappedContext.CreateEntityKey("accBankImports", adapter);
                
	            //adapter = _con.WrappedContext.AttachObjectGraph<accBankImportAdapter>(adapter);
				try{
					_con.WrappedContext.AttachTo("accBankImports", adapter);
                }catch{
					
				}
									//IsDeleted
					bool logicDelete = true;
					if (adapter.IsDeleted != null)
					{
						if (adapter.IsDeleted.Value)
							logicDelete = false;
					}
					if (logicDelete)
					{
											entity = GetBy(p => p.GuidBankImport == entity.GuidBankImport, contextRequest).FirstOrDefault();
						entity.IsDeleted = true;
						Update(entity, contextRequest);
					}
					else {
						_con.WrappedContext.DeleteObject(adapter);
					}
								
				if (!saveChanges)
                    context = _con.WrappedContext;
                else
                    context = null;
				 SaveOptions saveOption = SaveOptions.None;
                if (saveChanges)
                    saveOption = SaveOptions.AcceptAllChangesAfterSave;

				result = _con.WrappedContext.SaveChanges(saveOption);
				if (saveChanges){
					
					}
			if (e == null || e.PreventPartialPropagate == false)
                {

                    if (_e == null)
                        _e = new BusinessRulesEventArgs<accBankImport>() { ContextRequest = contextRequest, Item = entity, Items = _items };

                    OnDeleted(this, _e);
                }

				//return null;
			}            
        }
        public void Delete(List<accBankImport> entities,  ContextRequest contextRequest = null )
        {
				ObjectContext context = null;
			 BusinessRulesEventArgs<accBankImport> _e = null;

                OnDeleting(this, _e = new BusinessRulesEventArgs<accBankImport>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities });
                if (_e != null)
                {
                    if (_e.Cancel)
                    {
                        context = null;
                        return;

                    }
                }
                bool allSucced = true;
                BusinessRulesEventArgs<accBankImport> eToChilds = new BusinessRulesEventArgs<accBankImport>();
                if (_e != null)
                {
                    eToChilds = _e;
                }
                else
                {
                    eToChilds = new BusinessRulesEventArgs<accBankImport>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                }
				foreach (accBankImport item in entities)
				{
					try
                    {
                        this.Delete(item, true, out context, contextRequest, e: eToChilds);
                    }
                    catch (Exception ex)
                    {
                        SFSdotNet.Framework.My.EventLog.Error(ex);
                        allSucced = false;
                    }
				}
				if (_e == null)
                    _e = new BusinessRulesEventArgs<accBankImport>() { ContextRequest = contextRequest, CountResult = entities.Count, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                OnDeleted(this, _e);

			
        }
        #endregion
 
        #region GetCount
		 public int GetCount(Expression<Func<accBankImport, bool>> predicate)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

			return GetCount(predicate, contextRequest);
		}
        public int GetCount(Expression<Func<accBankImport, bool>> predicate, ContextRequest contextRequest)
        {


		
			using (EFPocoContext con = new EFPocoContext())
			{


				if (predicate == null) predicate = PredicateBuilder.True<accBankImport>();
           		predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted == null);
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    		if (contextRequest.User !=null )
                        		if (contextRequest.Company != null )
                        			predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				
				return con.accBankImports.Count(predicate);
			}

        }
		  public int GetCount(string predicate,  ContextRequest contextRequest)
         {
             return GetCount(predicate, null, contextRequest);
         }

         public int GetCount(string predicate)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return GetCount(predicate, contextRequest);
        }
		 public int GetCount(string predicate, string usemode){
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
				return GetCount( predicate,  usemode,  contextRequest);
		 }
        public int GetCount(string predicate, string usemode, ContextRequest contextRequest){
			  string freetext = null;
            Filter filter = new Filter();

              if (predicate.Contains("|"))
              {
                 
                  filter.SetFilterPart("ft", GetSpecificFilter(predicate));
                 
                  filter.ProcessText(predicate.Split(char.Parse("|"))[0]);
                  freetext = predicate.Split(char.Parse("|"))[1];
              }
              else {
                  filter.ProcessText(predicate);
              }
           
			e = null;
			contextRequest.FreeText = freetext;
			contextRequest.UseMode = usemode;
            OnCounting(this, e = new BusinessRulesEventArgs<accBankImport>() {  Filter =filter, ContextRequest = contextRequest });
            if (e != null)
            {
                if (e.Cancel)
                {
                    context = null;
                    return e.CountResult;

                }

            

            }
			 predicate = filter.GetFilterComplete();
			StringBuilder sbQuerySystem = new StringBuilder();
		
					
                    filter.SetFilterPart("de","(IsDeleted != true OR IsDeleted == null)");
			
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    	if (contextRequest.User !=null )
                        	if (contextRequest.Company != null ){
                        		

								filter.SetFilterPart("co", @"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
						
						
							}
							
							}
							if (preventSecurityRestrictions) preventSecurityRestrictions= false;
			using (EFContext con = new EFContext())
			{
				   
                 filter.CleanAndProcess("");
				//string predicateWithFKAndComputed = SFSdotNet.Framework.Linq.Utils.ExtractSpecificProperties("", ref predicate );               
				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed();
               string predicateWithManyRelations = filter.GetFilterChildren();
			   ///QueryUtils.BreakeQuery1(predicate, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
			   predicate = filter.GetFilterComplete();
               if (!string.IsNullOrEmpty(predicate))
               {
				
					
                    return con.accBankImports.Count(System.Linq.Dynamic.DynamicExpression.ParseLambda<accBankImport, bool>(predicate));
					
                }else
                    return con.accBankImports.Count();

			}

		}
         public int GetCount()
        {
            return GetCount(p => true);
        }
        #endregion
        
         public accBankImport Update(accBankImport entity, string paths)
        {
            return Update(entity, paths.Split(char.Parse(",")));
            
        }

        public accBankImport Update(accBankImport entity, string[] paths)
        {
            // Translate
            List<Expression<Func<accBankImport, object>>> pathList = new List<Expression<Func<accBankImport, object>>>();
            for (int i = 0; i <= paths.Length -1; i++)
            {
                var param = Expression.Parameter(typeof(accBankImport), "p");
                var member = MemberExpression.PropertyOrField(param, paths[i]);

                Expression<Func<accBankImport, object>> path = p => member;
                pathList.Add(path.Expand());
            }
			ObjectContext context = null;
			 return Update(entity, true,null, out context,  pathList.ToArray());
           //return Update(entity, pathList.ToArray());
        }

        public void Update(List<accBankImport> entities, string paths)
        {
            foreach (var entity in entities )
            {
                Update(entity, paths);
            }
        }
		public accBankImport Create(accBankImport entity, ContextRequest contextRequest, string paths)
        {
          

            if (string.IsNullOrEmpty(paths))
                return Create(entity, contextRequest);

            return Create(entity, contextRequest, paths.Split(char.Parse(",")));
        }
        public accBankImport Create(accBankImport entity, string paths)
        {
			 if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return Create(entity, contextRequest, paths);

        }

        public  void Create(List<accBankImport> entities, ContextRequest requestContext, string paths)
        {
            foreach (var entity in entities)
            {
                Create(entity,requestContext, paths);
            }
        }

        public void Create(List<accBankImport> entities, string[] paths)
        {
            foreach (var entity in entities)
            {
                Create(entity, null, paths);
            }
        }
        
        public accBankImport  Create(accBankImport entity, ContextRequest contextRequest, string[] paths)
        {
            List<Expression<Func<accBankImport, object>>> pathList = new List<Expression<Func<accBankImport, object>>>();
            for (int i = 0; i < paths.Length - 1; i++)
            {
                var param = Expression.Parameter(typeof(accBankImport), "p");
                var member = MemberExpression.PropertyOrField(param, paths[i]);

                Expression<Func<accBankImport, object>> path = p => member;
                pathList.Add(path.Expand());
            }
            return Create(entity, contextRequest, pathList.ToArray());
        }
        public void Delete(List<accBankImport.CompositeKey> entityKeys)
        {

            List<accBankImport> items = new List<accBankImport>();
            foreach (var itemKey in entityKeys)
            {
                items.Add(GetByKey(itemKey.GuidBankImport));
            }

            Delete(items);

        }
		
		
	}
		public partial class accBankImportMovsBR{
	 	
           
		 #region Partial methods

           partial void OnUpdating(object sender, BusinessRulesEventArgs<accBankImportMov> e);

            partial void OnUpdated(object sender, BusinessRulesEventArgs<accBankImportMov> e);

            partial void OnCreating(object sender, BusinessRulesEventArgs<accBankImportMov> e);
            partial void OnCreated(object sender, BusinessRulesEventArgs<accBankImportMov> e);

            partial void OnDeleting(object sender, BusinessRulesEventArgs<accBankImportMov> e);
            partial void OnDeleted(object sender, BusinessRulesEventArgs<accBankImportMov> e);

            partial void OnGetting(object sender, BusinessRulesEventArgs<accBankImportMov> e);
            partial void OnTaken(object sender, BusinessRulesEventArgs<accBankImportMov> e);
            partial void OnCounting(object sender, BusinessRulesEventArgs<accBankImportMov> e);
 
 
            #endregion
			
		private static accBankImportMovsBR singlenton =null;
				public static accBankImportMovsBR NewInstance(){
					return  new accBankImportMovsBR();
					
				}
		public static accBankImportMovsBR Instance{
			get{
				if (singlenton == null)
					singlenton = new accBankImportMovsBR();
				return singlenton;
			}
		}
		private bool preventSecurityRestrictions = false;
		 public bool PreventAuditTrail { get; set;  }
		#region Fields
        EFPocoContext context = null;
        #endregion
        #region Constructor
        public accBankImportMovsBR()
        {
            context = new EFPocoContext();
        }
		 public accBankImportMovsBR(bool preventSecurity)
            {
                this.preventSecurityRestrictions = preventSecurity;
				context = new EFPocoContext();
            }
        #endregion
		
		#region Get

 		public IQueryable<accBankImportMov> Get()
        {
            //using (EFContext con = new EFContext())
            //{
				EFContext con = new EFContext();
                var query = con.accBankImportMovs.AsQueryable();
                con.ContextOptions.ProxyCreationEnabled = false;

                //query = ContextQueryBuilder<Nutrient>.ApplyContextQuery(query, contextRequest);

                return query;




            //}

        }
		
		public List<accBankImportMov> GetAll()
        {
            return this.GetBy(p => true);
        }
        public List<accBankImportMov> GetAll(string includes)
        {
            return this.GetBy(p => true, includes);
        }
        public accBankImportMov GetByKey(Guid guidBankImportMov)
        {
            return GetByKey(guidBankImportMov, true);
        }
        public accBankImportMov GetByKey(Guid guidBankImportMov, bool loadIncludes)
        {
            accBankImportMov item = null;
			var query = PredicateBuilder.True<accBankImportMov>();
                    
			string strWhere = @"GuidBankImportMov = Guid(""" + guidBankImportMov.ToString()+@""")";
            Expression<Func<accBankImportMov, bool>> predicate = null;
            if (!string.IsNullOrEmpty(strWhere))
                predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<accBankImportMov, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
			 ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();
            contextRequest.CustomQuery.FilterExpressionString = strWhere;

			//item = GetBy(predicate, loadIncludes, contextRequest).FirstOrDefault();
			item = GetBy(strWhere,loadIncludes,contextRequest).FirstOrDefault();
            return item;
        }
         public List<accBankImportMov> GetBy(string strWhere, bool loadRelations, ContextRequest contextRequest)
        {
            if (!loadRelations)
                return GetBy(strWhere, contextRequest);
            else
                return GetBy(strWhere, contextRequest, "");

        }
		  public List<accBankImportMov> GetBy(string strWhere, bool loadRelations)
        {
              if (!loadRelations)
                return GetBy(strWhere, new ContextRequest());
            else
                return GetBy(strWhere, new ContextRequest(), "");

        }
         public accBankImportMov GetByKey(Guid guidBankImportMov, params Expression<Func<accBankImportMov, object>>[] includes)
        {
            accBankImportMov item = null;
			string strWhere = @"GuidBankImportMov = Guid(""" + guidBankImportMov.ToString()+@""")";
          Expression<Func<accBankImportMov, bool>> predicate = null;
            if (!string.IsNullOrEmpty(strWhere))
                predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<accBankImportMov, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
        item = GetBy(predicate, includes).FirstOrDefault();
         ////   item = GetBy(strWhere,includes).FirstOrDefault();
			return item;

        }
        public accBankImportMov GetByKey(Guid guidBankImportMov, string includes)
        {
            accBankImportMov item = null;
			string strWhere = @"GuidBankImportMov = Guid(""" + guidBankImportMov.ToString()+@""")";
            
			
            item = GetBy(strWhere, includes).FirstOrDefault();
            return item;

        }
		 public accBankImportMov GetByKey(Guid guidBankImportMov, string usemode, string includes)
		{
			return GetByKey(guidBankImportMov, usemode, null, includes);

		 }
		 public accBankImportMov GetByKey(Guid guidBankImportMov, string usemode, ContextRequest context,  string includes)
        {
            accBankImportMov item = null;
			string strWhere = @"GuidBankImportMov = Guid(""" + guidBankImportMov.ToString()+@""")";
			if (context == null)
				context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
			context.CustomQuery.IsByKey = true;
            context.CustomQuery.FilterExpressionString = strWhere;
            context.UseMode = usemode;
            item = GetBy(strWhere,context , includes).FirstOrDefault();
            return item;

        }

        #region Dynamic Predicate
        public List<accBankImportMov> GetBy(Expression<Func<accBankImportMov, bool>> predicate, int? pageSize, int? page)
        {
            return this.GetBy(predicate, pageSize, page, null, null);
        }
        public List<accBankImportMov> GetBy(Expression<Func<accBankImportMov, bool>> predicate, ContextRequest contextRequest)
        {

            return GetBy(predicate, contextRequest,"");
        }
        
        public List<accBankImportMov> GetBy(Expression<Func<accBankImportMov, bool>> predicate, ContextRequest contextRequest, params Expression<Func<accBankImportMov, object>>[] includes)
        {
            StringBuilder sb = new StringBuilder();
           if (includes != null)
            {
                foreach (var path in includes)
                {

						if (sb.Length > 0) sb.Append(",");
						sb.Append(SFSdotNet.Framework.Linq.Utils.IncludeToString<accBankImportMov>(path));

               }
            }
            return GetBy(predicate, contextRequest, sb.ToString());
        }
        
        
        public List<accBankImportMov> GetBy(Expression<Func<accBankImportMov, bool>> predicate, string includes)
        {
			ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";

            return GetBy(predicate, context, includes);
        }

        public List<accBankImportMov> GetBy(Expression<Func<accBankImportMov, bool>> predicate, params Expression<Func<accBankImportMov, object>>[] includes)
        {
			if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }
			ContextRequest context = new ContextRequest();
			            context.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            context.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";
            return GetBy(predicate, context, includes);
        }

      
		public bool DisableCache { get; set; }
		 public List<accBankImportMov> GetBy(Expression<Func<accBankImportMov, bool>> predicate, ContextRequest contextRequest, string includes)
        {
            using (EFPocoContext con = new EFPocoContext())
            {
				if (DisableCache) 
                	con.CachingPolicy = EFCachingProvider.Caching.CachingPolicy.NoCaching;

				List<accBankImportMov> result = null;
                 e = null;
	
				OnGetting(con, e = new BusinessRulesEventArgs<accBankImportMov>() {  FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null) });

               // OnGetting(con,e = new BusinessRulesEventArgs<accBankImportMov>() { FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = contextRequest.CustomQuery.FilterExpressionString});
				   if (e != null) {
				    predicate = e.FilterExpression;
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				con.EnableChangeTrackingUsingProxies = false;
				con.WrappedContext.accBankImportMovs.MergeOption = MergeOption.NoTracking;
                con.WrappedContext.ContextOptions.ProxyCreationEnabled = false;
                if (predicate == null) predicate = PredicateBuilder.True<accBankImportMov>();
 				string fkIncludes = "accBankImport";
                if(contextRequest!=null){
					if (contextRequest.CustomQuery != null)
					{
						if (contextRequest.CustomQuery.IncludeForeignKeyPaths != null) {
							if (contextRequest.CustomQuery.IncludeForeignKeyPaths.Value == false)
								fkIncludes = "";
						}
					}
				}
				if (!string.IsNullOrEmpty(includes))
					includes = includes + "," + fkIncludes;
				else
					includes = fkIncludes;
                
                var es = con.accBankImportMovs;

                IQueryable<accBankImportMov> query = es.AsQueryable();

                                if (!string.IsNullOrEmpty(includes))
                {
                    foreach (string include in includes.Split(char.Parse(",")))
                    {
						if (!string.IsNullOrEmpty(include))
                            query = query.Include(include);
                    }
                }
                    predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
					 	if (!preventSecurityRestrictions)
						{
							if (contextRequest != null )
		                    	if (contextRequest.User !=null )
		                        	if (contextRequest.Company != null)
		                        		predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				query =query.Where(predicate);
                query = ContextQueryBuilder<accBankImportMov>.ApplyContextQuery(query, contextRequest);

                result = query.ToList<accBankImportMov>();
				  
                if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e =  new BusinessRulesEventArgs<accBankImportMov>() { Items= result, IncludingComputedLinq = false, ContextRequest = contextRequest,  FilterExpression = predicate } :  e);
  
			

                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
            }
        }
		public void UpdateAgile(accBankImportMov item, params string[] fields)
         {
             List<accBankImportMov> list = new List<accBankImportMov>();
             list.Add(item);
             this.UpdateBulk(list, fields);
         }
		public void UpdateBulk(List<accBankImportMov>  items, params string[] fields)
         {
             SFSdotNet.Framework.My.ContextRequest req = new SFSdotNet.Framework.My.ContextRequest();
             req.CustomQuery = new SFSdotNet.Framework.My.CustomQuery();
             foreach (var field in fields)
             {
                 req.CustomQuery.SpecificProperties.Add(field);
             }
             UpdateBulk(items, req);

         }
        public void UpdateBulk(List<accBankImportMov> items, ContextRequest req)
        {
            using (EFContext con = new EFContext())
            {



                foreach (var item in items)
                {
                    var setT = con.CreateObjectSet<accBankImportMov>("accBankImportMovs");


                    var itemForAttach = new accBankImportMov();
			itemForAttach.GuidBankImportMov = item.GuidBankImportMov;
					
                    itemForAttach = SFSdotNet.Framework.Entities.ConvertEntity.SetProperties<accBankImportMov>(item, itemForAttach, null, req.CustomQuery.SpecificProperties.ToArray());
                    setT.Attach(itemForAttach);


                    foreach (var property in req.CustomQuery.SpecificProperties)
                    {
						
                        if (property != "GuidBankImportMov")
                            con.ObjectStateManager.GetObjectStateEntry(itemForAttach).SetModifiedProperty(property);

                    }

                }
                con.SaveChanges();


            }
        }
		/*public int Update(List<accBankImportMov> items, ContextRequest contextRequest)
            {
                int result = 0;
                using (EFContext con = new EFContext())
                {
                   
                

                    foreach (var item in items)
                    {
                        //secMessageToUser messageToUser = new secMessageToUser();
                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            item.GetType().GetProperty(prop).SetValue(item, item.GetType().GetProperty(prop).GetValue(item));
                        }
                        //messageToUser.GuidMessageToUser = (Guid)item.GetType().GetProperty("GuidMessageToUser").GetValue(item);

                        var setObject = con.CreateObjectSet<accBankImportMov>("accBankImportMovs");
                        //messageToUser.Readed = DateTime.UtcNow;
                        setObject.Attach(item);
                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            con.ObjectStateManager.GetObjectStateEntry(item).SetModifiedProperty(prop);
                        }
                       
                    }
                    result = con.SaveChanges();

                    


                }
                return result;
            }
           */
        public List<accBankImportMov> GetBy(string predicateString, ContextRequest contextRequest, string includes)
        {
            using (EFContext con = new EFContext())
            {
				if (DisableCache) 
                	con.CachingPolicy = EFCachingProvider.Caching.CachingPolicy.NoCaching;

				Filter filter = new Filter();
                if (predicateString.Contains("|"))
                {
                    string ft = GetSpecificFilter(predicateString);
                    if (!string.IsNullOrEmpty(ft))
                        filter.SetFilterPart("ft", ft);
                   
                    contextRequest.FreeText = predicateString.Split(char.Parse("|"))[1];
                    var q1 = predicateString.Split(char.Parse("|"))[0];
                    if (!string.IsNullOrEmpty(q1))
                    {
                        filter.ProcessText(q1);
                    }
                }
                else {
                    filter.ProcessText(predicateString);
                }

				List<accBankImportMov> result = null;
                 e = null;
					OnGetting(con, e = new BusinessRulesEventArgs<accBankImportMov>() { Filter = filter, ContextRequest = contextRequest /*, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null)*/ });

                  //OnGetting(con,e = new BusinessRulesEventArgs<accBankImportMov>() {  ContextRequest = contextRequest, FilterExpressionString = predicateString });
			   	if (e != null) {
				    //predicateString = e.GetQueryString();
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				//	 else {
                //      predicateString = predicateString.Replace("*extraFreeText*", "").Replace("()","");
                //  }
				//con.EnableChangeTrackingUsingProxies = false;
				con.accBankImportMovs.MergeOption = MergeOption.NoTracking;
                con.ContextOptions.ProxyCreationEnabled = false;
                //if (predicate == null) predicate = PredicateBuilder.True<accBankImportMov>();
 				string fkIncludes = "accBankImport";
                if(contextRequest!=null){
					if (contextRequest.CustomQuery != null)
					{
						if (contextRequest.CustomQuery.IncludeForeignKeyPaths != null) {
							if (contextRequest.CustomQuery.IncludeForeignKeyPaths.Value == false)
								fkIncludes = "";
						}
					}
				}else{
                    contextRequest = new ContextRequest();
                    contextRequest.CustomQuery = new CustomQuery();

                }
				if (!string.IsNullOrEmpty(includes))
					includes = includes + "," + fkIncludes;
				else
					includes = fkIncludes;
                
                var es = con.accBankImportMovs;
				IQueryable<accBankImportMov> query = es.AsQueryable();
		
				// include relations FK
				if(string.IsNullOrEmpty(includes) ){
					includes ="";
				}
				bool includeaccBankImport = includes.Split(char.Parse(",")).Contains("accBankImport");

				StringBuilder sbQuerySystem = new StringBuilder();
                    //predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				

				//if (!string.IsNullOrEmpty(predicateString))
                //      sbQuerySystem.Append(" And ");
                //sbQuerySystem.Append(" (IsDeleted != true Or IsDeleted = null) ");
				 filter.SetFilterPart("de", "(IsDeleted != true OR IsDeleted = null)");


					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
	                    	if (contextRequest.User !=null )
	                        	if (contextRequest.Company != null ){
	                        		//if (sbQuerySystem.Length > 0)
	                        		//	    			sbQuerySystem.Append( " And ");	
									//sbQuerySystem.Append(@" (GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
									filter.SetFilterPart("co",@"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @"""))");
								}
						}	
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				//string predicateString = predicate.ToDynamicLinq<accBankImportMov>();
				//predicateString += sbQuerySystem.ToString();
				filter.CleanAndProcess("");

				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed(); //SFSdotNet.Framework.Linq.Utils.ExtractSpecificProperties("", ref predicateString );               
                string predicateWithManyRelations = filter.GetFilterChildren(); //SFSdotNet.Framework.Linq.Utils.CleanPartExpression(predicateString);

                //QueryUtils.BreakeQuery1(predicateString, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
                var _queryable = query.AsQueryable();
                if (!string.IsNullOrEmpty(predicateWithManyRelations))
                    _queryable = _queryable.Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams);
				if (contextRequest.CustomQuery.SpecificProperties.Count > 0)
                {

                    StringBuilder sbProps = new StringBuilder();
                    contextRequest.CustomQuery.SpecificProperties.Add("GuidBankImportMov");
                    
					foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                    {
						if(sbProps.Length > 0)
							sbProps.Append(",");
                        sbProps.Append(prop);
                    }
					    IQueryable  queryableSelective = null ;
					  
					  if (!string.IsNullOrEmpty(predicateWithManyRelations))
							queryableSelective = con.accBankImportMovs.AsQueryable().Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams).Select(string.Format("new({0})", sbProps.ToString()));
					else
						queryableSelective = con.accBankImportMovs.AsQueryable().Select(string.Format("new({0})", sbProps.ToString()));


                    //if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
					//	queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

                    QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
                    
					if (!string.IsNullOrEmpty(queryOps.OrderByAndSort))
                        queryableSelective = queryableSelective.OrderBy(queryOps.OrderByAndSort);
                    if (queryOps.Skip != null)
                    {
                        queryableSelective = queryableSelective.Skip(queryOps.Skip.Value);
                    }
                    if (queryOps.PageSize != null)
                    {
                        queryableSelective = queryableSelective.Take(queryOps.PageSize.Value);
                    }
                    //var results = queryableSelective.ToList();
                    result = new List<accBankImportMov>();
                    accBankImportMov itemDef = null;
                    foreach (var item in queryableSelective)
                    {
                        itemDef = new accBankImportMov();

                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            if (!prop.Contains("."))
                            {
                                itemDef.GetType().GetProperty(prop).SetValue(itemDef, item.GetType().GetProperty(prop).GetValue(item));
                            }
                            else {
                                throw new Exception("La seleccion de relaciones aún no esta soportada");
                            }

                        }

                        result.Add(itemDef);
                    }

                }
                else
                {
				var  queryable = _queryable.Select(                    
				p => 
                        new
                    {
					GuidBankImportMov = p.GuidBankImportMov
,CreatedDate = p.CreatedDate
,UpdatedDate = p.UpdatedDate
,CreatedBy = p.CreatedBy
,UpdatedBy = p.UpdatedBy
,IsDeleted = p.IsDeleted
,GuidCompany = p.GuidCompany
,Col01 = p.Col01
,Col02 = p.Col02
,Col03 = p.Col03
,Col04 = p.Col04
,Col05 = p.Col05
,Col06 = p.Col06
,Col07 = p.Col07
,Col08 = p.Col08
,Col09 = p.Col09
,Col10 = p.Col10
,Col11 = p.Col11
,Col12 = p.Col12

,accBankImport = includeaccBankImport ? p.accBankImport:null


	
                    }
                    
                    );
					
				
                 if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
                    queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

				QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
            	if (!string.IsNullOrEmpty(queryOps.OrderByAndSort))
					queryable = queryable.OrderBy(queryOps.OrderByAndSort);
               	if (queryOps.Skip != null)
                {
                    queryable = queryable.Skip(queryOps.Skip.Value);
                }
                if (queryOps.PageSize != null)
                {
                    queryable = queryable.Take (queryOps.PageSize.Value);
                }
                result = queryable.AsEnumerable().
                    Select(
                    p =>  new accBankImportMov()
                    {
					GuidBankImportMov = p.GuidBankImportMov
,CreatedDate = p.CreatedDate
,UpdatedDate = p.UpdatedDate
,CreatedBy = p.CreatedBy
,UpdatedBy = p.UpdatedBy
,IsDeleted = p.IsDeleted
,GuidCompany = p.GuidCompany
,Col01 = p.Col01
,Col02 = p.Col02
,Col03 = p.Col03
,Col04 = p.Col04
,Col05 = p.Col05
,Col06 = p.Col06
,Col07 = p.Col07
,Col08 = p.Col08
,Col09 = p.Col09
,Col10 = p.Col10
,Col11 = p.Col11
,Col12 = p.Col12
,accBankImport = p.accBankImport

                    }
                     ).ToList();
				}


			 if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e = new BusinessRulesEventArgs<accBankImportMov>() { Items= result, IncludingComputedLinq = true, ContextRequest = contextRequest, FilterExpressionString  = predicateString } :  e);
  
			
  
                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
            }
        }
		public List<accBankImportMov> GetBy(Expression<Func<accBankImportMov, bool>> predicate, bool loadRelations, ContextRequest contextRequest)
        {
			if(!loadRelations)
				return GetBy(predicate, contextRequest);
			else
				return GetBy(predicate, contextRequest, "");

        }

        public List<accBankImportMov> GetBy(Expression<Func<accBankImportMov, bool>> predicate, int? pageSize, int? page, string orderBy, SFSdotNet.Framework.Data.SortDirection? sortDirection)
        {
            return GetBy(predicate, new ContextRequest() { CustomQuery = new CustomQuery() { Page = page, PageSize = pageSize, OrderBy = orderBy, SortDirection = sortDirection } });
        }
        public List<accBankImportMov> GetBy(Expression<Func<accBankImportMov, bool>> predicate)
        {

			if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }
			ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();

			contextRequest.CurrentContext = SFSdotNet.Framework.My.Context.CurrentContext;
			            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

            contextRequest.CustomQuery.FilterExpressionString = null;
            return this.GetBy(predicate, contextRequest, "");
        }
        #endregion
        #region Dynamic String
		private string GetSpecificFilter(string filter) {
            string result = "";
		    //string linqFilter = String.Empty;
            string freeTextFilter = String.Empty;
            if (filter.Contains("|"))
            {
               // linqFilter = filter.Split(char.Parse("|"))[0];
                freeTextFilter = filter.Split(char.Parse("|"))[1];
            }
            //else {
            //    freeTextFilter = filter;
            //}
            //else {
            //    linqFilter = filter;
            //}
			// linqFilter = SFSdotNet.Framework.Linq.Utils.ReplaceCustomDateFilters(linqFilter);
            //string specificFilter = linqFilter;
            if (!string.IsNullOrEmpty(freeTextFilter))
            {
                System.Text.StringBuilder sbCont = new System.Text.StringBuilder();
                /*if (specificFilter.Length > 0)
                {
                    sbCont.Append(" AND ");
                    sbCont.Append(" ({0})");
                }
                else
                {
                    sbCont.Append("{0}");
                }*/
                //var words = freeTextFilter.Split(char.Parse(" "));
				var word = freeTextFilter;
                System.Text.StringBuilder sbSpec = new System.Text.StringBuilder();
                 int nWords = 1;
				/*foreach (var word in words)
                {
					if (word.Length > 0){
                    if (sbSpec.Length > 0) sbSpec.Append(" AND ");
					if (words.Length > 1) sbSpec.Append("("); */
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
											
					sbSpec.Append(string.Format(@"Col01.Contains(""{0}"")", word));

					
											sbSpec.Append(" OR ");
										
					sbSpec.Append(string.Format(@"Col02.Contains(""{0}"")", word));

					
											sbSpec.Append(" OR ");
										
					sbSpec.Append(string.Format(@"Col03.Contains(""{0}"")", word));

					
											sbSpec.Append(" OR ");
										
					sbSpec.Append(string.Format(@"Col04.Contains(""{0}"")", word));

					
											sbSpec.Append(" OR ");
										
					sbSpec.Append(string.Format(@"Col05.Contains(""{0}"")", word));

					
											sbSpec.Append(" OR ");
										
					sbSpec.Append(string.Format(@"Col06.Contains(""{0}"")", word));

					
											sbSpec.Append(" OR ");
										
					sbSpec.Append(string.Format(@"Col07.Contains(""{0}"")", word));

					
											sbSpec.Append(" OR ");
										
					sbSpec.Append(string.Format(@"Col08.Contains(""{0}"")", word));

					
											sbSpec.Append(" OR ");
										
					sbSpec.Append(string.Format(@"Col09.Contains(""{0}"")", word));

					
											sbSpec.Append(" OR ");
										
					sbSpec.Append(string.Format(@"Col10.Contains(""{0}"")", word));

					
											sbSpec.Append(" OR ");
										
					sbSpec.Append(string.Format(@"Col11.Contains(""{0}"")", word));

					
											sbSpec.Append(" OR ");
										
					sbSpec.Append(string.Format(@"Col12.Contains(""{0}"")", word));

					
	
					
								sbSpec.Append(" OR ");
					
					//if (sbSpec.Length > 2)
					//	sbSpec.Append(" OR "); // test
					sbSpec.Append(string.Format(@"accBankImport.Comments.Contains(""{0}"")", word));
								 //sbSpec.Append("*extraFreeText*");

                    /*if (words.Length > 1) sbSpec.Append(")");
					
					nWords++;

					}

                }*/
                //specificFilter = string.Format("{0}{1}", specificFilter, string.Format(sbCont.ToString(), sbSpec.ToString()));
                                 result = sbSpec.ToString();  
            }
			//result = specificFilter;
			
			return result;

		}
	
			public List<accBankImportMov> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  params object[] extraParams)
        {
			return GetBy(filter, pageSize, page, orderBy, orderDir,  null, extraParams);
		}
           public List<accBankImportMov> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir, string usemode, params object[] extraParams)
            { 
                return GetBy(filter, pageSize, page, orderBy, orderDir, usemode, null, extraParams);
            }


		public List<accBankImportMov> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  string usemode, ContextRequest context, params object[] extraParams)

        {

            // string freetext = null;
            //if (filter.Contains("|"))
            //{
            //    int parts = filter.Split(char.Parse("|")).Count();
            //    if (parts > 1)
            //    {

            //        freetext = filter.Split(char.Parse("|"))[1];
            //    }
            //}
		
            //string specificFilter = "";
            //if (!string.IsNullOrEmpty(filter))
            //  specificFilter=  GetSpecificFilter(filter);
            if (string.IsNullOrEmpty(orderBy))
            {
			                orderBy = "UpdatedDate";
            }
			//orderDir = "desc";
			SFSdotNet.Framework.Data.SortDirection direction = SFSdotNet.Framework.Data.SortDirection.Ascending;
            if (!string.IsNullOrEmpty(orderDir))
            {
                if (orderDir == "desc")
                    direction = SFSdotNet.Framework.Data.SortDirection.Descending;
            }
            if (context == null)
                context = new ContextRequest();
			else
                context.CustomQuery = new CustomQuery();
             //context.FreeText = freetext;
             context.UseMode = usemode;
             context.CustomQuery =new SFSdotNet.Framework.My.CustomQuery()
 
                {
                    ExtraParams = extraParams,

                    OrderBy = orderBy,
                    SortDirection = direction,
                    Page = page,
                    PageSize = pageSize
               };
            

            if (!preventSecurityRestrictions) {
			 if (context.CurrentContext == null)
                {
					if (SFSdotNet.Framework.My.Context.CurrentContext != null &&  SFSdotNet.Framework.My.Context.CurrentContext.Company != null && SFSdotNet.Framework.My.Context.CurrentContext.User != null)
					{
						context.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
						context.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

					}
					else {
						throw new Exception("The security rule require a specific user and company");
					}
				}
            }
            return GetBy(filter, context);
  
        }


        public List<accBankImportMov> GetBy(string strWhere, ContextRequest contextRequest)
        {
        	#region old code
				
				 //Expression<Func<tvsReservationTransport, bool>> predicate = null;
				string strWhereClean = strWhere.Replace("*extraFreeText*", "").Replace("()", "");
                //if (!string.IsNullOrEmpty(strWhereClean)){

                //    object[] extraParams = null;
                //    //if (contextRequest != null )
                //    //    if (contextRequest.CustomQuery != null )
                //    //        extraParams = contextRequest.CustomQuery.ExtraParams;
                //    //predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<tvsReservationTransport, bool>(strWhereClean, extraParams != null? extraParams.Cast<Guid>(): null);				
                //}
				 if (contextRequest == null)
                {
                    contextRequest = new ContextRequest();
                    if (contextRequest.CustomQuery == null)
                        contextRequest.CustomQuery = new CustomQuery();
                }
                  if (!preventSecurityRestrictions) {
					if (contextRequest.User == null || contextRequest.Company == null)
                      {
                     if (SFSdotNet.Framework.My.Context.CurrentContext.Company != null && SFSdotNet.Framework.My.Context.CurrentContext.User != null)
                     {
                         contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                         contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

                     }
                     else {
                         throw new Exception("The security rule require a specific User and Company ");
                     }
					 }
                 }
            contextRequest.CustomQuery.FilterExpressionString = strWhere;
				//return GetBy(predicate, contextRequest);  

			#endregion				
				
                    return GetBy(strWhere, contextRequest, "");  


        }
       public List<accBankImportMov> GetBy(string strWhere)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
			
            return GetBy(strWhere, context, null);
        }

        public List<accBankImportMov> GetBy(string strWhere, string includes)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
            return GetBy(strWhere, context, includes);
        }

        #endregion
        #endregion
		
		  #region SaveOrUpdate
        private accBankImportMov Save(accBankImportMov entity, bool saveChanges, EFPocoContext con)
        {
				ObjectContext context = null;
            return Update(entity, saveChanges,null, out context);

			
        }
		 public  accBankImportMov Create( accBankImportMov entity, params Expression<Func< accBankImportMov, object>>[] paths)
         {
             return Create(entity, null, paths);

         }
 		 public accBankImportMov Create(accBankImportMov entity)
        {
				ObjectContext context = null;
				    if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: Create");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

				return this.Create(entity, true, contextRequest, out context);


        }
        public accBankImportMov Create(accBankImportMov entity, ContextRequest contextRequest)
         {
             ObjectContext context = null;
             return this.Create(entity, true, contextRequest,out context);

         }
         public accBankImportMov Create(accBankImportMov entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext context)
        {
                    return Create(entity, saveChanges , contextRequest , out context, null);
        }
         public accBankImportMov Create(accBankImportMov entity, ContextRequest contextRequest, params Expression<Func<accBankImportMov,object>>[] paths)
        {
            ObjectContext context = null;
            if(paths != null)
				return Create(entity, true,contextRequest, out context, paths);
			else 
				return Create(entity, true,contextRequest, out context);
        }
        public accBankImportMov Create(accBankImportMov entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext context, params Expression<Func<accBankImportMov,object>>[] pocopaths)
        {
			using (EFPocoContext con = new EFPocoContext())
			{
				accBankImportMov itemResult = null;
#region Autos


			entity.CreatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.CreatedBy = contextRequest.User.GuidUser;
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.UpdatedBy = contextRequest.User.GuidUser;
	
			if (contextRequest != null)
				if(contextRequest.User != null)
					if (contextRequest.Company != null)
						entity.GuidCompany = contextRequest.Company.GuidCompany;
	

#endregion
                e = null;
                OnCreating(this,e = new BusinessRulesEventArgs<accBankImportMov>() { ContextRequest = contextRequest, Item=entity, PathExpressions = pocopaths, SaveChanges =saveChanges });
				   if (e != null) {
						if (e.Cancel)
						{
							context = null;
							return e.Item;

						}
					}

                    if (entity.GuidBankImportMov == Guid.Empty)
                   {
                       entity.GuidBankImportMov = Guid.NewGuid();

                   }



				accBankImportMovAdapter adapter = con.GetAdapterObject<accBankImportMovAdapter>(entity);;
				List<Expression<Func<accBankImportMovAdapter, object>>> paths = new List<Expression<Func<accBankImportMovAdapter,object>>>();
                
			    if (pocopaths != null && pocopaths.Length > 0)
                {
					// Translate
                    foreach (var pocopath in pocopaths)
                    {
                        var param = Expression.Parameter(typeof(accBankImportMovAdapter), "p");
                        var member = MemberExpression.PropertyOrField(param, ((System.Linq.Expressions.MemberExpression)(((System.Linq.Expressions.LambdaExpression)(pocopath)).Body)).Member.Name);
                        Expression<Func<accBankImportMovAdapter, object>> path  = null;
                        switch(member.Member.Name){
							
							default:
								path = p => member;
							break;
                        }

                        
                       paths.Add(path.Expand());
                    }
                }
                object aux = null;
					paths.Add(p => p.accBankImport.WithoutUpdate());

					//paths = pathBuilder.ToArray();

				if (adapter.accBankImport != null ){
					if(adapter.accBankImport.EntityKey == null) adapter.accBankImport.EntityKey = con.WrappedContext.CreateEntityKey("accBankImports", adapter.accBankImport);
				}



                //con.WrappedContext.AttachObjectGraph<accBankImportMovAdapter>(adapter, p=>p.accBankImport);
                con.WrappedContext.AttachObjectGraph<accBankImportMovAdapter>(adapter, paths.ToArray());
              	if (saveChanges){
                    con.WrappedContext.SaveChanges(SaveOptions.AcceptAllChangesAfterSave);
					 
				}
                else
                    con.WrappedContext.SaveChanges(SaveOptions.None);
                if (!saveChanges)
                    context = con.WrappedContext;
                else
                    context = null;
				itemResult = adapter.PocoEntity;
                if (e != null)
                {
                    e.Item = itemResult;
                }
                OnCreated(this, e == null ? e = new BusinessRulesEventArgs<accBankImportMov>() { ContextRequest = contextRequest, Item = itemResult, PathExpressions = pocopaths, SaveChanges = saveChanges } : e);



                if (e != null)
                {
                    itemResult = e.Item;
                }
                              return itemResult;
            }
        }
        BusinessRulesEventArgs<accBankImportMov> e = null;
        public void Create(List<accBankImportMov> entities)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            Create(entities, contextRequest, null);
        }
        public void Create(List<accBankImportMov> entities, ContextRequest contextRequest)
        
        {
			ObjectContext context = null;
            	foreach (accBankImportMov entity in entities)
				{
					this.Create(entity, true, contextRequest, out context);
				}
        }
         public accBankImportMov Update(accBankImportMov entity)
        {
            if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return Update(entity, contextRequest);
        }
        public accBankImportMov Update(accBankImportMov entity, ContextRequest requestContext)
        {
			  ObjectContext context = null;
            return Update(entity, true,requestContext, out context);
         }
		public  accBankImportMov Update(accBankImportMov entity, params Expression<Func<accBankImportMov, object>>[] pocopaths)
        {
			  ObjectContext context = null;
              return Update(entity, true, null, out context, pocopaths);
         }
        public accBankImportMov Update(accBankImportMov entity, ContextRequest requestContext, bool saveChanges, out ObjectContext outcontext)
        {
			return Update(entity, saveChanges,requestContext, out outcontext, null);
		}
         public accBankImportMov Update(accBankImportMov entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext outcontext, params Expression<Func<accBankImportMov,object>>[] pocopaths)
        {
		 if ((System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null) && contextRequest == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Update");
            }
            if (contextRequest == null)
            {
                contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            }

			using (EFPocoContext con = new EFPocoContext())
			{
				accBankImportMov  itemResult = null;

	
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
			if(contextRequest.User != null)
				entity.UpdatedBy = contextRequest.User.GuidUser;

	    var oldentity = GetBy(p => p.GuidBankImportMov == entity.GuidBankImportMov, contextRequest).FirstOrDefault();
		if (oldentity != null) {
		
            entity.CreatedDate = oldentity.CreatedDate;
            entity.CreatedBy = oldentity.CreatedBy;
	
            entity.GuidCompany = oldentity.GuidCompany;
	
			

		}

				e = null;
                OnUpdating(this,e = new BusinessRulesEventArgs<accBankImportMov>() { ContextRequest = contextRequest, Item=entity, PathExpressions = pocopaths, SaveChanges =saveChanges });
				   if (e != null) {
						if (e.Cancel)
						{
							outcontext = null;
							return e.Item;

						}
					}

                accBankImportMovAdapter adapter = con.GetAdapterObject<accBankImportMovAdapter>(entity);
                adapter.EntityKey = con.WrappedContext.CreateEntityKey("accBankImportMovs", adapter);
				    var es = con.accBankImportMovs;
				List<Expression<Func<accBankImportMovAdapter, object>>> paths = new List<Expression<Func<accBankImportMovAdapter,object>>>();
                /* if (pocopaths != null)
                    if (pocopaths.Length == 0)
                        pocopaths = null;*/

			    if (pocopaths != null && pocopaths.Length > 0)
                {
					// Translate
                    foreach (var pocopath in pocopaths)
                    {
                        var param = Expression.Parameter(typeof(accBankImportMovAdapter), "p");
                        var member = MemberExpression.PropertyOrField(param, ((System.Linq.Expressions.MemberExpression)(((System.Linq.Expressions.LambdaExpression)(pocopath)).Body)).Member.Name);
                        Expression<Func<accBankImportMovAdapter, object>> path  = null;
                        switch(member.Member.Name){
							
							default:
								path = p => member;
							break;
                        }

                        paths.Add(path.Expand());
 					}
                }
                else {
                  paths = new List<Expression<Func<accBankImportMovAdapter, object>>>();

					//List<Expression<Func<accBankImportMovAdapter,object>>> pathBuilder = new List<Expression<Func<accBankImportMovAdapter,object>>>();
					paths.Add(p => p.accBankImport.WithoutUpdate());

		
					//paths = pathBuilder.ToArray();		
			}
			object aux = null;
				if (adapter.accBankImport != null ){
					if(adapter.accBankImport.EntityKey == null) adapter.accBankImport.EntityKey = con.WrappedContext.CreateEntityKey("accBankImports", adapter.accBankImport);
				}

                



                //con.AttachObjectGraph<accBankImportMov>(adapter, p=>p.accBankImport);
                con.WrappedContext.AttachObjectGraph<accBankImportMovAdapter>(adapter, paths.ToArray());
				if (saveChanges){
                	con.WrappedContext.SaveChanges();
					 
					}
                if(!saveChanges)
					outcontext = con.WrappedContext;
				else
					outcontext = null;
				itemResult = adapter.PocoEntity;
				OnUpdated(this, e = new BusinessRulesEventArgs<accBankImportMov>() { ContextRequest = contextRequest, Item=itemResult, PathExpressions = pocopaths, SaveChanges =saveChanges });

              	return itemResult;

			  }
        }
        public accBankImportMov Save(accBankImportMov entity)
        {
			return Save(entity, true, null);
        }
        public int Save(List<accBankImportMov> entities)
        {
			using (EFPocoContext con = new EFPocoContext())
			{
			
            int n = 0;
            foreach (accBankImportMov item in entities)
            {
                try
                {
                    this.Save(item, false, con);
                    n++;
                }catch (Exception ex){
                    SFSdotNet.Framework.My.EventLog.Exception(ex);
                }
            }
            con.SaveChanges();
            return n;
            }
        }
        #endregion
        #region Delete
        public void Delete(accBankImportMov entity)
        {
				this.Delete(entity, null);
			
        }
		 public void Delete(accBankImportMov entity, ContextRequest contextRequest)
        {
				ObjectContext context = null;
				this.Delete(entity, true, out context, contextRequest);
			
        }

        
        public void Delete(accBankImportMov entity, bool saveChanges, out  ObjectContext context, ContextRequest contextRequest, BusinessRulesEventArgs<accBankImportMov> e = null)
        {
			using (EFPocoContext _con = new EFPocoContext())
			{
				int result = 0;
				
               	BusinessRulesEventArgs<accBankImportMov> _e = null;
               List<accBankImportMov> _items = new List<accBankImportMov>();
                _items.Add(entity);
                if (e == null || e.PreventPartialPropagate == false)
                {
                    OnDeleting(this, _e = (e == null ? new BusinessRulesEventArgs<accBankImportMov>() { ContextRequest = contextRequest, Item = entity, Items = _items, SaveChanges = saveChanges } : e));
                }
                if (_e != null)
                {
                    if (_e.Cancel)
						{
							context = null;
							return;

						}
					}


				accBankImportMovAdapter adapter = _con.GetAdapterObject<accBankImportMovAdapter>(entity);
                adapter.EntityKey = _con.WrappedContext.CreateEntityKey("accBankImportMovs", adapter);
                
	            //adapter = _con.WrappedContext.AttachObjectGraph<accBankImportMovAdapter>(adapter);
				try{
					_con.WrappedContext.AttachTo("accBankImportMovs", adapter);
                }catch{
					
				}
									//IsDeleted
					bool logicDelete = true;
					if (adapter.IsDeleted != null)
					{
						if (adapter.IsDeleted.Value)
							logicDelete = false;
					}
					if (logicDelete)
					{
											entity = GetBy(p => p.GuidBankImportMov == entity.GuidBankImportMov, contextRequest).FirstOrDefault();
						entity.IsDeleted = true;
						Update(entity, contextRequest);
					}
					else {
						_con.WrappedContext.DeleteObject(adapter);
					}
								
				if (!saveChanges)
                    context = _con.WrappedContext;
                else
                    context = null;
				 SaveOptions saveOption = SaveOptions.None;
                if (saveChanges)
                    saveOption = SaveOptions.AcceptAllChangesAfterSave;

				result = _con.WrappedContext.SaveChanges(saveOption);
				if (saveChanges){
					
					}
			if (e == null || e.PreventPartialPropagate == false)
                {

                    if (_e == null)
                        _e = new BusinessRulesEventArgs<accBankImportMov>() { ContextRequest = contextRequest, Item = entity, Items = _items };

                    OnDeleted(this, _e);
                }

				//return null;
			}            
        }
        public void Delete(List<accBankImportMov> entities,  ContextRequest contextRequest = null )
        {
				ObjectContext context = null;
			 BusinessRulesEventArgs<accBankImportMov> _e = null;

                OnDeleting(this, _e = new BusinessRulesEventArgs<accBankImportMov>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities });
                if (_e != null)
                {
                    if (_e.Cancel)
                    {
                        context = null;
                        return;

                    }
                }
                bool allSucced = true;
                BusinessRulesEventArgs<accBankImportMov> eToChilds = new BusinessRulesEventArgs<accBankImportMov>();
                if (_e != null)
                {
                    eToChilds = _e;
                }
                else
                {
                    eToChilds = new BusinessRulesEventArgs<accBankImportMov>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                }
				foreach (accBankImportMov item in entities)
				{
					try
                    {
                        this.Delete(item, true, out context, contextRequest, e: eToChilds);
                    }
                    catch (Exception ex)
                    {
                        SFSdotNet.Framework.My.EventLog.Error(ex);
                        allSucced = false;
                    }
				}
				if (_e == null)
                    _e = new BusinessRulesEventArgs<accBankImportMov>() { ContextRequest = contextRequest, CountResult = entities.Count, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                OnDeleted(this, _e);

			
        }
        #endregion
 
        #region GetCount
		 public int GetCount(Expression<Func<accBankImportMov, bool>> predicate)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

			return GetCount(predicate, contextRequest);
		}
        public int GetCount(Expression<Func<accBankImportMov, bool>> predicate, ContextRequest contextRequest)
        {


		
			using (EFPocoContext con = new EFPocoContext())
			{


				if (predicate == null) predicate = PredicateBuilder.True<accBankImportMov>();
           		predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted == null);
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    		if (contextRequest.User !=null )
                        		if (contextRequest.Company != null )
                        			predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				
				return con.accBankImportMovs.Count(predicate);
			}

        }
		  public int GetCount(string predicate,  ContextRequest contextRequest)
         {
             return GetCount(predicate, null, contextRequest);
         }

         public int GetCount(string predicate)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return GetCount(predicate, contextRequest);
        }
		 public int GetCount(string predicate, string usemode){
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
				return GetCount( predicate,  usemode,  contextRequest);
		 }
        public int GetCount(string predicate, string usemode, ContextRequest contextRequest){
			  string freetext = null;
            Filter filter = new Filter();

              if (predicate.Contains("|"))
              {
                 
                  filter.SetFilterPart("ft", GetSpecificFilter(predicate));
                 
                  filter.ProcessText(predicate.Split(char.Parse("|"))[0]);
                  freetext = predicate.Split(char.Parse("|"))[1];
              }
              else {
                  filter.ProcessText(predicate);
              }
           
			e = null;
			contextRequest.FreeText = freetext;
			contextRequest.UseMode = usemode;
            OnCounting(this, e = new BusinessRulesEventArgs<accBankImportMov>() {  Filter =filter, ContextRequest = contextRequest });
            if (e != null)
            {
                if (e.Cancel)
                {
                    context = null;
                    return e.CountResult;

                }

            

            }
			 predicate = filter.GetFilterComplete();
			StringBuilder sbQuerySystem = new StringBuilder();
		
					
                    filter.SetFilterPart("de","(IsDeleted != true OR IsDeleted == null)");
			
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    	if (contextRequest.User !=null )
                        	if (contextRequest.Company != null ){
                        		

								filter.SetFilterPart("co", @"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
						
						
							}
							
							}
							if (preventSecurityRestrictions) preventSecurityRestrictions= false;
			using (EFContext con = new EFContext())
			{
				   
                 filter.CleanAndProcess("");
				//string predicateWithFKAndComputed = SFSdotNet.Framework.Linq.Utils.ExtractSpecificProperties("", ref predicate );               
				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed();
               string predicateWithManyRelations = filter.GetFilterChildren();
			   ///QueryUtils.BreakeQuery1(predicate, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
			   predicate = filter.GetFilterComplete();
               if (!string.IsNullOrEmpty(predicate))
               {
				
					
                    return con.accBankImportMovs.Count(System.Linq.Dynamic.DynamicExpression.ParseLambda<accBankImportMov, bool>(predicate));
					
                }else
                    return con.accBankImportMovs.Count();

			}

		}
         public int GetCount()
        {
            return GetCount(p => true);
        }
        #endregion
        
         public accBankImportMov Update(accBankImportMov entity, string paths)
        {
            return Update(entity, paths.Split(char.Parse(",")));
            
        }

        public accBankImportMov Update(accBankImportMov entity, string[] paths)
        {
            // Translate
            List<Expression<Func<accBankImportMov, object>>> pathList = new List<Expression<Func<accBankImportMov, object>>>();
            for (int i = 0; i <= paths.Length -1; i++)
            {
                var param = Expression.Parameter(typeof(accBankImportMov), "p");
                var member = MemberExpression.PropertyOrField(param, paths[i]);

                Expression<Func<accBankImportMov, object>> path = p => member;
                pathList.Add(path.Expand());
            }
			ObjectContext context = null;
			 return Update(entity, true,null, out context,  pathList.ToArray());
           //return Update(entity, pathList.ToArray());
        }

        public void Update(List<accBankImportMov> entities, string paths)
        {
            foreach (var entity in entities )
            {
                Update(entity, paths);
            }
        }
		public accBankImportMov Create(accBankImportMov entity, ContextRequest contextRequest, string paths)
        {
          

            if (string.IsNullOrEmpty(paths))
                return Create(entity, contextRequest);

            return Create(entity, contextRequest, paths.Split(char.Parse(",")));
        }
        public accBankImportMov Create(accBankImportMov entity, string paths)
        {
			 if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return Create(entity, contextRequest, paths);

        }

        public  void Create(List<accBankImportMov> entities, ContextRequest requestContext, string paths)
        {
            foreach (var entity in entities)
            {
                Create(entity,requestContext, paths);
            }
        }

        public void Create(List<accBankImportMov> entities, string[] paths)
        {
            foreach (var entity in entities)
            {
                Create(entity, null, paths);
            }
        }
        
        public accBankImportMov  Create(accBankImportMov entity, ContextRequest contextRequest, string[] paths)
        {
            List<Expression<Func<accBankImportMov, object>>> pathList = new List<Expression<Func<accBankImportMov, object>>>();
            for (int i = 0; i < paths.Length - 1; i++)
            {
                var param = Expression.Parameter(typeof(accBankImportMov), "p");
                var member = MemberExpression.PropertyOrField(param, paths[i]);

                Expression<Func<accBankImportMov, object>> path = p => member;
                pathList.Add(path.Expand());
            }
            return Create(entity, contextRequest, pathList.ToArray());
        }
        public void Delete(List<accBankImportMov.CompositeKey> entityKeys)
        {

            List<accBankImportMov> items = new List<accBankImportMov>();
            foreach (var itemKey in entityKeys)
            {
                items.Add(GetByKey(itemKey.GuidBankImportMov));
            }

            Delete(items);

        }
		
		
	}
		public partial class accCompanyAreasBR{
	 	
           
		 #region Partial methods

           partial void OnUpdating(object sender, BusinessRulesEventArgs<accCompanyArea> e);

            partial void OnUpdated(object sender, BusinessRulesEventArgs<accCompanyArea> e);

            partial void OnCreating(object sender, BusinessRulesEventArgs<accCompanyArea> e);
            partial void OnCreated(object sender, BusinessRulesEventArgs<accCompanyArea> e);

            partial void OnDeleting(object sender, BusinessRulesEventArgs<accCompanyArea> e);
            partial void OnDeleted(object sender, BusinessRulesEventArgs<accCompanyArea> e);

            partial void OnGetting(object sender, BusinessRulesEventArgs<accCompanyArea> e);
            partial void OnTaken(object sender, BusinessRulesEventArgs<accCompanyArea> e);
            partial void OnCounting(object sender, BusinessRulesEventArgs<accCompanyArea> e);
 
 
            #endregion
			
		private static accCompanyAreasBR singlenton =null;
				public static accCompanyAreasBR NewInstance(){
					return  new accCompanyAreasBR();
					
				}
		public static accCompanyAreasBR Instance{
			get{
				if (singlenton == null)
					singlenton = new accCompanyAreasBR();
				return singlenton;
			}
		}
		private bool preventSecurityRestrictions = false;
		 public bool PreventAuditTrail { get; set;  }
		#region Fields
        EFPocoContext context = null;
        #endregion
        #region Constructor
        public accCompanyAreasBR()
        {
            context = new EFPocoContext();
        }
		 public accCompanyAreasBR(bool preventSecurity)
            {
                this.preventSecurityRestrictions = preventSecurity;
				context = new EFPocoContext();
            }
        #endregion
		
		#region Get

 		public IQueryable<accCompanyArea> Get()
        {
            //using (EFContext con = new EFContext())
            //{
				EFContext con = new EFContext();
                var query = con.accCompanyAreas.AsQueryable();
                con.ContextOptions.ProxyCreationEnabled = false;

                //query = ContextQueryBuilder<Nutrient>.ApplyContextQuery(query, contextRequest);

                return query;




            //}

        }
		
		public List<accCompanyArea> GetAll()
        {
            return this.GetBy(p => true);
        }
        public List<accCompanyArea> GetAll(string includes)
        {
            return this.GetBy(p => true, includes);
        }
        public accCompanyArea GetByKey(Guid guidCompanyArea)
        {
            return GetByKey(guidCompanyArea, true);
        }
        public accCompanyArea GetByKey(Guid guidCompanyArea, bool loadIncludes)
        {
            accCompanyArea item = null;
			var query = PredicateBuilder.True<accCompanyArea>();
                    
			string strWhere = @"GuidCompanyArea = Guid(""" + guidCompanyArea.ToString()+@""")";
            Expression<Func<accCompanyArea, bool>> predicate = null;
            if (!string.IsNullOrEmpty(strWhere))
                predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<accCompanyArea, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
			 ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();
            contextRequest.CustomQuery.FilterExpressionString = strWhere;

			//item = GetBy(predicate, loadIncludes, contextRequest).FirstOrDefault();
			item = GetBy(strWhere,loadIncludes,contextRequest).FirstOrDefault();
            return item;
        }
         public List<accCompanyArea> GetBy(string strWhere, bool loadRelations, ContextRequest contextRequest)
        {
            if (!loadRelations)
                return GetBy(strWhere, contextRequest);
            else
                return GetBy(strWhere, contextRequest, "");

        }
		  public List<accCompanyArea> GetBy(string strWhere, bool loadRelations)
        {
              if (!loadRelations)
                return GetBy(strWhere, new ContextRequest());
            else
                return GetBy(strWhere, new ContextRequest(), "");

        }
         public accCompanyArea GetByKey(Guid guidCompanyArea, params Expression<Func<accCompanyArea, object>>[] includes)
        {
            accCompanyArea item = null;
			string strWhere = @"GuidCompanyArea = Guid(""" + guidCompanyArea.ToString()+@""")";
          Expression<Func<accCompanyArea, bool>> predicate = null;
            if (!string.IsNullOrEmpty(strWhere))
                predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<accCompanyArea, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
        item = GetBy(predicate, includes).FirstOrDefault();
         ////   item = GetBy(strWhere,includes).FirstOrDefault();
			return item;

        }
        public accCompanyArea GetByKey(Guid guidCompanyArea, string includes)
        {
            accCompanyArea item = null;
			string strWhere = @"GuidCompanyArea = Guid(""" + guidCompanyArea.ToString()+@""")";
            
			
            item = GetBy(strWhere, includes).FirstOrDefault();
            return item;

        }
		 public accCompanyArea GetByKey(Guid guidCompanyArea, string usemode, string includes)
		{
			return GetByKey(guidCompanyArea, usemode, null, includes);

		 }
		 public accCompanyArea GetByKey(Guid guidCompanyArea, string usemode, ContextRequest context,  string includes)
        {
            accCompanyArea item = null;
			string strWhere = @"GuidCompanyArea = Guid(""" + guidCompanyArea.ToString()+@""")";
			if (context == null)
				context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
			context.CustomQuery.IsByKey = true;
            context.CustomQuery.FilterExpressionString = strWhere;
            context.UseMode = usemode;
            item = GetBy(strWhere,context , includes).FirstOrDefault();
            return item;

        }

        #region Dynamic Predicate
        public List<accCompanyArea> GetBy(Expression<Func<accCompanyArea, bool>> predicate, int? pageSize, int? page)
        {
            return this.GetBy(predicate, pageSize, page, null, null);
        }
        public List<accCompanyArea> GetBy(Expression<Func<accCompanyArea, bool>> predicate, ContextRequest contextRequest)
        {

            return GetBy(predicate, contextRequest,"");
        }
        
        public List<accCompanyArea> GetBy(Expression<Func<accCompanyArea, bool>> predicate, ContextRequest contextRequest, params Expression<Func<accCompanyArea, object>>[] includes)
        {
            StringBuilder sb = new StringBuilder();
           if (includes != null)
            {
                foreach (var path in includes)
                {

						if (sb.Length > 0) sb.Append(",");
						sb.Append(SFSdotNet.Framework.Linq.Utils.IncludeToString<accCompanyArea>(path));

               }
            }
            return GetBy(predicate, contextRequest, sb.ToString());
        }
        
        
        public List<accCompanyArea> GetBy(Expression<Func<accCompanyArea, bool>> predicate, string includes)
        {
			ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";

            return GetBy(predicate, context, includes);
        }

        public List<accCompanyArea> GetBy(Expression<Func<accCompanyArea, bool>> predicate, params Expression<Func<accCompanyArea, object>>[] includes)
        {
			if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }
			ContextRequest context = new ContextRequest();
			            context.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            context.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";
            return GetBy(predicate, context, includes);
        }

      
		public bool DisableCache { get; set; }
		 public List<accCompanyArea> GetBy(Expression<Func<accCompanyArea, bool>> predicate, ContextRequest contextRequest, string includes)
        {
            using (EFPocoContext con = new EFPocoContext())
            {
				if (DisableCache) 
                	con.CachingPolicy = EFCachingProvider.Caching.CachingPolicy.NoCaching;

				List<accCompanyArea> result = null;
                 e = null;
	
				OnGetting(con, e = new BusinessRulesEventArgs<accCompanyArea>() {  FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null) });

               // OnGetting(con,e = new BusinessRulesEventArgs<accCompanyArea>() { FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = contextRequest.CustomQuery.FilterExpressionString});
				   if (e != null) {
				    predicate = e.FilterExpression;
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				con.EnableChangeTrackingUsingProxies = false;
				con.WrappedContext.accCompanyAreas.MergeOption = MergeOption.NoTracking;
                con.WrappedContext.ContextOptions.ProxyCreationEnabled = false;
                if (predicate == null) predicate = PredicateBuilder.True<accCompanyArea>();
 				string fkIncludes = "accCompanyArea1";
                if(contextRequest!=null){
					if (contextRequest.CustomQuery != null)
					{
						if (contextRequest.CustomQuery.IncludeForeignKeyPaths != null) {
							if (contextRequest.CustomQuery.IncludeForeignKeyPaths.Value == false)
								fkIncludes = "";
						}
					}
				}
				if (!string.IsNullOrEmpty(includes))
					includes = includes + "," + fkIncludes;
				else
					includes = fkIncludes;
                
                var es = con.accCompanyAreas;

                IQueryable<accCompanyArea> query = es.AsQueryable();

                                if (!string.IsNullOrEmpty(includes))
                {
                    foreach (string include in includes.Split(char.Parse(",")))
                    {
						if (!string.IsNullOrEmpty(include))
                            query = query.Include(include);
                    }
                }
                    predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
					 	if (!preventSecurityRestrictions)
						{
							if (contextRequest != null )
		                    	if (contextRequest.User !=null )
		                        	if (contextRequest.Company != null)
		                        		predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				query =query.Where(predicate);
                query = ContextQueryBuilder<accCompanyArea>.ApplyContextQuery(query, contextRequest);

                result = query.ToList<accCompanyArea>();
				  
                if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e =  new BusinessRulesEventArgs<accCompanyArea>() { Items= result, IncludingComputedLinq = false, ContextRequest = contextRequest,  FilterExpression = predicate } :  e);
  
			

                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
            }
        }
		public void UpdateAgile(accCompanyArea item, params string[] fields)
         {
             List<accCompanyArea> list = new List<accCompanyArea>();
             list.Add(item);
             this.UpdateBulk(list, fields);
         }
		public void UpdateBulk(List<accCompanyArea>  items, params string[] fields)
         {
             SFSdotNet.Framework.My.ContextRequest req = new SFSdotNet.Framework.My.ContextRequest();
             req.CustomQuery = new SFSdotNet.Framework.My.CustomQuery();
             foreach (var field in fields)
             {
                 req.CustomQuery.SpecificProperties.Add(field);
             }
             UpdateBulk(items, req);

         }
        public void UpdateBulk(List<accCompanyArea> items, ContextRequest req)
        {
            using (EFContext con = new EFContext())
            {



                foreach (var item in items)
                {
                    var setT = con.CreateObjectSet<accCompanyArea>("accCompanyAreas");


                    var itemForAttach = new accCompanyArea();
			itemForAttach.GuidCompanyArea = item.GuidCompanyArea;
					
                    itemForAttach = SFSdotNet.Framework.Entities.ConvertEntity.SetProperties<accCompanyArea>(item, itemForAttach, null, req.CustomQuery.SpecificProperties.ToArray());
                    setT.Attach(itemForAttach);


                    foreach (var property in req.CustomQuery.SpecificProperties)
                    {
						
                        if (property != "GuidCompanyArea")
                            con.ObjectStateManager.GetObjectStateEntry(itemForAttach).SetModifiedProperty(property);

                    }

                }
                con.SaveChanges();


            }
        }
		/*public int Update(List<accCompanyArea> items, ContextRequest contextRequest)
            {
                int result = 0;
                using (EFContext con = new EFContext())
                {
                   
                

                    foreach (var item in items)
                    {
                        //secMessageToUser messageToUser = new secMessageToUser();
                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            item.GetType().GetProperty(prop).SetValue(item, item.GetType().GetProperty(prop).GetValue(item));
                        }
                        //messageToUser.GuidMessageToUser = (Guid)item.GetType().GetProperty("GuidMessageToUser").GetValue(item);

                        var setObject = con.CreateObjectSet<accCompanyArea>("accCompanyAreas");
                        //messageToUser.Readed = DateTime.UtcNow;
                        setObject.Attach(item);
                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            con.ObjectStateManager.GetObjectStateEntry(item).SetModifiedProperty(prop);
                        }
                       
                    }
                    result = con.SaveChanges();

                    


                }
                return result;
            }
           */
        public List<accCompanyArea> GetBy(string predicateString, ContextRequest contextRequest, string includes)
        {
            using (EFContext con = new EFContext())
            {
				if (DisableCache) 
                	con.CachingPolicy = EFCachingProvider.Caching.CachingPolicy.NoCaching;

				Filter filter = new Filter();
                if (predicateString.Contains("|"))
                {
                    string ft = GetSpecificFilter(predicateString);
                    if (!string.IsNullOrEmpty(ft))
                        filter.SetFilterPart("ft", ft);
                   
                    contextRequest.FreeText = predicateString.Split(char.Parse("|"))[1];
                    var q1 = predicateString.Split(char.Parse("|"))[0];
                    if (!string.IsNullOrEmpty(q1))
                    {
                        filter.ProcessText(q1);
                    }
                }
                else {
                    filter.ProcessText(predicateString);
                }

				List<accCompanyArea> result = null;
                 e = null;
					OnGetting(con, e = new BusinessRulesEventArgs<accCompanyArea>() { Filter = filter, ContextRequest = contextRequest /*, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null)*/ });

                  //OnGetting(con,e = new BusinessRulesEventArgs<accCompanyArea>() {  ContextRequest = contextRequest, FilterExpressionString = predicateString });
			   	if (e != null) {
				    //predicateString = e.GetQueryString();
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				//	 else {
                //      predicateString = predicateString.Replace("*extraFreeText*", "").Replace("()","");
                //  }
				//con.EnableChangeTrackingUsingProxies = false;
				con.accCompanyAreas.MergeOption = MergeOption.NoTracking;
                con.ContextOptions.ProxyCreationEnabled = false;
                //if (predicate == null) predicate = PredicateBuilder.True<accCompanyArea>();
 				string fkIncludes = "accCompanyArea1";
                if(contextRequest!=null){
					if (contextRequest.CustomQuery != null)
					{
						if (contextRequest.CustomQuery.IncludeForeignKeyPaths != null) {
							if (contextRequest.CustomQuery.IncludeForeignKeyPaths.Value == false)
								fkIncludes = "";
						}
					}
				}else{
                    contextRequest = new ContextRequest();
                    contextRequest.CustomQuery = new CustomQuery();

                }
				if (!string.IsNullOrEmpty(includes))
					includes = includes + "," + fkIncludes;
				else
					includes = fkIncludes;
                
                var es = con.accCompanyAreas;
				IQueryable<accCompanyArea> query = es.AsQueryable();
		
				// include relations FK
				if(string.IsNullOrEmpty(includes) ){
					includes ="";
				}
				bool includeaccCompanyArea1 = includes.Split(char.Parse(",")).Contains("accCompanyArea1");

				StringBuilder sbQuerySystem = new StringBuilder();
                    //predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				

				//if (!string.IsNullOrEmpty(predicateString))
                //      sbQuerySystem.Append(" And ");
                //sbQuerySystem.Append(" (IsDeleted != true Or IsDeleted = null) ");
				 filter.SetFilterPart("de", "(IsDeleted != true OR IsDeleted = null)");


					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
	                    	if (contextRequest.User !=null )
	                        	if (contextRequest.Company != null ){
	                        		//if (sbQuerySystem.Length > 0)
	                        		//	    			sbQuerySystem.Append( " And ");	
									//sbQuerySystem.Append(@" (GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
									filter.SetFilterPart("co",@"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @"""))");
								}
						}	
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				//string predicateString = predicate.ToDynamicLinq<accCompanyArea>();
				//predicateString += sbQuerySystem.ToString();
				filter.CleanAndProcess("");

				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed(); //SFSdotNet.Framework.Linq.Utils.ExtractSpecificProperties("", ref predicateString );               
                string predicateWithManyRelations = filter.GetFilterChildren(); //SFSdotNet.Framework.Linq.Utils.CleanPartExpression(predicateString);

                //QueryUtils.BreakeQuery1(predicateString, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
                var _queryable = query.AsQueryable();
                if (!string.IsNullOrEmpty(predicateWithManyRelations))
                    _queryable = _queryable.Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams);
				if (contextRequest.CustomQuery.SpecificProperties.Count > 0)
                {

                    StringBuilder sbProps = new StringBuilder();
                    contextRequest.CustomQuery.SpecificProperties.Add("GuidCompanyArea");
                    
					foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                    {
						if(sbProps.Length > 0)
							sbProps.Append(",");
                        sbProps.Append(prop);
                    }
					    IQueryable  queryableSelective = null ;
					  
					  if (!string.IsNullOrEmpty(predicateWithManyRelations))
							queryableSelective = con.accCompanyAreas.AsQueryable().Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams).Select(string.Format("new({0})", sbProps.ToString()));
					else
						queryableSelective = con.accCompanyAreas.AsQueryable().Select(string.Format("new({0})", sbProps.ToString()));


                    //if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
					//	queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

                    QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
                    
					if (!string.IsNullOrEmpty(queryOps.OrderByAndSort))
                        queryableSelective = queryableSelective.OrderBy(queryOps.OrderByAndSort);
                    if (queryOps.Skip != null)
                    {
                        queryableSelective = queryableSelective.Skip(queryOps.Skip.Value);
                    }
                    if (queryOps.PageSize != null)
                    {
                        queryableSelective = queryableSelective.Take(queryOps.PageSize.Value);
                    }
                    //var results = queryableSelective.ToList();
                    result = new List<accCompanyArea>();
                    accCompanyArea itemDef = null;
                    foreach (var item in queryableSelective)
                    {
                        itemDef = new accCompanyArea();

                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            if (!prop.Contains("."))
                            {
                                itemDef.GetType().GetProperty(prop).SetValue(itemDef, item.GetType().GetProperty(prop).GetValue(item));
                            }
                            else {
                                throw new Exception("La seleccion de relaciones aún no esta soportada");
                            }

                        }

                        result.Add(itemDef);
                    }

                }
                else
                {
				var  queryable = _queryable.Select(                    
				p => 
                        new
                    {
					GuidCompanyArea = p.GuidCompanyArea
,CreatedDate = p.CreatedDate
,UpdatedDate = p.UpdatedDate
,CreatedBy = p.CreatedBy
,UpdatedBy = p.UpdatedBy
,IsDeleted = p.IsDeleted
,GuidCompany = p.GuidCompany
,Title = p.Title

,accCompanyArea1 = includeaccCompanyArea1 ? p.accCompanyArea1:null


	
                    }
                    
                    );
					
				
                 if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
                    queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

				QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
            	if (!string.IsNullOrEmpty(queryOps.OrderByAndSort))
					queryable = queryable.OrderBy(queryOps.OrderByAndSort);
               	if (queryOps.Skip != null)
                {
                    queryable = queryable.Skip(queryOps.Skip.Value);
                }
                if (queryOps.PageSize != null)
                {
                    queryable = queryable.Take (queryOps.PageSize.Value);
                }
                result = queryable.AsEnumerable().
                    Select(
                    p =>  new accCompanyArea()
                    {
					GuidCompanyArea = p.GuidCompanyArea
,CreatedDate = p.CreatedDate
,UpdatedDate = p.UpdatedDate
,CreatedBy = p.CreatedBy
,UpdatedBy = p.UpdatedBy
,IsDeleted = p.IsDeleted
,GuidCompany = p.GuidCompany
,Title = p.Title
,accCompanyArea1 = p.accCompanyArea1

                    }
                     ).ToList();
				}


			 if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e = new BusinessRulesEventArgs<accCompanyArea>() { Items= result, IncludingComputedLinq = true, ContextRequest = contextRequest, FilterExpressionString  = predicateString } :  e);
  
			
  
                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
            }
        }
		public List<accCompanyArea> GetBy(Expression<Func<accCompanyArea, bool>> predicate, bool loadRelations, ContextRequest contextRequest)
        {
			if(!loadRelations)
				return GetBy(predicate, contextRequest);
			else
				return GetBy(predicate, contextRequest, "accCompanyAreas1,accIncomeExpenses");

        }

        public List<accCompanyArea> GetBy(Expression<Func<accCompanyArea, bool>> predicate, int? pageSize, int? page, string orderBy, SFSdotNet.Framework.Data.SortDirection? sortDirection)
        {
            return GetBy(predicate, new ContextRequest() { CustomQuery = new CustomQuery() { Page = page, PageSize = pageSize, OrderBy = orderBy, SortDirection = sortDirection } });
        }
        public List<accCompanyArea> GetBy(Expression<Func<accCompanyArea, bool>> predicate)
        {

			if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }
			ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();

			contextRequest.CurrentContext = SFSdotNet.Framework.My.Context.CurrentContext;
			            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

            contextRequest.CustomQuery.FilterExpressionString = null;
            return this.GetBy(predicate, contextRequest, "");
        }
        #endregion
        #region Dynamic String
		private string GetSpecificFilter(string filter) {
            string result = "";
		    //string linqFilter = String.Empty;
            string freeTextFilter = String.Empty;
            if (filter.Contains("|"))
            {
               // linqFilter = filter.Split(char.Parse("|"))[0];
                freeTextFilter = filter.Split(char.Parse("|"))[1];
            }
            //else {
            //    freeTextFilter = filter;
            //}
            //else {
            //    linqFilter = filter;
            //}
			// linqFilter = SFSdotNet.Framework.Linq.Utils.ReplaceCustomDateFilters(linqFilter);
            //string specificFilter = linqFilter;
            if (!string.IsNullOrEmpty(freeTextFilter))
            {
                System.Text.StringBuilder sbCont = new System.Text.StringBuilder();
                /*if (specificFilter.Length > 0)
                {
                    sbCont.Append(" AND ");
                    sbCont.Append(" ({0})");
                }
                else
                {
                    sbCont.Append("{0}");
                }*/
                //var words = freeTextFilter.Split(char.Parse(" "));
				var word = freeTextFilter;
                System.Text.StringBuilder sbSpec = new System.Text.StringBuilder();
                 int nWords = 1;
				/*foreach (var word in words)
                {
					if (word.Length > 0){
                    if (sbSpec.Length > 0) sbSpec.Append(" AND ");
					if (words.Length > 1) sbSpec.Append("("); */
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
											
					sbSpec.Append(string.Format(@"Title.Contains(""{0}"")", word));

					
	
					
								sbSpec.Append(" OR ");
					
					//if (sbSpec.Length > 2)
					//	sbSpec.Append(" OR "); // test
					sbSpec.Append(string.Format(@"accCompanyArea1.Title.Contains(""{0}"")", word));
								 //sbSpec.Append("*extraFreeText*");

                    /*if (words.Length > 1) sbSpec.Append(")");
					
					nWords++;

					}

                }*/
                //specificFilter = string.Format("{0}{1}", specificFilter, string.Format(sbCont.ToString(), sbSpec.ToString()));
                                 result = sbSpec.ToString();  
            }
			//result = specificFilter;
			
			return result;

		}
	
			public List<accCompanyArea> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  params object[] extraParams)
        {
			return GetBy(filter, pageSize, page, orderBy, orderDir,  null, extraParams);
		}
           public List<accCompanyArea> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir, string usemode, params object[] extraParams)
            { 
                return GetBy(filter, pageSize, page, orderBy, orderDir, usemode, null, extraParams);
            }


		public List<accCompanyArea> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  string usemode, ContextRequest context, params object[] extraParams)

        {

            // string freetext = null;
            //if (filter.Contains("|"))
            //{
            //    int parts = filter.Split(char.Parse("|")).Count();
            //    if (parts > 1)
            //    {

            //        freetext = filter.Split(char.Parse("|"))[1];
            //    }
            //}
		
            //string specificFilter = "";
            //if (!string.IsNullOrEmpty(filter))
            //  specificFilter=  GetSpecificFilter(filter);
            if (string.IsNullOrEmpty(orderBy))
            {
			                orderBy = "UpdatedDate";
            }
			//orderDir = "desc";
			SFSdotNet.Framework.Data.SortDirection direction = SFSdotNet.Framework.Data.SortDirection.Ascending;
            if (!string.IsNullOrEmpty(orderDir))
            {
                if (orderDir == "desc")
                    direction = SFSdotNet.Framework.Data.SortDirection.Descending;
            }
            if (context == null)
                context = new ContextRequest();
			else
                context.CustomQuery = new CustomQuery();
             //context.FreeText = freetext;
             context.UseMode = usemode;
             context.CustomQuery =new SFSdotNet.Framework.My.CustomQuery()
 
                {
                    ExtraParams = extraParams,

                    OrderBy = orderBy,
                    SortDirection = direction,
                    Page = page,
                    PageSize = pageSize
               };
            

            if (!preventSecurityRestrictions) {
			 if (context.CurrentContext == null)
                {
					if (SFSdotNet.Framework.My.Context.CurrentContext != null &&  SFSdotNet.Framework.My.Context.CurrentContext.Company != null && SFSdotNet.Framework.My.Context.CurrentContext.User != null)
					{
						context.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
						context.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

					}
					else {
						throw new Exception("The security rule require a specific user and company");
					}
				}
            }
            return GetBy(filter, context);
  
        }


        public List<accCompanyArea> GetBy(string strWhere, ContextRequest contextRequest)
        {
        	#region old code
				
				 //Expression<Func<tvsReservationTransport, bool>> predicate = null;
				string strWhereClean = strWhere.Replace("*extraFreeText*", "").Replace("()", "");
                //if (!string.IsNullOrEmpty(strWhereClean)){

                //    object[] extraParams = null;
                //    //if (contextRequest != null )
                //    //    if (contextRequest.CustomQuery != null )
                //    //        extraParams = contextRequest.CustomQuery.ExtraParams;
                //    //predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<tvsReservationTransport, bool>(strWhereClean, extraParams != null? extraParams.Cast<Guid>(): null);				
                //}
				 if (contextRequest == null)
                {
                    contextRequest = new ContextRequest();
                    if (contextRequest.CustomQuery == null)
                        contextRequest.CustomQuery = new CustomQuery();
                }
                  if (!preventSecurityRestrictions) {
					if (contextRequest.User == null || contextRequest.Company == null)
                      {
                     if (SFSdotNet.Framework.My.Context.CurrentContext.Company != null && SFSdotNet.Framework.My.Context.CurrentContext.User != null)
                     {
                         contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                         contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

                     }
                     else {
                         throw new Exception("The security rule require a specific User and Company ");
                     }
					 }
                 }
            contextRequest.CustomQuery.FilterExpressionString = strWhere;
				//return GetBy(predicate, contextRequest);  

			#endregion				
				
                    return GetBy(strWhere, contextRequest, "");  


        }
       public List<accCompanyArea> GetBy(string strWhere)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
			
            return GetBy(strWhere, context, null);
        }

        public List<accCompanyArea> GetBy(string strWhere, string includes)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
            return GetBy(strWhere, context, includes);
        }

        #endregion
        #endregion
		
		  #region SaveOrUpdate
        private accCompanyArea Save(accCompanyArea entity, bool saveChanges, EFPocoContext con)
        {
				ObjectContext context = null;
            return Update(entity, saveChanges,null, out context);

			
        }
		 public  accCompanyArea Create( accCompanyArea entity, params Expression<Func< accCompanyArea, object>>[] paths)
         {
             return Create(entity, null, paths);

         }
 		 public accCompanyArea Create(accCompanyArea entity)
        {
				ObjectContext context = null;
				    if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: Create");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

				return this.Create(entity, true, contextRequest, out context);


        }
        public accCompanyArea Create(accCompanyArea entity, ContextRequest contextRequest)
         {
             ObjectContext context = null;
             return this.Create(entity, true, contextRequest,out context);

         }
         public accCompanyArea Create(accCompanyArea entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext context)
        {
                    return Create(entity, saveChanges , contextRequest , out context, null);
        }
         public accCompanyArea Create(accCompanyArea entity, ContextRequest contextRequest, params Expression<Func<accCompanyArea,object>>[] paths)
        {
            ObjectContext context = null;
            if(paths != null)
				return Create(entity, true,contextRequest, out context, paths);
			else 
				return Create(entity, true,contextRequest, out context);
        }
        public accCompanyArea Create(accCompanyArea entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext context, params Expression<Func<accCompanyArea,object>>[] pocopaths)
        {
			using (EFPocoContext con = new EFPocoContext())
			{
				accCompanyArea itemResult = null;
#region Autos


			entity.CreatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.CreatedBy = contextRequest.User.GuidUser;
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.UpdatedBy = contextRequest.User.GuidUser;
	
			if (contextRequest != null)
				if(contextRequest.User != null)
					if (contextRequest.Company != null)
						entity.GuidCompany = contextRequest.Company.GuidCompany;
	

#endregion
                e = null;
                OnCreating(this,e = new BusinessRulesEventArgs<accCompanyArea>() { ContextRequest = contextRequest, Item=entity, PathExpressions = pocopaths, SaveChanges =saveChanges });
				   if (e != null) {
						if (e.Cancel)
						{
							context = null;
							return e.Item;

						}
					}

                    if (entity.GuidCompanyArea == Guid.Empty)
                   {
                       entity.GuidCompanyArea = Guid.NewGuid();

                   }



				accCompanyAreaAdapter adapter = con.GetAdapterObject<accCompanyAreaAdapter>(entity);;
				List<Expression<Func<accCompanyAreaAdapter, object>>> paths = new List<Expression<Func<accCompanyAreaAdapter,object>>>();
                
			    if (pocopaths != null && pocopaths.Length > 0)
                {
					// Translate
                    foreach (var pocopath in pocopaths)
                    {
                        var param = Expression.Parameter(typeof(accCompanyAreaAdapter), "p");
                        var member = MemberExpression.PropertyOrField(param, ((System.Linq.Expressions.MemberExpression)(((System.Linq.Expressions.LambdaExpression)(pocopath)).Body)).Member.Name);
                        Expression<Func<accCompanyAreaAdapter, object>> path  = null;
                        switch(member.Member.Name){
                        
							case "accCompanyAreas1":
								path = p => p.accCompanyAreas1.First().WithoutUpdate();

								//path = p => member;
							break;
                        
							case "accIncomeExpenses":
								path = p => p.accIncomeExpenses.First().WithoutUpdate();

								//path = p => member;
								//path = p => p.accIncomeExpenses.First().accMoneyInOutConcept.WithoutUpdate();											
								//path = p => p.accIncomeExpenses.First().accMoneyPlace.WithoutUpdate();											
								//path = p => p.accIncomeExpenses.First().accProvider.WithoutUpdate();											
								//path = p => p.accIncomeExpenses.First().accReusableCatalogValue.WithoutUpdate();											
								//path = p => p.accIncomeExpenses.First().accReusableStatusAuthorization.WithoutUpdate();											
								//path = p => p.accIncomeExpenses.First().accParent.WithoutUpdate();											
								//path = p => p.accIncomeExpenses.First().accReusable_PaymentType.WithoutUpdate();											
							break;
							
							default:
								path = p => member;
							break;
                        }

                        
                       paths.Add(path.Expand());
                    }
                }
                object aux = null;
					paths.Add(p => p.accCompanyArea1.WithoutUpdate());

					//paths = pathBuilder.ToArray();

#region Childs accCompanyAreas1 
				if (adapter.accCompanyAreas1 != null)
                {
                    foreach (var item in adapter.accCompanyAreas1)
                    {
						
							if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accCompanyAreas", item);
							if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)){ 
								//paths.Add(p => p.accCompanyAreas1.First().WithoutUpdate());
								
							if (item.accCompanyArea1 == null)
								item.accCompanyArea1 = adapter;

								item.EntityKey = null;
							}

                    }
					if (adapter.accCompanyAreas1.Count > 0){
						paths.Add(p => p.accCompanyAreas1.First().WithoutUpdate());
											
					}
                }
#endregion 

				if (adapter.accCompanyArea1 != null ){
					if(adapter.accCompanyArea1.EntityKey == null) adapter.accCompanyArea1.EntityKey = con.WrappedContext.CreateEntityKey("accCompanyAreas", adapter.accCompanyArea1);
				}
#region Childs accIncomeExpenses 
				if (adapter.accIncomeExpenses != null)
                {
                    foreach (var item in adapter.accIncomeExpenses)
                    {
						
							if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accIncomeExpenses", item);
							if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)){ 
								//paths.Add(p => p.accIncomeExpenses.First().WithoutUpdate());
								
						if (item.accMoneyInOutConcept != null){
							item.accMoneyInOutConcept.EntityKey = con.WrappedContext.CreateEntityKey("accMoneyInOutConcepts", item.accMoneyInOutConcept);
                            
             
						}								
						if (item.accMoneyPlace != null){
							item.accMoneyPlace.EntityKey = con.WrappedContext.CreateEntityKey("accMoneyPlaces", item.accMoneyPlace);
                            
             
						}								
						if (item.accProvider != null){
							item.accProvider.EntityKey = con.WrappedContext.CreateEntityKey("accProviders", item.accProvider);
                            
             
						}								
						if (item.accReusableCatalogValue != null){
							item.accReusableCatalogValue.EntityKey = con.WrappedContext.CreateEntityKey("accReusableCatalogValues", item.accReusableCatalogValue);
                            
             
						}								
						if (item.accReusableStatusAuthorization != null){
							item.accReusableStatusAuthorization.EntityKey = con.WrappedContext.CreateEntityKey("accReusableCatalogValues", item.accReusableStatusAuthorization);
                            
             
						}								
							if (item.accCompanyArea == null)
								item.accCompanyArea = adapter;

						if (item.accParent != null){
							item.accParent.EntityKey = con.WrappedContext.CreateEntityKey("accIncomeExpenses", item.accParent);
                            
             
						}								
						if (item.accReusable_PaymentType != null){
							item.accReusable_PaymentType.EntityKey = con.WrappedContext.CreateEntityKey("accReusableCatalogValues", item.accReusable_PaymentType);
                            
             
						}								
								item.EntityKey = null;
							}

                    }
					if (adapter.accIncomeExpenses.Count > 0){
						paths.Add(p => p.accIncomeExpenses.First().WithoutUpdate());
						paths.Add(p => p.accIncomeExpenses.First().accMoneyInOutConcept.WithoutUpdate());
paths.Add(p => p.accIncomeExpenses.First().accMoneyPlace.WithoutUpdate());
paths.Add(p => p.accIncomeExpenses.First().accProvider.WithoutUpdate());
paths.Add(p => p.accIncomeExpenses.First().accReusableCatalogValue.WithoutUpdate());
paths.Add(p => p.accIncomeExpenses.First().accReusableStatusAuthorization.WithoutUpdate());
paths.Add(p => p.accIncomeExpenses.First().accParent.WithoutUpdate());
paths.Add(p => p.accIncomeExpenses.First().accReusable_PaymentType.WithoutUpdate());
					
					}
                }
#endregion 




                //con.WrappedContext.AttachObjectGraph<accCompanyAreaAdapter>(adapter, p=>p.accCompanyAreas1, p=>p.accCompanyArea1, p=>p.accIncomeExpenses);
                con.WrappedContext.AttachObjectGraph<accCompanyAreaAdapter>(adapter, paths.ToArray());
              	if (saveChanges){
                    con.WrappedContext.SaveChanges(SaveOptions.AcceptAllChangesAfterSave);
					 
				}
                else
                    con.WrappedContext.SaveChanges(SaveOptions.None);
                if (!saveChanges)
                    context = con.WrappedContext;
                else
                    context = null;
				itemResult = adapter.PocoEntity;
                if (e != null)
                {
                    e.Item = itemResult;
                }
                OnCreated(this, e == null ? e = new BusinessRulesEventArgs<accCompanyArea>() { ContextRequest = contextRequest, Item = itemResult, PathExpressions = pocopaths, SaveChanges = saveChanges } : e);



                if (e != null)
                {
                    itemResult = e.Item;
                }
                              return itemResult;
            }
        }
        BusinessRulesEventArgs<accCompanyArea> e = null;
        public void Create(List<accCompanyArea> entities)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            Create(entities, contextRequest, null);
        }
        public void Create(List<accCompanyArea> entities, ContextRequest contextRequest)
        
        {
			ObjectContext context = null;
            	foreach (accCompanyArea entity in entities)
				{
					this.Create(entity, true, contextRequest, out context);
				}
        }
         public accCompanyArea Update(accCompanyArea entity)
        {
            if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return Update(entity, contextRequest);
        }
        public accCompanyArea Update(accCompanyArea entity, ContextRequest requestContext)
        {
			  ObjectContext context = null;
            return Update(entity, true,requestContext, out context);
         }
		public  accCompanyArea Update(accCompanyArea entity, params Expression<Func<accCompanyArea, object>>[] pocopaths)
        {
			  ObjectContext context = null;
              return Update(entity, true, null, out context, pocopaths);
         }
        public accCompanyArea Update(accCompanyArea entity, ContextRequest requestContext, bool saveChanges, out ObjectContext outcontext)
        {
			return Update(entity, saveChanges,requestContext, out outcontext, null);
		}
         public accCompanyArea Update(accCompanyArea entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext outcontext, params Expression<Func<accCompanyArea,object>>[] pocopaths)
        {
		 if ((System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null) && contextRequest == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Update");
            }
            if (contextRequest == null)
            {
                contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            }

			using (EFPocoContext con = new EFPocoContext())
			{
				accCompanyArea  itemResult = null;

	
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
			if(contextRequest.User != null)
				entity.UpdatedBy = contextRequest.User.GuidUser;

	    var oldentity = GetBy(p => p.GuidCompanyArea == entity.GuidCompanyArea, contextRequest).FirstOrDefault();
		if (oldentity != null) {
		
            entity.CreatedDate = oldentity.CreatedDate;
            entity.CreatedBy = oldentity.CreatedBy;
	
            entity.GuidCompany = oldentity.GuidCompany;
	
			

		}

				e = null;
                OnUpdating(this,e = new BusinessRulesEventArgs<accCompanyArea>() { ContextRequest = contextRequest, Item=entity, PathExpressions = pocopaths, SaveChanges =saveChanges });
				   if (e != null) {
						if (e.Cancel)
						{
							outcontext = null;
							return e.Item;

						}
					}

                accCompanyAreaAdapter adapter = con.GetAdapterObject<accCompanyAreaAdapter>(entity);
                adapter.EntityKey = con.WrappedContext.CreateEntityKey("accCompanyAreas", adapter);
				    var es = con.accCompanyAreas;
				List<Expression<Func<accCompanyAreaAdapter, object>>> paths = new List<Expression<Func<accCompanyAreaAdapter,object>>>();
                /* if (pocopaths != null)
                    if (pocopaths.Length == 0)
                        pocopaths = null;*/

			    if (pocopaths != null && pocopaths.Length > 0)
                {
					// Translate
                    foreach (var pocopath in pocopaths)
                    {
                        var param = Expression.Parameter(typeof(accCompanyAreaAdapter), "p");
                        var member = MemberExpression.PropertyOrField(param, ((System.Linq.Expressions.MemberExpression)(((System.Linq.Expressions.LambdaExpression)(pocopath)).Body)).Member.Name);
                        Expression<Func<accCompanyAreaAdapter, object>> path  = null;
                        switch(member.Member.Name){
                        
							case "accCompanyAreas1":
								//path = p => member;
								path = p => p.accCompanyAreas1.First().WithoutUpdate();
							break;
                        
							case "accIncomeExpenses":
								//path = p => member;
								path = p => p.accIncomeExpenses.First().WithoutUpdate();
				//				path = p => p.accIncomeExpenses.First().accMoneyInOutConcept.WithoutUpdate();											
				//				path = p => p.accIncomeExpenses.First().accMoneyPlace.WithoutUpdate();											
				//				path = p => p.accIncomeExpenses.First().accProvider.WithoutUpdate();											
				//				path = p => p.accIncomeExpenses.First().accReusableCatalogValue.WithoutUpdate();											
				//				path = p => p.accIncomeExpenses.First().accReusableStatusAuthorization.WithoutUpdate();											
				//				path = p => p.accIncomeExpenses.First().accParent.WithoutUpdate();											
				//				path = p => p.accIncomeExpenses.First().accReusable_PaymentType.WithoutUpdate();											
							break;
							
							default:
								path = p => member;
							break;
                        }

                        paths.Add(path.Expand());
 					}
                }
                else {
                  paths = new List<Expression<Func<accCompanyAreaAdapter, object>>>();

					//List<Expression<Func<accCompanyAreaAdapter,object>>> pathBuilder = new List<Expression<Func<accCompanyAreaAdapter,object>>>();
					paths.Add(p => p.accCompanyArea1.WithoutUpdate());

		
					//paths = pathBuilder.ToArray();		
			}
			object aux = null;
				if (adapter.accCompanyAreas1 != null)
                {
                    foreach (var item in adapter.accCompanyAreas1)
                    {


                        if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accCompanyAreas", item);
						if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)) item.EntityKey = null;
                        
                    }
					
                    if (adapter.accCompanyAreas1.Count > 0)
                    {
                        paths.Add(p => p.accCompanyAreas1.First().WithoutUpdate());

                    }

                }
				if (adapter.accCompanyArea1 != null ){
					if(adapter.accCompanyArea1.EntityKey == null) adapter.accCompanyArea1.EntityKey = con.WrappedContext.CreateEntityKey("accCompanyAreas", adapter.accCompanyArea1);
				}

                
				if (adapter.accIncomeExpenses != null)
                {
                    foreach (var item in adapter.accIncomeExpenses)
                    {


                        if (item.EntityKey == null) item.EntityKey = con.WrappedContext.CreateEntityKey("accIncomeExpenses", item);
						if (!con.WrappedContext.TryGetObjectByKey(item.EntityKey, out aux)) item.EntityKey = null;
                        
                    }
					
                    if (adapter.accIncomeExpenses.Count > 0)
                    {
                        paths.Add(p => p.accIncomeExpenses.First().WithoutUpdate());

                    }

                }



                //con.AttachObjectGraph<accCompanyArea>(adapter, p=>p.accCompanyAreas1, p=>p.accCompanyArea1, p=>p.accIncomeExpenses);
                con.WrappedContext.AttachObjectGraph<accCompanyAreaAdapter>(adapter, paths.ToArray());
				if (saveChanges){
                	con.WrappedContext.SaveChanges();
					 
					}
                if(!saveChanges)
					outcontext = con.WrappedContext;
				else
					outcontext = null;
				itemResult = adapter.PocoEntity;
				OnUpdated(this, e = new BusinessRulesEventArgs<accCompanyArea>() { ContextRequest = contextRequest, Item=itemResult, PathExpressions = pocopaths, SaveChanges =saveChanges });

              	return itemResult;

			  }
        }
        public accCompanyArea Save(accCompanyArea entity)
        {
			return Save(entity, true, null);
        }
        public int Save(List<accCompanyArea> entities)
        {
			using (EFPocoContext con = new EFPocoContext())
			{
			
            int n = 0;
            foreach (accCompanyArea item in entities)
            {
                try
                {
                    this.Save(item, false, con);
                    n++;
                }catch (Exception ex){
                    SFSdotNet.Framework.My.EventLog.Exception(ex);
                }
            }
            con.SaveChanges();
            return n;
            }
        }
        #endregion
        #region Delete
        public void Delete(accCompanyArea entity)
        {
				this.Delete(entity, null);
			
        }
		 public void Delete(accCompanyArea entity, ContextRequest contextRequest)
        {
				ObjectContext context = null;
				this.Delete(entity, true, out context, contextRequest);
			
        }

        
        public void Delete(accCompanyArea entity, bool saveChanges, out  ObjectContext context, ContextRequest contextRequest, BusinessRulesEventArgs<accCompanyArea> e = null)
        {
			using (EFPocoContext _con = new EFPocoContext())
			{
				int result = 0;
				
               	BusinessRulesEventArgs<accCompanyArea> _e = null;
               List<accCompanyArea> _items = new List<accCompanyArea>();
                _items.Add(entity);
                if (e == null || e.PreventPartialPropagate == false)
                {
                    OnDeleting(this, _e = (e == null ? new BusinessRulesEventArgs<accCompanyArea>() { ContextRequest = contextRequest, Item = entity, Items = _items, SaveChanges = saveChanges } : e));
                }
                if (_e != null)
                {
                    if (_e.Cancel)
						{
							context = null;
							return;

						}
					}


				accCompanyAreaAdapter adapter = _con.GetAdapterObject<accCompanyAreaAdapter>(entity);
                adapter.EntityKey = _con.WrappedContext.CreateEntityKey("accCompanyAreas", adapter);
                
	            //adapter = _con.WrappedContext.AttachObjectGraph<accCompanyAreaAdapter>(adapter);
				try{
					_con.WrappedContext.AttachTo("accCompanyAreas", adapter);
                }catch{
					
				}
									//IsDeleted
					bool logicDelete = true;
					if (adapter.IsDeleted != null)
					{
						if (adapter.IsDeleted.Value)
							logicDelete = false;
					}
					if (logicDelete)
					{
											entity = GetBy(p => p.GuidCompanyArea == entity.GuidCompanyArea, contextRequest).FirstOrDefault();
						entity.IsDeleted = true;
						Update(entity, contextRequest);
					}
					else {
						_con.WrappedContext.DeleteObject(adapter);
					}
								
				if (!saveChanges)
                    context = _con.WrappedContext;
                else
                    context = null;
				 SaveOptions saveOption = SaveOptions.None;
                if (saveChanges)
                    saveOption = SaveOptions.AcceptAllChangesAfterSave;

				result = _con.WrappedContext.SaveChanges(saveOption);
				if (saveChanges){
					
					}
			if (e == null || e.PreventPartialPropagate == false)
                {

                    if (_e == null)
                        _e = new BusinessRulesEventArgs<accCompanyArea>() { ContextRequest = contextRequest, Item = entity, Items = _items };

                    OnDeleted(this, _e);
                }

				//return null;
			}            
        }
        public void Delete(List<accCompanyArea> entities,  ContextRequest contextRequest = null )
        {
				ObjectContext context = null;
			 BusinessRulesEventArgs<accCompanyArea> _e = null;

                OnDeleting(this, _e = new BusinessRulesEventArgs<accCompanyArea>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities });
                if (_e != null)
                {
                    if (_e.Cancel)
                    {
                        context = null;
                        return;

                    }
                }
                bool allSucced = true;
                BusinessRulesEventArgs<accCompanyArea> eToChilds = new BusinessRulesEventArgs<accCompanyArea>();
                if (_e != null)
                {
                    eToChilds = _e;
                }
                else
                {
                    eToChilds = new BusinessRulesEventArgs<accCompanyArea>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                }
				foreach (accCompanyArea item in entities)
				{
					try
                    {
                        this.Delete(item, true, out context, contextRequest, e: eToChilds);
                    }
                    catch (Exception ex)
                    {
                        SFSdotNet.Framework.My.EventLog.Error(ex);
                        allSucced = false;
                    }
				}
				if (_e == null)
                    _e = new BusinessRulesEventArgs<accCompanyArea>() { ContextRequest = contextRequest, CountResult = entities.Count, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                OnDeleted(this, _e);

			
        }
        #endregion
 
        #region GetCount
		 public int GetCount(Expression<Func<accCompanyArea, bool>> predicate)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

			return GetCount(predicate, contextRequest);
		}
        public int GetCount(Expression<Func<accCompanyArea, bool>> predicate, ContextRequest contextRequest)
        {


		
			using (EFPocoContext con = new EFPocoContext())
			{


				if (predicate == null) predicate = PredicateBuilder.True<accCompanyArea>();
           		predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted == null);
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    		if (contextRequest.User !=null )
                        		if (contextRequest.Company != null )
                        			predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				
				return con.accCompanyAreas.Count(predicate);
			}

        }
		  public int GetCount(string predicate,  ContextRequest contextRequest)
         {
             return GetCount(predicate, null, contextRequest);
         }

         public int GetCount(string predicate)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return GetCount(predicate, contextRequest);
        }
		 public int GetCount(string predicate, string usemode){
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
				return GetCount( predicate,  usemode,  contextRequest);
		 }
        public int GetCount(string predicate, string usemode, ContextRequest contextRequest){
			  string freetext = null;
            Filter filter = new Filter();

              if (predicate.Contains("|"))
              {
                 
                  filter.SetFilterPart("ft", GetSpecificFilter(predicate));
                 
                  filter.ProcessText(predicate.Split(char.Parse("|"))[0]);
                  freetext = predicate.Split(char.Parse("|"))[1];
              }
              else {
                  filter.ProcessText(predicate);
              }
           
			e = null;
			contextRequest.FreeText = freetext;
			contextRequest.UseMode = usemode;
            OnCounting(this, e = new BusinessRulesEventArgs<accCompanyArea>() {  Filter =filter, ContextRequest = contextRequest });
            if (e != null)
            {
                if (e.Cancel)
                {
                    context = null;
                    return e.CountResult;

                }

            

            }
			 predicate = filter.GetFilterComplete();
			StringBuilder sbQuerySystem = new StringBuilder();
		
					
                    filter.SetFilterPart("de","(IsDeleted != true OR IsDeleted == null)");
			
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    	if (contextRequest.User !=null )
                        	if (contextRequest.Company != null ){
                        		

								filter.SetFilterPart("co", @"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
						
						
							}
							
							}
							if (preventSecurityRestrictions) preventSecurityRestrictions= false;
			using (EFContext con = new EFContext())
			{
				   
                 filter.CleanAndProcess("");
				//string predicateWithFKAndComputed = SFSdotNet.Framework.Linq.Utils.ExtractSpecificProperties("", ref predicate );               
				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed();
               string predicateWithManyRelations = filter.GetFilterChildren();
			   ///QueryUtils.BreakeQuery1(predicate, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
			   predicate = filter.GetFilterComplete();
               if (!string.IsNullOrEmpty(predicate))
               {
				
					
                    return con.accCompanyAreas.Count(System.Linq.Dynamic.DynamicExpression.ParseLambda<accCompanyArea, bool>(predicate));
					
                }else
                    return con.accCompanyAreas.Count();

			}

		}
         public int GetCount()
        {
            return GetCount(p => true);
        }
        #endregion
        
         public accCompanyArea Update(accCompanyArea entity, string paths)
        {
            return Update(entity, paths.Split(char.Parse(",")));
            
        }

        public accCompanyArea Update(accCompanyArea entity, string[] paths)
        {
            // Translate
            List<Expression<Func<accCompanyArea, object>>> pathList = new List<Expression<Func<accCompanyArea, object>>>();
            for (int i = 0; i <= paths.Length -1; i++)
            {
                var param = Expression.Parameter(typeof(accCompanyArea), "p");
                var member = MemberExpression.PropertyOrField(param, paths[i]);

                Expression<Func<accCompanyArea, object>> path = p => member;
                pathList.Add(path.Expand());
            }
			ObjectContext context = null;
			 return Update(entity, true,null, out context,  pathList.ToArray());
           //return Update(entity, pathList.ToArray());
        }

        public void Update(List<accCompanyArea> entities, string paths)
        {
            foreach (var entity in entities )
            {
                Update(entity, paths);
            }
        }
		public accCompanyArea Create(accCompanyArea entity, ContextRequest contextRequest, string paths)
        {
          

            if (string.IsNullOrEmpty(paths))
                return Create(entity, contextRequest);

            return Create(entity, contextRequest, paths.Split(char.Parse(",")));
        }
        public accCompanyArea Create(accCompanyArea entity, string paths)
        {
			 if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return Create(entity, contextRequest, paths);

        }

        public  void Create(List<accCompanyArea> entities, ContextRequest requestContext, string paths)
        {
            foreach (var entity in entities)
            {
                Create(entity,requestContext, paths);
            }
        }

        public void Create(List<accCompanyArea> entities, string[] paths)
        {
            foreach (var entity in entities)
            {
                Create(entity, null, paths);
            }
        }
        
        public accCompanyArea  Create(accCompanyArea entity, ContextRequest contextRequest, string[] paths)
        {
            List<Expression<Func<accCompanyArea, object>>> pathList = new List<Expression<Func<accCompanyArea, object>>>();
            for (int i = 0; i < paths.Length - 1; i++)
            {
                var param = Expression.Parameter(typeof(accCompanyArea), "p");
                var member = MemberExpression.PropertyOrField(param, paths[i]);

                Expression<Func<accCompanyArea, object>> path = p => member;
                pathList.Add(path.Expand());
            }
            return Create(entity, contextRequest, pathList.ToArray());
        }
        public void Delete(List<accCompanyArea.CompositeKey> entityKeys)
        {

            List<accCompanyArea> items = new List<accCompanyArea>();
            foreach (var itemKey in entityKeys)
            {
                items.Add(GetByKey(itemKey.GuidCompanyArea));
            }

            Delete(items);

        }
		
		
	}
		public partial class accIncomeExpensFilesBR{
	 	
           
		 #region Partial methods

           partial void OnUpdating(object sender, BusinessRulesEventArgs<accIncomeExpensFile> e);

            partial void OnUpdated(object sender, BusinessRulesEventArgs<accIncomeExpensFile> e);

            partial void OnCreating(object sender, BusinessRulesEventArgs<accIncomeExpensFile> e);
            partial void OnCreated(object sender, BusinessRulesEventArgs<accIncomeExpensFile> e);

            partial void OnDeleting(object sender, BusinessRulesEventArgs<accIncomeExpensFile> e);
            partial void OnDeleted(object sender, BusinessRulesEventArgs<accIncomeExpensFile> e);

            partial void OnGetting(object sender, BusinessRulesEventArgs<accIncomeExpensFile> e);
            partial void OnTaken(object sender, BusinessRulesEventArgs<accIncomeExpensFile> e);
            partial void OnCounting(object sender, BusinessRulesEventArgs<accIncomeExpensFile> e);
 
 
            #endregion
			
		private static accIncomeExpensFilesBR singlenton =null;
				public static accIncomeExpensFilesBR NewInstance(){
					return  new accIncomeExpensFilesBR();
					
				}
		public static accIncomeExpensFilesBR Instance{
			get{
				if (singlenton == null)
					singlenton = new accIncomeExpensFilesBR();
				return singlenton;
			}
		}
		private bool preventSecurityRestrictions = false;
		 public bool PreventAuditTrail { get; set;  }
		#region Fields
        EFPocoContext context = null;
        #endregion
        #region Constructor
        public accIncomeExpensFilesBR()
        {
            context = new EFPocoContext();
        }
		 public accIncomeExpensFilesBR(bool preventSecurity)
            {
                this.preventSecurityRestrictions = preventSecurity;
				context = new EFPocoContext();
            }
        #endregion
		
		#region Get

 		public IQueryable<accIncomeExpensFile> Get()
        {
            //using (EFContext con = new EFContext())
            //{
				EFContext con = new EFContext();
                var query = con.accIncomeExpensFiles.AsQueryable();
                con.ContextOptions.ProxyCreationEnabled = false;

                //query = ContextQueryBuilder<Nutrient>.ApplyContextQuery(query, contextRequest);

                return query;




            //}

        }
		
		public List<accIncomeExpensFile> GetAll()
        {
            return this.GetBy(p => true);
        }
        public List<accIncomeExpensFile> GetAll(string includes)
        {
            return this.GetBy(p => true, includes);
        }
        public accIncomeExpensFile GetByKey(Guid guidIncomeExpenseFile)
        {
            return GetByKey(guidIncomeExpenseFile, true);
        }
        public accIncomeExpensFile GetByKey(Guid guidIncomeExpenseFile, bool loadIncludes)
        {
            accIncomeExpensFile item = null;
			var query = PredicateBuilder.True<accIncomeExpensFile>();
                    
			string strWhere = @"GuidIncomeExpenseFile = Guid(""" + guidIncomeExpenseFile.ToString()+@""")";
            Expression<Func<accIncomeExpensFile, bool>> predicate = null;
            if (!string.IsNullOrEmpty(strWhere))
                predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<accIncomeExpensFile, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
			 ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();
            contextRequest.CustomQuery.FilterExpressionString = strWhere;

			//item = GetBy(predicate, loadIncludes, contextRequest).FirstOrDefault();
			item = GetBy(strWhere,loadIncludes,contextRequest).FirstOrDefault();
            return item;
        }
         public List<accIncomeExpensFile> GetBy(string strWhere, bool loadRelations, ContextRequest contextRequest)
        {
            if (!loadRelations)
                return GetBy(strWhere, contextRequest);
            else
                return GetBy(strWhere, contextRequest, "");

        }
		  public List<accIncomeExpensFile> GetBy(string strWhere, bool loadRelations)
        {
              if (!loadRelations)
                return GetBy(strWhere, new ContextRequest());
            else
                return GetBy(strWhere, new ContextRequest(), "");

        }
         public accIncomeExpensFile GetByKey(Guid guidIncomeExpenseFile, params Expression<Func<accIncomeExpensFile, object>>[] includes)
        {
            accIncomeExpensFile item = null;
			string strWhere = @"GuidIncomeExpenseFile = Guid(""" + guidIncomeExpenseFile.ToString()+@""")";
          Expression<Func<accIncomeExpensFile, bool>> predicate = null;
            if (!string.IsNullOrEmpty(strWhere))
                predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<accIncomeExpensFile, bool>(strWhere.Replace("*extraFreeText*", "").Replace("()",""));
			
        item = GetBy(predicate, includes).FirstOrDefault();
         ////   item = GetBy(strWhere,includes).FirstOrDefault();
			return item;

        }
        public accIncomeExpensFile GetByKey(Guid guidIncomeExpenseFile, string includes)
        {
            accIncomeExpensFile item = null;
			string strWhere = @"GuidIncomeExpenseFile = Guid(""" + guidIncomeExpenseFile.ToString()+@""")";
            
			
            item = GetBy(strWhere, includes).FirstOrDefault();
            return item;

        }
		 public accIncomeExpensFile GetByKey(Guid guidIncomeExpenseFile, string usemode, string includes)
		{
			return GetByKey(guidIncomeExpenseFile, usemode, null, includes);

		 }
		 public accIncomeExpensFile GetByKey(Guid guidIncomeExpenseFile, string usemode, ContextRequest context,  string includes)
        {
            accIncomeExpensFile item = null;
			string strWhere = @"GuidIncomeExpenseFile = Guid(""" + guidIncomeExpenseFile.ToString()+@""")";
			if (context == null)
				context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
			context.CustomQuery.IsByKey = true;
            context.CustomQuery.FilterExpressionString = strWhere;
            context.UseMode = usemode;
            item = GetBy(strWhere,context , includes).FirstOrDefault();
            return item;

        }

        #region Dynamic Predicate
        public List<accIncomeExpensFile> GetBy(Expression<Func<accIncomeExpensFile, bool>> predicate, int? pageSize, int? page)
        {
            return this.GetBy(predicate, pageSize, page, null, null);
        }
        public List<accIncomeExpensFile> GetBy(Expression<Func<accIncomeExpensFile, bool>> predicate, ContextRequest contextRequest)
        {

            return GetBy(predicate, contextRequest,"");
        }
        
        public List<accIncomeExpensFile> GetBy(Expression<Func<accIncomeExpensFile, bool>> predicate, ContextRequest contextRequest, params Expression<Func<accIncomeExpensFile, object>>[] includes)
        {
            StringBuilder sb = new StringBuilder();
           if (includes != null)
            {
                foreach (var path in includes)
                {

						if (sb.Length > 0) sb.Append(",");
						sb.Append(SFSdotNet.Framework.Linq.Utils.IncludeToString<accIncomeExpensFile>(path));

               }
            }
            return GetBy(predicate, contextRequest, sb.ToString());
        }
        
        
        public List<accIncomeExpensFile> GetBy(Expression<Func<accIncomeExpensFile, bool>> predicate, string includes)
        {
			ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";

            return GetBy(predicate, context, includes);
        }

        public List<accIncomeExpensFile> GetBy(Expression<Func<accIncomeExpensFile, bool>> predicate, params Expression<Func<accIncomeExpensFile, object>>[] includes)
        {
			if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }
			ContextRequest context = new ContextRequest();
			            context.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            context.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = "";
            return GetBy(predicate, context, includes);
        }

      
		public bool DisableCache { get; set; }
		 public List<accIncomeExpensFile> GetBy(Expression<Func<accIncomeExpensFile, bool>> predicate, ContextRequest contextRequest, string includes)
        {
            using (EFPocoContext con = new EFPocoContext())
            {
				if (DisableCache) 
                	con.CachingPolicy = EFCachingProvider.Caching.CachingPolicy.NoCaching;

				List<accIncomeExpensFile> result = null;
                 e = null;
	
				OnGetting(con, e = new BusinessRulesEventArgs<accIncomeExpensFile>() {  FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null) });

               // OnGetting(con,e = new BusinessRulesEventArgs<accIncomeExpensFile>() { FilterExpression = predicate, ContextRequest = contextRequest, FilterExpressionString = contextRequest.CustomQuery.FilterExpressionString});
				   if (e != null) {
				    predicate = e.FilterExpression;
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				con.EnableChangeTrackingUsingProxies = false;
				con.WrappedContext.accIncomeExpensFiles.MergeOption = MergeOption.NoTracking;
                con.WrappedContext.ContextOptions.ProxyCreationEnabled = false;
                if (predicate == null) predicate = PredicateBuilder.True<accIncomeExpensFile>();
 				string fkIncludes = "accFile,accIncomeExpens";
                if(contextRequest!=null){
					if (contextRequest.CustomQuery != null)
					{
						if (contextRequest.CustomQuery.IncludeForeignKeyPaths != null) {
							if (contextRequest.CustomQuery.IncludeForeignKeyPaths.Value == false)
								fkIncludes = "";
						}
					}
				}
				if (!string.IsNullOrEmpty(includes))
					includes = includes + "," + fkIncludes;
				else
					includes = fkIncludes;
                
                var es = con.accIncomeExpensFiles;

                IQueryable<accIncomeExpensFile> query = es.AsQueryable();

                                if (!string.IsNullOrEmpty(includes))
                {
                    foreach (string include in includes.Split(char.Parse(",")))
                    {
						if (!string.IsNullOrEmpty(include))
                            query = query.Include(include);
                    }
                }
                    predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
					 	if (!preventSecurityRestrictions)
						{
							if (contextRequest != null )
		                    	if (contextRequest.User !=null )
		                        	if (contextRequest.Company != null)
		                        		predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				query =query.Where(predicate);
                query = ContextQueryBuilder<accIncomeExpensFile>.ApplyContextQuery(query, contextRequest);

                result = query.ToList<accIncomeExpensFile>();
				  
                if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e =  new BusinessRulesEventArgs<accIncomeExpensFile>() { Items= result, IncludingComputedLinq = false, ContextRequest = contextRequest,  FilterExpression = predicate } :  e);
  
			

                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
            }
        }
		public void UpdateAgile(accIncomeExpensFile item, params string[] fields)
         {
             List<accIncomeExpensFile> list = new List<accIncomeExpensFile>();
             list.Add(item);
             this.UpdateBulk(list, fields);
         }
		public void UpdateBulk(List<accIncomeExpensFile>  items, params string[] fields)
         {
             SFSdotNet.Framework.My.ContextRequest req = new SFSdotNet.Framework.My.ContextRequest();
             req.CustomQuery = new SFSdotNet.Framework.My.CustomQuery();
             foreach (var field in fields)
             {
                 req.CustomQuery.SpecificProperties.Add(field);
             }
             UpdateBulk(items, req);

         }
        public void UpdateBulk(List<accIncomeExpensFile> items, ContextRequest req)
        {
            using (EFContext con = new EFContext())
            {



                foreach (var item in items)
                {
                    var setT = con.CreateObjectSet<accIncomeExpensFile>("accIncomeExpensFiles");


                    var itemForAttach = new accIncomeExpensFile();
			itemForAttach.GuidIncomeExpenseFile = item.GuidIncomeExpenseFile;
					
                    itemForAttach = SFSdotNet.Framework.Entities.ConvertEntity.SetProperties<accIncomeExpensFile>(item, itemForAttach, null, req.CustomQuery.SpecificProperties.ToArray());
                    setT.Attach(itemForAttach);


                    foreach (var property in req.CustomQuery.SpecificProperties)
                    {
						
                        if (property != "GuidIncomeExpenseFile")
                            con.ObjectStateManager.GetObjectStateEntry(itemForAttach).SetModifiedProperty(property);

                    }

                }
                con.SaveChanges();


            }
        }
		/*public int Update(List<accIncomeExpensFile> items, ContextRequest contextRequest)
            {
                int result = 0;
                using (EFContext con = new EFContext())
                {
                   
                

                    foreach (var item in items)
                    {
                        //secMessageToUser messageToUser = new secMessageToUser();
                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            item.GetType().GetProperty(prop).SetValue(item, item.GetType().GetProperty(prop).GetValue(item));
                        }
                        //messageToUser.GuidMessageToUser = (Guid)item.GetType().GetProperty("GuidMessageToUser").GetValue(item);

                        var setObject = con.CreateObjectSet<accIncomeExpensFile>("accIncomeExpensFiles");
                        //messageToUser.Readed = DateTime.UtcNow;
                        setObject.Attach(item);
                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            con.ObjectStateManager.GetObjectStateEntry(item).SetModifiedProperty(prop);
                        }
                       
                    }
                    result = con.SaveChanges();

                    


                }
                return result;
            }
           */
        public List<accIncomeExpensFile> GetBy(string predicateString, ContextRequest contextRequest, string includes)
        {
            using (EFContext con = new EFContext())
            {
				if (DisableCache) 
                	con.CachingPolicy = EFCachingProvider.Caching.CachingPolicy.NoCaching;

				Filter filter = new Filter();
                if (predicateString.Contains("|"))
                {
                    string ft = GetSpecificFilter(predicateString);
                    if (!string.IsNullOrEmpty(ft))
                        filter.SetFilterPart("ft", ft);
                   
                    contextRequest.FreeText = predicateString.Split(char.Parse("|"))[1];
                    var q1 = predicateString.Split(char.Parse("|"))[0];
                    if (!string.IsNullOrEmpty(q1))
                    {
                        filter.ProcessText(q1);
                    }
                }
                else {
                    filter.ProcessText(predicateString);
                }

				List<accIncomeExpensFile> result = null;
                 e = null;
					OnGetting(con, e = new BusinessRulesEventArgs<accIncomeExpensFile>() { Filter = filter, ContextRequest = contextRequest /*, FilterExpressionString = (contextRequest != null ? (contextRequest.CustomQuery != null ? contextRequest.CustomQuery.FilterExpressionString : null) : null)*/ });

                  //OnGetting(con,e = new BusinessRulesEventArgs<accIncomeExpensFile>() {  ContextRequest = contextRequest, FilterExpressionString = predicateString });
			   	if (e != null) {
				    //predicateString = e.GetQueryString();
						if (e.Cancel)
						{
							context = null;
							return e.Items;

						}
						if (!string.IsNullOrEmpty(e.StringIncludes))
                            includes = e.StringIncludes;
					}
				//	 else {
                //      predicateString = predicateString.Replace("*extraFreeText*", "").Replace("()","");
                //  }
				//con.EnableChangeTrackingUsingProxies = false;
				con.accIncomeExpensFiles.MergeOption = MergeOption.NoTracking;
                con.ContextOptions.ProxyCreationEnabled = false;
                //if (predicate == null) predicate = PredicateBuilder.True<accIncomeExpensFile>();
 				string fkIncludes = "accFile,accIncomeExpens";
                if(contextRequest!=null){
					if (contextRequest.CustomQuery != null)
					{
						if (contextRequest.CustomQuery.IncludeForeignKeyPaths != null) {
							if (contextRequest.CustomQuery.IncludeForeignKeyPaths.Value == false)
								fkIncludes = "";
						}
					}
				}else{
                    contextRequest = new ContextRequest();
                    contextRequest.CustomQuery = new CustomQuery();

                }
				if (!string.IsNullOrEmpty(includes))
					includes = includes + "," + fkIncludes;
				else
					includes = fkIncludes;
                
                var es = con.accIncomeExpensFiles;
				IQueryable<accIncomeExpensFile> query = es.AsQueryable();
		
				// include relations FK
				if(string.IsNullOrEmpty(includes) ){
					includes ="";
				}
				bool includeaccFile = includes.Split(char.Parse(",")).Contains("accFile");

				bool includeaccIncomeExpens = includes.Split(char.Parse(",")).Contains("accIncomeExpens");

				StringBuilder sbQuerySystem = new StringBuilder();
                    //predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted ==null );
				

				//if (!string.IsNullOrEmpty(predicateString))
                //      sbQuerySystem.Append(" And ");
                //sbQuerySystem.Append(" (IsDeleted != true Or IsDeleted = null) ");
				 filter.SetFilterPart("de", "(IsDeleted != true OR IsDeleted = null)");


					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
	                    	if (contextRequest.User !=null )
	                        	if (contextRequest.Company != null ){
	                        		//if (sbQuerySystem.Length > 0)
	                        		//	    			sbQuerySystem.Append( " And ");	
									//sbQuerySystem.Append(@" (GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
									filter.SetFilterPart("co",@"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @"""))");
								}
						}	
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				//string predicateString = predicate.ToDynamicLinq<accIncomeExpensFile>();
				//predicateString += sbQuerySystem.ToString();
				filter.CleanAndProcess("");

				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed(); //SFSdotNet.Framework.Linq.Utils.ExtractSpecificProperties("", ref predicateString );               
                string predicateWithManyRelations = filter.GetFilterChildren(); //SFSdotNet.Framework.Linq.Utils.CleanPartExpression(predicateString);

                //QueryUtils.BreakeQuery1(predicateString, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
                var _queryable = query.AsQueryable();
                if (!string.IsNullOrEmpty(predicateWithManyRelations))
                    _queryable = _queryable.Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams);
				if (contextRequest.CustomQuery.SpecificProperties.Count > 0)
                {

                    StringBuilder sbProps = new StringBuilder();
                    contextRequest.CustomQuery.SpecificProperties.Add("GuidIncomeExpenseFile");
                    
					foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                    {
						if(sbProps.Length > 0)
							sbProps.Append(",");
                        sbProps.Append(prop);
                    }
					    IQueryable  queryableSelective = null ;
					  
					  if (!string.IsNullOrEmpty(predicateWithManyRelations))
							queryableSelective = con.accIncomeExpensFiles.AsQueryable().Where(predicateWithManyRelations, contextRequest.CustomQuery.ExtraParams).Select(string.Format("new({0})", sbProps.ToString()));
					else
						queryableSelective = con.accIncomeExpensFiles.AsQueryable().Select(string.Format("new({0})", sbProps.ToString()));


                    //if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
					//	queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

                    QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
                    
					if (!string.IsNullOrEmpty(queryOps.OrderByAndSort))
                        queryableSelective = queryableSelective.OrderBy(queryOps.OrderByAndSort);
                    if (queryOps.Skip != null)
                    {
                        queryableSelective = queryableSelective.Skip(queryOps.Skip.Value);
                    }
                    if (queryOps.PageSize != null)
                    {
                        queryableSelective = queryableSelective.Take(queryOps.PageSize.Value);
                    }
                    //var results = queryableSelective.ToList();
                    result = new List<accIncomeExpensFile>();
                    accIncomeExpensFile itemDef = null;
                    foreach (var item in queryableSelective)
                    {
                        itemDef = new accIncomeExpensFile();

                        foreach (var prop in contextRequest.CustomQuery.SpecificProperties)
                        {
                            if (!prop.Contains("."))
                            {
                                itemDef.GetType().GetProperty(prop).SetValue(itemDef, item.GetType().GetProperty(prop).GetValue(item));
                            }
                            else {
                                throw new Exception("La seleccion de relaciones aún no esta soportada");
                            }

                        }

                        result.Add(itemDef);
                    }

                }
                else
                {
				var  queryable = _queryable.Select(                    
				p => 
                        new
                    {
					GuidIncomeExpenseFile = p.GuidIncomeExpenseFile
,CreatedDate = p.CreatedDate
,UpdatedDate = p.UpdatedDate
,CreatedBy = p.CreatedBy
,UpdatedBy = p.UpdatedBy
,IsDeleted = p.IsDeleted
,GuidCompany = p.GuidCompany
,Comments = p.Comments

,accFile = includeaccFile ? p.accFile:null
,accIncomeExpens = includeaccIncomeExpens ? p.accIncomeExpens:null


	
                    }
                    
                    );
					
				
                 if (!string.IsNullOrEmpty(predicateWithFKAndComputed))
                    queryable = queryable.Where(predicateWithFKAndComputed, contextRequest.CustomQuery.ExtraParams);

				QueryComplementOptions queryOps = ContextQueryBuilder.ApplyContextQuery(contextRequest);
            	if (!string.IsNullOrEmpty(queryOps.OrderByAndSort))
					queryable = queryable.OrderBy(queryOps.OrderByAndSort);
               	if (queryOps.Skip != null)
                {
                    queryable = queryable.Skip(queryOps.Skip.Value);
                }
                if (queryOps.PageSize != null)
                {
                    queryable = queryable.Take (queryOps.PageSize.Value);
                }
                result = queryable.AsEnumerable().
                    Select(
                    p =>  new accIncomeExpensFile()
                    {
					GuidIncomeExpenseFile = p.GuidIncomeExpenseFile
,CreatedDate = p.CreatedDate
,UpdatedDate = p.UpdatedDate
,CreatedBy = p.CreatedBy
,UpdatedBy = p.UpdatedBy
,IsDeleted = p.IsDeleted
,GuidCompany = p.GuidCompany
,Comments = p.Comments
,accFile = p.accFile
,accIncomeExpens = p.accIncomeExpens

                    }
                     ).ToList();
				}


			 if (e != null)
                {
                    e.Items = result;
                }
				 contextRequest.CustomQuery = new CustomQuery();
				OnTaken(this, e == null ? e = new BusinessRulesEventArgs<accIncomeExpensFile>() { Items= result, IncludingComputedLinq = true, ContextRequest = contextRequest, FilterExpressionString  = predicateString } :  e);
  
			
  
                if (e != null) {
                    //if (e.ReplaceResult)
                        result = e.Items;
                }
                return result;
            }
        }
		public List<accIncomeExpensFile> GetBy(Expression<Func<accIncomeExpensFile, bool>> predicate, bool loadRelations, ContextRequest contextRequest)
        {
			if(!loadRelations)
				return GetBy(predicate, contextRequest);
			else
				return GetBy(predicate, contextRequest, "");

        }

        public List<accIncomeExpensFile> GetBy(Expression<Func<accIncomeExpensFile, bool>> predicate, int? pageSize, int? page, string orderBy, SFSdotNet.Framework.Data.SortDirection? sortDirection)
        {
            return GetBy(predicate, new ContextRequest() { CustomQuery = new CustomQuery() { Page = page, PageSize = pageSize, OrderBy = orderBy, SortDirection = sortDirection } });
        }
        public List<accIncomeExpensFile> GetBy(Expression<Func<accIncomeExpensFile, bool>> predicate)
        {

			if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: GetBy");
            }
			ContextRequest contextRequest = new ContextRequest();
            contextRequest.CustomQuery = new CustomQuery();

			contextRequest.CurrentContext = SFSdotNet.Framework.My.Context.CurrentContext;
			            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

            contextRequest.CustomQuery.FilterExpressionString = null;
            return this.GetBy(predicate, contextRequest, "");
        }
        #endregion
        #region Dynamic String
		private string GetSpecificFilter(string filter) {
            string result = "";
		    //string linqFilter = String.Empty;
            string freeTextFilter = String.Empty;
            if (filter.Contains("|"))
            {
               // linqFilter = filter.Split(char.Parse("|"))[0];
                freeTextFilter = filter.Split(char.Parse("|"))[1];
            }
            //else {
            //    freeTextFilter = filter;
            //}
            //else {
            //    linqFilter = filter;
            //}
			// linqFilter = SFSdotNet.Framework.Linq.Utils.ReplaceCustomDateFilters(linqFilter);
            //string specificFilter = linqFilter;
            if (!string.IsNullOrEmpty(freeTextFilter))
            {
                System.Text.StringBuilder sbCont = new System.Text.StringBuilder();
                /*if (specificFilter.Length > 0)
                {
                    sbCont.Append(" AND ");
                    sbCont.Append(" ({0})");
                }
                else
                {
                    sbCont.Append("{0}");
                }*/
                //var words = freeTextFilter.Split(char.Parse(" "));
				var word = freeTextFilter;
                System.Text.StringBuilder sbSpec = new System.Text.StringBuilder();
                 int nWords = 1;
				/*foreach (var word in words)
                {
					if (word.Length > 0){
                    if (sbSpec.Length > 0) sbSpec.Append(" AND ");
					if (words.Length > 1) sbSpec.Append("("); */
					
	
					
	
					
	
					
	
					
	
					
	
					
	
					
											
					sbSpec.Append(string.Format(@"Comments.Contains(""{0}"")", word));

					
	
					
	
					
								sbSpec.Append(" OR ");
					
					//if (sbSpec.Length > 2)
					//	sbSpec.Append(" OR "); // test
					sbSpec.Append(string.Format(@"accFile.FileType.Contains(""{0}"")", word)+" OR "+string.Format(@"accIncomeExpens.Comments.Contains(""{0}"")", word));
								 //sbSpec.Append("*extraFreeText*");

                    /*if (words.Length > 1) sbSpec.Append(")");
					
					nWords++;

					}

                }*/
                //specificFilter = string.Format("{0}{1}", specificFilter, string.Format(sbCont.ToString(), sbSpec.ToString()));
                                 result = sbSpec.ToString();  
            }
			//result = specificFilter;
			
			return result;

		}
	
			public List<accIncomeExpensFile> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  params object[] extraParams)
        {
			return GetBy(filter, pageSize, page, orderBy, orderDir,  null, extraParams);
		}
           public List<accIncomeExpensFile> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir, string usemode, params object[] extraParams)
            { 
                return GetBy(filter, pageSize, page, orderBy, orderDir, usemode, null, extraParams);
            }


		public List<accIncomeExpensFile> GetBy(string filter, int? pageSize, int? page, string orderBy, string orderDir,  string usemode, ContextRequest context, params object[] extraParams)

        {

            // string freetext = null;
            //if (filter.Contains("|"))
            //{
            //    int parts = filter.Split(char.Parse("|")).Count();
            //    if (parts > 1)
            //    {

            //        freetext = filter.Split(char.Parse("|"))[1];
            //    }
            //}
		
            //string specificFilter = "";
            //if (!string.IsNullOrEmpty(filter))
            //  specificFilter=  GetSpecificFilter(filter);
            if (string.IsNullOrEmpty(orderBy))
            {
			                orderBy = "UpdatedDate";
            }
			//orderDir = "desc";
			SFSdotNet.Framework.Data.SortDirection direction = SFSdotNet.Framework.Data.SortDirection.Ascending;
            if (!string.IsNullOrEmpty(orderDir))
            {
                if (orderDir == "desc")
                    direction = SFSdotNet.Framework.Data.SortDirection.Descending;
            }
            if (context == null)
                context = new ContextRequest();
			else
                context.CustomQuery = new CustomQuery();
             //context.FreeText = freetext;
             context.UseMode = usemode;
             context.CustomQuery =new SFSdotNet.Framework.My.CustomQuery()
 
                {
                    ExtraParams = extraParams,

                    OrderBy = orderBy,
                    SortDirection = direction,
                    Page = page,
                    PageSize = pageSize
               };
            

            if (!preventSecurityRestrictions) {
			 if (context.CurrentContext == null)
                {
					if (SFSdotNet.Framework.My.Context.CurrentContext != null &&  SFSdotNet.Framework.My.Context.CurrentContext.Company != null && SFSdotNet.Framework.My.Context.CurrentContext.User != null)
					{
						context.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
						context.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

					}
					else {
						throw new Exception("The security rule require a specific user and company");
					}
				}
            }
            return GetBy(filter, context);
  
        }


        public List<accIncomeExpensFile> GetBy(string strWhere, ContextRequest contextRequest)
        {
        	#region old code
				
				 //Expression<Func<tvsReservationTransport, bool>> predicate = null;
				string strWhereClean = strWhere.Replace("*extraFreeText*", "").Replace("()", "");
                //if (!string.IsNullOrEmpty(strWhereClean)){

                //    object[] extraParams = null;
                //    //if (contextRequest != null )
                //    //    if (contextRequest.CustomQuery != null )
                //    //        extraParams = contextRequest.CustomQuery.ExtraParams;
                //    //predicate = System.Linq.Dynamic.DynamicExpression.ParseLambda<tvsReservationTransport, bool>(strWhereClean, extraParams != null? extraParams.Cast<Guid>(): null);				
                //}
				 if (contextRequest == null)
                {
                    contextRequest = new ContextRequest();
                    if (contextRequest.CustomQuery == null)
                        contextRequest.CustomQuery = new CustomQuery();
                }
                  if (!preventSecurityRestrictions) {
					if (contextRequest.User == null || contextRequest.Company == null)
                      {
                     if (SFSdotNet.Framework.My.Context.CurrentContext.Company != null && SFSdotNet.Framework.My.Context.CurrentContext.User != null)
                     {
                         contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                         contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

                     }
                     else {
                         throw new Exception("The security rule require a specific User and Company ");
                     }
					 }
                 }
            contextRequest.CustomQuery.FilterExpressionString = strWhere;
				//return GetBy(predicate, contextRequest);  

			#endregion				
				
                    return GetBy(strWhere, contextRequest, "");  


        }
       public List<accIncomeExpensFile> GetBy(string strWhere)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
			
            return GetBy(strWhere, context, null);
        }

        public List<accIncomeExpensFile> GetBy(string strWhere, string includes)
        {
		 	ContextRequest context = new ContextRequest();
            context.CustomQuery = new CustomQuery();
            context.CustomQuery.FilterExpressionString = strWhere;
            return GetBy(strWhere, context, includes);
        }

        #endregion
        #endregion
		
		  #region SaveOrUpdate
        private accIncomeExpensFile Save(accIncomeExpensFile entity, bool saveChanges, EFPocoContext con)
        {
				ObjectContext context = null;
            return Update(entity, saveChanges,null, out context);

			
        }
		 public  accIncomeExpensFile Create( accIncomeExpensFile entity, params Expression<Func< accIncomeExpensFile, object>>[] paths)
         {
             return Create(entity, null, paths);

         }
 		 public accIncomeExpensFile Create(accIncomeExpensFile entity)
        {
				ObjectContext context = null;
				    if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: Create");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

				return this.Create(entity, true, contextRequest, out context);


        }
        public accIncomeExpensFile Create(accIncomeExpensFile entity, ContextRequest contextRequest)
         {
             ObjectContext context = null;
             return this.Create(entity, true, contextRequest,out context);

         }
         public accIncomeExpensFile Create(accIncomeExpensFile entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext context)
        {
                    return Create(entity, saveChanges , contextRequest , out context, null);
        }
         public accIncomeExpensFile Create(accIncomeExpensFile entity, ContextRequest contextRequest, params Expression<Func<accIncomeExpensFile,object>>[] paths)
        {
            ObjectContext context = null;
            if(paths != null)
				return Create(entity, true,contextRequest, out context, paths);
			else 
				return Create(entity, true,contextRequest, out context);
        }
        public accIncomeExpensFile Create(accIncomeExpensFile entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext context, params Expression<Func<accIncomeExpensFile,object>>[] pocopaths)
        {
			using (EFPocoContext con = new EFPocoContext())
			{
				accIncomeExpensFile itemResult = null;
#region Autos


			entity.CreatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.CreatedBy = contextRequest.User.GuidUser;
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
		if(contextRequest.User != null)
			entity.UpdatedBy = contextRequest.User.GuidUser;
	
			if (contextRequest != null)
				if(contextRequest.User != null)
					if (contextRequest.Company != null)
						entity.GuidCompany = contextRequest.Company.GuidCompany;
	

#endregion
                e = null;
                OnCreating(this,e = new BusinessRulesEventArgs<accIncomeExpensFile>() { ContextRequest = contextRequest, Item=entity, PathExpressions = pocopaths, SaveChanges =saveChanges });
				   if (e != null) {
						if (e.Cancel)
						{
							context = null;
							return e.Item;

						}
					}

                    if (entity.GuidIncomeExpenseFile == Guid.Empty)
                   {
                       entity.GuidIncomeExpenseFile = Guid.NewGuid();

                   }



				accIncomeExpensFileAdapter adapter = con.GetAdapterObject<accIncomeExpensFileAdapter>(entity);;
				List<Expression<Func<accIncomeExpensFileAdapter, object>>> paths = new List<Expression<Func<accIncomeExpensFileAdapter,object>>>();
                
			    if (pocopaths != null && pocopaths.Length > 0)
                {
					// Translate
                    foreach (var pocopath in pocopaths)
                    {
                        var param = Expression.Parameter(typeof(accIncomeExpensFileAdapter), "p");
                        var member = MemberExpression.PropertyOrField(param, ((System.Linq.Expressions.MemberExpression)(((System.Linq.Expressions.LambdaExpression)(pocopath)).Body)).Member.Name);
                        Expression<Func<accIncomeExpensFileAdapter, object>> path  = null;
                        switch(member.Member.Name){
							
							default:
								path = p => member;
							break;
                        }

                        
                       paths.Add(path.Expand());
                    }
                }
                object aux = null;
					paths.Add(p => p.accFile.WithoutUpdate());

					paths.Add(p => p.accIncomeExpens.WithoutUpdate());

					//paths = pathBuilder.ToArray();

				if (adapter.accFile != null ){
					if(adapter.accFile.EntityKey == null) adapter.accFile.EntityKey = con.WrappedContext.CreateEntityKey("accFiles", adapter.accFile);
				}
				if (adapter.accIncomeExpens != null ){
					if(adapter.accIncomeExpens.EntityKey == null) adapter.accIncomeExpens.EntityKey = con.WrappedContext.CreateEntityKey("accIncomeExpenses", adapter.accIncomeExpens);
				}



                //con.WrappedContext.AttachObjectGraph<accIncomeExpensFileAdapter>(adapter, p=>p.accFile, p=>p.accIncomeExpens);
                con.WrappedContext.AttachObjectGraph<accIncomeExpensFileAdapter>(adapter, paths.ToArray());
              	if (saveChanges){
                    con.WrappedContext.SaveChanges(SaveOptions.AcceptAllChangesAfterSave);
					 
				}
                else
                    con.WrappedContext.SaveChanges(SaveOptions.None);
                if (!saveChanges)
                    context = con.WrappedContext;
                else
                    context = null;
				itemResult = adapter.PocoEntity;
                if (e != null)
                {
                    e.Item = itemResult;
                }
                OnCreated(this, e == null ? e = new BusinessRulesEventArgs<accIncomeExpensFile>() { ContextRequest = contextRequest, Item = itemResult, PathExpressions = pocopaths, SaveChanges = saveChanges } : e);



                if (e != null)
                {
                    itemResult = e.Item;
                }
                              return itemResult;
            }
        }
        BusinessRulesEventArgs<accIncomeExpensFile> e = null;
        public void Create(List<accIncomeExpensFile> entities)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            Create(entities, contextRequest, null);
        }
        public void Create(List<accIncomeExpensFile> entities, ContextRequest contextRequest)
        
        {
			ObjectContext context = null;
            	foreach (accIncomeExpensFile entity in entities)
				{
					this.Create(entity, true, contextRequest, out context);
				}
        }
         public accIncomeExpensFile Update(accIncomeExpensFile entity)
        {
            if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return Update(entity, contextRequest);
        }
        public accIncomeExpensFile Update(accIncomeExpensFile entity, ContextRequest requestContext)
        {
			  ObjectContext context = null;
            return Update(entity, true,requestContext, out context);
         }
		public  accIncomeExpensFile Update(accIncomeExpensFile entity, params Expression<Func<accIncomeExpensFile, object>>[] pocopaths)
        {
			  ObjectContext context = null;
              return Update(entity, true, null, out context, pocopaths);
         }
        public accIncomeExpensFile Update(accIncomeExpensFile entity, ContextRequest requestContext, bool saveChanges, out ObjectContext outcontext)
        {
			return Update(entity, saveChanges,requestContext, out outcontext, null);
		}
         public accIncomeExpensFile Update(accIncomeExpensFile entity, bool saveChanges, ContextRequest contextRequest, out ObjectContext outcontext, params Expression<Func<accIncomeExpensFile,object>>[] pocopaths)
        {
		 if ((System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null) && contextRequest == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Update");
            }
            if (contextRequest == null)
            {
                contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            }

			using (EFPocoContext con = new EFPocoContext())
			{
				accIncomeExpensFile  itemResult = null;

	
			entity.UpdatedDate = DateTime.Now.ToUniversalTime();
			if(contextRequest.User != null)
				entity.UpdatedBy = contextRequest.User.GuidUser;

	    var oldentity = GetBy(p => p.GuidIncomeExpenseFile == entity.GuidIncomeExpenseFile, contextRequest).FirstOrDefault();
		if (oldentity != null) {
		
            entity.CreatedDate = oldentity.CreatedDate;
            entity.CreatedBy = oldentity.CreatedBy;
	
            entity.GuidCompany = oldentity.GuidCompany;
	
			

		}

				e = null;
                OnUpdating(this,e = new BusinessRulesEventArgs<accIncomeExpensFile>() { ContextRequest = contextRequest, Item=entity, PathExpressions = pocopaths, SaveChanges =saveChanges });
				   if (e != null) {
						if (e.Cancel)
						{
							outcontext = null;
							return e.Item;

						}
					}

                accIncomeExpensFileAdapter adapter = con.GetAdapterObject<accIncomeExpensFileAdapter>(entity);
                adapter.EntityKey = con.WrappedContext.CreateEntityKey("accIncomeExpensFiles", adapter);
				    var es = con.accIncomeExpensFiles;
				List<Expression<Func<accIncomeExpensFileAdapter, object>>> paths = new List<Expression<Func<accIncomeExpensFileAdapter,object>>>();
                /* if (pocopaths != null)
                    if (pocopaths.Length == 0)
                        pocopaths = null;*/

			    if (pocopaths != null && pocopaths.Length > 0)
                {
					// Translate
                    foreach (var pocopath in pocopaths)
                    {
                        var param = Expression.Parameter(typeof(accIncomeExpensFileAdapter), "p");
                        var member = MemberExpression.PropertyOrField(param, ((System.Linq.Expressions.MemberExpression)(((System.Linq.Expressions.LambdaExpression)(pocopath)).Body)).Member.Name);
                        Expression<Func<accIncomeExpensFileAdapter, object>> path  = null;
                        switch(member.Member.Name){
							
							default:
								path = p => member;
							break;
                        }

                        paths.Add(path.Expand());
 					}
                }
                else {
                  paths = new List<Expression<Func<accIncomeExpensFileAdapter, object>>>();

					//List<Expression<Func<accIncomeExpensFileAdapter,object>>> pathBuilder = new List<Expression<Func<accIncomeExpensFileAdapter,object>>>();
					paths.Add(p => p.accFile.WithoutUpdate());

					paths.Add(p => p.accIncomeExpens.WithoutUpdate());

		
					//paths = pathBuilder.ToArray();		
			}
			object aux = null;
				if (adapter.accFile != null ){
					if(adapter.accFile.EntityKey == null) adapter.accFile.EntityKey = con.WrappedContext.CreateEntityKey("accFiles", adapter.accFile);
				}

                
				if (adapter.accIncomeExpens != null ){
					if(adapter.accIncomeExpens.EntityKey == null) adapter.accIncomeExpens.EntityKey = con.WrappedContext.CreateEntityKey("accIncomeExpenses", adapter.accIncomeExpens);
				}

                



                //con.AttachObjectGraph<accIncomeExpensFile>(adapter, p=>p.accFile, p=>p.accIncomeExpens);
                con.WrappedContext.AttachObjectGraph<accIncomeExpensFileAdapter>(adapter, paths.ToArray());
				if (saveChanges){
                	con.WrappedContext.SaveChanges();
					 
					}
                if(!saveChanges)
					outcontext = con.WrappedContext;
				else
					outcontext = null;
				itemResult = adapter.PocoEntity;
				OnUpdated(this, e = new BusinessRulesEventArgs<accIncomeExpensFile>() { ContextRequest = contextRequest, Item=itemResult, PathExpressions = pocopaths, SaveChanges =saveChanges });

              	return itemResult;

			  }
        }
        public accIncomeExpensFile Save(accIncomeExpensFile entity)
        {
			return Save(entity, true, null);
        }
        public int Save(List<accIncomeExpensFile> entities)
        {
			using (EFPocoContext con = new EFPocoContext())
			{
			
            int n = 0;
            foreach (accIncomeExpensFile item in entities)
            {
                try
                {
                    this.Save(item, false, con);
                    n++;
                }catch (Exception ex){
                    SFSdotNet.Framework.My.EventLog.Exception(ex);
                }
            }
            con.SaveChanges();
            return n;
            }
        }
        #endregion
        #region Delete
        public void Delete(accIncomeExpensFile entity)
        {
				this.Delete(entity, null);
			
        }
		 public void Delete(accIncomeExpensFile entity, ContextRequest contextRequest)
        {
				ObjectContext context = null;
				this.Delete(entity, true, out context, contextRequest);
			
        }

        
        public void Delete(accIncomeExpensFile entity, bool saveChanges, out  ObjectContext context, ContextRequest contextRequest, BusinessRulesEventArgs<accIncomeExpensFile> e = null)
        {
			using (EFPocoContext _con = new EFPocoContext())
			{
				int result = 0;
				
               	BusinessRulesEventArgs<accIncomeExpensFile> _e = null;
               List<accIncomeExpensFile> _items = new List<accIncomeExpensFile>();
                _items.Add(entity);
                if (e == null || e.PreventPartialPropagate == false)
                {
                    OnDeleting(this, _e = (e == null ? new BusinessRulesEventArgs<accIncomeExpensFile>() { ContextRequest = contextRequest, Item = entity, Items = _items, SaveChanges = saveChanges } : e));
                }
                if (_e != null)
                {
                    if (_e.Cancel)
						{
							context = null;
							return;

						}
					}


				accIncomeExpensFileAdapter adapter = _con.GetAdapterObject<accIncomeExpensFileAdapter>(entity);
                adapter.EntityKey = _con.WrappedContext.CreateEntityKey("accIncomeExpensFiles", adapter);
                
	            //adapter = _con.WrappedContext.AttachObjectGraph<accIncomeExpensFileAdapter>(adapter);
				try{
					_con.WrappedContext.AttachTo("accIncomeExpensFiles", adapter);
                }catch{
					
				}
									//IsDeleted
					bool logicDelete = true;
					if (adapter.IsDeleted != null)
					{
						if (adapter.IsDeleted.Value)
							logicDelete = false;
					}
					if (logicDelete)
					{
											entity = GetBy(p => p.GuidIncomeExpenseFile == entity.GuidIncomeExpenseFile, contextRequest).FirstOrDefault();
						entity.IsDeleted = true;
						Update(entity, contextRequest);
					}
					else {
						_con.WrappedContext.DeleteObject(adapter);
					}
								
				if (!saveChanges)
                    context = _con.WrappedContext;
                else
                    context = null;
				 SaveOptions saveOption = SaveOptions.None;
                if (saveChanges)
                    saveOption = SaveOptions.AcceptAllChangesAfterSave;

				result = _con.WrappedContext.SaveChanges(saveOption);
				if (saveChanges){
					
					}
			if (e == null || e.PreventPartialPropagate == false)
                {

                    if (_e == null)
                        _e = new BusinessRulesEventArgs<accIncomeExpensFile>() { ContextRequest = contextRequest, Item = entity, Items = _items };

                    OnDeleted(this, _e);
                }

				//return null;
			}            
        }
        public void Delete(List<accIncomeExpensFile> entities,  ContextRequest contextRequest = null )
        {
				ObjectContext context = null;
			 BusinessRulesEventArgs<accIncomeExpensFile> _e = null;

                OnDeleting(this, _e = new BusinessRulesEventArgs<accIncomeExpensFile>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities });
                if (_e != null)
                {
                    if (_e.Cancel)
                    {
                        context = null;
                        return;

                    }
                }
                bool allSucced = true;
                BusinessRulesEventArgs<accIncomeExpensFile> eToChilds = new BusinessRulesEventArgs<accIncomeExpensFile>();
                if (_e != null)
                {
                    eToChilds = _e;
                }
                else
                {
                    eToChilds = new BusinessRulesEventArgs<accIncomeExpensFile>() { ContextRequest = contextRequest, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                }
				foreach (accIncomeExpensFile item in entities)
				{
					try
                    {
                        this.Delete(item, true, out context, contextRequest, e: eToChilds);
                    }
                    catch (Exception ex)
                    {
                        SFSdotNet.Framework.My.EventLog.Error(ex);
                        allSucced = false;
                    }
				}
				if (_e == null)
                    _e = new BusinessRulesEventArgs<accIncomeExpensFile>() { ContextRequest = contextRequest, CountResult = entities.Count, Item = (entities.Count == 1 ? entities[0] : null), Items = entities };
                OnDeleted(this, _e);

			
        }
        #endregion
 
        #region GetCount
		 public int GetCount(Expression<Func<accIncomeExpensFile, bool>> predicate)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;

			return GetCount(predicate, contextRequest);
		}
        public int GetCount(Expression<Func<accIncomeExpensFile, bool>> predicate, ContextRequest contextRequest)
        {


		
			using (EFPocoContext con = new EFPocoContext())
			{


				if (predicate == null) predicate = PredicateBuilder.True<accIncomeExpensFile>();
           		predicate = predicate.And(p => p.IsDeleted != true || p.IsDeleted == null);
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    		if (contextRequest.User !=null )
                        		if (contextRequest.Company != null )
                        			predicate = predicate.And(p => p.GuidCompany == contextRequest.Company.GuidCompany); //todo: multiempresa
						}
						if (preventSecurityRestrictions) preventSecurityRestrictions= false;
				
				return con.accIncomeExpensFiles.Count(predicate);
			}

        }
		  public int GetCount(string predicate,  ContextRequest contextRequest)
         {
             return GetCount(predicate, null, contextRequest);
         }

         public int GetCount(string predicate)
        {
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return GetCount(predicate, contextRequest);
        }
		 public int GetCount(string predicate, string usemode){
				if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session  == null){
                    throw new Exception("Please, specific the contextRequest parameter in the method: GetCount");
                }

                ContextRequest contextRequest = new ContextRequest();
                contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
                contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
				return GetCount( predicate,  usemode,  contextRequest);
		 }
        public int GetCount(string predicate, string usemode, ContextRequest contextRequest){
			  string freetext = null;
            Filter filter = new Filter();

              if (predicate.Contains("|"))
              {
                 
                  filter.SetFilterPart("ft", GetSpecificFilter(predicate));
                 
                  filter.ProcessText(predicate.Split(char.Parse("|"))[0]);
                  freetext = predicate.Split(char.Parse("|"))[1];
              }
              else {
                  filter.ProcessText(predicate);
              }
           
			e = null;
			contextRequest.FreeText = freetext;
			contextRequest.UseMode = usemode;
            OnCounting(this, e = new BusinessRulesEventArgs<accIncomeExpensFile>() {  Filter =filter, ContextRequest = contextRequest });
            if (e != null)
            {
                if (e.Cancel)
                {
                    context = null;
                    return e.CountResult;

                }

            

            }
			 predicate = filter.GetFilterComplete();
			StringBuilder sbQuerySystem = new StringBuilder();
		
					
                    filter.SetFilterPart("de","(IsDeleted != true OR IsDeleted == null)");
			
					if (!preventSecurityRestrictions)
						{
						if (contextRequest != null )
                    	if (contextRequest.User !=null )
                        	if (contextRequest.Company != null ){
                        		

								filter.SetFilterPart("co", @"(GuidCompany = Guid(""" + contextRequest.Company.GuidCompany + @""")) "); //todo: multiempresa
						
						
							}
							
							}
							if (preventSecurityRestrictions) preventSecurityRestrictions= false;
			using (EFContext con = new EFContext())
			{
				   
                 filter.CleanAndProcess("");
				//string predicateWithFKAndComputed = SFSdotNet.Framework.Linq.Utils.ExtractSpecificProperties("", ref predicate );               
				string predicateWithFKAndComputed = filter.GetFilterParentAndCoumputed();
               string predicateWithManyRelations = filter.GetFilterChildren();
			   ///QueryUtils.BreakeQuery1(predicate, ref predicateWithManyRelations, ref predicateWithFKAndComputed);
			   predicate = filter.GetFilterComplete();
               if (!string.IsNullOrEmpty(predicate))
               {
				
					
                    return con.accIncomeExpensFiles.Count(System.Linq.Dynamic.DynamicExpression.ParseLambda<accIncomeExpensFile, bool>(predicate));
					
                }else
                    return con.accIncomeExpensFiles.Count();

			}

		}
         public int GetCount()
        {
            return GetCount(p => true);
        }
        #endregion
        
         public accIncomeExpensFile Update(accIncomeExpensFile entity, string paths)
        {
            return Update(entity, paths.Split(char.Parse(",")));
            
        }

        public accIncomeExpensFile Update(accIncomeExpensFile entity, string[] paths)
        {
            // Translate
            List<Expression<Func<accIncomeExpensFile, object>>> pathList = new List<Expression<Func<accIncomeExpensFile, object>>>();
            for (int i = 0; i <= paths.Length -1; i++)
            {
                var param = Expression.Parameter(typeof(accIncomeExpensFile), "p");
                var member = MemberExpression.PropertyOrField(param, paths[i]);

                Expression<Func<accIncomeExpensFile, object>> path = p => member;
                pathList.Add(path.Expand());
            }
			ObjectContext context = null;
			 return Update(entity, true,null, out context,  pathList.ToArray());
           //return Update(entity, pathList.ToArray());
        }

        public void Update(List<accIncomeExpensFile> entities, string paths)
        {
            foreach (var entity in entities )
            {
                Update(entity, paths);
            }
        }
		public accIncomeExpensFile Create(accIncomeExpensFile entity, ContextRequest contextRequest, string paths)
        {
          

            if (string.IsNullOrEmpty(paths))
                return Create(entity, contextRequest);

            return Create(entity, contextRequest, paths.Split(char.Parse(",")));
        }
        public accIncomeExpensFile Create(accIncomeExpensFile entity, string paths)
        {
			 if (System.Web.HttpContext.Current == null || System.Web.HttpContext.Current.Session == null)
            {
                throw new Exception("Please, specific the contextRequest parameter in the method: Create");
            }

            ContextRequest contextRequest = new ContextRequest();
            contextRequest.User = SFSdotNet.Framework.My.Context.CurrentContext.User;
            contextRequest.Company = SFSdotNet.Framework.My.Context.CurrentContext.Company;
            return Create(entity, contextRequest, paths);

        }

        public  void Create(List<accIncomeExpensFile> entities, ContextRequest requestContext, string paths)
        {
            foreach (var entity in entities)
            {
                Create(entity,requestContext, paths);
            }
        }

        public void Create(List<accIncomeExpensFile> entities, string[] paths)
        {
            foreach (var entity in entities)
            {
                Create(entity, null, paths);
            }
        }
        
        public accIncomeExpensFile  Create(accIncomeExpensFile entity, ContextRequest contextRequest, string[] paths)
        {
            List<Expression<Func<accIncomeExpensFile, object>>> pathList = new List<Expression<Func<accIncomeExpensFile, object>>>();
            for (int i = 0; i < paths.Length - 1; i++)
            {
                var param = Expression.Parameter(typeof(accIncomeExpensFile), "p");
                var member = MemberExpression.PropertyOrField(param, paths[i]);

                Expression<Func<accIncomeExpensFile, object>> path = p => member;
                pathList.Add(path.Expand());
            }
            return Create(entity, contextRequest, pathList.ToArray());
        }
        public void Delete(List<accIncomeExpensFile.CompositeKey> entityKeys)
        {

            List<accIncomeExpensFile> items = new List<accIncomeExpensFile>();
            foreach (var itemKey in entityKeys)
            {
                items.Add(GetByKey(itemKey.GuidIncomeExpenseFile));
            }

            Delete(items);

        }
		
		
	}
	 
}


